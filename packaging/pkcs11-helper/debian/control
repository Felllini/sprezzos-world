Source: pkcs11-helper
Priority: optional
Maintainer: Nick Black <nick.black@sprezzatech.com>
XSBC-Original-Maintainer: Eric Dorland <eric@debian.org>
Build-Depends: debhelper (>= 9.0.0~),
	autotools-dev,
	dh-autoreconf,
	libssl-dev,
	pkg-config,
	doxygen
Standards-Version: 3.9.4
Section: libs

Package: libpkcs11-helper1-dev
Section: libdevel
Architecture: any
Provides: libpkcs11-helper-dev
Conflicts: libpkcs11-helper-dev
Depends: libpkcs11-helper1 (= ${binary:Version}), libssl-dev, ${misc:Depends}
Description:  library that simplifies the interaction with PKCS#11
 libpkcs11-helper is a library that simplifies the interaction with PKCS#11
 providers for end-user applications.
 .
 libpkcs11-helper allows using multiple PKCS#11 providers at the same time,
 enumerating available token certificates, or selecting a certificate
 directly by serialized id, handling card removal and card insert
 events, handling card re-insert to a different slot, supporting session
 expiration and much more all using a simple API.
 .
 libpkcs11-helper is not designed to manage card content, since object
 attributes are usually vendor specific, and 99% of application need to
 access existing objects in order to perform signature and decryption.

Package: libpkcs11-helper1
Section: libs
Architecture: any
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description:  library that simplifies the interaction with PKCS#11
 libpkcs11-helper is a library that simplifies the interaction with PKCS#11
 providers for end-user applications.
 .
 libpkcs11-helper allows using multiple PKCS#11 providers at the same time,
 enumerating available token certificates, or selecting a certificate
 directly by serialized id, handling card removal and card insert
 events, handling card re-insert to a different slot, supporting session
 expiration and much more all using a simple API.
 .
 libpkcs11-helper is not designed to manage card content, since object
 attributes are usually vendor specific, and 99% of application need to
 access existing objects in order to perform signature and decryption.
