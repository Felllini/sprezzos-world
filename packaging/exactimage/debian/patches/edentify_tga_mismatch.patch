Description: Fix misidentification of PNM as TGA
 TARGA files have nearly no magic values that can be used to distinguish them
 from other files. Therefore, it is important to test the other file codec
 handlers before testing for TARGA.
Bug-Debian: http://bugs.debian.org/575324
Author: Sven Eckelmann <sven@narfation.org>

---
diff --git a/codecs/Codecs.cc b/codecs/Codecs.cc
index 803e3e2e8f92ee8118a2512529c718e848241984..054548ff61db2f7dc82d24a32f40d8f512cb2dfb 100644
--- a/codecs/Codecs.cc
+++ b/codecs/Codecs.cc
@@ -22,7 +22,7 @@
 #include <iostream>
 #include <fstream>
 
-std::vector<ImageCodec::loader_ref>* ImageCodec::loader = 0;
+std::list<ImageCodec::loader_ref>* ImageCodec::loader = 0;
 
 ImageCodec::ImageCodec ()
   : _image (0)
@@ -78,7 +78,7 @@ int ImageCodec::Read (std::istream* stream, Image& image,
 {
   std::transform (codec.begin(), codec.end(), codec.begin(), tolower);
   
-  std::vector<loader_ref>::iterator it;
+  std::list<loader_ref>::iterator it;
   if (loader)
   for (it = loader->begin(); it != loader->end(); ++it)
     {
@@ -116,7 +116,7 @@ bool ImageCodec::Write (std::ostream* stream, Image& image,
   std::transform (codec.begin(), codec.end(), codec.begin(), tolower);
   std::transform (ext.begin(), ext.end(), ext.begin(), tolower);
   
-  std::vector<loader_ref>::iterator it;
+  std::list<loader_ref>::iterator it;
   if (loader)
   for (it = loader->begin(); it != loader->end(); ++it)
     {
@@ -150,7 +150,7 @@ ImageCodec* ImageCodec::MultiWrite (std::ostream* stream,
   std::transform (codec.begin(), codec.end(), codec.begin(), tolower);
   std::transform (ext.begin(), ext.end(), ext.begin(), tolower);
   
-  std::vector<loader_ref>::iterator it;
+  std::list<loader_ref>::iterator it;
   if (loader)
   for (it = loader->begin(); it != loader->end(); ++it)
     {
@@ -222,14 +222,17 @@ bool ImageCodec::Write (std::string file, Image& image,
 }
 
 void ImageCodec::registerCodec (const char* _ext, ImageCodec* _loader,
-				bool _via_codec_only)
+				bool _via_codec_only, bool push_back)
 {
   static ImageCodec* last_loader = 0;
   if (!loader)
-    loader = new std::vector<loader_ref>;
+    loader = new std::list<loader_ref>;
   
   loader_ref ref = {_ext, _loader, _loader != last_loader, _via_codec_only};
-  loader->push_back(ref);
+  if (push_back)
+    loader->push_back(ref);
+  else
+    loader->push_front(ref);
   last_loader = _loader;
 }
 
@@ -241,7 +244,7 @@ void ImageCodec::unregisterCodec (ImageCodec* _loader)
   }
   
   // remove from array
-  std::vector<loader_ref>::iterator it;
+  std::list<loader_ref>::iterator it;
   for (it = loader->begin(); it != loader->end();)
     if (it->loader == _loader)
       it = loader->erase (it);
diff --git a/codecs/Codecs.hh b/codecs/Codecs.hh
index e30a6b681cf6acc58173d41be023ea72852cb3d6..08790a14be44e9dde8721c1057a96d0b43a85e9d 100644
--- a/codecs/Codecs.hh
+++ b/codecs/Codecs.hh
@@ -18,7 +18,7 @@
 /* The Image decoder and coder collection.
  *
  * The class itself has static methods to perform the de- and
- * encoding. These methods search thru a loader vector to match the
+ * encoding. These methods search thru a loader list to match the
  * file magick (on decoding) or the specified codec / file extension
  * on encoding.
  *
@@ -36,7 +36,7 @@
 
 #include <stdio.h>
 
-#include <vector>
+#include <list>
 #include <algorithm>
 #include <iosfwd>
 
@@ -111,11 +111,12 @@ protected:
     bool via_codec_only;
   };
   
-  static std::vector<loader_ref>* loader;
+  static std::list<loader_ref>* loader;
   
   static void registerCodec (const char* _ext,
 			     ImageCodec* _loader,
-			     bool _via_codec_only = false);
+			     bool _via_codec_only = false,
+			     bool push_back = false);
   static void unregisterCodec (ImageCodec* _loader);
   
   // freestanding instance, attached to an image
diff --git a/codecs/tga.hh b/codecs/tga.hh
index 9652176cd176de7ab2a3763d2d83a1e2c03e3235..2d5eb7d97e967718ba11923e2cc7a33d5d7c1dfc 100644
--- a/codecs/tga.hh
+++ b/codecs/tga.hh
@@ -21,11 +21,11 @@ class TGACodec : public ImageCodec {
 public:
   
   TGACodec () {
-    registerCodec ("tga", this);
-    registerCodec ("tpic", this);
-    registerCodec ("vda", this);
-    registerCodec ("icb", this);
-    registerCodec ("vst", this);
+    registerCodec ("tga", this, false, true);
+    registerCodec ("tpic", this, false, true);
+    registerCodec ("vda", this, false, true);
+    registerCodec ("icb", this, false, true);
+    registerCodec ("vst", this, false, true);
   };
   
   virtual std::string getID () { return "TARGA"; };
