diff -ruN console-tools-0.2.3-old/kbdtools/dumpkeys.c console-tools-0.2.3/kbdtools/dumpkeys.c
--- console-tools-0.2.3-old/kbdtools/dumpkeys.c	2004-06-26 11:53:20.000000000 +0100
+++ console-tools-0.2.3/kbdtools/dumpkeys.c	2004-06-26 11:55:26.000000000 +0100
@@ -50,6 +50,26 @@
 int keymap_index[MAX_NR_KEYMAPS];		/* inverse of good_keymap */
 int good_keymap[MAX_NR_KEYMAPS], keymapnr, allocct;
 
+static int nr_keys = NR_KEYS;
+
+/* unfortunately, NR_KEYS, the number of keys supported by a kernel,
+ * is not static; it is
+ * 128 on 2.4.*
+ * 512 on 2.6.0 BUT erroneously since only 256 are addressable via kbentry
+ * 256 on 2.6.1
+ *   So we add the following to get it. Call early in main().
+ */
+int get_nrkeys(void) 
+{
+	struct kbentry ke;
+
+	ke.kb_table = 0;
+	ke.kb_index = 128;
+	if (ioctl(fd, KDGKBENT, (unsigned long) &ke))
+		return 128;
+	return 256;
+}
+	
 void get_keymaps(void) {
 	int i, j;
 	struct kbentry ke;
@@ -113,6 +133,10 @@
 		perror("");
 		exit (EX_OSERR);
 	}
+	/* FIXME: Why is the kernel returning K_ALLOCATED here in 2.6.0?
+	 */
+	if (ke.kb_value == K_ALLOCATED)  /* don't confuse loadkeys() */
+		return K_HOLE;
 	return ke.kb_value;
 }
 
@@ -121,6 +145,8 @@
 	int v;
 	char *p;
 
+	if (code == K_ALLOCATED)
+		code = K_HOLE;
 	printf(" ");
 	t = KTYP(code);
 	v = KVAL(code);
@@ -234,7 +260,7 @@
 	int i;
 
 	printf(_("keycode range supported by kernel:           1 - %d\n"),
-	       NR_KEYS - 1);
+	       nr_keys - 1);
 	printf(_("max number of actions bindable to a key:         %d\n"),
 	       MAX_NR_KEYMAPS);
 	get_keymaps();
@@ -344,7 +370,7 @@
 	for (j = 0; j < MAX_NR_KEYMAPS; j++) {
 	     int ja = (j | M_ALT);
 	     if (j != ja && keymap_index[j] >= 0 && keymap_index[ja] >= 0)
-		  for (i = 1; i < NR_KEYS; i++) {
+		  for (i = 1; i < nr_keys; i++) {
 		       int buf0, buf1, type;
 
 		       buf0 = get_bind(i, j);
@@ -370,7 +396,7 @@
 not_alt_is_meta:
 
 no_shorthands:
-	for (i = 1; i < NR_KEYS; i++) {
+	for (i = 1; i < nr_keys; i++) {
 	    for (j = 0; j < keymapnr; j++)
 	      buf[j] = get_bind(i, good_keymap[j]);
 
@@ -633,7 +659,9 @@
   
   if (-1 == (fd = get_console_fd(NULL)))
     exit (EX_OSERR);
-  
+
+  nr_keys = get_nrkeys();
+
   if (short_info || long_info) 
     {
       show_short_info();
diff -ruN console-tools-0.2.3-old/kbdtools/getkeycodes.c console-tools-0.2.3/kbdtools/getkeycodes.c
--- console-tools-0.2.3-old/kbdtools/getkeycodes.c	2004-06-26 11:53:20.000000000 +0100
+++ console-tools-0.2.3/kbdtools/getkeycodes.c	2004-06-26 11:53:20.000000000 +0100
@@ -27,8 +27,9 @@
 
 int main(int argc, char **argv) 
 {
-  int fd, sc;
+  int fd, sc, sc0;
   struct kbkeycode a;
+  int old_kernel = 0;
 
   setuplocale();
   
@@ -36,12 +37,33 @@
   
   if (-1 == (fd = get_console_fd(NULL)))
       exit (1);
+ 
+
+  /* Old kernels don't support changing scancodes below SC_LIM. */
+  a.scancode = 0;
+  a.keycode = 0;
+  if (ioctl(fd, KDGETKEYCODE, &a)) {
+		old_kernel = 1;
+		sc0 = 89;
+  } else {
+		  for (sc0 = 1; sc0 <= 88 ; sc0++) {
+				a.scancode = sc0;
+				a.keycode = 0;
+			    if (ioctl(fd, KDGETKEYCODE, &a) || a.keycode != sc0)
+						break;
+		 }
+  }
   
   printf(_("Plain scancodes xx (hex) versus keycodes (dec)\n"));
-  printf(_("0 is an error; for 1-88 (0x01-0x58) scancode equals keycode\n"));
-  
-  for(sc=88; sc<256; sc++) 
-    {
+ 
+  if (sc0 == 89) {
+	printf (_("0 is an error; for 1-88 (0x01-0x58) scancode equals keycode\n"));
+  } else {
+	printf(_("for 1-%d (0x01-0x%02x) scancode equals keycode\n"),
+			sc0 - 1, sc0 - 1);
+  }
+
+  for (sc = (sc0 & ~7); sc < 256; sc++) {
       if (sc == 128)
 	  printf(_("\n\nEscaped scancodes e0 xx (hex)\n"));
       if (sc % 8 == 0) 
@@ -52,7 +74,7 @@
 	      printf("\ne0 %02x: ", sc-128);
 	}
       
-      if (sc <= 88) 
+      if (sc <= sc0) 
 	{
 	  printf(" %3d", sc);
 	  continue;
@@ -60,21 +82,19 @@
 
       a.scancode = sc;
       a.keycode = 0;
-      if (ioctl(fd,KDGETKEYCODE,&a)) 
-	{
-	  if (errno == EINVAL)
+	  if (ioctl (fd, KDGETKEYCODE, &a) == 0) {
+		  printf(" %3d", a.keycode);
+		  continue;
+	  }
+	  if (errno == EINVAL) {
 	      printf("   -");
-	  else 
-	    {
-	      perror("KDGETKEYCODE");
-	      fprintf(stderr, _("failed to get keycode for scancode 0x%x\n"),
-		      sc);
-	      exit(1);
+		  continue;
+	  }
+	  perror("KDGETKEYCODE");
+	  fprintf(stderr, _("failed to get keycode for scancode 0x%x\n"),
+	       sc);
+	     exit(1);
 	    }
-	} 
-      else
-	  printf(" %3d", a.keycode);
-    }
   printf("\n");
   
   exit (EX_OK);
diff -ruN console-tools-0.2.3-old/kbdtools/loadkeys.y console-tools-0.2.3/kbdtools/loadkeys.y
--- console-tools-0.2.3-old/kbdtools/loadkeys.y	2004-06-26 11:53:20.000000000 +0100
+++ console-tools-0.2.3/kbdtools/loadkeys.y	2004-06-26 11:56:12.000000000 +0100
@@ -114,7 +114,7 @@
 struct kbdiacr accent_table[MAX_DIACR];
 unsigned int accent_table_size = 0;
 
-char key_is_constant[NR_KEYS];
+char key_is_constant[512]; // 512 == Max. value of NR_KEYS across kernels  <= 2.6.1
 char *keymap_was_set[MAX_NR_KEYMAPS];
 char func_buf[4096];		/* should be allocated dynamically */
 char *fp = func_buf;
@@ -322,6 +322,27 @@
 int quiet = 0;
 int nocompose = 0;
 
+
+int nr_keys = NR_KEYS;
+/* unfortunately, NR_KEYS, the number of keys supported by a kernel,
+ * is not static; it is
+ * 128 on 2.4.*
+ * 512 on 2.6.0 BUT erroneously since only 256 are addressable via kbentry
+ * 256 on 2.6.1
+ *   So we add the following to get it. Call early in main().
+ */
+static int get_nrkeys(int fd)
+{
+	struct kbentry ke;
+
+	ke.kb_table = 0;
+	ke.kb_index = 128;
+	if (ioctl(fd, KDGKBENT, (unsigned long) &ke))
+		return 128;
+	return 256;
+}
+
+
 int main(int argc, char *argv[])
 {
   const char *short_opts = "cdhmsquvV";
@@ -357,6 +378,7 @@
 	  break;
 	case 'm':
 	  optm = 1;
+	  quiet = 1;
 	  break;
 	case 's':
 	  opts = 1;
@@ -541,7 +563,7 @@
 {
   /* roughly: addkey(index, table, K_HOLE); */
 
-  if (index < 0 || index >= NR_KEYS)
+  if (index < 0 || index >= nr_keys)
     lkfatal0(_("killkey called with bad index %d"), index);
   if (table < 0 || table >= MAX_NR_KEYMAPS)
     lkfatal0(_("killkey called with bad table %d"), table);
@@ -557,7 +579,7 @@
 
   if (keycode == -1)
     return;
-  if (index < 0 || index >= NR_KEYS)
+  if (index < 0 || index >= nr_keys)
     lkfatal0(_("addkey called with bad index %d"), index);
   if (table < 0 || table >= MAX_NR_KEYMAPS)
     lkfatal0(_("addkey called with bad table %d"), table);
@@ -566,14 +588,14 @@
     addmap(table, 0);
   if (!key_map[table])
     {
-      key_map[table] = (u_short *)xmalloc(NR_KEYS * sizeof(u_short));
-      for (i = 0; i < NR_KEYS; i++)
+      key_map[table] = (u_short *)xmalloc(nr_keys * sizeof(u_short));
+      for (i = 0; i < nr_keys; i++)
 	(key_map[table])[i] = K_HOLE;
     }
   if (!keymap_was_set[table])
     {
-      keymap_was_set[table] = (char *) xmalloc(NR_KEYS);
-      for (i = 0; i < NR_KEYS; i++)
+      keymap_was_set[table] = (char *) xmalloc(nr_keys);
+      for (i = 0; i < nr_keys; i++)
 	(keymap_was_set[table])[i] = 0;
     }
 
@@ -697,7 +719,7 @@
     {
       if (key_map[i])
 	{
-	  for(j=0; j<NR_KEYS; j++)
+	  for(j=0; j<nr_keys; j++)
 	    {
 	      if ((keymap_was_set[i])[j])
 		{
@@ -711,7 +733,7 @@
 		      if (errno == EPERM)
 			{
 			  fprintf(stderr, _("Keymap %d: Permission denied\n"), i);
-			  j = NR_KEYS;
+			  j = nr_keys;
 			  continue;
 			}
 		      perror("KDSKBENT");
@@ -749,7 +771,7 @@
 		}
 	      /* probably an old kernel */
 	      /* clear keymap by hand */
-	      for (j = 0; j < NR_KEYS; j++)
+	      for (j = 0; j < nr_keys; j++)
 		{
 		  ke.kb_index = j;
 		  ke.kb_table = i;
@@ -776,7 +798,8 @@
 	  fprintf(stderr, _("%s: failed to restore keyboard mode\n"),
 		  progname);
 	}
-      fprintf(stderr, _("%s: warning: this map uses Unicode symbols\n"
+      if (!quiet)
+              fprintf(stderr, _("%s: warning: this map uses Unicode symbols\n"
 	      "    (perhaps you want to do `kbd_mode -u'?)\n"),
 	      progname);
     }
@@ -913,7 +936,7 @@
     while (r0 < max_keymap && !defining[r0])
       r0++;
 
-  for (i=0; i<NR_KEYS; i++)
+  for (i=0; i<nr_keys; i++)
     {
       if (key_is_constant[i])
 	{
@@ -933,7 +956,8 @@
 
   if (-1 == (fd = get_console_fd(NULL)))
     exit (1);
-		
+	
+  nr_keys = get_nrkeys(fd);
   keyct = defkeys(fd);
   funcct = deffuncs(fd);
   if (accent_table_size > 0 || nocompose)
@@ -1095,8 +1119,8 @@
 	keymap_count++;
 	if (i)
 	  printf("static ");
-	printf("u_short %s_map[NR_KEYS] = {", mk_mapname(i));
-	for (j = 0; j < NR_KEYS; j++)
+	printf("u_short %s_map[] = {", mk_mapname(i));
+	for (j = 0; j < nr_keys; j++)
 	  {
 	    if (!(j % 8))
 	      printf("\n");
Files console-tools-0.2.3-old/kbdtools/.loadkeys.y.rej.swp and console-tools-0.2.3/kbdtools/.loadkeys.y.rej.swp differ
diff -ruN console-tools-0.2.3-old/kbdtools/setkeycodes.c console-tools-0.2.3/kbdtools/setkeycodes.c
--- console-tools-0.2.3-old/kbdtools/setkeycodes.c	2004-06-26 11:53:20.000000000 +0100
+++ console-tools-0.2.3/kbdtools/setkeycodes.c	2004-06-26 11:53:20.000000000 +0100
@@ -32,7 +32,7 @@
 int main(int argc, char **argv) 
 {
   char *ep;
-  int fd, sc;
+  int fd;
   struct kbkeycode a;
   const struct option long_opts[] = {
     { "help"     , no_argument, NULL, 'h' },
@@ -65,22 +65,22 @@
 
   while ( (argc - optind)  >= 2) 
     {
-      a.scancode = sc = strtol(argv[optind++], &ep, 16);
+      a.scancode = strtol(argv[optind++], &ep, 16);
       a.keycode = atoi(argv[optind++]);
 
       if (*ep)
 	  badusage(_("error reading scancode"));
-      if (a.scancode > 127) 
+      if (a.scancode >= 0xe000) 
 	{
 	  a.scancode -= 0xe000;
-	  a.scancode += 128;
+	  a.scancode += 128; /* some kernels needed +256 */
 	}
 
       if (ioctl(fd,KDSETKEYCODE,&a)) 
 	{
 	  perror("KDSETKEYCODE");
 	  fprintf(stderr, _("failed to set scancode %x to keycode %d\n"),
-		  sc, a.keycode);
+		  a.scancode, a.keycode);
 	  exit(1);
 	}
     }
diff -ruN console-tools-0.2.3-old/kbdtools/showkey.c console-tools-0.2.3/kbdtools/showkey.c
--- console-tools-0.2.3-old/kbdtools/showkey.c	2004-06-26 11:53:20.000000000 +0100
+++ console-tools-0.2.3/kbdtools/showkey.c	2004-06-26 11:53:20.000000000 +0100
@@ -130,7 +130,8 @@
   enum {cmd_none, cmd_scancodes, cmd_keycodes, cmd_keymap, cmd_unicode} command = cmd_none;
   
   struct termios new;
-  unsigned char buf[128];	       /* to decently grasp STRINGS with cmd_keymap */
+  unsigned char buf[129];	  /* to decently grasp STRINGS with cmd_keymap */
+  							  /* ensure divisible by 3 */ 
   int i, n;
 
   setuplocale();
@@ -251,45 +252,55 @@
       perror("KDSKBMODE");
       exit(1);
     }
-
+  
   printf(_("press any key (program terminates after %us of last keypress)...\n"), timeout);
-  while (1)
-    {
-      alarm(timeout);
-      n = read(fd, buf, sizeof(buf));
-	  
-      if (command == cmd_keymap)
-	{
-	  for (i = 0; i < n; i++)
-	    if (buf[i] >= 32)
-	      putchar(buf[i]);
-	    else
-	      putchar(' ');
-	  fprintf(stdout, " ( ");
-	}
-	      
-      for (i = 0; i < n; i++) 
-	{
-	  if (command == cmd_keycodes)
-	    printf(_("keycode %3d %s\n"),
-		   buf[i] & 0x7f,
-		   buf[i] & 0x80 ? _("release") : _("press"));
-	  else /* scancode or keymap or unicode */
-	    printf("0x%02x ", buf[i]);
-	}
 
-      switch (command)
-	{
-	case cmd_scancodes:
-	case cmd_unicode:
-	  putchar('\n');
-	  break;
-	case cmd_keymap:
-	  printf(")\n");
-	default:
+if (command != cmd_keymap) {
+	/* show scancodes */
+		while (1) {
+			alarm(timeout);
+			n = read(fd, buf, sizeof(buf));
+			for (i = 0; i < n; i++)
+				printf("0x%02x ", buf[i]);
+			printf("\n");
+		}
+	} else {
+		/* show keycodes - 2.6 allows 3-byte reports */
+		while (1) {
+			alarm (timeout);
+			n = read(fd, buf, sizeof(buf));
+			i = 0;
+			while (i < n) {
+				int kc;
+				char *s;
+				
+				s = (buf[i] & 0x80) ? _("release") : _("press");
+
+				if (i+2 < n && (buf[i] & 0x7f) == 0
+					&& (buf[i+1] & 0x80) != 0
+					&& (buf[i+2] & 0x80) != 0) {
+						kc = ((buf[i+1] & 0x7f) << 7) |
+								(buf[i+2] & 0x7f);
+						i += 3;
+				} else {
+					kc = (buf[i] & 0x7f);
+					i++;
+				}
+				printf(_("keycode %3d %s\n"), kc, s);
+			}
+		}
 	}
-    }
 
-  clean_up();
-  exit(0);
+   switch (command) {
+		case cmd_scancodes:
+		case cmd_unicode:
+		  putchar('\n');
+		  break;
+		case cmd_keymap:
+		  printf(")\n");
+		default:
+	}
+	
+   clean_up();
+	exit(0);
 }
