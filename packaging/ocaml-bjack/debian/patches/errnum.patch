using errno causes troubles when compiling on hurd.
See #623337

--- a/src/jack_stubs.c
+++ b/src/jack_stubs.c
@@ -50,9 +50,9 @@
 #include <caml/memory.h>
 #include <caml/signals.h>
 
-static value caml_bjack_handle_error(int errno)
+static value caml_bjack_handle_error(int errnum)
 {
-  switch (errno)
+  switch (errnum)
     {
     case ERR_OPENING_JACK:
       caml_raise_constant(*caml_named_value("bio2jack_exn_open"));
@@ -146,12 +146,12 @@
   int jack_ports_flags = Int_val(_jack_port_flags);
 
 
-  int errno = JACK_Open(drv,Int_val(bit_per_sample),&r,String_val(name),String_val(server),
+  int errnum = JACK_Open(drv,Int_val(bit_per_sample),&r,String_val(name),String_val(server),
                           Int_val(input_channels),Int_val(output_channels),
                           jack_ports_flags, Int_val(size));
 
-  if (errno != ERR_SUCCESS)
-    caml_bjack_handle_error(errno) ;
+  if (errnum != ERR_SUCCESS)
+    caml_bjack_handle_error(errnum) ;
 
   driver = caml_alloc_custom(&bjack_drv_ops, sizeof(jack_driver_t*), 1, 0);
   Bjack_drv_val(driver) = drv;
@@ -168,9 +168,9 @@
 {
   CAMLparam1(device);
   jack_driver_t *drv = Bjack_drv_val(device);
-  int errno = JACK_Close(drv);
-  if (errno != ERR_SUCCESS)
-    caml_bjack_handle_error(errno) ;
+  int errnum = JACK_Close(drv);
+  if (errnum != ERR_SUCCESS)
+    caml_bjack_handle_error(errnum) ;
   CAMLreturn(Val_unit);
 }
 
