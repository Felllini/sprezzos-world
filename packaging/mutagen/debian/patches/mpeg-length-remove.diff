Description: Remove the code which should have prevented the use of impossible
 lengths by performing the 'bitrate/file size' check. This was never used
 because the args are switched, plus the calculation is wrong as the result
 is 1/64 of the real length.
From: http://code.google.com/p/mutagen/issues/detail?id=93#c5
Bug: http://code.google.com/p/mutagen/issues/detail?id=93
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=637061
---
 mutagen/mp3.py |    9 ---------
 1 file changed, 9 deletions(-)

--- mutagen-1.19.orig/mutagen/mp3.py
+++ mutagen-1.19/mutagen/mp3.py
@@ -204,15 +204,6 @@ class MPEGInfo(object):
                 bytes = struct.unpack('>I', data[xing + 12:xing + 16])[0]
                 self.bitrate = int((bytes * 8) // self.length)
 
-        # If the bitrate * the length is nowhere near the file
-        # length, recalculate using the bitrate and file length.
-        # Don't do this for very small files.
-        fileobj.seek(2, 0)
-        size = fileobj.tell()
-        expected = (self.bitrate / 8) * self.length
-        if not (size / 2 < expected < size * 2) and size > 2**16:
-            self.length = size / float(self.bitrate * 8)
-
     def pprint(self):
         s = "MPEG %s layer %d, %d bps, %s Hz, %.2f seconds" % (
             self.version, self.layer, self.bitrate, self.sample_rate,
