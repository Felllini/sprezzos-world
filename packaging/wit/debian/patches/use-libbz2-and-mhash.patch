Description: Use libbz2 and mhash
 The upstream tarball comes with a bundled version of libbz2 and uses OpenSSL
 for SHA1. In accordance with Debian policy (“Convenience copies of code”),
 the Debian tarball ships without libbz2. Also, due to licensing, we use mhash
 instead of OpenSSL.
Author: Michael Stapelberg <stapelberg@debian.org>
Last-Update: 2013-01-01

---

--- wit-2.10a.orig/Makefile
+++ wit-2.10a/Makefile
@@ -180,7 +180,7 @@ LIBBZ2_OBJ	= $(patsubst %.c,%.o,$(LIBBZ2
 
 # lib summary
 LIB_LIST	+= libbz2
-LIB_OBJECTS	+= $(LIBBZ2_OBJ)
+LIB_OBJECTS	+= 
 RM_FILES	+= $(foreach l,$(LIB_LIST),src/$(l)/*.{d,o})
 
 #-------------------------------------------------------------------------------
@@ -214,15 +214,14 @@ WIT_O		:= debug.o lib-std.o lib-file.o l
 		   lib-bzip2.o lib-lzma.o \
 		   lib-wdf.o lib-wia.o lib-ciso.o \
 		   ui.o iso-interface.o wbfs-interface.o patch.o \
-		   titles.o match-pattern.o dclib-utf8.o \
-		   sha1dgst.o sha1_one.o
+		   titles.o match-pattern.o dclib-utf8.o wit-sha1.o
 LIBWBFS_O	:= tools.o file-formats.o libwbfs.o wiidisc.o cert.o rijndael.o
 LZMA_O		:= LzmaDec.o LzmaEnc.o LzFind.o Lzma2Dec.o Lzma2Enc.o
 
 # object groups
 UI_OBJECTS	:= $(sort $(MAIN_TOOLS_OBJ))
 C_OBJECTS	:= $(sort $(OTHER_TOOLS_OBJ) $(WIT_O) $(LIBWBFS_O) $(LZMA_O) $(TOBJ_ALL))
-ASM_OBJECTS	:= ssl-asm.o
+ASM_OBJECTS	:= 
 
 # all objects + sources
 ALL_OBJECTS	= $(sort $(WIT_O) $(LIBWBFS_O) $(LZMA_O) $(ASM_OBJECTS) $(LIB_OBJECTS))
@@ -268,6 +267,7 @@ LDFLAGS		+= -static-libgcc
 LDFLAGS		:= $(strip $(LDFLAGS))
 
 LIBS		+= $(XLIBS)
+LIBS            += -lbz2 -lmhash
 
 DISTRIB_RM	= ./wit-v$(VERSION)-r
 DISTRIB_BASE	= wit-v$(VERSION)-r$(REVISION_NEXT)
--- wit-2.10a.orig/src/iso-interface.c
+++ wit-2.10a/src/iso-interface.c
@@ -50,6 +50,8 @@
 #include "dirent.h"
 #include "crypt.h"
 
+#include <mutils/mhash.h>
+
 //
 ///////////////////////////////////////////////////////////////////////////////
 ///////////////			 dump helpers			///////////////
@@ -5685,11 +5687,11 @@ enumError Skeletonize
     const enumOFT oft = CalcOFT(output_file_type,0,0,OFT__DEFAULT);
     
     {
-	WIT_SHA_CTX ctx;
-	if (!WIT_SHA1_Init(&ctx))
+	MHASH td;
+	if ((td = mhash_init(MHASH_SHA1)) == MHASH_FAILED)
 	{
 	    ASSERT(0);
-	    exit(0);
+	    exit(1);
 	}
 
 	int i;
@@ -5697,10 +5699,10 @@ enumError Skeletonize
 	{
 	    wd_memmap_item_t * mi = mm.item + i;
 	    noPRINT("### %p %9llx %6llx\n",mi->data,mi->offset,mi->size);
-	    WIT_SHA1_Update(&ctx,mi->data,mi->size);
+	    mhash(td, mi->data, mi->size);
 	}
 	u8 h[WII_HASH_SIZE];
-	WIT_SHA1_Final(h,&ctx);
+	mhash_deinit(td, h);
 
 	snprintf(fname,sizeof(fname),
 		"%s/%.6s-%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"
--- wit-2.10a.orig/src/crypt.h
+++ wit-2.10a/src/crypt.h
@@ -37,7 +37,8 @@
 #ifndef WIT_CRYPT_H
 #define WIT_CRYPT_H 1
 
-#include "crypto/wit-sha.h"
+//#include "crypto/wit-sha.h"
+unsigned char *WIT_SHA1(const unsigned char *d, size_t n, unsigned char *md);
 #define SHA1 WIT_SHA1
 
 // random functions
--- wit-2.10a.orig/src/lib-bzip2.c
+++ wit-2.10a/src/lib-bzip2.c
@@ -40,8 +40,7 @@
   #ifndef NO_BZIP2
 /******************/
 
-//#include <bzlib.h>
-#include "src/libbz2/bzlib.h"
+#include <bzlib.h>
 #include "lib-bzip2.h"
 
 /************************************************************************
--- /dev/null
+++ wit-2.10a/src/wit-sha1.c
@@ -0,0 +1,41 @@
+#include <stdio.h>
+#include <string.h>
+#include <mhash.h>
+
+#if 0
+#include <openssl/sha.h>
+unsigned char *WIT_SHA1_ssl(const unsigned char *d, size_t n, unsigned char *md)
+{
+        SHA_CTX c;
+        static unsigned char m[20];
+
+        if (md == NULL) md=m;
+        if (!SHA1_Init(&c))
+                return NULL;
+        SHA1_Update(&c,d,n);
+        SHA1_Final(md,&c);
+        return(md);
+}
+#endif
+
+unsigned char *WIT_SHA1(const unsigned char *d, size_t n, unsigned char *md)
+{
+	MHASH td;
+	if ((td = mhash_init(MHASH_SHA1)) == MHASH_FAILED)
+		return NULL;
+	mhash(td, d, n);
+	mhash_deinit(td, md);
+	return(md);
+}
+
+#if 0
+int main() {
+	char *bleh = "22:40 → fritz09 [~Adium@port-5452.pppoe.wtnet.de] has joined #29c3";
+	char md[1024] = { 0 };
+	WIT_SHA1(bleh, strlen(bleh), md);
+	printf("md = %s\n", md);
+	memset(md, '\0', sizeof(md));
+	WIT_SHA1_ssl(bleh, strlen(bleh), md);
+	printf("md = %s\n", md);
+}
+#endif
