Source: libfield3d
Priority: optional
Maintainer: Nick Black <nick.black@sprezzatech.com>
Build-Depends: debhelper (>= 9.0.0),
	cdbs,
	cmake,
	doxygen,
	libboost-thread-dev | libboost-thread1.53-dev,
	libhdf5-dev,
	libilmbase2-dev
Standards-Version: 3.9.4
Section: libs
Homepage: https://sites.google.com/site/field3d/
#Vcs-Git: git://git.debian.org/collab-maint/libfield3d.git
#Vcs-Browser: http://git.debian.org/?p=collab-maint/libfield3d.git;a=summary

Package: libfield3d-dev
Section: libdevel
Architecture: any
Depends: libfield3d1 (= ${binary:Version}),
	${shlibs:Depends},
	${misc:Depends}
Description: HDF5-derived structures for storing voxels -- development
 Field3D is an open source library for storing voxel data. It provides C++
 classes that handle in-memory storage and a file format based on HDF5 that
 allows the C++ objects to be written to and read from disk.
 .
 The library and file format is both flexible and extendable. The flexibility
 comes from supporting heterogeneous storage of data structures, bit depths,
 transformations/mappings and metadata in a single file. When functionality
 needs to be extended, the plugin and class factory architecture allows new
 data structures, mappings and file I/O routines to be added.
 .
 Field3D was developed with the needs and scale of visual effects production in
 mind. Dense and MAC-fields handle the basic tasks in fluid simulation and
 volume rendering, and where memory becomes a limiting factor optimization of
 used/unused space is provided by the sparse fields, which include an
 out-of-core/dynamic loading mechanism. Procedural fields are also supported,
 which may be used interchangeably with voxel-based fields. 
 .
 These are the files necessary for development with Field3D.

Package: libfield3d1
Section: libs
Architecture: any
Depends: ${shlibs:Depends},
	${misc:Depends}
Description: HDF5-derived structures for storing voxels
 Field3D is an open source library for storing voxel data. It provides C++
 classes that handle in-memory storage and a file format based on HDF5 that
 allows the C++ objects to be written to and read from disk.
 .
 The library and file format is both flexible and extendable. The flexibility
 comes from supporting heterogeneous storage of data structures, bit depths,
 transformations/mappings and metadata in a single file. When functionality
 needs to be extended, the plugin and class factory architecture allows new
 data structures, mappings and file I/O routines to be added.
 .
 Field3D was developed with the needs and scale of visual effects production in
 mind. Dense and MAC-fields handle the basic tasks in fluid simulation and
 volume rendering, and where memory becomes a limiting factor optimization of
 used/unused space is provided by the sparse fields, which include an
 out-of-core/dynamic loading mechanism. Procedural fields are also supported,
 which may be used interchangeably with voxel-based fields. 

