diff -u -r1.36 ocamldep.ml
--- ocamldep.ml	24 Mar 2005 17:20:54 -0000	1.36
+++ ocamldep.ml	14 Jun 2006 02:12:35 -0000
@@ -24,6 +24,7 @@
 let native_only = ref false
 let force_slash = ref false
 let error_occurred = ref false
+let raw_flag = ref false
 
 let add_to_load_path dir =
   try
@@ -58,7 +59,7 @@
   try
     let filename = find_file (modname ^ ".mli") in
     let basename = Filename.chop_suffix filename ".mli" in
-    let optname = 
+    let optname =
       if Sys.file_exists (basename ^ ".ml")
       then basename ^ ".cmx"
       else basename ^ ".cmi" in
@@ -119,6 +120,14 @@
         end in
     print_items (String.length target_file + 2) deps
 
+let print_raw_dependencies source_file deps =
+   print_string source_file;
+   print_string ":\n";
+   Depend.StringSet.iter (fun dep ->
+        print_char '\t';
+        print_string dep;
+        print_char '\n') deps
+
 (* Optionally preprocess a source file *)
 
 let preprocessor = ref None
@@ -192,6 +201,9 @@
         if Filename.check_suffix source_file ".ml" then begin
           let ast = parse_use_file ic in
           Depend.add_use_file Depend.StringSet.empty ast;
+          if !raw_flag then
+            print_raw_dependencies source_file !Depend.free_structure_names
+          else
           let basename = Filename.chop_suffix source_file ".ml" in
           let init_deps =
             if Sys.file_exists (basename ^ ".mli")
@@ -205,6 +217,9 @@
         if Filename.check_suffix source_file ".mli" then begin
           let ast = parse_interface ic in
           Depend.add_signature Depend.StringSet.empty ast;
+          if !raw_flag then
+            print_raw_dependencies source_file !Depend.free_structure_names
+          else
           let basename = Filename.chop_suffix source_file ".mli" in
           let (byt_deps, opt_deps) =
             Depend.StringSet.fold find_dependency !Depend.free_structure_names ([], []) in
@@ -254,5 +269,7 @@
        "  (for Windows) Use forward slash / instead of backslash \\ in file paths";
      "-version", Arg.Unit print_version,
       " Print version and exit";
+     "-modules", Arg.Set raw_flag,
+      "Print all module dependencies in raw form (output is not suitable for make)";
     ] file_dependencies usage;
   exit (if !error_occurred then 2 else 0)
