Description: fix compatibility with Python 3.3
Author: Takayuki Shimizukawa <shimizukawa@gmail.com>
Bug: https://bitbucket.org/birkenfeld/sphinx/issue/1008/test-failures-with-python-33
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1070336
Last-Update: 2012-11-08

--- a/sphinx/ext/autodoc.py
+++ b/sphinx/ext/autodoc.py
@@ -1098,7 +1098,7 @@
     """
     objtype = 'method'
     member_order = 50
-    priority = 0
+    priority = 1  # must be more than FunctionDocumenter
 
     @classmethod
     def can_document_member(cls, member, membername, isattr, parent):
--- a/sphinx/ext/intersphinx.py
+++ b/sphinx/ext/intersphinx.py
@@ -188,7 +188,17 @@
     if update:
         env.intersphinx_inventory = {}
         env.intersphinx_named_inventory = {}
-        for name, _, invdata in cache.itervalues():
+        # Duplicate values in different inventories will shadow each
+        # other; which one will override which can vary between builds
+        # since they are specified using an unordered dict.  To make
+        # it more consistent, we sort the named inventories and then
+        # add the unnamed inventories last.  This means that the
+        # unnamed inventories will shadow the named ones but the named
+        # ones can still be accessed when the name is specified.
+        cached_vals = list(cache.itervalues())
+        named_vals = sorted(v for v in cached_vals if v[0])
+        unnamed_vals = [v for v in cached_vals if not v[0]]
+        for name, _, invdata in named_vals + unnamed_vals:
             if name:
                 env.intersphinx_named_inventory[name] = invdata
             for type, objects in invdata.iteritems():
--- a/sphinx/util/__init__.py
+++ b/sphinx/util/__init__.py
@@ -197,13 +197,18 @@
         except Exception, err:
             raise PycodeError('error importing %r' % modname, err)
     mod = sys.modules[modname]
-    if hasattr(mod, '__loader__'):
+    filename = getattr(mod, '__file__', None)
+    loader = getattr(mod, '__loader__', None)
+    if loader and getattr(loader, 'get_filename', None):
+        try:
+            filename = loader.get_filename(modname)
+        except Exception, err:
+            raise PycodeError('error getting filename for %r' % filename, err)
+    if filename is None and loader:
         try:
-            source = mod.__loader__.get_source(modname)
+            return 'string', loader.get_source(modname)
         except Exception, err:
             raise PycodeError('error getting source for %r' % modname, err)
-        return 'string', source
-    filename = getattr(mod, '__file__', None)
     if filename is None:
         raise PycodeError('no source found for module %r' % modname)
     filename = path.normpath(path.abspath(filename))
