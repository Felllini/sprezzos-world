OPTIONAL PACKAGES

The epydoc command requires the texlive-latex-extra package to use the --dvi
and --ps options, and also requires the gs-common package to use the --pdf
option.  The epydocgui command requires the python-tk package.  All of these
optional packages are Recommended in the package dependencies.  

The other recommended packages are listed because without them, the install
process doesn't proceed cleanly -- extra old tetex packages get pulled in and I
get a mixed system with both tetex and texlive dependencies.

The texlive-latex-extra package is huge, and I wish I could Recommend the
texlive-latex-base package instead.  However, the LaTeX that Epydoc generates
includes \usepackage directives for packages such as 'multirow', which are
available only in texlive-latex-extra and *not* texlive-latex-base.


OBSOLETE PACKAGES

As of version 2.0-2, all scripts, manpages and Python modules are part of the
python-epydoc package only.  The python2.1-epydoc, python2.2-epydoc and
python2.3-eypdoc binary packages (which are no longer even built) can be
removed from your system at any time.  They existed only to allow for a smooth
upgrade from earlier packages prior to version 2.0-2.


IMPORTING EPYDOC MODULES

The epydoc Python package is installed as a public package by the
python-support infrastructure.  This means that you can import epydoc
modules directly from any "current" version of Python (whatever Debian policy
defines as current, which as of this writing is Python 2.3 and Python 2.4).


$PYTHONVER NO LONGER SUPPORTED

Older versions of this Debian package (prior to 2.1-11, when the conversion
to python-support happened) allowed usage of $PYTHONVER on the command-line to
specify which version of Python the epydoc code should be executed with.
Unfortunately, under the new Debian python policy, there is no good way to
accomplish this any more -- not that the previous way I handled it was all that
pretty, either.

If you want to run epydoc from the command-line with some version of Python
other than the default one (/usr/bin/python), then just copy the
/usr/bin/epydoc script and edit it to your liking.  You'll probably just invoke
the script with a different interpreter.  Note: this has to be an interpreter
supported by the Python infrastructure -- it can't be some arbitrary
interpreter on your system.

