# DP: hg updates of the 3.3 release branch (until 2012-12-20, 80954:c744b6f8a09a).

# hg diff -r v3.3.0 | filterdiff --exclude=.hgignore --exclude=.hgeol --exclude=.hgtags --remove-timestamps

diff -r bd8afb90ebf2 Doc/ACKS.txt
--- a/Doc/ACKS.txt
+++ /dev/null
@@ -1,239 +0,0 @@
-Contributors to the Python Documentation
-----------------------------------------
-
-This section lists people who have contributed in some way to the Python
-documentation.  It is probably not complete -- if you feel that you or
-anyone else should be on this list, please let us know (send email to
-docs@python.org), and we'll be glad to correct the problem.
-
-.. acks::
-
-   * Aahz
-   * Michael Abbott
-   * Steve Alexander
-   * Jim Ahlstrom
-   * Fred Allen
-   * A. Amoroso
-   * Pehr Anderson
-   * Oliver Andrich
-   * Heidi Annexstad
-   * Jesús Cea Avión
-   * Manuel Balsera
-   * Daniel Barclay
-   * Chris Barker
-   * Don Bashford
-   * Anthony Baxter
-   * Alexander Belopolsky
-   * Bennett Benson
-   * Jonathan Black
-   * Robin Boerdijk
-   * Michal Bozon
-   * Aaron Brancotti
-   * Georg Brandl
-   * Keith Briggs
-   * Ian Bruntlett
-   * Lee Busby
-   * Arnaud Calmettes
-   * Lorenzo M. Catucci
-   * Carl Cerecke
-   * Mauro Cicognini
-   * Gilles Civario
-   * Mike Clarkson
-   * Steve Clift
-   * Dave Cole
-   * Matthew Cowles
-   * Jeremy Craven
-   * Andrew Dalke
-   * Ben Darnell
-   * L. Peter Deutsch
-   * Robert Donohue
-   * Fred L. Drake, Jr.
-   * Jacques Ducasse
-   * Josip Dzolonga
-   * Jeff Epler
-   * Michael Ernst
-   * Blame Andy Eskilsson
-   * Carey Evans
-   * Martijn Faassen
-   * Carl Feynman
-   * Dan Finnie
-   * Hernán Martínez Foffani
-   * Michael Foord
-   * Stefan Franke
-   * Jim Fulton
-   * Peter Funk
-   * Ethan Furman
-   * Lele Gaifax
-   * Matthew Gallagher
-   * Gabriel Genellina
-   * Ben Gertzfield
-   * Nadim Ghaznavi
-   * Jonathan Giddy
-   * Matt Giuca
-   * Shelley Gooch
-   * Nathaniel Gray
-   * Grant Griffin
-   * Thomas Guettler
-   * Anders Hammarquist
-   * Mark Hammond
-   * Harald Hanche-Olsen
-   * Manus Hand
-   * Gerhard Häring
-   * Travis B. Hartwell
-   * Tim Hatch
-   * Janko Hauser
-   * Ben Hayden
-   * Thomas Heller
-   * Bernhard Herzog
-   * Magnus L. Hetland
-   * Konrad Hinsen
-   * Stefan Hoffmeister
-   * Albert Hofkamp
-   * Gregor Hoffleit
-   * Steve Holden
-   * Thomas Holenstein
-   * Gerrit Holl
-   * Rob Hooft
-   * Brian Hooper
-   * Randall Hopper
-   * Michael Hudson
-   * Eric Huss
-   * Jeremy Hylton
-   * Roger Irwin
-   * Jack Jansen
-   * Philip H. Jensen
-   * Pedro Diaz Jimenez
-   * Kent Johnson
-   * Lucas de Jonge
-   * Andreas Jung
-   * Robert Kern
-   * Jim Kerr
-   * Jan Kim
-   * Kamil Kisiel
-   * Greg Kochanski
-   * Guido Kollerie
-   * Peter A. Koren
-   * Daniel Kozan
-   * Andrew M. Kuchling
-   * Dave Kuhlman
-   * Erno Kuusela
-   * Ross Lagerwall
-   * Thomas Lamb
-   * Detlef Lannert
-   * Piers Lauder
-   * Julia Lawall
-   * Glyph Lefkowitz
-   * Robert Lehmann
-   * Marc-André Lemburg
-   * Ross Light
-   * Gediminas Liktaras
-   * Ulf A. Lindgren
-   * Everett Lipman
-   * Mirko Liss
-   * Martin von Löwis
-   * Fredrik Lundh
-   * Jeff MacDonald
-   * John Machin
-   * Andrew MacIntyre
-   * Vladimir Marangozov
-   * Vincent Marchetti
-   * Westley Martínez
-   * Laura Matson
-   * Daniel May
-   * Rebecca McCreary
-   * Doug Mennella
-   * Paolo Milani
-   * Skip Montanaro
-   * Paul Moore
-   * Ross Moore
-   * Sjoerd Mullender
-   * Dale Nagata
-   * Trent Nelson
-   * Michal Nowikowski
-   * Steffen Daode Nurpmeso
-   * Ng Pheng Siong
-   * Koray Oner
-   * Tomas Oppelstrup
-   * Denis S. Otkidach
-   * Zooko O'Whielacronx
-   * Shriphani Palakodety
-   * William Park
-   * Joonas Paalasmaa
-   * Harri Pasanen
-   * Bo Peng
-   * Tim Peters
-   * Benjamin Peterson
-   * Christopher Petrilli
-   * Justin D. Pettit
-   * Chris Phoenix
-   * François Pinard
-   * Paul Prescod
-   * Eric S. Raymond
-   * Edward K. Ream
-   * Terry J. Reedy
-   * Sean Reifschneider
-   * Bernhard Reiter
-   * Armin Rigo
-   * Wes Rishel
-   * Armin Ronacher
-   * Jim Roskind
-   * Guido van Rossum
-   * Donald Wallace Rouse II
-   * Mark Russell
-   * Nick Russo
-   * Chris Ryland
-   * Constantina S.
-   * Hugh Sasse
-   * Bob Savage
-   * Scott Schram
-   * Neil Schemenauer
-   * Barry Scott
-   * Joakim Sernbrant
-   * Justin Sheehy
-   * Charlie Shepherd
-   * Yue Shuaijie
-   * SilentGhost
-   * Michael Simcich
-   * Ionel Simionescu
-   * Michael Sloan
-   * Gregory P. Smith
-   * Roy Smith
-   * Clay Spence
-   * Nicholas Spies
-   * Tage Stabell-Kulo
-   * Frank Stajano
-   * Anthony Starks
-   * Greg Stein
-   * Peter Stoehr
-   * Mark Summerfield
-   * Reuben Sumner
-   * Kalle Svensson
-   * Jim Tittsler
-   * David Turner
-   * Sandro Tosi
-   * Ville Vainio
-   * Nadeem Vawda
-   * Martijn Vries
-   * Charles G. Waldman
-   * Greg Ward
-   * Barry Warsaw
-   * Corran Webster
-   * Glyn Webster
-   * Bob Weiner
-   * Eddy Welbourne
-   * Jeff Wheeler
-   * Mats Wichmann
-   * Gerry Wiener
-   * Timothy Wild
-   * Paul Winkler
-   * Collin Winter
-   * Blake Winton
-   * Dan Wolfe
-   * Adam Woodbeck
-   * Steven Work
-   * Thomas Wouters
-   * Ka-Ping Yee
-   * Rory Yorke
-   * Moshe Zadka
-   * Milan Zamazal
-   * Cheng Zhang
diff -r bd8afb90ebf2 Doc/Makefile
--- a/Doc/Makefile
+++ b/Doc/Makefile
@@ -53,7 +53,7 @@
 	fi
 	@if [ ! -d tools/pygments ]; then \
 	  echo "Checking out Pygments..."; \
-	  svn checkout $(SVNROOT)/external/Pygments-1.3.1/pygments tools/pygments; \
+	  svn checkout $(SVNROOT)/external/Pygments-1.5dev-20120930/pygments tools/pygments; \
 	fi
 
 update: clean checkout
@@ -185,7 +185,11 @@
 # for development releases: always build
 autobuild-dev:
 	make update
-	make dist SPHINXOPTS='-A daily=1'
+	make dist SPHINXOPTS='-A daily=1 -A versionswitcher=1'
+
+# for quick rebuilds (HTML only)
+autobuild-html:
+	make html SPHINXOPTS='-A daily=1 -A versionswitcher=1'
 
 # for stable releases: only build if not in pre-release stage (alpha, beta, rc)
 autobuild-stable:
@@ -194,3 +198,4 @@
 		exit 1;; \
 	esac
 	@make autobuild-dev
+
diff -r bd8afb90ebf2 Doc/about.rst
--- a/Doc/about.rst
+++ b/Doc/about.rst
@@ -29,8 +29,13 @@
 See :ref:`reporting-bugs` for information how to report bugs in this
 documentation, or Python itself.
 
-.. including the ACKS file here so that it can be maintained separately
-.. include:: ACKS.txt
+
+Contributors to the Python Documentation
+----------------------------------------
+
+Many people have contributed to the Python language, the Python standard
+library, and the Python documentation.  See :source:`Misc/ACKS` in the Python
+source distribution for a partial list of contributors.
 
 It is only with the input and contributions of the Python community
 that Python has such wonderful documentation -- Thank You!
diff -r bd8afb90ebf2 Doc/c-api/buffer.rst
--- a/Doc/c-api/buffer.rst
+++ b/Doc/c-api/buffer.rst
@@ -1,5 +1,10 @@
 .. highlightlang:: c
 
+.. index::
+   single: buffer protocol
+   single: buffer interface; (see buffer protocol)
+   single: buffer object; (see buffer protocol)
+
 .. _bufferobjects:
 
 Buffer Protocol
@@ -10,9 +15,6 @@
 .. sectionauthor:: Stefan Krah
 
 
-.. index::
-   single: buffer interface
-
 Certain objects available in Python wrap access to an underlying memory
 array or *buffer*.  Such objects include the built-in :class:`bytes` and
 :class:`bytearray`, and some extension types like :class:`array.array`.
@@ -24,8 +26,8 @@
 then desirable, in some situations, to access that buffer directly and
 without intermediate copying.
 
-Python provides such a facility at the C level in the form of the *buffer
-protocol*.  This protocol has two sides:
+Python provides such a facility at the C level in the form of the :ref:`buffer
+protocol <bufferobjects>`.  This protocol has two sides:
 
 .. index:: single: PyBufferProcs
 
diff -r bd8afb90ebf2 Doc/c-api/import.rst
--- a/Doc/c-api/import.rst
+++ b/Doc/c-api/import.rst
@@ -76,7 +76,7 @@
    UTF-8 encoded string instead of a Unicode object.
 
    .. versionchanged:: 3.3
-         Negative values for **level** are no longer accepted.
+         Negative values for *level* are no longer accepted.
 
 .. c:function:: PyObject* PyImport_Import(PyObject *name)
 
diff -r bd8afb90ebf2 Doc/c-api/index.rst
--- a/Doc/c-api/index.rst
+++ b/Doc/c-api/index.rst
@@ -4,9 +4,6 @@
   Python/C API Reference Manual
 ##################################
 
-:Release: |version|
-:Date: |today|
-
 This manual documents the API used by C and C++ programmers who want to write
 extension modules or embed Python.  It is a companion to :ref:`extending-index`,
 which describes the general principles of extension writing but does not
diff -r bd8afb90ebf2 Doc/c-api/object.rst
--- a/Doc/c-api/object.rst
+++ b/Doc/c-api/object.rst
@@ -160,11 +160,11 @@
    a string similar to that returned by :c:func:`PyObject_Repr` in Python 2.
    Called by the :func:`ascii` built-in function.
 
+   .. index:: string; PyObject_Str (C function)
+
 
 .. c:function:: PyObject* PyObject_Str(PyObject *o)
 
-   .. index:: builtin: str
-
    Compute a string representation of object *o*.  Returns the string
    representation on success, *NULL* on failure.  This is the equivalent of the
    Python expression ``str(o)``.  Called by the :func:`str` built-in function
diff -r bd8afb90ebf2 Doc/c-api/sys.rst
--- a/Doc/c-api/sys.rst
+++ b/Doc/c-api/sys.rst
@@ -61,12 +61,6 @@
    Return the object *name* from the :mod:`sys` module or *NULL* if it does
    not exist, without setting an exception.
 
-.. c:function:: FILE *PySys_GetFile(char *name, FILE *def)
-
-   Return the :c:type:`FILE*` associated with the object *name* in the
-   :mod:`sys` module, or *def* if *name* is not in the module or is not associated
-   with a :c:type:`FILE*`.
-
 .. c:function:: int PySys_SetObject(char *name, PyObject *v)
 
    Set *name* in the :mod:`sys` module to *v* unless *v* is *NULL*, in which
diff -r bd8afb90ebf2 Doc/c-api/unicode.rst
--- a/Doc/c-api/unicode.rst
+++ b/Doc/c-api/unicode.rst
@@ -735,15 +735,15 @@
 The current locale encoding can be used to decode text from the operating
 system.
 
-.. c:function:: PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t len, int surrogateescape)
-
-   Decode a string from the current locale encoding. The decoder is strict if
-   *surrogateescape* is equal to zero, otherwise it uses the
-   ``'surrogateescape'`` error handler (:pep:`383`) to escape undecodable
-   bytes. If a byte sequence can be decoded as a surrogate character and
-   *surrogateescape* is not equal to zero, the byte sequence is escaped using
-   the ``'surrogateescape'`` error handler instead of being decoded.  *str*
-   must end with a null character but cannot contain embedded null characters.
+.. c:function:: PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, \
+                                                        Py_ssize_t len, \
+                                                        const char *errors)
+
+   Decode a string from the current locale encoding. The supported
+   error handlers are ``"strict"`` and ``"surrogateescape"``
+   (:pep:`383`). The decoder uses ``"strict"`` error handler if
+   *errors* is ``NULL``.  *str* must end with a null character but
+   cannot contain embedded null characters.
 
    .. seealso::
 
@@ -754,7 +754,7 @@
    .. versionadded:: 3.3
 
 
-.. c:function:: PyObject* PyUnicode_DecodeLocale(const char *str, int surrogateescape)
+.. c:function:: PyObject* PyUnicode_DecodeLocale(const char *str, const char *errors)
 
    Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string
    length using :c:func:`strlen`.
@@ -762,12 +762,13 @@
    .. versionadded:: 3.3
 
 
-.. c:function:: PyObject* PyUnicode_EncodeLocale(PyObject *unicode, int surrogateescape)
-
-   Encode a Unicode object to the current locale encoding. The encoder is
-   strict if *surrogateescape* is equal to zero, otherwise it uses the
-   ``'surrogateescape'`` error handler (:pep:`383`). Return a :class:`bytes`
-   object. *str* cannot contain embedded null characters.
+.. c:function:: PyObject* PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)
+
+   Encode a Unicode object to the current locale encoding. The
+   supported error handlers are ``"strict"`` and ``"surrogateescape"``
+   (:pep:`383`). The encoder uses ``"strict"`` error handler if
+   *errors* is ``NULL``. Return a :class:`bytes` object. *str* cannot
+   contain embedded null characters.
 
    .. seealso::
 
@@ -813,7 +814,7 @@
 .. c:function:: PyObject* PyUnicode_DecodeFSDefaultAndSize(const char *s, Py_ssize_t size)
 
    Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the
-   ``'surrogateescape'`` error handler, or ``'strict'`` on Windows.
+   ``"surrogateescape"`` error handler, or ``"strict"`` on Windows.
 
    If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the
    locale encoding.
@@ -826,13 +827,13 @@
       :c:func:`PyUnicode_DecodeLocaleAndSize`.
 
    .. versionchanged:: 3.2
-      Use ``'strict'`` error handler on Windows.
+      Use ``"strict"`` error handler on Windows.
 
 
 .. c:function:: PyObject* PyUnicode_DecodeFSDefault(const char *s)
 
    Decode a null-terminated string using :c:data:`Py_FileSystemDefaultEncoding`
-   and the ``'surrogateescape'`` error handler, or ``'strict'`` on Windows.
+   and the ``"surrogateescape"`` error handler, or ``"strict"`` on Windows.
 
    If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the
    locale encoding.
@@ -840,13 +841,13 @@
    Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length.
 
    .. versionchanged:: 3.2
-      Use ``'strict'`` error handler on Windows.
+      Use ``"strict"`` error handler on Windows.
 
 
 .. c:function:: PyObject* PyUnicode_EncodeFSDefault(PyObject *unicode)
 
    Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the
-   ``'surrogateescape'`` error handler, or ``'strict'`` on Windows, and return
+   ``"surrogateescape"`` error handler, or ``"strict"`` on Windows, and return
    :class:`bytes`. Note that the resulting :class:`bytes` object may contain
    null bytes.
 
@@ -1083,8 +1084,6 @@
    After completion, *\*byteorder* is set to the current byte order at the end
    of input data.
 
-   In a narrow build codepoints outside the BMP will be decoded as surrogate pairs.
-
    If *byteorder* is *NULL*, the codec starts in native order mode.
 
    Return *NULL* if an exception was raised by the codec.
diff -r bd8afb90ebf2 Doc/data/refcounts.dat
--- a/Doc/data/refcounts.dat
+++ b/Doc/data/refcounts.dat
@@ -1315,10 +1315,6 @@
 PySys_AddXOption:void:::
 PySys_AddXOption:const wchar_t*:s::
 
-PySys_GetFile:FILE*:::
-PySys_GetFile:char*:name::
-PySys_GetFile:FILE*:def::
-
 PySys_GetObject:PyObject*::0:
 PySys_GetObject:char*:name::
 
diff -r bd8afb90ebf2 Doc/distutils/apiref.rst
--- a/Doc/distutils/apiref.rst
+++ b/Doc/distutils/apiref.rst
@@ -992,6 +992,12 @@
    destination of the symlink will be copied.  *update* and *verbose* are the same
    as for :func:`copy_file`.
 
+   Files in *src* that begin with :file:`.nfs` are skipped (more information on
+   these files is available in answer D2 of the `NFS FAQ page
+   <http://nfs.sourceforge.net/#section_d>`_.
+
+   .. versionchanged:: 3.3.1
+      NFS files are ignored.
 
 .. function:: remove_tree(directory[, verbose=0, dry_run=0])
 
diff -r bd8afb90ebf2 Doc/distutils/index.rst
--- a/Doc/distutils/index.rst
+++ b/Doc/distutils/index.rst
@@ -6,8 +6,6 @@
 
 :Authors: Greg Ward, Anthony Baxter
 :Email: distutils-sig@python.org
-:Release: |version|
-:Date: |today|
 
 This document describes the Python Distribution Utilities ("Distutils") from
 the module developer's point of view, describing how to use the Distutils to
diff -r bd8afb90ebf2 Doc/distutils/packageindex.rst
--- a/Doc/distutils/packageindex.rst
+++ b/Doc/distutils/packageindex.rst
@@ -43,9 +43,9 @@
 Maintainers may edit the package information, but not designate other Owners or
 Maintainers.
 
-By default PyPI will list all versions of a given package. To hide certain
-versions, the Hidden property should be set to yes. This must be edited through
-the web interface.
+By default PyPI displays only the newest version of a given package. The web
+interface lets one change this default behavior and manually select which
+versions to display and hide.
 
 
 .. _pypirc:
diff -r bd8afb90ebf2 Doc/extending/embedding.rst
--- a/Doc/extending/embedding.rst
+++ b/Doc/extending/embedding.rst
@@ -58,6 +58,7 @@
    int
    main(int argc, char *argv[])
    {
+     Py_SetProgramName(argv[0]);  /* optional but recommended */
      Py_Initialize();
      PyRun_SimpleString("from time import time,ctime\n"
                         "print('Today is', ctime(time()))\n");
@@ -65,9 +66,11 @@
      return 0;
    }
 
-The above code first initializes the Python interpreter with
+The :c:func:`Py_SetProgramName` function should be called before
+:c:func:`Py_Initialize` to inform the interpreter about paths to Python run-time
+libraries.  Next, the Python interpreter is initialized with
 :c:func:`Py_Initialize`, followed by the execution of a hard-coded Python script
-that print the date and time.  Afterwards, the :c:func:`Py_Finalize` call shuts
+that prints the date and time.  Afterwards, the :c:func:`Py_Finalize` call shuts
 the interpreter down, followed by the end of the program.  In a real program,
 you may want to get the Python script from another source, perhaps a text-editor
 routine, a file, or a database.  Getting the Python code from a file can better
diff -r bd8afb90ebf2 Doc/extending/index.rst
--- a/Doc/extending/index.rst
+++ b/Doc/extending/index.rst
@@ -4,9 +4,6 @@
   Extending and Embedding the Python Interpreter
 ##################################################
 
-:Release: |version|
-:Date: |today|
-
 This document describes how to write modules in C or C++ to extend the Python
 interpreter with new modules.  Those modules can define new functions but also
 new object types and their methods.  The document also describes how to embed
diff -r bd8afb90ebf2 Doc/extending/newtypes.rst
--- a/Doc/extending/newtypes.rst
+++ b/Doc/extending/newtypes.rst
@@ -982,13 +982,13 @@
    }
 
 
+.. index::
+   single: string; object representation
+   builtin: repr
+
 Object Presentation
 -------------------
 
-.. index::
-   builtin: repr
-   builtin: str
-
 In Python, there are two ways to generate a textual representation of an object:
 the :func:`repr` function, and the :func:`str` function.  (The :func:`print`
 function just calls :func:`str`.)  These handlers are both optional.
@@ -1277,9 +1277,9 @@
 bit does not indicate that the slot values are non-*NULL*. The flag may be set
 to indicate the presence of a slot, but a slot may still be unfilled.) ::
 
-   PyNumberMethods   tp_as_number;
-   PySequenceMethods tp_as_sequence;
-   PyMappingMethods  tp_as_mapping;
+   PyNumberMethods   *tp_as_number;
+   PySequenceMethods *tp_as_sequence;
+   PyMappingMethods  *tp_as_mapping;
 
 If you wish your object to be able to act like a number, a sequence, or a
 mapping object, then you place the address of a structure that implements the C
diff -r bd8afb90ebf2 Doc/faq/index.rst
--- a/Doc/faq/index.rst
+++ b/Doc/faq/index.rst
@@ -1,10 +1,9 @@
+.. _faq-index:
+
 ###################################
   Python Frequently Asked Questions
 ###################################
 
-:Release: |version|
-:Date: |today|
-
 .. toctree::
    :maxdepth: 1
 
diff -r bd8afb90ebf2 Doc/faq/programming.rst
--- a/Doc/faq/programming.rst
+++ b/Doc/faq/programming.rst
@@ -313,6 +313,27 @@
        g(x, *args, **kwargs)
 
 
+.. _faq-argument-vs-parameter:
+
+What is the difference between arguments and parameters?
+--------------------------------------------------------
+
+:term:`Parameters <parameter>` are defined by the names that appear in a
+function definition, whereas :term:`arguments <argument>` are the values
+actually passed to a function when calling it.  Parameters define what types of
+arguments a function can accept.  For example, given the function definition::
+
+   def func(foo, bar=None, **kwargs):
+       pass
+
+*foo*, *bar* and *kwargs* are parameters of ``func``.  However, when calling
+``func``, for example::
+
+   func(42, bar=314, extra=somevar)
+
+the values ``42``, ``314``, and ``somevar`` are arguments.
+
+
 How do I write a function with output parameters (call by reference)?
 ---------------------------------------------------------------------
 
diff -r bd8afb90ebf2 Doc/faq/windows.rst
--- a/Doc/faq/windows.rst
+++ b/Doc/faq/windows.rst
@@ -17,9 +17,7 @@
 
 This is not necessarily a straightforward question. If you are already familiar
 with running programs from the Windows command line then everything will seem
-obvious; otherwise, you might need a little more guidance.  There are also
-differences between Windows 95, 98, NT, ME, 2000 and XP which can add to the
-confusion.
+obvious; otherwise, you might need a little more guidance.
 
 .. sidebar:: |Python Development on XP|_
    :subtitle: `Python Development on XP`_
@@ -36,7 +34,7 @@
 Unless you use some sort of integrated development environment, you will end up
 *typing* Windows commands into what is variously referred to as a "DOS window"
 or "Command prompt window".  Usually you can create such a window from your
-Start menu; under Windows 2000 the menu selection is :menuselection:`Start -->
+Start menu; under Windows 7 the menu selection is :menuselection:`Start -->
 Programs --> Accessories --> Command Prompt`.  You should be able to recognize
 when you have started such a window because you will see a Windows "command
 prompt", which usually looks like this::
@@ -46,23 +44,27 @@
 The letter may be different, and there might be other things after it, so you
 might just as easily see something like::
 
-   D:\Steve\Projects\Python>
+   D:\YourName\Projects\Python>
 
 depending on how your computer has been set up and what else you have recently
 done with it.  Once you have started such a window, you are well on the way to
 running Python programs.
 
 You need to realize that your Python scripts have to be processed by another
-program called the Python interpreter.  The interpreter reads your script,
+program called the Python *interpreter*.  The interpreter reads your script,
 compiles it into bytecodes, and then executes the bytecodes to run your
 program. So, how do you arrange for the interpreter to handle your Python?
 
 First, you need to make sure that your command window recognises the word
 "python" as an instruction to start the interpreter.  If you have opened a
 command window, you should try entering the command ``python`` and hitting
-return.  You should then see something like::
+return.::
 
-   Python 2.2 (#28, Dec 21 2001, 12:21:22) [MSC 32 bit (Intel)] on win32
+   C:\Users\YourName> python
+
+You should then see something like::
+
+   Python 3.3.0 (v3.3.0:bd8afb90ebf2, Sep 29 2012, 10:55:48) [MSC v.1600 32 bit (Intel)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
 
@@ -82,7 +84,7 @@
 Windows command prompt.
 
 You may also find that you have a Start-menu entry such as :menuselection:`Start
---> Programs --> Python 2.2 --> Python (command line)` that results in you
+--> Programs --> Python 3.3 --> Python (command line)` that results in you
 seeing the ``>>>`` prompt in a new window.  If so, the window will disappear
 after you enter the Ctrl-Z character; Windows is running a single "python"
 command in the window, and closes it when you terminate the interpreter.
@@ -90,8 +92,7 @@
 If the ``python`` command, instead of displaying the interpreter prompt ``>>>``,
 gives you a message like::
 
-   'python' is not recognized as an internal or external command,
-   operable program or batch file.
+   'python' is not recognized as an internal or external command, operable program or batch file.
 
 .. sidebar:: |Adding Python to DOS Path|_
    :subtitle: `Adding Python to DOS Path`_
@@ -120,115 +121,33 @@
    dir C:\py*
 
 will probably tell you where it is installed; the usual location is something
-like ``C:\Python23``.  Otherwise you will be reduced to a search of your whole
+like ``C:\Python33``.  Otherwise you will be reduced to a search of your whole
 disk ... use :menuselection:`Tools --> Find` or hit the :guilabel:`Search`
 button and look for "python.exe".  Supposing you discover that Python is
-installed in the ``C:\Python23`` directory (the default at the time of writing),
+installed in the ``C:\Python33`` directory (the default at the time of writing),
 you should make sure that entering the command ::
 
-   c:\Python23\python
+   c:\Python33\python
 
 starts up the interpreter as above (and don't forget you'll need a "CTRL-Z" and
-an "Enter" to get out of it). Once you have verified the directory, you need to
-add it to the start-up routines your computer goes through.  For older versions
-of Windows the easiest way to do this is to edit the ``C:\AUTOEXEC.BAT``
-file. You would want to add a line like the following to ``AUTOEXEC.BAT``::
+an "Enter" to get out of it). Once you have verified the directory, you can
+add it to the system path to make it easier to start Python by just running
+the ``python`` command. This is currently an option in the installer as of
+CPython 3.3.
 
-   PATH C:\Python23;%PATH%
-
-For Windows NT, 2000 and (I assume) XP, you will need to add a string such as ::
-
-   ;C:\Python23
-
-to the current setting for the PATH environment variable, which you will find in
-the properties window of "My Computer" under the "Advanced" tab.  Note that if
-you have sufficient privilege you might get a choice of installing the settings
-either for the Current User or for System.  The latter is preferred if you want
-everybody to be able to run Python on the machine.
-
-If you aren't confident doing any of these manipulations yourself, ask for help!
-At this stage you may want to reboot your system to make absolutely sure the new
-setting has taken effect.  You probably won't need to reboot for Windows NT, XP
-or 2000.  You can also avoid it in earlier versions by editing the file
-``C:\WINDOWS\COMMAND\CMDINIT.BAT`` instead of ``AUTOEXEC.BAT``.
-
-You should now be able to start a new command window, enter ``python`` at the
-``C:\>`` (or whatever) prompt, and see the ``>>>`` prompt that indicates the
-Python interpreter is reading interactive commands.
-
-Let's suppose you have a program called ``pytest.py`` in directory
-``C:\Steve\Projects\Python``.  A session to run that program might look like
-this::
-
-   C:\> cd \Steve\Projects\Python
-   C:\Steve\Projects\Python> python pytest.py
-
-Because you added a file name to the command to start the interpreter, when it
-starts up it reads the Python script in the named file, compiles it, executes
-it, and terminates, so you see another ``C:\>`` prompt.  You might also have
-entered ::
-
-   C:\> python \Steve\Projects\Python\pytest.py
-
-if you hadn't wanted to change your current directory.
-
-Under NT, 2000 and XP you may well find that the installation process has also
-arranged that the command ``pytest.py`` (or, if the file isn't in the current
-directory, ``C:\Steve\Projects\Python\pytest.py``) will automatically recognize
-the ".py" extension and run the Python interpreter on the named file. Using this
-feature is fine, but *some* versions of Windows have bugs which mean that this
-form isn't exactly equivalent to using the interpreter explicitly, so be
-careful.
-
-The important things to remember are:
-
-1. Start Python from the Start Menu, or make sure the PATH is set correctly so
-   Windows can find the Python interpreter. ::
-
-      python
-
-   should give you a '>>>' prompt from the Python interpreter. Don't forget the
-   CTRL-Z and ENTER to terminate the interpreter (and, if you started the window
-   from the Start Menu, make the window disappear).
-
-2. Once this works, you run programs with commands::
-
-      python {program-file}
-
-3. When you know the commands to use you can build Windows shortcuts to run the
-   Python interpreter on any of your scripts, naming particular working
-   directories, and adding them to your menus.  Take a look at ::
-
-      python --help
-
-   if your needs are complex.
-
-4. Interactive mode (where you see the ``>>>`` prompt) is best used for checking
-   that individual statements and expressions do what you think they will, and
-   for developing code by experiment.
-
+More information about environment variables can be found on the
+:ref:`Using Python on Windows <setting-envvars>` page.
 
 How do I make Python scripts executable?
 ----------------------------------------
 
-On Windows 2000, the standard Python installer already associates the .py
+On Windows, the standard Python installer already associates the .py
 extension with a file type (Python.File) and gives that file type an open
 command that runs the interpreter (``D:\Program Files\Python\python.exe "%1"
 %*``).  This is enough to make scripts executable from the command prompt as
 'foo.py'.  If you'd rather be able to execute the script by simple typing 'foo'
 with no extension you need to add .py to the PATHEXT environment variable.
 
-On Windows NT, the steps taken by the installer as described above allow you to
-run a script with 'foo.py', but a longtime bug in the NT command processor
-prevents you from redirecting the input or output of any script executed in this
-way.  This is often important.
-
-The incantation for making a Python script executable under WinNT is to give the
-file an extension of .cmd and add the following as the first line::
-
-   @setlocal enableextensions & python -x %~f0 %* & goto :EOF
-
-
 Why does Python sometimes take so long to start?
 ------------------------------------------------
 
@@ -246,22 +165,11 @@
 offender.
 
 
-Where is Freeze for Windows?
-----------------------------
+How do I make an executable from a Python script?
+-------------------------------------------------
 
-"Freeze" is a program that allows you to ship a Python program as a single
-stand-alone executable file.  It is *not* a compiler; your programs don't run
-any faster, but they are more easily distributable, at least to platforms with
-the same OS and CPU.  Read the README file of the freeze program for more
-disclaimers.
-
-You can use freeze on Windows, but you must download the source tree (see
-http://www.python.org/download/source).  The freeze program is in the
-``Tools\freeze`` subdirectory of the source tree.
-
-You need the Microsoft VC++ compiler, and you probably need to build Python.
-The required project files are in the PCbuild directory.
-
+See http://www.py2exe.org/ for a distutils extension that allows you
+to create console and GUI executables from Python code.
 
 Is a ``*.pyd`` file the same as a DLL?
 --------------------------------------
@@ -292,7 +200,7 @@
    be a DLL to handle importing modules that are themselves DLL's.  (This is the
    first key undocumented fact.)  Instead, link to :file:`python{NN}.dll`; it is
    typically installed in ``C:\Windows\System``.  *NN* is the Python version, a
-   number such as "23" for Python 2.3.
+   number such as "33" for Python 3.3.
 
    You can link to Python in two different ways.  Load-time linking means
    linking against :file:`python{NN}.lib`, while run-time linking means linking
@@ -376,47 +284,6 @@
    object that supports read and write, so all you need is a Python object
    (defined in your extension module) that contains read() and write() methods.
 
-
-How do I use Python for CGI?
-----------------------------
-
-On the Microsoft IIS server or on the Win95 MS Personal Web Server you set up
-Python in the same way that you would set up any other scripting engine.
-
-Run regedt32 and go to::
-
-    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\ScriptMap
-
-and enter the following line (making any specific changes that your system may
-need)::
-
-    .py :REG_SZ: c:\<path to python>\python.exe -u %s %s
-
-This line will allow you to call your script with a simple reference like:
-``http://yourserver/scripts/yourscript.py`` provided "scripts" is an
-"executable" directory for your server (which it usually is by default).  The
-:option:`-u` flag specifies unbuffered and binary mode for stdin - needed when
-working with binary data.
-
-In addition, it is recommended that using ".py" may not be a good idea for the
-file extensions when used in this context (you might want to reserve ``*.py``
-for support modules and use ``*.cgi`` or ``*.cgp`` for "main program" scripts).
-
-In order to set up Internet Information Services 5 to use Python for CGI
-processing, please see the following links:
-
-   http://www.e-coli.net/pyiis_server.html (for Win2k Server)
-   http://www.e-coli.net/pyiis.html (for Win2k pro)
-
-Configuring Apache is much simpler.  In the Apache configuration file
-``httpd.conf``, add the following line at the end of the file::
-
-    ScriptInterpreterSource Registry
-
-Then, give your Python CGI-scripts the extension .py and put them in the cgi-bin
-directory.
-
-
 How do I keep editors from inserting tabs into my Python source?
 ----------------------------------------------------------------
 
@@ -460,116 +327,6 @@
 to console subprocesses which are designed to handle those signals. See
 :func:`os.kill` for further details.
 
-
-Why does os.path.isdir() fail on NT shared directories?
--------------------------------------------------------
-
-The solution appears to be always append the "\\" on the end of shared
-drives.
-
-   >>> import os
-   >>> os.path.isdir( '\\\\rorschach\\public')
-   0
-   >>> os.path.isdir( '\\\\rorschach\\public\\')
-   1
-
-It helps to think of share points as being like drive letters.  Example::
-
-   k: is not a directory
-   k:\ is a directory
-   k:\media is a directory
-   k:\media\ is not a directory
-
-The same rules apply if you substitute "k:" with "\\conky\foo"::
-
-   \\conky\foo  is not a directory
-   \\conky\foo\ is a directory
-   \\conky\foo\media is a directory
-   \\conky\foo\media\ is not a directory
-
-
-cgi.py (or other CGI programming) doesn't work sometimes on NT or win95!
-------------------------------------------------------------------------
-
-Be sure you have the latest python.exe, that you are using python.exe rather
-than a GUI version of Python and that you have configured the server to execute
-::
-
-   "...\python.exe -u ..."
-
-for the CGI execution.  The :option:`-u` (unbuffered) option on NT and Win95
-prevents the interpreter from altering newlines in the standard input and
-output.  Without it post/multipart requests will seem to have the wrong length
-and binary (e.g. GIF) responses may get garbled (resulting in broken images, PDF
-files, and other binary downloads failing).
-
-
-Why doesn't os.popen() work in PythonWin on NT?
------------------------------------------------
-
-The reason that os.popen() doesn't work from within PythonWin is due to a bug in
-Microsoft's C Runtime Library (CRT). The CRT assumes you have a Win32 console
-attached to the process.
-
-You should use the win32pipe module's popen() instead which doesn't depend on
-having an attached Win32 console.
-
-Example::
-
-   import win32pipe
-   f = win32pipe.popen('dir /c c:\\')
-   print(f.readlines())
-   f.close()
-
-
-Why doesn't os.popen()/win32pipe.popen() work on Win9x?
--------------------------------------------------------
-
-There is a bug in Win9x that prevents os.popen/win32pipe.popen* from
-working. The good news is there is a way to work around this problem.  The
-Microsoft Knowledge Base article that you need to lookup is: Q150956. You will
-find links to the knowledge base at: http://support.microsoft.com/.
-
-
-PyRun_SimpleFile() crashes on Windows but not on Unix; why?
------------------------------------------------------------
-
-This is very sensitive to the compiler vendor, version and (perhaps) even
-options.  If the FILE* structure in your embedding program isn't the same as is
-assumed by the Python interpreter it won't work.
-
-The Python 1.5.* DLLs (``python15.dll``) are all compiled with MS VC++ 5.0 and
-with multithreading-DLL options (``/MD``).
-
-If you can't change compilers or flags, try using :c:func:`Py_RunSimpleString`.
-A trick to get it to run an arbitrary file is to construct a call to
-:func:`exec` and :func:`open` with the name of your file as argument.
-
-Also note that you can not mix-and-match Debug and Release versions.  If you
-wish to use the Debug Multithreaded DLL, then your module *must* have ``_d``
-appended to the base name.
-
-
-Importing _tkinter fails on Windows 95/98: why?
-------------------------------------------------
-
-Sometimes, the import of _tkinter fails on Windows 95 or 98, complaining with a
-message like the following::
-
-   ImportError: DLL load failed: One of the library files needed
-   to run this application cannot be found.
-
-It could be that you haven't installed Tcl/Tk, but if you did install Tcl/Tk,
-and the Wish application works correctly, the problem may be that its installer
-didn't manage to edit the autoexec.bat file correctly.  It tries to add a
-statement that changes the PATH environment variable to include the Tcl/Tk 'bin'
-subdirectory, but sometimes this edit doesn't quite work.  Opening it with
-notepad usually reveals what the problem is.
-
-(One additional hint, noted by David Szafranski: you can't use long filenames
-here; e.g. use ``C:\PROGRA~1\Tcl\bin`` instead of ``C:\Program Files\Tcl\bin``.)
-
-
 How do I extract the downloaded documentation on Windows?
 ---------------------------------------------------------
 
@@ -581,38 +338,3 @@
 able to handle it.  (If your copy of WinZip doesn't, get a newer one from
 http://www.winzip.com.)
 
-
-Missing cw3215mt.dll (or missing cw3215.dll)
---------------------------------------------
-
-Sometimes, when using Tkinter on Windows, you get an error that cw3215mt.dll or
-cw3215.dll is missing.
-
-Cause: you have an old Tcl/Tk DLL built with cygwin in your path (probably
-``C:\Windows``).  You must use the Tcl/Tk DLLs from the standard Tcl/Tk
-installation (Python 1.5.2 comes with one).
-
-
-Warning about CTL3D32 version from installer
---------------------------------------------
-
-The Python installer issues a warning like this::
-
-   This version uses CTL3D32.DLL which is not the correct version.
-   This version is used for windows NT applications only.
-
-Tim Peters:
-
-   This is a Microsoft DLL, and a notorious source of problems.  The message
-   means what it says: you have the wrong version of this DLL for your operating
-   system.  The Python installation did not cause this -- something else you
-   installed previous to this overwrote the DLL that came with your OS (probably
-   older shareware of some sort, but there's no way to tell now).  If you search
-   for "CTL3D32" using any search engine (AltaVista, for example), you'll find
-   hundreds and hundreds of web pages complaining about the same problem with
-   all sorts of installation programs.  They'll point you to ways to get the
-   correct version reinstalled on your system (since Python doesn't cause this,
-   we can't fix it).
-
-David A Burton has written a little program to fix this.  Go to
-http://www.burtonsys.com/downloads.html and click on "ctl3dfix.zip".
diff -r bd8afb90ebf2 Doc/glossary.rst
--- a/Doc/glossary.rst
+++ b/Doc/glossary.rst
@@ -40,16 +40,34 @@
       ABCs with the :mod:`abc` module.
 
    argument
-      A value passed to a function or method, assigned to a named local
-      variable in the function body.  A function or method may have both
-      positional arguments and keyword arguments in its definition.
-      Positional and keyword arguments may be variable-length: ``*`` accepts
-      or passes (if in the function definition or call) several positional
-      arguments in a list, while ``**`` does the same for keyword arguments
-      in a dictionary.
+      A value passed to a :term:`function` (or :term:`method`) when calling the
+      function.  There are two types of arguments:
 
-      Any expression may be used within the argument list, and the evaluated
-      value is passed to the local variable.
+      * :dfn:`keyword argument`: an argument preceded by an identifier (e.g.
+        ``name=``) in a function call or passed as a value in a dictionary
+        preceded by ``**``.  For example, ``3`` and ``5`` are both keyword
+        arguments in the following calls to :func:`complex`::
+
+           complex(real=3, imag=5)
+           complex(**{'real': 3, 'imag': 5})
+
+      * :dfn:`positional argument`: an argument that is not a keyword argument.
+        Positional arguments can appear at the beginning of an argument list
+        and/or be passed as elements of an :term:`iterable` preceded by ``*``.
+        For example, ``3`` and ``5`` are both positional arguments in the
+        following calls::
+
+           complex(3, 5)
+           complex(*(3, 5))
+
+      Arguments are assigned to the named local variables in a function body.
+      See the :ref:`calls` section for the rules governing this assignment.
+      Syntactically, any expression can be used to represent an argument; the
+      evaluated value is assigned to the local variable.
+
+      See also the :term:`parameter` glossary entry, the FAQ question on
+      :ref:`the difference between arguments and parameters
+      <faq-argument-vs-parameter>`, and :pep:`362`.
 
    attribute
       A value associated with an object which is referenced by name using
@@ -365,7 +383,7 @@
 
    iterator
       An object representing a stream of data.  Repeated calls to the iterator's
-      :meth:`__next__` method (or passing it to the built-in function
+      :meth:`~iterator.__next__` method (or passing it to the built-in function
       :func:`next`) return successive items in the stream.  When no more data
       are available a :exc:`StopIteration` exception is raised instead.  At this
       point, the iterator object is exhausted and any further calls to its
@@ -402,10 +420,7 @@
       <sortinghowto>` for examples of how to create and use key functions.
 
    keyword argument
-      Arguments which are preceded with a ``variable_name=`` in the call.
-      The variable name designates the local name in the function to which the
-      value is assigned.  ``**`` is used to accept or pass a dictionary of
-      keyword arguments.  See :term:`argument`.
+      See :term:`argument`.
 
    lambda
       An anonymous inline function consisting of a single :term:`expression`
@@ -548,6 +563,53 @@
       subpackages.  Technically, a package is a Python module with an
       ``__path__`` attribute.
 
+   parameter
+      A named entity in a :term:`function` (or method) definition that
+      specifies an :term:`argument` (or in some cases, arguments) that the
+      function can accept.  There are five types of parameters:
+
+      * :dfn:`positional-or-keyword`: specifies an argument that can be passed
+        either :term:`positionally <argument>` or as a :term:`keyword argument
+        <argument>`.  This is the default kind of parameter, for example *foo*
+        and *bar* in the following::
+
+           def func(foo, bar=None): ...
+
+      * :dfn:`positional-only`: specifies an argument that can be supplied only
+        by position.  Python has no syntax for defining positional-only
+        parameters.  However, some built-in functions have positional-only
+        parameters (e.g. :func:`abs`).
+
+      * :dfn:`keyword-only`: specifies an argument that can be supplied only
+        by keyword.  Keyword-only parameters can be defined by including a
+        single var-positional parameter or bare ``*`` in the parameter list
+        of the function definition before them, for example *kw_only1* and
+        *kw_only2* in the following::
+
+           def func(arg, *, kw_only1, kw_only2): ...
+
+      * :dfn:`var-positional`: specifies that an arbitrary sequence of
+        positional arguments can be provided (in addition to any positional
+        arguments already accepted by other parameters).  Such a parameter can
+        be defined by prepending the parameter name with ``*``, for example
+        *args* in the following::
+
+           def func(*args, **kwargs): ...
+
+      * :dfn:`var-keyword`: specifies that arbitrarily many keyword arguments
+        can be provided (in addition to any keyword arguments already accepted
+        by other parameters).  Such a parameter can be defined by prepending
+        the parameter name with ``**``, for example *kwargs* in the example
+        above.
+
+      Parameters can specify both optional and required arguments, as well as
+      default values for some optional arguments.
+
+      See also the :term:`argument` glossary entry, the FAQ question on
+      :ref:`the difference between arguments and parameters
+      <faq-argument-vs-parameter>`, the :class:`inspect.Parameter` class, the
+      :ref:`function` section, and :pep:`362`.
+
    path entry
       A single location on the :term:`import path` which the :term:`path
       based finder` consults to find modules for importing.
@@ -571,11 +633,7 @@
       that contribute to a namespace package, as defined in :pep:`420`.
 
    positional argument
-      The arguments assigned to local names inside a function or method,
-      determined by the order in which they were given in the call.  ``*`` is
-      used to either accept multiple positional arguments (when in the
-      definition), or pass several arguments as a list to a function.  See
-      :term:`argument`.
+      See :term:`argument`.
 
    provisional package
       A provisional package is one which has been deliberately excluded from
@@ -660,7 +718,7 @@
    sequence
       An :term:`iterable` which supports efficient element access using integer
       indices via the :meth:`__getitem__` special method and defines a
-      :meth:`len` method that returns the length of the sequence.
+      :meth:`__len__` method that returns the length of the sequence.
       Some built-in sequence types are :class:`list`, :class:`str`,
       :class:`tuple`, and :class:`bytes`. Note that :class:`dict` also
       supports :meth:`__getitem__` and :meth:`__len__`, but is considered a
diff -r bd8afb90ebf2 Doc/howto/cporting.rst
--- a/Doc/howto/cporting.rst
+++ b/Doc/howto/cporting.rst
@@ -253,7 +253,7 @@
 
   * :c:func:`PyCapsule_GetName` always returns NULL.
 
-  * :c:func:`PyCapsule_SetName` always throws an exception and
+  * :c:func:`PyCapsule_SetName` always raises an exception and
     returns failure.  (Since there's no way to store a name
     in a CObject, noisy failure of :c:func:`PyCapsule_SetName`
     was deemed preferable to silent failure here.  If this is
diff -r bd8afb90ebf2 Doc/howto/functional.rst
--- a/Doc/howto/functional.rst
+++ b/Doc/howto/functional.rst
@@ -181,26 +181,26 @@
 
 An iterator is an object representing a stream of data; this object returns the
 data one element at a time.  A Python iterator must support a method called
-``__next__()`` that takes no arguments and always returns the next element of
-the stream.  If there are no more elements in the stream, ``__next__()`` must
-raise the ``StopIteration`` exception.  Iterators don't have to be finite,
-though; it's perfectly reasonable to write an iterator that produces an infinite
-stream of data.
+:meth:`~iterator.__next__` that takes no arguments and always returns the next
+element of the stream.  If there are no more elements in the stream,
+:meth:`~iterator.__next__` must raise the :exc:`StopIteration` exception.
+Iterators don't have to be finite, though; it's perfectly reasonable to write
+an iterator that produces an infinite stream of data.
 
 The built-in :func:`iter` function takes an arbitrary object and tries to return
 an iterator that will return the object's contents or elements, raising
 :exc:`TypeError` if the object doesn't support iteration.  Several of Python's
 built-in data types support iteration, the most common being lists and
-dictionaries.  An object is called an **iterable** object if you can get an
-iterator for it.
+dictionaries.  An object is called :term:`iterable` if you can get an iterator
+for it.
 
 You can experiment with the iteration interface manually:
 
     >>> L = [1,2,3]
     >>> it = iter(L)
-    >>> it
+    >>> it  #doctest: +ELLIPSIS
     <...iterator object at ...>
-    >>> it.__next__()
+    >>> it.__next__()  # same as next(it)
     1
     >>> next(it)
     2
@@ -213,9 +213,9 @@
     >>>
 
 Python expects iterable objects in several different contexts, the most
-important being the ``for`` statement.  In the statement ``for X in Y``, Y must
-be an iterator or some object for which ``iter()`` can create an iterator.
-These two statements are equivalent::
+important being the :keyword:`for` statement.  In the statement ``for X in Y``,
+Y must be an iterator or some object for which :func:`iter` can create an
+iterator.  These two statements are equivalent::
 
 
     for i in iter(obj):
@@ -246,16 +246,16 @@
 iterator argument and will return the largest or smallest element.  The ``"in"``
 and ``"not in"`` operators also support iterators: ``X in iterator`` is true if
 X is found in the stream returned by the iterator.  You'll run into obvious
-problems if the iterator is infinite; ``max()``, ``min()``
+problems if the iterator is infinite; :func:`max`, :func:`min`
 will never return, and if the element X never appears in the stream, the
 ``"in"`` and ``"not in"`` operators won't return either.
 
 Note that you can only go forward in an iterator; there's no way to get the
 previous element, reset the iterator, or make a copy of it.  Iterator objects
 can optionally provide these additional capabilities, but the iterator protocol
-only specifies the ``next()`` method.  Functions may therefore consume all of
-the iterator's output, and if you need to do something different with the same
-stream, you'll have to create a new iterator.
+only specifies the :meth:`~iterator.__next__` method.  Functions may therefore
+consume all of the iterator's output, and if you need to do something different
+with the same stream, you'll have to create a new iterator.
 
 
 
@@ -267,15 +267,11 @@
 iterator.
 
 Calling :func:`iter` on a dictionary returns an iterator that will loop over the
-dictionary's keys:
-
-.. not a doctest since dict ordering varies across Pythons
-
-::
+dictionary's keys::
 
     >>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
     ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
-    >>> for key in m:
+    >>> for key in m:  #doctest: +SKIP
     ...     print(key, m[key])
     Mar 3
     Feb 2
@@ -296,18 +292,19 @@
 Applying :func:`iter` to a dictionary always loops over the keys, but
 dictionaries have methods that return other iterators.  If you want to iterate
 over values or key/value pairs, you can explicitly call the
-:meth:`values` or :meth:`items` methods to get an appropriate iterator.
+:meth:`~dict.values` or :meth:`~dict.items` methods to get an appropriate
+iterator.
 
 The :func:`dict` constructor can accept an iterator that returns a finite stream
 of ``(key, value)`` tuples:
 
     >>> L = [('Italy', 'Rome'), ('France', 'Paris'), ('US', 'Washington DC')]
-    >>> dict(iter(L))
+    >>> dict(iter(L))  #doctest: +SKIP
     {'Italy': 'Rome', 'US': 'Washington DC', 'France': 'Paris'}
 
-Files also support iteration by calling the ``readline()`` method until there
-are no more lines in the file.  This means you can read each line of a file like
-this::
+Files also support iteration by calling the :meth:`~io.TextIOBase.readline`
+method until there are no more lines in the file.  This means you can read each
+line of a file like this::
 
     for line in file:
         # do something for each line
@@ -410,12 +407,9 @@
 lengths of all the sequences.  If you have two lists of length 3, the output
 list is 9 elements long:
 
-.. doctest::
-    :options: +NORMALIZE_WHITESPACE
-
     >>> seq1 = 'abc'
     >>> seq2 = (1,2,3)
-    >>> [(x,y) for x in seq1 for y in seq2]
+    >>> [(x, y) for x in seq1 for y in seq2]  #doctest: +NORMALIZE_WHITESPACE
     [('a', 1), ('a', 2), ('a', 3),
      ('b', 1), ('b', 2), ('b', 3),
      ('c', 1), ('c', 2), ('c', 3)]
@@ -425,9 +419,9 @@
 comprehension below is a syntax error, while the second one is correct::
 
     # Syntax error
-    [ x,y for x in seq1 for y in seq2]
+    [x, y for x in seq1 for y in seq2]
     # Correct
-    [ (x,y) for x in seq1 for y in seq2]
+    [(x, y) for x in seq1 for y in seq2]
 
 
 Generators
@@ -448,15 +442,13 @@
 
 Here's the simplest example of a generator function:
 
-.. testcode::
+    >>> def generate_ints(N):
+    ...    for i in range(N):
+    ...        yield i
 
-    def generate_ints(N):
-        for i in range(N):
-            yield i
-
-Any function containing a ``yield`` keyword is a generator function; this is
-detected by Python's :term:`bytecode` compiler which compiles the function
-specially as a result.
+Any function containing a :keyword:`yield` keyword is a generator function;
+this is detected by Python's :term:`bytecode` compiler which compiles the
+function specially as a result.
 
 When you call a generator function, it doesn't return a single value; instead it
 returns a generator object that supports the iterator protocol.  On executing
@@ -464,12 +456,13 @@
 ``return`` statement.  The big difference between ``yield`` and a ``return``
 statement is that on reaching a ``yield`` the generator's state of execution is
 suspended and local variables are preserved.  On the next call to the
-generator's ``.__next__()`` method, the function will resume executing.
+generator's :meth:`~generator.__next__` method, the function will resume
+executing.
 
 Here's a sample usage of the ``generate_ints()`` generator:
 
     >>> gen = generate_ints(3)
-    >>> gen
+    >>> gen  #doctest: +ELLIPSIS
     <generator object generate_ints at ...>
     >>> next(gen)
     0
@@ -491,17 +484,19 @@
 ``return`` the generator cannot return any further values.  ``return`` with a
 value, such as ``return 5``, is a syntax error inside a generator function.  The
 end of the generator's results can also be indicated by raising
-``StopIteration`` manually, or by just letting the flow of execution fall off
+:exc:`StopIteration` manually, or by just letting the flow of execution fall off
 the bottom of the function.
 
 You could achieve the effect of generators manually by writing your own class
 and storing all the local variables of the generator as instance variables.  For
 example, returning a list of integers could be done by setting ``self.count`` to
-0, and having the ``__next__()`` method increment ``self.count`` and return it.
+0, and having the :meth:`~iterator.__next__` method increment ``self.count`` and
+return it.
 However, for a moderately complicated generator, writing a corresponding class
 can be much messier.
 
-The test suite included with Python's library, ``test_generators.py``, contains
+The test suite included with Python's library,
+:source:`Lib/test/test_generators.py`, contains
 a number of more interesting examples.  Here's one generator that implements an
 in-order traversal of a tree using generators recursively. ::
 
@@ -544,23 +539,23 @@
 The parentheses aren't always necessary, but it's easier to always add them
 instead of having to remember when they're needed.
 
-(PEP 342 explains the exact rules, which are that a ``yield``-expression must
+(:pep:`342` explains the exact rules, which are that a ``yield``-expression must
 always be parenthesized except when it occurs at the top-level expression on the
 right-hand side of an assignment.  This means you can write ``val = yield i``
 but have to use parentheses when there's an operation, as in ``val = (yield i)
 + 12``.)
 
-Values are sent into a generator by calling its ``send(value)`` method.  This
-method resumes the generator's code and the ``yield`` expression returns the
-specified value.  If the regular ``__next__()`` method is called, the ``yield``
-returns ``None``.
+Values are sent into a generator by calling its :meth:`send(value)
+<generator.send>` method.  This method resumes the generator's code and the
+``yield`` expression returns the specified value.  If the regular
+:meth:`~generator.__next__` method is called, the ``yield`` returns ``None``.
 
 Here's a simple counter that increments by 1 and allows changing the value of
 the internal counter.
 
 .. testcode::
 
-    def counter (maximum):
+    def counter(maximum):
         i = 0
         while i < maximum:
             val = (yield i)
@@ -572,16 +567,16 @@
 
 And here's an example of changing the counter:
 
-    >>> it = counter(10)
-    >>> next(it)
+    >>> it = counter(10)  #doctest: +SKIP
+    >>> next(it)  #doctest: +SKIP
     0
-    >>> next(it)
+    >>> next(it)  #doctest: +SKIP
     1
-    >>> it.send(8)
+    >>> it.send(8)  #doctest: +SKIP
     8
-    >>> next(it)
+    >>> next(it)  #doctest: +SKIP
     9
-    >>> next(it)
+    >>> next(it)  #doctest: +SKIP
     Traceback (most recent call last):
       File "t.py", line 15, in ?
         it.next()
@@ -589,20 +584,23 @@
 
 Because ``yield`` will often be returning ``None``, you should always check for
 this case.  Don't just use its value in expressions unless you're sure that the
-``send()`` method will be the only method used resume your generator function.
+:meth:`~generator.send` method will be the only method used resume your
+generator function.
 
-In addition to ``send()``, there are two other new methods on generators:
+In addition to :meth:`~generator.send`, there are two other methods on
+generators:
 
-* ``throw(type, value=None, traceback=None)`` is used to raise an exception
-  inside the generator; the exception is raised by the ``yield`` expression
-  where the generator's execution is paused.
+* :meth:`throw(type, value=None, traceback=None) <generator.throw>` is used to
+  raise an exception inside the generator; the exception is raised by the
+  ``yield`` expression where the generator's execution is paused.
 
-* ``close()`` raises a :exc:`GeneratorExit` exception inside the generator to
-  terminate the iteration.  On receiving this exception, the generator's code
-  must either raise :exc:`GeneratorExit` or :exc:`StopIteration`; catching the
-  exception and doing anything else is illegal and will trigger a
-  :exc:`RuntimeError`.  ``close()`` will also be called by Python's garbage
-  collector when the generator is garbage-collected.
+* :meth:`~generator.close` raises a :exc:`GeneratorExit` exception inside the
+  generator to terminate the iteration.  On receiving this exception, the
+  generator's code must either raise :exc:`GeneratorExit` or
+  :exc:`StopIteration`; catching the exception and doing anything else is
+  illegal and will trigger a :exc:`RuntimeError`.  :meth:`~generator.close`
+  will also be called by Python's garbage collector when the generator is
+  garbage-collected.
 
   If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I suggest
   using a ``try: ... finally:`` suite instead of catching :exc:`GeneratorExit`.
@@ -624,13 +622,12 @@
 Two of Python's built-in functions, :func:`map` and :func:`filter` duplicate the
 features of generator expressions:
 
-``map(f, iterA, iterB, ...)`` returns an iterator over the sequence
+:func:`map(f, iterA, iterB, ...) <map>` returns an iterator over the sequence
  ``f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ...``.
 
     >>> def upper(s):
     ...     return s.upper()
 
-
     >>> list(map(upper, ['sentence', 'fragment']))
     ['SENTENCE', 'FRAGMENT']
     >>> [upper(s) for s in ['sentence', 'fragment']]
@@ -638,11 +635,11 @@
 
 You can of course achieve the same effect with a list comprehension.
 
-``filter(predicate, iter)`` returns an iterator over all the sequence elements
-that meet a certain condition, and is similarly duplicated by list
-comprehensions.  A **predicate** is a function that returns the truth value of
-some condition; for use with :func:`filter`, the predicate must take a single
-value.
+:func:`filter(predicate, iter) <filter>` returns an iterator over all the
+sequence elements that meet a certain condition, and is similarly duplicated by
+list comprehensions.  A **predicate** is a function that returns the truth
+value of some condition; for use with :func:`filter`, the predicate must take a
+single value.
 
     >>> def is_even(x):
     ...     return (x % 2) == 0
@@ -657,8 +654,8 @@
     [0, 2, 4, 6, 8]
 
 
-``enumerate(iter)`` counts off the elements in the iterable, returning 2-tuples
-containing the count and each element. ::
+:func:`enumerate(iter) <enumerate>` counts off the elements in the iterable,
+returning 2-tuples containing the count and each element. ::
 
     >>> for item in enumerate(['subject', 'verb', 'object']):
     ...     print(item)
@@ -674,29 +671,28 @@
         if line.strip() == '':
             print('Blank line at line #%i' % i)
 
-``sorted(iterable, [key=None], [reverse=False])`` collects all the elements of
-the iterable into a list, sorts the list, and returns the sorted result.  The
-``key``, and ``reverse`` arguments are passed through to the constructed list's
-``.sort()`` method. ::
+:func:`sorted(iterable, key=None, reverse=False) <sorted>` collects all the
+elements of the iterable into a list, sorts the list, and returns the sorted
+result.  The *key*, and *reverse* arguments are passed through to the
+constructed list's :meth:`~list.sort` method. ::
 
     >>> import random
     >>> # Generate 8 random numbers between [0, 10000)
     >>> rand_list = random.sample(range(10000), 8)
-    >>> rand_list
+    >>> rand_list  #doctest: +SKIP
     [769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]
-    >>> sorted(rand_list)
+    >>> sorted(rand_list)  #doctest: +SKIP
     [769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]
-    >>> sorted(rand_list, reverse=True)
+    >>> sorted(rand_list, reverse=True)  #doctest: +SKIP
     [9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]
 
-(For a more detailed discussion of sorting, see the Sorting mini-HOWTO in the
-Python wiki at http://wiki.python.org/moin/HowTo/Sorting.)
+(For a more detailed discussion of sorting, see the :ref:`sortinghowto`.)
 
 
-The ``any(iter)`` and ``all(iter)`` built-ins look at the truth values of an
-iterable's contents.  :func:`any` returns True if any element in the iterable is
-a true value, and :func:`all` returns True if all of the elements are true
-values:
+The :func:`any(iter) <any>` and :func:`all(iter) <all>` built-ins look at the
+truth values of an iterable's contents.  :func:`any` returns True if any element
+in the iterable is a true value, and :func:`all` returns True if all of the
+elements are true values:
 
     >>> any([0,1,0])
     True
@@ -712,7 +708,7 @@
     True
 
 
-``zip(iterA, iterB, ...)`` takes one element from each iterable and
+:func:`zip(iterA, iterB, ...) <zip>` takes one element from each iterable and
 returns them in a tuple::
 
     zip(['a', 'b', 'c'], (1, 2, 3)) =>
@@ -752,42 +748,44 @@
 Creating new iterators
 ----------------------
 
-``itertools.count(n)`` returns an infinite stream of integers, increasing by 1
-each time.  You can optionally supply the starting number, which defaults to 0::
+:func:`itertools.count(n) <itertools.count>` returns an infinite stream of
+integers, increasing by 1 each time.  You can optionally supply the starting
+number, which defaults to 0::
 
     itertools.count() =>
       0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...
     itertools.count(10) =>
       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...
 
-``itertools.cycle(iter)`` saves a copy of the contents of a provided iterable
-and returns a new iterator that returns its elements from first to last.  The
-new iterator will repeat these elements infinitely. ::
+:func:`itertools.cycle(iter) <itertools.cycle>` saves a copy of the contents of
+a provided iterable and returns a new iterator that returns its elements from
+first to last.  The new iterator will repeat these elements infinitely. ::
 
     itertools.cycle([1,2,3,4,5]) =>
       1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
 
-``itertools.repeat(elem, [n])`` returns the provided element ``n`` times, or
-returns the element endlessly if ``n`` is not provided. ::
+:func:`itertools.repeat(elem, [n]) <itertools.repeat>` returns the provided
+element *n* times, or returns the element endlessly if *n* is not provided. ::
 
     itertools.repeat('abc') =>
       abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...
     itertools.repeat('abc', 5) =>
       abc, abc, abc, abc, abc
 
-``itertools.chain(iterA, iterB, ...)`` takes an arbitrary number of iterables as
-input, and returns all the elements of the first iterator, then all the elements
-of the second, and so on, until all of the iterables have been exhausted. ::
+:func:`itertools.chain(iterA, iterB, ...) <itertools.chain>` takes an arbitrary
+number of iterables as input, and returns all the elements of the first
+iterator, then all the elements of the second, and so on, until all of the
+iterables have been exhausted. ::
 
     itertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>
       a, b, c, 1, 2, 3
 
-``itertools.islice(iter, [start], stop, [step])`` returns a stream that's a
-slice of the iterator.  With a single ``stop`` argument, it will return the
-first ``stop`` elements.  If you supply a starting index, you'll get
-``stop-start`` elements, and if you supply a value for ``step``, elements will
-be skipped accordingly.  Unlike Python's string and list slicing, you can't use
-negative values for ``start``, ``stop``, or ``step``. ::
+:func:`itertools.islice(iter, [start], stop, [step]) <itertools.islice>` returns
+a stream that's a slice of the iterator.  With a single *stop* argument, it
+will return the first *stop* elements.  If you supply a starting index, you'll
+get *stop-start* elements, and if you supply a value for *step*, elements
+will be skipped accordingly.  Unlike Python's string and list slicing, you can't
+use negative values for *start*, *stop*, or *step*. ::
 
     itertools.islice(range(10), 8) =>
       0, 1, 2, 3, 4, 5, 6, 7
@@ -796,9 +794,10 @@
     itertools.islice(range(10), 2, 8, 2) =>
       2, 4, 6
 
-``itertools.tee(iter, [n])`` replicates an iterator; it returns ``n``
-independent iterators that will all return the contents of the source iterator.
-If you don't supply a value for ``n``, the default is 2.  Replicating iterators
+:func:`itertools.tee(iter, [n]) <itertools.tee>` replicates an iterator; it
+returns *n* independent iterators that will all return the contents of the
+source iterator.
+If you don't supply a value for *n*, the default is 2.  Replicating iterators
 requires saving some of the contents of the source iterator, so this can consume
 significant memory if the iterator is large and one of the new iterators is
 consumed more than the others. ::
@@ -816,19 +815,21 @@
 Calling functions on elements
 -----------------------------
 
-The ``operator`` module contains a set of functions corresponding to Python's
-operators.  Some examples are ``operator.add(a, b)`` (adds two values),
-``operator.ne(a, b)`` (same as ``a!=b``), and ``operator.attrgetter('id')``
-(returns a callable that fetches the ``"id"`` attribute).
+The :mod:`operator` module contains a set of functions corresponding to Python's
+operators.  Some examples are :func:`operator.add(a, b) <operator.add>` (adds
+two values), :func:`operator.ne(a, b)  <operator.ne>` (same as ``a != b``), and
+:func:`operator.attrgetter('id') <operator.attrgetter>`
+(returns a callable that fetches the ``.id`` attribute).
 
-``itertools.starmap(func, iter)`` assumes that the iterable will return a stream
-of tuples, and calls ``f()`` using these tuples as the arguments::
+:func:`itertools.starmap(func, iter) <itertools.starmap>` assumes that the
+iterable will return a stream of tuples, and calls *func* using these tuples as
+the arguments::
 
     itertools.starmap(os.path.join,
-                      [('/usr', 'bin', 'java'), ('/bin', 'python'),
-                       ('/usr', 'bin', 'perl'),('/usr', 'bin', 'ruby')])
+                      [('/bin', 'python'), ('/usr', 'bin', 'java'),
+                       ('/usr', 'bin', 'perl'), ('/usr', 'bin', 'ruby')])
     =>
-      /usr/bin/java, /bin/python, /usr/bin/perl, /usr/bin/ruby
+      /bin/python, /usr/bin/java, /usr/bin/perl, /usr/bin/ruby
 
 
 Selecting elements
@@ -837,20 +838,18 @@
 Another group of functions chooses a subset of an iterator's elements based on a
 predicate.
 
-``itertools.filterfalse(predicate, iter)`` is the opposite, returning all
-elements for which the predicate returns false::
+:func:`itertools.filterfalse(predicate, iter) <itertools.filterfalse>` is the
+opposite, returning all elements for which the predicate returns false::
 
     itertools.filterfalse(is_even, itertools.count()) =>
       1, 3, 5, 7, 9, 11, 13, 15, ...
 
-``itertools.takewhile(predicate, iter)`` returns elements for as long as the
-predicate returns true.  Once the predicate returns false, the iterator will
-signal the end of its results.
-
-::
+:func:`itertools.takewhile(predicate, iter) <itertools.takewhile>` returns
+elements for as long as the predicate returns true.  Once the predicate returns
+false, the iterator will signal the end of its results. ::
 
     def less_than_10(x):
-        return (x < 10)
+        return x < 10
 
     itertools.takewhile(less_than_10, itertools.count()) =>
       0, 1, 2, 3, 4, 5, 6, 7, 8, 9
@@ -858,10 +857,9 @@
     itertools.takewhile(is_even, itertools.count()) =>
       0
 
-``itertools.dropwhile(predicate, iter)`` discards elements while the predicate
-returns true, and then returns the rest of the iterable's results.
-
-::
+:func:`itertools.dropwhile(predicate, iter) <itertools.dropwhile>` discards
+elements while the predicate returns true, and then returns the rest of the
+iterable's results. ::
 
     itertools.dropwhile(less_than_10, itertools.count()) =>
       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...
@@ -873,14 +871,14 @@
 Grouping elements
 -----------------
 
-The last function I'll discuss, ``itertools.groupby(iter, key_func=None)``, is
-the most complicated.  ``key_func(elem)`` is a function that can compute a key
-value for each element returned by the iterable.  If you don't supply a key
-function, the key is simply each element itself.
+The last function I'll discuss, :func:`itertools.groupby(iter, key_func=None)
+<itertools.groupby>`, is the most complicated.  ``key_func(elem)`` is a function
+that can compute a key value for each element returned by the iterable.  If you
+don't supply a key function, the key is simply each element itself.
 
-``groupby()`` collects all the consecutive elements from the underlying iterable
-that have the same key value, and returns a stream of 2-tuples containing a key
-value and an iterator for the elements with that key.
+:func:`~itertools.groupby` collects all the consecutive elements from the
+underlying iterable that have the same key value, and returns a stream of
+2-tuples containing a key value and an iterator for the elements with that key.
 
 ::
 
@@ -890,7 +888,7 @@
                  ...
                 ]
 
-    def get_state (city_state):
+    def get_state(city_state):
         return city_state[1]
 
     itertools.groupby(city_list, get_state) =>
@@ -906,9 +904,9 @@
     iterator-3 =>
       ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ')
 
-``groupby()`` assumes that the underlying iterable's contents will already be
-sorted based on the key.  Note that the returned iterators also use the
-underlying iterable, so you have to consume the results of iterator-1 before
+:func:`~itertools.groupby` assumes that the underlying iterable's contents will
+already be sorted based on the key.  Note that the returned iterators also use
+the underlying iterable, so you have to consume the results of iterator-1 before
 requesting iterator-2 and its corresponding key.
 
 
@@ -926,33 +924,34 @@
 ``g(b, c)`` that's equivalent to ``f(1, b, c)``; you're filling in a value for
 one of ``f()``'s parameters.  This is called "partial function application".
 
-The constructor for ``partial`` takes the arguments ``(function, arg1, arg2,
-... kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so you
-can just call it to invoke ``function`` with the filled-in arguments.
+The constructor for :func:`~functools.partial` takes the arguments
+``(function, arg1, arg2, ..., kwarg1=value1, kwarg2=value2)``.  The resulting
+object is callable, so you can just call it to invoke ``function`` with the
+filled-in arguments.
 
 Here's a small but realistic example::
 
     import functools
 
-    def log (message, subsystem):
-        "Write the contents of 'message' to the specified subsystem."
+    def log(message, subsystem):
+        """Write the contents of 'message' to the specified subsystem."""
         print('%s: %s' % (subsystem, message))
         ...
 
     server_log = functools.partial(log, subsystem='server')
     server_log('Unable to open socket')
 
-``functools.reduce(func, iter, [initial_value])`` cumulatively performs an
-operation on all the iterable's elements and, therefore, can't be applied to
-infinite iterables.  (Note it is not in :mod:`builtins`, but in the
-:mod:`functools` module.)  ``func`` must be a function that takes two elements
-and returns a single value.  :func:`functools.reduce` takes the first two
-elements A and B returned by the iterator and calculates ``func(A, B)``.  It
-then requests the third element, C, calculates ``func(func(A, B), C)``, combines
-this result with the fourth element returned, and continues until the iterable
-is exhausted.  If the iterable returns no values at all, a :exc:`TypeError`
-exception is raised.  If the initial value is supplied, it's used as a starting
-point and ``func(initial_value, A)`` is the first calculation. ::
+:func:`functools.reduce(func, iter, [initial_value]) <functools.reduce>`
+cumulatively performs an operation on all the iterable's elements and,
+therefore, can't be applied to infinite iterables. *func* must be a function
+that takes two elements and returns a single value.  :func:`functools.reduce`
+takes the first two elements A and B returned by the iterator and calculates
+``func(A, B)``.  It then requests the third element, C, calculates
+``func(func(A, B), C)``, combines this result with the fourth element returned,
+and continues until the iterable is exhausted.  If the iterable returns no
+values at all, a :exc:`TypeError` exception is raised.  If the initial value is
+supplied, it's used as a starting point and ``func(initial_value, A)`` is the
+first calculation. ::
 
     >>> import operator, functools
     >>> functools.reduce(operator.concat, ['A', 'BB', 'C'])
@@ -978,8 +977,8 @@
     >>> sum([])
     0
 
-For many uses of :func:`functools.reduce`, though, it can be clearer to just write the
-obvious :keyword:`for` loop::
+For many uses of :func:`functools.reduce`, though, it can be clearer to just
+write the obvious :keyword:`for` loop::
 
    import functools
    # Instead of:
@@ -1023,28 +1022,23 @@
     existing_files = filter(os.path.exists, file_list)
 
 If the function you need doesn't exist, you need to write it.  One way to write
-small functions is to use the ``lambda`` statement.  ``lambda`` takes a number
-of parameters and an expression combining these parameters, and creates a small
-function that returns the value of the expression::
+small functions is to use the :keyword:`lambda` statement.  ``lambda`` takes a
+number of parameters and an expression combining these parameters, and creates
+an anonymous function that returns the value of the expression::
 
-    lowercase = lambda x: x.lower()
+    adder = lambda x, y: x+y
 
     print_assign = lambda name, value: name + '=' + str(value)
 
-    adder = lambda x, y: x+y
-
 An alternative is to just use the ``def`` statement and define a function in the
 usual way::
 
-    def lowercase(x):
-        return x.lower()
+    def adder(x, y):
+        return x + y
 
     def print_assign(name, value):
         return name + '=' + str(value)
 
-    def adder(x,y):
-        return x + y
-
 Which alternative is preferable?  That's a style question; my usual course is to
 avoid using ``lambda``.
 
@@ -1053,9 +1047,7 @@
 expression, which means you can't have multiway ``if... elif... else``
 comparisons or ``try... except`` statements.  If you try to do too much in a
 ``lambda`` statement, you'll end up with an overly complicated expression that's
-hard to read.  Quick, what's the following code doing?
-
-::
+hard to read.  Quick, what's the following code doing? ::
 
     import functools
     total = functools.reduce(lambda a, b: (0, a[1] + b[1]), items)[1]
@@ -1065,7 +1057,7 @@
 little bit better::
 
     import functools
-    def combine (a, b):
+    def combine(a, b):
         return 0, a[1] + b[1]
 
     total = functools.reduce(combine, items)[1]
@@ -1085,12 +1077,12 @@
 Fredrik Lundh once suggested the following set of rules for refactoring uses of
 ``lambda``:
 
-1) Write a lambda function.
-2) Write a comment explaining what the heck that lambda does.
-3) Study the comment for a while, and think of a name that captures the essence
+1. Write a lambda function.
+2. Write a comment explaining what the heck that lambda does.
+3. Study the comment for a while, and think of a name that captures the essence
    of the comment.
-4) Convert the lambda to a def statement, using that name.
-5) Remove the comment.
+4. Convert the lambda to a def statement, using that name.
+5. Remove the comment.
 
 I really like these rules, but you're free to disagree
 about whether this lambda-free style is better.
diff -r bd8afb90ebf2 Doc/howto/ipaddress.rst
--- a/Doc/howto/ipaddress.rst
+++ b/Doc/howto/ipaddress.rst
@@ -1,7 +1,7 @@
 .. _ipaddress-howto:
 
 ***************************************
-An Introduction to the ipaddress module
+An introduction to the ipaddress module
 ***************************************
 
 :author: Peter Moody
@@ -47,7 +47,12 @@
 when working with IP addressing. The simplest way to create addresses is
 to use the :func:`ipaddress.ip_address` factory function, which automatically
 determines whether to create an IPv4 or IPv6 address based on the passed in
-value::
+value:
+
+.. testsetup::
+   >>> import ipaddress
+
+::
 
    >>> ipaddress.ip_address('192.0.2.1')
    IPv4Address('192.0.2.1')
@@ -142,7 +147,7 @@
 
    >>> ipaddress.ip_interface('192.0.2.1/24')
    IPv4Interface('192.0.2.1/24')
-   >>> ipaddress.ip_network('2001:db8::1/96')
+   >>> ipaddress.ip_interface('2001:db8::1/96')
    IPv6Interface('2001:db8::1/96')
 
 Integer inputs are accepted (as with networks), and use of a particular IP
@@ -177,22 +182,22 @@
 Finding out how many individual addresses are in a network::
 
    >>> net4 = ipaddress.ip_network('192.0.2.0/24')
-   >>> net4.numhosts
+   >>> net4.num_addresses
    256
    >>> net6 = ipaddress.ip_network('2001:db8::0/96')
-   >>> net6.numhosts
+   >>> net6.num_addresses
    4294967296
 
 Iterating through the "usable" addresses on a network::
 
    >>> net4 = ipaddress.ip_network('192.0.2.0/24')
    >>> for x in net4.hosts():
-          print(x)
+   ...     print(x)  # doctest: +ELLIPSIS
    192.0.2.1
    192.0.2.2
    192.0.2.3
    192.0.2.4
-   <snip>
+   ...
    192.0.2.252
    192.0.2.253
    192.0.2.254
@@ -216,9 +221,9 @@
 Exploding or compressing the address::
 
    >>> addr6.exploded
-   '2001:0db8:0000:0000:0000:0000:0000:0000'
+   '2001:0db8:0000:0000:0000:0000:0000:0001'
    >>> addr6.compressed
-   '2001:db8::'
+   '2001:db8::1'
    >>> net6.exploded
    '2001:0db8:0000:0000:0000:0000:0000:0000/96'
    >>> net6.compressed
@@ -241,9 +246,9 @@
    >>> net4[-1]
    IPv4Address('192.0.2.255')
    >>> net6[1]
-   IPv6Address('2001::1')
+   IPv6Address('2001:db8::1')
    >>> net6[-1]
-   IPv6Address('2001::ffff:ffff')
+   IPv6Address('2001:db8::ffff:ffff')
 
 
 It also means that network objects lend themselves to using the list
diff -r bd8afb90ebf2 Doc/howto/regex.rst
--- a/Doc/howto/regex.rst
+++ b/Doc/howto/regex.rst
@@ -260,7 +260,7 @@
 
    >>> import re
    >>> p = re.compile('ab*')
-   >>> p
+   >>> p  #doctest: +ELLIPSIS
    <_sre.SRE_Pattern object at 0x...>
 
 :func:`re.compile` also accepts an optional *flags* argument, used to enable
@@ -372,7 +372,7 @@
 
    >>> import re
    >>> p = re.compile('[a-z]+')
-   >>> p
+   >>> p  #doctest: +ELLIPSIS
    <_sre.SRE_Pattern object at 0x...>
 
 Now, you can try matching various strings against the RE ``[a-z]+``.  An empty
@@ -390,7 +390,7 @@
 result in a variable for later use. ::
 
    >>> m = p.match('tempo')
-   >>> m
+   >>> m  #doctest: +ELLIPSIS
    <_sre.SRE_Match object at 0x...>
 
 Now you can query the :class:`MatchObject` for information about the matching
@@ -429,7 +429,7 @@
 
    >>> print(p.match('::: message'))
    None
-   >>> m = p.search('::: message') ; print(m)
+   >>> m = p.search('::: message'); print(m)  #doctest: +ELLIPSIS
    <_sre.SRE_Match object at 0x...>
    >>> m.group()
    'message'
@@ -458,7 +458,7 @@
 instances as an :term:`iterator`::
 
    >>> iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
-   >>> iterator
+   >>> iterator  #doctest: +ELLIPSIS
    <callable_iterator object at 0x...>
    >>> for match in iterator:
    ...     print(match.span())
@@ -480,7 +480,7 @@
 
    >>> print(re.match(r'From\s+', 'Fromage amk'))
    None
-   >>> re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')
+   >>> re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')  #doctest: +ELLIPSIS
    <_sre.SRE_Match object at 0x...>
 
 Under the hood, these functions simply create a pattern object for you
@@ -682,7 +682,7 @@
    For example, if you wish to match the word ``From`` only at the beginning of a
    line, the RE to use is ``^From``. ::
 
-      >>> print(re.search('^From', 'From Here to Eternity'))
+      >>> print(re.search('^From', 'From Here to Eternity'))  #doctest: +ELLIPSIS
       <_sre.SRE_Match object at 0x...>
       >>> print(re.search('^From', 'Reciting From Memory'))
       None
@@ -694,11 +694,11 @@
    Matches at the end of a line, which is defined as either the end of the string,
    or any location followed by a newline character.     ::
 
-      >>> print(re.search('}$', '{block}'))
+      >>> print(re.search('}$', '{block}'))  #doctest: +ELLIPSIS
       <_sre.SRE_Match object at 0x...>
       >>> print(re.search('}$', '{block} '))
       None
-      >>> print(re.search('}$', '{block}\n'))
+      >>> print(re.search('}$', '{block}\n'))  #doctest: +ELLIPSIS
       <_sre.SRE_Match object at 0x...>
 
    To match a literal ``'$'``, use ``\$`` or enclose it inside a character class,
@@ -723,7 +723,7 @@
    match when it's contained inside another word. ::
 
       >>> p = re.compile(r'\bclass\b')
-      >>> print(p.search('no class at all'))
+      >>> print(p.search('no class at all'))  #doctest: +ELLIPSIS
       <_sre.SRE_Match object at 0x...>
       >>> print(p.search('the declassified algorithm'))
       None
@@ -741,7 +741,7 @@
       >>> p = re.compile('\bclass\b')
       >>> print(p.search('no class at all'))
       None
-      >>> print(p.search('\b' + 'class' + '\b')  )
+      >>> print(p.search('\b' + 'class' + '\b'))  #doctest: +ELLIPSIS
       <_sre.SRE_Match object at 0x...>
 
    Second, inside a character class, where there's no use for this assertion,
@@ -1182,9 +1182,9 @@
 In the following example, the replacement function translates  decimals into
 hexadecimal::
 
-   >>> def hexrepl( match ):
+   >>> def hexrepl(match):
    ...     "Return the hex string for a decimal number"
-   ...     value = int( match.group() )
+   ...     value = int(match.group())
    ...     return hex(value)
    ...
    >>> p = re.compile(r'\d+')
diff -r bd8afb90ebf2 Doc/howto/unicode.rst
--- a/Doc/howto/unicode.rst
+++ b/Doc/howto/unicode.rst
@@ -257,13 +257,13 @@
 'REPLACEMENT CHARACTER'), or 'ignore' (just leave the character out of the
 Unicode result).  The following examples show the differences::
 
-    >>> b'\x80abc'.decode("utf-8", "strict")
+    >>> b'\x80abc'.decode("utf-8", "strict")  #doctest: +NORMALIZE_WHITESPACE
     Traceback (most recent call last):
-      File "<stdin>", line 1, in ?
-    UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0:
-                        unexpected code byte
+        ...
+    UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 0:
+      invalid start byte
     >>> b'\x80abc'.decode("utf-8", "replace")
-    '?abc'
+    '\ufffdabc'
     >>> b'\x80abc'.decode("utf-8", "ignore")
     'abc'
 
@@ -301,11 +301,11 @@
     >>> u = chr(40960) + 'abcd' + chr(1972)
     >>> u.encode('utf-8')
     b'\xea\x80\x80abcd\xde\xb4'
-    >>> u.encode('ascii')
+    >>> u.encode('ascii')  #doctest: +NORMALIZE_WHITESPACE
     Traceback (most recent call last):
-      File "<stdin>", line 1, in ?
+        ...
     UnicodeEncodeError: 'ascii' codec can't encode character '\ua000' in
-                        position 0: ordinal not in range(128)
+      position 0: ordinal not in range(128)
     >>> u.encode('ascii', 'ignore')
     b'abcd'
     >>> u.encode('ascii', 'replace')
@@ -331,12 +331,11 @@
 not four::
 
     >>> s = "a\xac\u1234\u20ac\U00008000"
-              ^^^^ two-digit hex escape
-                   ^^^^^ four-digit Unicode escape
-                              ^^^^^^^^^^ eight-digit Unicode escape
-    >>> for c in s:  print(ord(c), end=" ")
-    ...
-    97 172 4660 8364 32768
+    ... #     ^^^^ two-digit hex escape
+    ... #         ^^^^^^ four-digit Unicode escape
+    ... #                     ^^^^^^^^^^ eight-digit Unicode escape
+    >>> [ord(c) for c in s]
+    [97, 172, 4660, 8364, 32768]
 
 Using escape sequences for code points greater than 127 is fine in small doses,
 but becomes an annoyance if you're using many accented characters, as you would
@@ -415,7 +414,7 @@
 ----------
 
 The ``str`` type is described in the Python library reference at
-:ref:`typesseq`.
+:ref:`textseq`.
 
 The documentation for the :mod:`unicodedata` module.
 
diff -r bd8afb90ebf2 Doc/howto/urllib2.rst
--- a/Doc/howto/urllib2.rst
+++ b/Doc/howto/urllib2.rst
@@ -144,7 +144,7 @@
     >>> data['location'] = 'Northampton'
     >>> data['language'] = 'Python'
     >>> url_values = urllib.parse.urlencode(data)
-    >>> print(url_values)
+    >>> print(url_values)  # The order may differ from below.  #doctest: +SKIP
     name=Somebody+Here&language=Python&location=Northampton
     >>> url = 'http://www.example.com/example.cgi'
     >>> full_url = url + '?' + url_values
@@ -214,9 +214,9 @@
 
     >>> req = urllib.request.Request('http://www.pretend_server.org')
     >>> try: urllib.request.urlopen(req)
-    >>> except urllib.error.URLError as e:
-    >>>    print(e.reason)
-    >>>
+    ... except urllib.error.URLError as e:
+    ...    print(e.reason)      #doctest: +SKIP
+    ...
     (4, 'getaddrinfo failed')
 
 
@@ -322,18 +322,17 @@
 
     >>> req = urllib.request.Request('http://www.python.org/fish.html')
     >>> try:
-    >>>     urllib.request.urlopen(req)
-    >>> except urllib.error.HTTPError as e:
-    >>>     print(e.code)
-    >>>     print(e.read())
-    >>>
+    ...     urllib.request.urlopen(req)
+    ... except urllib.error.HTTPError as e:
+    ...     print(e.code)
+    ...     print(e.read())  #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
+    ...
     404
-    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
-        "http://www.w3.org/TR/html4/loose.dtd">
-    <?xml-stylesheet href="./css/ht2html.css"
-        type="text/css"?>
-    <html><head><title>Error 404: File Not Found</title>
-    ...... etc...
+    b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n\n<html
+      ...
+      <title>Page Not Found</title>\n
+      ...
 
 Wrapping it Up
 --------------
diff -r bd8afb90ebf2 Doc/install/index.rst
--- a/Doc/install/index.rst
+++ b/Doc/install/index.rst
@@ -7,8 +7,6 @@
 *****************************
 
 :Author: Greg Ward
-:Release: |version|
-:Date: |today|
 
 .. TODO: Fill in XXX comments
 
diff -r bd8afb90ebf2 Doc/library/2to3.rst
--- a/Doc/library/2to3.rst
+++ b/Doc/library/2to3.rst
@@ -23,7 +23,7 @@
 also located in the :file:`Tools/scripts` directory of the Python root.
 
 2to3's basic arguments are a list of files or directories to transform.  The
-directories are to recursively traversed for Python sources.
+directories are recursively traversed for Python sources.
 
 Here is a sample Python 2.x source file, :file:`example.py`::
 
diff -r bd8afb90ebf2 Doc/library/abc.rst
--- a/Doc/library/abc.rst
+++ b/Doc/library/abc.rst
@@ -129,7 +129,7 @@
 
 The :mod:`abc` module also provides the following decorators:
 
-.. decorator:: abstractmethod(function)
+.. decorator:: abstractmethod
 
    A decorator indicating abstract methods.
 
@@ -203,43 +203,52 @@
       multiple-inheritance.
 
 
-.. decorator:: abstractclassmethod(function)
+.. decorator:: abstractclassmethod
 
    A subclass of the built-in :func:`classmethod`, indicating an abstract
    classmethod. Otherwise it is similar to :func:`abstractmethod`.
 
-   Usage::
+   This special case is deprecated, as the :func:`classmethod` decorator
+   is now correctly identified as abstract when applied to an abstract
+   method::
 
       class C(metaclass=ABCMeta):
-          @abstractclassmethod
+          @classmethod
+          @abstractmethod
           def my_abstract_classmethod(cls, ...):
               ...
 
    .. versionadded:: 3.2
    .. deprecated:: 3.3
-       Use :class:`classmethod` with :func:`abstractmethod` instead.
+       It is now possible to use :class:`classmethod` with
+       :func:`abstractmethod`, making this decorator redundant.
 
 
-.. decorator:: abstractstaticmethod(function)
+.. decorator:: abstractstaticmethod
 
    A subclass of the built-in :func:`staticmethod`, indicating an abstract
    staticmethod. Otherwise it is similar to :func:`abstractmethod`.
 
-   Usage::
+   This special case is deprecated, as the :func:`staticmethod` decorator
+   is now correctly identified as abstract when applied to an abstract
+   method::
 
       class C(metaclass=ABCMeta):
-          @abstractstaticmethod
+          @staticmethod
+          @abstractmethod
           def my_abstract_staticmethod(...):
               ...
 
    .. versionadded:: 3.2
    .. deprecated:: 3.3
-       Use :class:`staticmethod` with :func:`abstractmethod` instead.
+       It is now possible to use :class:`staticmethod` with
+       :func:`abstractmethod`, making this decorator redundant.
 
 
 .. decorator:: abstractproperty(fget=None, fset=None, fdel=None, doc=None)
 
-   A subclass of the built-in :func:`property`, indicating an abstract property.
+   A subclass of the built-in :func:`property`, indicating an abstract
+   property.
 
    Using this function requires that the class's metaclass is :class:`ABCMeta`
    or is derived from it. A class that has a metaclass derived from
@@ -247,23 +256,43 @@
    and properties are overridden. The abstract properties can be called using
    any of the normal 'super' call mechanisms.
 
-   Usage::
+   This special case is deprecated, as the :func:`property` decorator
+   is now correctly identified as abstract when applied to an abstract
+   method::
 
       class C(metaclass=ABCMeta):
-          @abstractproperty
+          @property
+          @abstractmethod
           def my_abstract_property(self):
               ...
 
-   This defines a read-only property; you can also define a read-write abstract
-   property using the 'long' form of property declaration::
+   The above example defines a read-only property; you can also define a
+   read-write abstract property by appropriately marking one or more of the
+   underlying methods as abstract::
 
       class C(metaclass=ABCMeta):
-          def getx(self): ...
-          def setx(self, value): ...
-          x = abstractproperty(getx, setx)
+          @property
+          def x(self):
+              ...
+
+          @x.setter
+          @abstractmethod
+          def x(self, val):
+              ...
+
+   If only some components are abstract, only those components need to be
+   updated to create a concrete property in a subclass::
+
+      class D(C):
+          @C.x.setter
+          def x(self, val):
+              ...
+
 
    .. deprecated:: 3.3
-       Use :class:`property` with :func:`abstractmethod` instead
+       It is now possible to use :class:`property`, :meth:`property.getter`,
+       :meth:`property.setter` and :meth:`property.deleter` with
+       :func:`abstractmethod`, making this decorator redundant.
 
 
 .. rubric:: Footnotes
diff -r bd8afb90ebf2 Doc/library/argparse.rst
--- a/Doc/library/argparse.rst
+++ b/Doc/library/argparse.rst
@@ -130,9 +130,12 @@
 ArgumentParser objects
 ----------------------
 
-.. class:: ArgumentParser([description], [epilog], [prog], [usage], [add_help], \
-                          [argument_default], [parents], [prefix_chars], \
-                          [conflict_handler], [formatter_class])
+.. class:: ArgumentParser(prog=None, usage=None, description=None, \
+                          epilog=None, parents=[], \
+                          formatter_class=argparse.HelpFormatter, \
+                          prefix_chars='-', fromfile_prefix_chars=None, \
+                          argument_default=None, conflict_handler='error', \
+                          add_help=True)
 
    Create a new :class:`ArgumentParser` object.  Each parameter has its own more
    detailed description below, but in short they are:
@@ -920,6 +923,17 @@
    >>> parser.parse_args(''.split())
    Namespace(foo=42)
 
+If the ``default`` value is a string, the parser parses the value as if it
+were a command-line argument.  In particular, the parser applies any type_
+conversion argument, if provided, before setting the attribute on the
+:class:`Namespace` return value.  Otherwise, the parser uses the value as is::
+
+   >>> parser = argparse.ArgumentParser()
+   >>> parser.add_argument('--length', default='10', type=int)
+   >>> parser.add_argument('--width', default=10.5, type=int)
+   >>> parser.parse_args()
+   Namespace(length=10, width=10.5)
+
 For positional arguments with nargs_ equal to ``?`` or ``*``, the ``default`` value
 is used when no command-line argument was present::
 
@@ -958,6 +972,9 @@
    >>> parser.parse_args('2 temp.txt'.split())
    Namespace(bar=<_io.TextIOWrapper name='temp.txt' encoding='UTF-8'>, foo=2)
 
+See the section on the default_ keyword argument for information on when the
+``type`` argument is applied to default arguments.
+
 To ease the use of various types of files, the argparse module provides the
 factory FileType which takes the ``mode=`` and ``bufsize=`` arguments of the
 :func:`open` function.  For example, ``FileType('w')`` can be used to create a
diff -r bd8afb90ebf2 Doc/library/audioop.rst
--- a/Doc/library/audioop.rst
+++ b/Doc/library/audioop.rst
@@ -156,22 +156,22 @@
    hardware, among others.
 
 
+.. function:: max(fragment, width)
+
+   Return the maximum of the *absolute value* of all samples in a fragment.
+
+
+.. function:: maxpp(fragment, width)
+
+   Return the maximum peak-peak value in the sound fragment.
+
+
 .. function:: minmax(fragment, width)
 
    Return a tuple consisting of the minimum and maximum values of all samples in
    the sound fragment.
 
 
-.. function:: max(fragment, width)
-
-   Return the maximum of the *absolute value* of all samples in a fragment.
-
-
-.. function:: maxpp(fragment, width)
-
-   Return the maximum peak-peak value in the sound fragment.
-
-
 .. function:: mul(fragment, width, factor)
 
    Return a fragment that has all samples in the original fragment multiplied by
diff -r bd8afb90ebf2 Doc/library/codecs.rst
--- a/Doc/library/codecs.rst
+++ b/Doc/library/codecs.rst
@@ -155,13 +155,16 @@
    when *name* is specified as the errors parameter.
 
    For encoding *error_handler* will be called with a :exc:`UnicodeEncodeError`
-   instance, which contains information about the location of the error. The error
-   handler must either raise this or a different exception or return a tuple with a
-   replacement for the unencodable part of the input and a position where encoding
-   should continue. The encoder will encode the replacement and continue encoding
-   the original input at the specified position. Negative position values will be
-   treated as being relative to the end of the input string. If the resulting
-   position is out of bound an :exc:`IndexError` will be raised.
+   instance, which contains information about the location of the error. The
+   error handler must either raise this or a different exception or return a
+   tuple with a replacement for the unencodable part of the input and a position
+   where encoding should continue. The replacement may be either :class:`str` or
+   :class:`bytes`.  If the replacement is bytes, the encoder will simply copy
+   them into the output buffer. If the replacement is a string, the encoder will
+   encode the replacement.  Encoding continues on original input at the
+   specified position. Negative position values will be treated as being
+   relative to the end of the input string. If the resulting position is out of
+   bound an :exc:`IndexError` will be raised.
 
    Decoding and translating works similar, except :exc:`UnicodeDecodeError` or
    :exc:`UnicodeTranslateError` will be passed to the handler and that the
diff -r bd8afb90ebf2 Doc/library/collections.abc.rst
--- a/Doc/library/collections.abc.rst
+++ b/Doc/library/collections.abc.rst
@@ -90,7 +90,7 @@
 
 .. class:: Iterator
 
-   ABC for classes that provide the :meth:`__iter__` and :meth:`next` methods.
+   ABC for classes that provide the :meth:`__iter__` and :meth:`__next__` methods.
    See also the definition of :term:`iterator`.
 
 .. class:: Sequence
diff -r bd8afb90ebf2 Doc/library/collections.rst
--- a/Doc/library/collections.rst
+++ b/Doc/library/collections.rst
@@ -159,7 +159,7 @@
 
         d['x']                # Get first key in the chain of contexts
         d['x'] = 1            # Set value in current context
-        del['x']              # Delete from current context
+        del d['x']            # Delete from current context
         list(d)               # All nested values
         k in d                # Check all nested values
         len(d)                # Number of nested values
@@ -279,6 +279,7 @@
             >>> c = Counter(a=4, b=2, c=0, d=-2)
             >>> d = Counter(a=1, b=2, c=3, d=4)
             >>> c.subtract(d)
+            >>> c
             Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})
 
         .. versionadded:: 3.2
@@ -347,24 +348,24 @@
     this section documents the minimum range and type restrictions.
 
     * The :class:`Counter` class itself is a dictionary subclass with no
-        restrictions on its keys and values.  The values are intended to be numbers
-        representing counts, but you *could* store anything in the value field.
+      restrictions on its keys and values.  The values are intended to be numbers
+      representing counts, but you *could* store anything in the value field.
 
     * The :meth:`most_common` method requires only that the values be orderable.
 
     * For in-place operations such as ``c[key] += 1``, the value type need only
-        support addition and subtraction.  So fractions, floats, and decimals would
-        work and negative values are supported.  The same is also true for
-        :meth:`update` and :meth:`subtract` which allow negative and zero values
-        for both inputs and outputs.
+      support addition and subtraction.  So fractions, floats, and decimals would
+      work and negative values are supported.  The same is also true for
+      :meth:`update` and :meth:`subtract` which allow negative and zero values
+      for both inputs and outputs.
 
     * The multiset methods are designed only for use cases with positive values.
-        The inputs may be negative or zero, but only outputs with positive values
-        are created.  There are no type restrictions, but the value type needs to
-        support addition, subtraction, and comparison.
+      The inputs may be negative or zero, but only outputs with positive values
+      are created.  There are no type restrictions, but the value type needs to
+      support addition, subtraction, and comparison.
 
     * The :meth:`elements` method requires integer counts.  It ignores zero and
-        negative counts.
+      negative counts.
 
 .. seealso::
 
@@ -1012,7 +1013,7 @@
 to the end and the sort is not maintained.
 
 It is also straight-forward to create an ordered dictionary variant
-that the remembers the order the keys were *last* inserted.
+that remembers the order the keys were *last* inserted.
 If a new entry overwrites an existing entry, the
 original insertion position is changed and moved to the end::
 
diff -r bd8afb90ebf2 Doc/library/concurrency.rst
--- a/Doc/library/concurrency.rst
+++ b/Doc/library/concurrency.rst
@@ -15,6 +15,7 @@
 
    threading.rst
    multiprocessing.rst
+   concurrent.rst
    concurrent.futures.rst
    subprocess.rst
    sched.rst
diff -r bd8afb90ebf2 Doc/library/concurrent.futures.rst
--- a/Doc/library/concurrent.futures.rst
+++ b/Doc/library/concurrent.futures.rst
@@ -42,12 +42,13 @@
 
        Equivalent to ``map(func, *iterables)`` except *func* is executed
        asynchronously and several calls to *func* may be made concurrently.  The
-       returned iterator raises a :exc:`TimeoutError` if :meth:`__next__()` is
-       called and the result isn't available after *timeout* seconds from the
-       original call to :meth:`Executor.map`. *timeout* can be an int or a
-       float.  If *timeout* is not specified or ``None``, there is no limit to
-       the wait time.  If a call raises an exception, then that exception will
-       be raised when its value is retrieved from the iterator.
+       returned iterator raises a :exc:`TimeoutError` if
+       :meth:`~iterator.__next__` is called and the result isn't available
+       after *timeout* seconds from the original call to :meth:`Executor.map`.
+       *timeout* can be an int or a float.  If *timeout* is not specified or
+       ``None``, there is no limit to the wait time.  If a call raises an
+       exception, then that exception will be raised when its value is
+       retrieved from the iterator.
 
     .. method:: shutdown(wait=True)
 
@@ -135,20 +136,23 @@
            'http://www.bbc.co.uk/',
            'http://some-made-up-domain.com/']
 
+   # Retrieve a single page and report the url and contents
    def load_url(url, timeout):
-       return urllib.request.urlopen(url, timeout=timeout).read()
+       conn = urllib.request.urlopen(url, timeout=timeout)
+       return conn.readall()
 
+   # We can use a with statement to ensure threads are cleaned up promptly
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
-       future_to_url = dict((executor.submit(load_url, url, 60), url)
-                            for url in URLS)
-
+       # Start the load operations and mark each future with its URL
+       future_to_url = {executor.submit(load_url, url, 60):url for url in URLS}
        for future in concurrent.futures.as_completed(future_to_url):
            url = future_to_url[future]
-           if future.exception() is not None:
-               print('%r generated an exception: %s' % (url,
-                                                        future.exception()))
+           try:
+               data = future.result()
+           except Exception as exc:
+               print('%r generated an exception: %s' % (url, exc))
            else:
-               print('%r page is %d bytes' % (url, len(future.result())))
+               print('%r page is %d bytes' % (url, len(data)))
 
 
 ProcessPoolExecutor
@@ -364,10 +368,11 @@
    different :class:`Executor` instances) given by *fs* that yields futures as
    they complete (finished or were cancelled).  Any futures that completed
    before :func:`as_completed` is called will be yielded first.  The returned
-   iterator raises a :exc:`TimeoutError` if :meth:`__next__` is called and the
-   result isn't available after *timeout* seconds from the original call to
-   :func:`as_completed`.  *timeout* can be an int or float.  If *timeout* is not
-   specified or ``None``, there is no limit to the wait time.
+   iterator raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` is
+   called and the result isn't available after *timeout* seconds from the
+   original call to :func:`as_completed`.  *timeout* can be an int or float.
+   If *timeout* is not specified or ``None``, there is no limit to the wait
+   time.
 
 
 .. seealso::
diff -r bd8afb90ebf2 Doc/library/concurrent.rst
--- /dev/null
+++ b/Doc/library/concurrent.rst
@@ -0,0 +1,6 @@
+The :mod:`concurrent` package
+=============================
+
+Currently, there is only one module in this package:
+
+* :mod:`concurrent.futures` -- Launching parallel tasks
diff -r bd8afb90ebf2 Doc/library/configparser.rst
--- a/Doc/library/configparser.rst
+++ b/Doc/library/configparser.rst
@@ -770,9 +770,9 @@
    # values using the mapping protocol or ConfigParser's set() does not allow
    # such assignments to take place.
    config.add_section('Section1')
-   config.set('Section1', 'int', '15')
-   config.set('Section1', 'bool', 'true')
-   config.set('Section1', 'float', '3.1415')
+   config.set('Section1', 'an_int', '15')
+   config.set('Section1', 'a_bool', 'true')
+   config.set('Section1', 'a_float', '3.1415')
    config.set('Section1', 'baz', 'fun')
    config.set('Section1', 'bar', 'Python')
    config.set('Section1', 'foo', '%(bar)s is %(baz)s!')
@@ -790,13 +790,13 @@
 
    # getfloat() raises an exception if the value is not a float
    # getint() and getboolean() also do this for their respective types
-   float = config.getfloat('Section1', 'float')
-   int = config.getint('Section1', 'int')
-   print(float + int)
+   a_float = config.getfloat('Section1', 'a_float')
+   an_int = config.getint('Section1', 'an_int')
+   print(a_float + an_int)
 
    # Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.
    # This is because we are using a RawConfigParser().
-   if config.getboolean('Section1', 'bool'):
+   if config.getboolean('Section1', 'a_bool'):
        print(config.get('Section1', 'foo'))
 
 To get interpolation, use :class:`ConfigParser`::
@@ -1007,7 +1007,7 @@
       .. versionadded:: 3.2
 
 
-   .. method:: get(section, option, raw=False, [vars, fallback])
+   .. method:: get(section, option, *, raw=False, vars=None[, fallback])
 
       Get an *option* value for the named *section*.  If *vars* is provided, it
       must be a dictionary.  The *option* is looked up in *vars* (if provided),
@@ -1025,21 +1025,21 @@
          (especially when using the mapping protocol).
 
 
-   .. method:: getint(section, option, raw=False, [vars, fallback])
+   .. method:: getint(section, option, *, raw=False, vars=None[, fallback])
 
       A convenience method which coerces the *option* in the specified *section*
       to an integer.  See :meth:`get` for explanation of *raw*, *vars* and
       *fallback*.
 
 
-   .. method:: getfloat(section, option, raw=False, [vars, fallback])
+   .. method:: getfloat(section, option, *, raw=False, vars=None[, fallback])
 
       A convenience method which coerces the *option* in the specified *section*
       to a floating point number.  See :meth:`get` for explanation of *raw*,
       *vars* and *fallback*.
 
 
-   .. method:: getboolean(section, option, raw=False, [vars, fallback])
+   .. method:: getboolean(section, option, *, raw=False, vars=None[, fallback])
 
       A convenience method which coerces the *option* in the specified *section*
       to a Boolean value.  Note that the accepted values for the option are
@@ -1051,7 +1051,8 @@
       *fallback*.
 
 
-   .. method:: items([section], raw=False, vars=None)
+   .. method:: items(raw=False, vars=None)
+               items(section, raw=False, vars=None)
 
       When *section* is not given, return a list of *section_name*,
       *section_proxy* pairs, including DEFAULTSECT.
@@ -1149,7 +1150,13 @@
 RawConfigParser Objects
 -----------------------
 
-.. class:: RawConfigParser(defaults=None, dict_type=collections.OrderedDict, allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configaparser.DEFAULTSECT, interpolation=None)
+.. class:: RawConfigParser(defaults=None, dict_type=collections.OrderedDict, \
+                           allow_no_value=False, *, delimiters=('=', ':'), \
+                           comment_prefixes=('#', ';'), \
+                           inline_comment_prefixes=None, strict=True, \
+                           empty_lines_in_values=True, \
+                           default_section=configparser.DEFAULTSECT[, \
+                           interpolation])
 
    Legacy variant of the :class:`ConfigParser` with interpolation disabled
    by default and unsafe ``add_section`` and ``set`` methods.
diff -r bd8afb90ebf2 Doc/library/contextlib.rst
--- a/Doc/library/contextlib.rst
+++ b/Doc/library/contextlib.rst
@@ -184,7 +184,7 @@
           files = [stack.enter_context(open(fname)) for fname in filenames]
           # All opened files will automatically be closed at the end of
           # the with statement, even if attempts to open files later
-          # in the list throw an exception
+          # in the list raise an exception
 
    Each instance maintains a stack of registered callbacks that are called in
    reverse order when the instance is closed (either explicitly or implicitly
diff -r bd8afb90ebf2 Doc/library/copy.rst
--- a/Doc/library/copy.rst
+++ b/Doc/library/copy.rst
@@ -67,8 +67,8 @@
 
 Classes can use the same interfaces to control copying that they use to control
 pickling.  See the description of module :mod:`pickle` for information on these
-methods.  The :mod:`copy` module does not use the :mod:`copyreg` registration
-module.
+methods.  In fact, :mod:`copy` module uses the registered pickle functions from
+:mod:`copyreg` module.
 
 .. index::
    single: __copy__() (copy protocol)
diff -r bd8afb90ebf2 Doc/library/copyreg.rst
--- a/Doc/library/copyreg.rst
+++ b/Doc/library/copyreg.rst
@@ -9,9 +9,10 @@
    module: pickle
    module: copy
 
-The :mod:`copyreg` module provides support for the :mod:`pickle` module.  The
-:mod:`copy` module is likely to use this in the future as well.  It provides
-configuration information about object constructors which are not classes.
+The :mod:`copyreg` module offers a way to define fuctions used while pickling
+specific objects.  The :mod:`pickle` and :mod:`copy` modules use those functions
+when pickling/copying those objects.  The module provides configuration
+information about object constructors which are not classes.
 Such constructors may be factory functions or class instances.
 
 
@@ -37,3 +38,25 @@
    :attr:`~pickle.Pickler.dispatch_table` attribute of a pickler
    object or subclass of :class:`pickle.Pickler` can also be used for
    declaring reduction functions.
+
+Example
+-------
+
+The example below would like to show how to register a pickle function and how
+it will be used:
+
+   >>> import copyreg, copy, pickle
+   >>> class C(object):
+   ...     def __init__(self, a):
+   ...         self.a = a
+   ...
+   >>> def pickle_c(c):
+   ...     print("pickling a C instance...")
+   ...     return C, (c.a,)
+   ...
+   >>> copyreg.pickle(C, pickle_c)
+   >>> c = C(1)
+   >>> d = copy.copy(c)
+   pickling a C instance...
+   >>> p = pickle.dumps(c)
+   pickling a C instance...
diff -r bd8afb90ebf2 Doc/library/crypt.rst
--- a/Doc/library/crypt.rst
+++ b/Doc/library/crypt.rst
@@ -121,11 +121,14 @@
 Examples
 --------
 
-A simple example illustrating typical use::
+A simple example illustrating typical use (a constant-time comparison
+operation is needed to limit exposure to timing attacks.
+:func:`hmac.compare_digest` is suitable for this purpose)::
 
    import pwd
    import crypt
    import getpass
+   from hmac import compare_digest as compare_hash
 
    def login():
        username = input('Python login: ')
@@ -134,7 +137,7 @@
            if cryptedpasswd == 'x' or cryptedpasswd == '*':
                raise ValueError('no support for shadow passwords')
            cleartext = getpass.getpass()
-           return crypt.crypt(cleartext, cryptedpasswd) == cryptedpasswd
+           return compare_hash(crypt.crypt(cleartext, cryptedpasswd), cryptedpasswd)
        else:
            return True
 
@@ -142,7 +145,8 @@
 check it against the original::
 
    import crypt
+   from hmac import compare_digest as compare_hash
 
    hashed = crypt.crypt(plaintext)
-   if hashed != crypt.crypt(plaintext, hashed):
+   if not compare_hash(hashed, crypt.crypt(plaintext, hashed)):
       raise ValueError("hashed version doesn't validate against original")
diff -r bd8afb90ebf2 Doc/library/crypto.rst
--- a/Doc/library/crypto.rst
+++ b/Doc/library/crypto.rst
@@ -8,6 +8,7 @@
 
 The modules described in this chapter implement various algorithms of a
 cryptographic nature.  They are available at the discretion of the installation.
+On Unix systems, the :mod:`crypt` module may also be available.
 Here's an overview:
 
 
diff -r bd8afb90ebf2 Doc/library/csv.rst
--- a/Doc/library/csv.rst
+++ b/Doc/library/csv.rst
@@ -71,9 +71,10 @@
    A short usage example::
 
       >>> import csv
-      >>> spamReader = csv.reader(open('eggs.csv', newline=''), delimiter=' ', quotechar='|')
-      >>> for row in spamReader:
-      ...     print(', '.join(row))
+      >>> with open('eggs.csv', newline='') as csvfile:
+      ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
+      ...     for row in spamreader:
+      ...         print(', '.join(row))
       Spam, Spam, Spam, Spam, Spam, Baked Beans
       Spam, Lovely Spam, Wonderful Spam
 
@@ -99,11 +100,12 @@
 
    A short usage example::
 
-      >>> import csv
-      >>> spamWriter = csv.writer(open('eggs.csv', 'w', newline=''), delimiter=' ',
-      ...                         quotechar='|', quoting=csv.QUOTE_MINIMAL)
-      >>> spamWriter.writerow(['Spam'] * 5 + ['Baked Beans'])
-      >>> spamWriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
+      import csv
+      with open('eggs.csv', 'w', newline='') as csvfile:
+          spamwriter = csv.writer(csvfile, delimiter=' ',
+                                  quotechar='|', quoting=csv.QUOTE_MINIMAL)
+          spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
+          spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
 
 
 .. function:: register_dialect(name[, dialect], **fmtparams)
@@ -221,11 +223,11 @@
 
 An example for :class:`Sniffer` use::
 
-   csvfile = open("example.csv")
-   dialect = csv.Sniffer().sniff(csvfile.read(1024))
-   csvfile.seek(0)
-   reader = csv.reader(csvfile, dialect)
-   # ... process CSV file contents here ...
+   with open('example.csv') as csvfile:
+       dialect = csv.Sniffer().sniff(csvfile.read(1024))
+       csvfile.seek(0)
+       reader = csv.reader(csvfile, dialect)
+       # ... process CSV file contents here ...
 
 
 The :mod:`csv` module defines the following constants:
@@ -339,6 +341,11 @@
    The default is :const:`False`.
 
 
+.. attribute:: Dialect.strict
+
+   When ``True``, raise exception :exc:`Error` on bad CSV input.
+   The default is ``False``.
+
 Reader Objects
 --------------
 
diff -r bd8afb90ebf2 Doc/library/ctypes.rst
--- a/Doc/library/ctypes.rst
+++ b/Doc/library/ctypes.rst
@@ -1094,8 +1094,8 @@
 Surprises
 ^^^^^^^^^
 
-There are some edges in :mod:`ctypes` where you may be expect something else than
-what actually happens.
+There are some edges in :mod:`ctypes` where you might expect something other
+than what actually happens.
 
 Consider the following example::
 
diff -r bd8afb90ebf2 Doc/library/curses.rst
--- a/Doc/library/curses.rst
+++ b/Doc/library/curses.rst
@@ -377,7 +377,8 @@
    is to be displayed.
 
 
-.. function:: newwin([nlines, ncols,] begin_y, begin_x)
+.. function:: newwin(begin_y, begin_x)
+              newwin(nlines, ncols, begin_y, begin_x)
 
    Return a new window, whose left-upper corner is at  ``(begin_y, begin_x)``, and
    whose height/width is  *nlines*/*ncols*.
@@ -656,7 +657,8 @@
 the following methods and attributes:
 
 
-.. method:: window.addch([y, x,] ch[, attr])
+.. method:: window.addch(ch[, attr])
+            window.addch(y, x, ch[, attr])
 
    .. note::
 
@@ -670,13 +672,15 @@
    position and attributes are the current settings for the window object.
 
 
-.. method:: window.addnstr([y, x,] str, n[, attr])
+.. method:: window.addnstr(str, n[, attr])
+            window.addnstr(y, x, str, n[, attr])
 
    Paint at most *n* characters of the  string *str* at ``(y, x)`` with attributes
    *attr*, overwriting anything previously on the display.
 
 
-.. method:: window.addstr([y, x,] str[, attr])
+.. method:: window.addstr(str[, attr])
+            window.addstr(y, x, str[, attr])
 
    Paint the string *str* at ``(y, x)`` with attributes *attr*, overwriting
    anything previously on the display.
@@ -763,7 +767,10 @@
    *bs* are *horch*.  The default corner characters are always used by this function.
 
 
-.. method:: window.chgat([y, x, ] [num,] attr)
+.. method:: window.chgat(attr)
+            window.chgat(num, attr)
+            window.chgat(y, x, attr)
+            window.chgat(y, x, num, attr)
 
    Set the attributes of *num* characters at the current cursor position, or at
    position ``(y, x)`` if supplied. If no value of *num* is given or *num* = -1,
@@ -812,7 +819,8 @@
    Delete the line under the cursor. All following lines are moved up by one line.
 
 
-.. method:: window.derwin([nlines, ncols,] begin_y, begin_x)
+.. method:: window.derwin(begin_y, begin_x)
+            window.derwin(nlines, ncols, begin_y, begin_x)
 
    An abbreviation for "derive window", :meth:`derwin` is the same as calling
    :meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin
@@ -837,7 +845,7 @@
 .. attribute:: window.encoding
 
    Encoding used to encode method arguments (Unicode strings and characters).
-   The encoding attribute is inherited from by parent window when a subwindow
+   The encoding attribute is inherited from the parent window when a subwindow
    is created, for example with :meth:`window.subwin`. By default, the locale
    encoding is used (see :func:`locale.getpreferredencoding`).
 
@@ -906,7 +914,8 @@
    upper-left corner.
 
 
-.. method:: window.hline([y, x,] ch, n)
+.. method:: window.hline(ch, n)
+            window.hline(y, x, ch, n)
 
    Display a horizontal line starting at ``(y, x)`` with length *n* consisting of
    the character *ch*.
@@ -940,7 +949,8 @@
    the character proper, and upper bits are the attributes.
 
 
-.. method:: window.insch([y, x,] ch[, attr])
+.. method:: window.insch(ch[, attr])
+            window.insch(y, x, ch[, attr])
 
    Paint character *ch* at ``(y, x)`` with attributes *attr*, moving the line from
    position *x* right by one character.
@@ -961,7 +971,8 @@
    line.
 
 
-.. method:: window.insnstr([y, x,] str, n [, attr])
+.. method:: window.insnstr(str, n[, attr])
+            window.insnstr(y, x, str, n[, attr])
 
    Insert a character string (as many characters as will fit on the line) before
    the character under the cursor, up to *n* characters.   If *n* is zero or
@@ -970,7 +981,8 @@
    The cursor position does not change (after moving to *y*, *x*, if specified).
 
 
-.. method:: window.insstr([y, x, ] str [, attr])
+.. method:: window.insstr(str[, attr])
+            window.insstr(y, x, str[, attr])
 
    Insert a character string (as many characters as will fit on the line) before
    the character under the cursor.  All characters to the right of the cursor are
@@ -978,7 +990,8 @@
    position does not change (after moving to *y*, *x*, if specified).
 
 
-.. method:: window.instr([y, x] [, n])
+.. method:: window.instr([n])
+            window.instr(y, x[, n])
 
    Return a string of characters, extracted from the window starting at the
    current cursor position, or at *y*, *x* if specified. Attributes are stripped
@@ -1153,13 +1166,15 @@
    Turn on attribute *A_STANDOUT*.
 
 
-.. method:: window.subpad([nlines, ncols,] begin_y, begin_x)
+.. method:: window.subpad(begin_y, begin_x)
+            window.subpad(nlines, ncols, begin_y, begin_x)
 
    Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
    whose width/height is *ncols*/*nlines*.
 
 
-.. method:: window.subwin([nlines, ncols,] begin_y, begin_x)
+.. method:: window.subwin(begin_y, begin_x)
+            window.subwin(nlines, ncols, begin_y, begin_x)
 
    Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
    whose width/height is *ncols*/*nlines*.
@@ -1216,7 +1231,8 @@
    :meth:`refresh`.
 
 
-.. method:: window.vline([y, x,] ch, n)
+.. method:: window.vline(ch, n)
+            window.vline(y, x, ch, n)
 
    Display a vertical line starting at ``(y, x)`` with length *n* consisting of the
    character *ch*.
diff -r bd8afb90ebf2 Doc/library/datetime.rst
--- a/Doc/library/datetime.rst
+++ b/Doc/library/datetime.rst
@@ -1442,7 +1442,7 @@
 instantiated directly.  You need to derive a concrete subclass, and (at least)
 supply implementations of the standard :class:`tzinfo` methods needed by the
 :class:`.datetime` methods you use.  The :mod:`datetime` module supplies
-a simple concrete subclass of :class:`tzinfo` :class:`timezone` which can reprsent
+a simple concrete subclass of :class:`tzinfo` :class:`timezone` which can represent
 timezones with fixed offset from UTC such as UTC itself or North American EST and
 EDT.
 
diff -r bd8afb90ebf2 Doc/library/decimal.rst
--- a/Doc/library/decimal.rst
+++ b/Doc/library/decimal.rst
@@ -400,6 +400,29 @@
    compared, sorted, and coerced to another type (such as :class:`float` or
    :class:`int`).
 
+   There are some small differences between arithmetic on Decimal objects and
+   arithmetic on integers and floats.  When the remainder operator ``%`` is
+   applied to Decimal objects, the sign of the result is the sign of the
+   *dividend* rather than the sign of the divisor::
+
+      >>> (-7) % 4
+      1
+      >>> Decimal(-7) % Decimal(4)
+      Decimal('-3')
+
+   The integer division operator ``//`` behaves analogously, returning the
+   integer part of the true quotient (truncating towards zero) rather than its
+   floor, so as to preserve the usual identity ``x == (x // y) * y + x % y``::
+
+      >>> -7 // 4
+      -2
+      >>> Decimal(-7) // Decimal(4)
+      Decimal('-1')
+
+   The ``%`` and ``//`` operators implement the ``remainder`` and
+   ``divide-integer`` operations (respectively) as described in the
+   specification.
+
    Decimal objects cannot generally be combined with floats or
    instances of :class:`fractions.Fraction` in arithmetic operations:
    an attempt to add a :class:`Decimal` to a :class:`float`, for
@@ -436,7 +459,7 @@
       a :class:`Decimal` instance is always canonical, so this operation returns
       its argument unchanged.
 
-   .. method:: compare(other[, context])
+   .. method:: compare(other, context=None)
 
       Compare the values of two Decimal instances.  :meth:`compare` returns a
       Decimal instance, and if either operand is a NaN then the result is a
@@ -447,13 +470,13 @@
          a == b           ==> Decimal('0')
          a > b            ==> Decimal('1')
 
-   .. method:: compare_signal(other[, context])
+   .. method:: compare_signal(other, context=None)
 
       This operation is identical to the :meth:`compare` method, except that all
       NaNs signal.  That is, if neither operand is a signaling NaN then any
       quiet NaN operand is treated as though it were a signaling NaN.
 
-   .. method:: compare_total(other)
+   .. method:: compare_total(other, context=None)
 
       Compare two operands using their abstract representation rather than their
       numerical value.  Similar to the :meth:`compare` method, but the result
@@ -471,13 +494,21 @@
       higher in the total order than the second operand.  See the specification
       for details of the total order.
 
-   .. method:: compare_total_mag(other)
+      This operation is unaffected by context and is quiet: no flags are changed
+      and no rounding is performed.  As an exception, the C version may raise
+      InvalidOperation if the second operand cannot be converted exactly.
+
+   .. method:: compare_total_mag(other, context=None)
 
       Compare two operands using their abstract representation rather than their
       value as in :meth:`compare_total`, but ignoring the sign of each operand.
       ``x.compare_total_mag(y)`` is equivalent to
       ``x.copy_abs().compare_total(y.copy_abs())``.
 
+      This operation is unaffected by context and is quiet: no flags are changed
+      and no rounding is performed.  As an exception, the C version may raise
+      InvalidOperation if the second operand cannot be converted exactly.
+
    .. method:: conjugate()
 
       Just returns self, this method is only to comply with the Decimal
@@ -494,7 +525,7 @@
       Return the negation of the argument.  This operation is unaffected by the
       context and is quiet: no flags are changed and no rounding is performed.
 
-   .. method:: copy_sign(other)
+   .. method:: copy_sign(other, context=None)
 
       Return a copy of the first operand with the sign set to be the same as the
       sign of the second operand.  For example:
@@ -502,10 +533,11 @@
          >>> Decimal('2.3').copy_sign(Decimal('-1.5'))
          Decimal('-2.3')
 
-      This operation is unaffected by the context and is quiet: no flags are
-      changed and no rounding is performed.
-
-   .. method:: exp([context])
+      This operation is unaffected by context and is quiet: no flags are changed
+      and no rounding is performed.  As an exception, the C version may raise
+      InvalidOperation if the second operand cannot be converted exactly.
+
+   .. method:: exp(context=None)
 
       Return the value of the (natural) exponential function ``e**x`` at the
       given number.  The result is correctly rounded using the
@@ -542,7 +574,7 @@
 
       .. versionadded:: 3.1
 
-   .. method:: fma(other, third[, context])
+   .. method:: fma(other, third, context=None)
 
       Fused multiply-add.  Return self*other+third with no rounding of the
       intermediate product self*other.
@@ -571,7 +603,7 @@
       Return :const:`True` if the argument is a (quiet or signaling) NaN and
       :const:`False` otherwise.
 
-   .. method:: is_normal()
+   .. method:: is_normal(context=None)
 
       Return :const:`True` if the argument is a *normal* finite number.  Return
       :const:`False` if the argument is zero, subnormal, infinite or a NaN.
@@ -591,7 +623,7 @@
       Return :const:`True` if the argument is a signaling NaN and :const:`False`
       otherwise.
 
-   .. method:: is_subnormal()
+   .. method:: is_subnormal(context=None)
 
       Return :const:`True` if the argument is subnormal, and :const:`False`
       otherwise.
@@ -601,17 +633,17 @@
       Return :const:`True` if the argument is a (positive or negative) zero and
       :const:`False` otherwise.
 
-   .. method:: ln([context])
+   .. method:: ln(context=None)
 
       Return the natural (base e) logarithm of the operand.  The result is
       correctly rounded using the :const:`ROUND_HALF_EVEN` rounding mode.
 
-   .. method:: log10([context])
+   .. method:: log10(context=None)
 
       Return the base ten logarithm of the operand.  The result is correctly
       rounded using the :const:`ROUND_HALF_EVEN` rounding mode.
 
-   .. method:: logb([context])
+   .. method:: logb(context=None)
 
       For a nonzero number, return the adjusted exponent of its operand as a
       :class:`Decimal` instance.  If the operand is a zero then
@@ -619,73 +651,73 @@
       is raised.  If the operand is an infinity then ``Decimal('Infinity')`` is
       returned.
 
-   .. method:: logical_and(other[, context])
+   .. method:: logical_and(other, context=None)
 
       :meth:`logical_and` is a logical operation which takes two *logical
       operands* (see :ref:`logical_operands_label`).  The result is the
       digit-wise ``and`` of the two operands.
 
-   .. method:: logical_invert([context])
+   .. method:: logical_invert(context=None)
 
       :meth:`logical_invert` is a logical operation.  The
       result is the digit-wise inversion of the operand.
 
-   .. method:: logical_or(other[, context])
+   .. method:: logical_or(other, context=None)
 
       :meth:`logical_or` is a logical operation which takes two *logical
       operands* (see :ref:`logical_operands_label`).  The result is the
       digit-wise ``or`` of the two operands.
 
-   .. method:: logical_xor(other[, context])
+   .. method:: logical_xor(other, context=None)
 
       :meth:`logical_xor` is a logical operation which takes two *logical
       operands* (see :ref:`logical_operands_label`).  The result is the
       digit-wise exclusive or of the two operands.
 
-   .. method:: max(other[, context])
+   .. method:: max(other, context=None)
 
       Like ``max(self, other)`` except that the context rounding rule is applied
       before returning and that :const:`NaN` values are either signaled or
       ignored (depending on the context and whether they are signaling or
       quiet).
 
-   .. method:: max_mag(other[, context])
+   .. method:: max_mag(other, context=None)
 
       Similar to the :meth:`.max` method, but the comparison is done using the
       absolute values of the operands.
 
-   .. method:: min(other[, context])
+   .. method:: min(other, context=None)
 
       Like ``min(self, other)`` except that the context rounding rule is applied
       before returning and that :const:`NaN` values are either signaled or
       ignored (depending on the context and whether they are signaling or
       quiet).
 
-   .. method:: min_mag(other[, context])
+   .. method:: min_mag(other, context=None)
 
       Similar to the :meth:`.min` method, but the comparison is done using the
       absolute values of the operands.
 
-   .. method:: next_minus([context])
+   .. method:: next_minus(context=None)
 
       Return the largest number representable in the given context (or in the
       current thread's context if no context is given) that is smaller than the
       given operand.
 
-   .. method:: next_plus([context])
+   .. method:: next_plus(context=None)
 
       Return the smallest number representable in the given context (or in the
       current thread's context if no context is given) that is larger than the
       given operand.
 
-   .. method:: next_toward(other[, context])
+   .. method:: next_toward(other, context=None)
 
       If the two operands are unequal, return the number closest to the first
       operand in the direction of the second operand.  If both operands are
       numerically equal, return a copy of the first operand with the sign set to
       be the same as the sign of the second operand.
 
-   .. method:: normalize([context])
+   .. method:: normalize(context=None)
 
       Normalize the number by stripping the rightmost trailing zeros and
       converting any result equal to :const:`Decimal('0')` to
@@ -694,7 +726,7 @@
       ``Decimal('0.321000e+2')`` both normalize to the equivalent value
       ``Decimal('32.1')``.
 
-   .. method:: number_class([context])
+   .. method:: number_class(context=None)
 
       Return a string describing the *class* of the operand.  The returned value
       is one of the following ten strings.
@@ -710,7 +742,7 @@
       * ``"NaN"``, indicating that the operand is a quiet NaN (Not a Number).
       * ``"sNaN"``, indicating that the operand is a signaling NaN.
 
-   .. method:: quantize(exp[, rounding[, context[, watchexp]]])
+   .. method:: quantize(exp, rounding=None, context=None, watchexp=True)
 
       Return a value equal to the first operand after rounding and having the
       exponent of the second operand.
@@ -748,16 +780,25 @@
       class does all its arithmetic.  Included for compatibility with the
       specification.
 
-   .. method:: remainder_near(other[, context])
-
-      Compute the modulo as either a positive or negative value depending on
-      which is closest to zero.  For instance, ``Decimal(10).remainder_near(6)``
-      returns ``Decimal('-2')`` which is closer to zero than ``Decimal('4')``.
-
-      If both are equally close, the one chosen will have the same sign as
-      *self*.
-
-   .. method:: rotate(other[, context])
+   .. method:: remainder_near(other, context=None)
+
+      Return the remainder from dividing *self* by *other*.  This differs from
+      ``self % other`` in that the sign of the remainder is chosen so as to
+      minimize its absolute value.  More precisely, the return value is
+      ``self - n * other`` where ``n`` is the integer nearest to the exact
+      value of ``self / other``, and if two integers are equally near then the
+      even one is chosen.
+
+      If the result is zero then its sign will be the sign of *self*.
+
+      >>> Decimal(18).remainder_near(Decimal(10))
+      Decimal('-2')
+      >>> Decimal(25).remainder_near(Decimal(10))
+      Decimal('5')
+      >>> Decimal(35).remainder_near(Decimal(10))
+      Decimal('-5')
+
+   .. method:: rotate(other, context=None)
 
       Return the result of rotating the digits of the first operand by an amount
       specified by the second operand.  The second operand must be an integer in
@@ -768,18 +809,22 @@
       length precision if necessary.  The sign and exponent of the first operand
       are unchanged.
 
-   .. method:: same_quantum(other[, context])
+   .. method:: same_quantum(other, context=None)
 
       Test whether self and other have the same exponent or whether both are
       :const:`NaN`.
 
-   .. method:: scaleb(other[, context])
+      This operation is unaffected by context and is quiet: no flags are changed
+      and no rounding is performed.  As an exception, the C version may raise
+      InvalidOperation if the second operand cannot be converted exactly.
+
+   .. method:: scaleb(other, context=None)
 
       Return the first operand with exponent adjusted by the second.
       Equivalently, return the first operand multiplied by ``10**other``.  The
       second operand must be an integer.
 
-   .. method:: shift(other[, context])
+   .. method:: shift(other, context=None)
 
       Return the result of shifting the digits of the first operand by an amount
       specified by the second operand.  The second operand must be an integer in
@@ -789,12 +834,12 @@
       right.  Digits shifted into the coefficient are zeros.  The sign and
       exponent of the first operand are unchanged.
 
-   .. method:: sqrt([context])
+   .. method:: sqrt(context=None)
 
       Return the square root of the argument to full precision.
 
 
-   .. method:: to_eng_string([context])
+   .. method:: to_eng_string(context=None)
 
       Convert to an engineering-type string.
 
@@ -802,12 +847,12 @@
       are up to 3 digits left of the decimal place.  For example, converts
       ``Decimal('123E+1')`` to ``Decimal('1.23E+3')``
 
-   .. method:: to_integral([rounding[, context]])
+   .. method:: to_integral(rounding=None, context=None)
 
       Identical to the :meth:`to_integral_value` method.  The ``to_integral``
       name has been kept for compatibility with older versions.
 
-   .. method:: to_integral_exact([rounding[, context]])
+   .. method:: to_integral_exact(rounding=None, context=None)
 
       Round to the nearest integer, signaling :const:`Inexact` or
       :const:`Rounded` as appropriate if rounding occurs.  The rounding mode is
@@ -815,7 +860,7 @@
       ``context``.  If neither parameter is given then the rounding mode of the
       current context is used.
 
-   .. method:: to_integral_value([rounding[, context]])
+   .. method:: to_integral_value(rounding=None, context=None)
 
       Round to the nearest integer without signaling :const:`Inexact` or
       :const:`Rounded`.  If given, applies *rounding*; otherwise, uses the
@@ -861,10 +906,10 @@
 You can also use the :keyword:`with` statement and the :func:`localcontext`
 function to temporarily change the active context.
 
-.. function:: localcontext([c])
+.. function:: localcontext(ctx=None)
 
    Return a context manager that will set the current context for the active thread
-   to a copy of *c* on entry to the with-statement and restore the previous context
+   to a copy of *ctx* on entry to the with-statement and restore the previous context
    when exiting the with-statement. If no context is specified, a copy of the
    current context is used.
 
@@ -1283,7 +1328,7 @@
       identity operation.
 
 
-   .. method:: power(x, y[, modulo])
+   .. method:: power(x, y, modulo=None)
 
       Return ``x`` to the power of ``y``, reduced modulo ``modulo`` if given.
 
diff -r bd8afb90ebf2 Doc/library/dis.rst
--- a/Doc/library/dis.rst
+++ b/Doc/library/dis.rst
@@ -660,10 +660,10 @@
 
 .. opcode:: FOR_ITER (delta)
 
-   ``TOS`` is an :term:`iterator`.  Call its :meth:`__next__` method.  If this
-   yields a new value, push it on the stack (leaving the iterator below it).  If
-   the iterator indicates it is exhausted ``TOS`` is popped, and the byte code
-   counter is incremented by *delta*.
+   ``TOS`` is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.
+   If this yields a new value, push it on the stack (leaving the iterator below
+   it).  If the iterator indicates it is exhausted ``TOS`` is popped, and the
+   byte code counter is incremented by *delta*.
 
 
 .. opcode:: LOAD_GLOBAL (namei)
@@ -763,9 +763,10 @@
 .. opcode:: MAKE_CLOSURE (argc)
 
    Creates a new function object, sets its *__closure__* slot, and pushes it on
-   the stack.  TOS is the code associated with the function, TOS1 the tuple
-   containing cells for the closure's free variables.  The function also has
-   *argc* default parameters, which are found below the cells.
+   the stack.  TOS is the :term:`qualified name` of the function, TOS1 is the
+   code associated with the function, and TOS2 is the tuple containing cells for
+   the closure's free variables.  The function also has *argc* default parameters,
+   which are found below the cells.
 
 
 .. opcode:: BUILD_SLICE (argc)
diff -r bd8afb90ebf2 Doc/library/doctest.rst
--- a/Doc/library/doctest.rst
+++ b/Doc/library/doctest.rst
@@ -1,3 +1,5 @@
+:keepdoctest:
+
 :mod:`doctest` --- Test interactive Python examples
 ===================================================
 
@@ -318,7 +320,8 @@
   Tabs in output generated by the tested code are not modified.  Because any
   hard tabs in the sample output *are* expanded, this means that if the code
   output includes hard tabs, the only way the doctest can pass is if the
-  :const:`NORMALIZE_WHITESPACE` option or directive is in effect.
+  :const:`NORMALIZE_WHITESPACE` option or :ref:`directive <doctest-directives>`
+  is in effect.
   Alternatively, the test can be rewritten to capture the output and compare it
   to an expected value as part of the test.  This handling of tabs in the
   source was arrived at through trial and error, and has proven to be the least
@@ -338,7 +341,7 @@
      Backslashes in a raw docstring: m\n
 
   Otherwise, the backslash will be interpreted as part of the string. For example,
-  the "\\" above would be interpreted as a newline character.  Alternatively, you
+  the ``\n`` above would be interpreted as a newline character.  Alternatively, you
   can double each backslash in the doctest version (and not use a raw string)::
 
      >>> def f(x):
@@ -483,15 +486,16 @@
      SyntaxError: invalid syntax
 
 
+.. _option-flags-and-directives:
 .. _doctest-options:
 
-Option Flags and Directives
-^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Option Flags
+^^^^^^^^^^^^
 
 A number of option flags control various aspects of doctest's behavior.
 Symbolic names for the flags are supplied as module constants, which can be
 or'ed together and passed to various functions.  The names can also be used in
-doctest directives (see below).
+:ref:`doctest directives <doctest-directives>`.
 
 The first group of options define test semantics, controlling aspects of how
 doctest decides whether actual output matches an example's expected output:
@@ -545,14 +549,14 @@
    :exc:`TypeError` is raised.
 
    It will also ignore the module name used in Python 3 doctest reports. Hence
-   both these variations will work regardless of whether the test is run under
-   Python 2.7 or Python 3.2 (or later versions):
+   both of these variations will work with the flag specified, regardless of
+   whether the test is run under Python 2.7 or Python 3.2 (or later versions)::
 
-      >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
+      >>> raise CustomError('message')
       Traceback (most recent call last):
       CustomError: message
 
-      >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
+      >>> raise CustomError('message')
       Traceback (most recent call last):
       my_module.CustomError: message
 
@@ -562,15 +566,16 @@
    exception name. Using :const:`IGNORE_EXCEPTION_DETAIL` and the details
    from Python 2.3 is also the only clear way to write a doctest that doesn't
    care about the exception detail yet continues to pass under Python 2.3 or
-   earlier (those releases do not support doctest directives and ignore them
-   as irrelevant comments). For example, ::
+   earlier (those releases do not support :ref:`doctest directives
+   <doctest-directives>` and ignore them as irrelevant comments). For example::
 
-      >>> (1, 2)[3] = 'moo' #doctest: +IGNORE_EXCEPTION_DETAIL
+      >>> (1, 2)[3] = 'moo'
       Traceback (most recent call last):
         File "<stdin>", line 1, in ?
       TypeError: object doesn't support item assignment
 
-   passes under Python 2.3 and later Python versions, even though the detail
+   passes under Python 2.3 and later Python versions with the flag specified,
+   even though the detail
    changed in Python 2.4 to say "does not" instead of "doesn't".
 
    .. versionchanged:: 3.2
@@ -632,9 +637,30 @@
 
    A bitmask or'ing together all the reporting flags above.
 
-"Doctest directives" may be used to modify the option flags for individual
-examples.  Doctest directives are expressed as a special Python comment
-following an example's source code:
+
+There is also a way to register new option flag names, though this isn't
+useful unless you intend to extend :mod:`doctest` internals via subclassing:
+
+
+.. function:: register_optionflag(name)
+
+   Create a new option flag with a given name, and return the new flag's integer
+   value.  :func:`register_optionflag` can be used when subclassing
+   :class:`OutputChecker` or :class:`DocTestRunner` to create new options that are
+   supported by your subclasses.  :func:`register_optionflag` should always be
+   called using the following idiom::
+
+      MY_FLAG = register_optionflag('MY_FLAG')
+
+
+.. _doctest-directives:
+
+Directives
+^^^^^^^^^^
+
+Doctest directives may be used to modify the :ref:`option flags
+<doctest-options>` for an individual example.  Doctest directives are
+special Python comments following an example's source code:
 
 .. productionlist:: doctest
    directive: "#" "doctest:" `directive_options`
@@ -652,7 +678,7 @@
 
 For example, this test passes::
 
-   >>> print(list(range(20))) #doctest: +NORMALIZE_WHITESPACE
+   >>> print(list(range(20))) # doctest: +NORMALIZE_WHITESPACE
    [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
    10,  11, 12, 13, 14, 15, 16, 17, 18, 19]
 
@@ -664,7 +690,8 @@
    >>> print(list(range(20))) # doctest: +ELLIPSIS
    [0, 1, ..., 18, 19]
 
-Multiple directives can be used on a single physical line, separated by commas::
+Multiple directives can be used on a single physical line, separated by
+commas::
 
    >>> print(list(range(20))) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    [0,    1, ...,   18,    19]
@@ -690,20 +717,6 @@
 functions that run doctests, establishing different defaults.  In such cases,
 disabling an option via ``-`` in a directive can be useful.
 
-There's also a way to register new option flag names, although this isn't useful
-unless you intend to extend :mod:`doctest` internals via subclassing:
-
-
-.. function:: register_optionflag(name)
-
-   Create a new option flag with a given name, and return the new flag's integer
-   value.  :func:`register_optionflag` can be used when subclassing
-   :class:`OutputChecker` or :class:`DocTestRunner` to create new options that are
-   supported by your subclasses.  :func:`register_optionflag` should always be
-   called using the following idiom::
-
-      MY_FLAG = register_optionflag('MY_FLAG')
-
 
 .. _doctest-warnings:
 
@@ -1024,6 +1037,16 @@
 
    This function uses the same search technique as :func:`testmod`.
 
+   .. note::
+      Unlike :func:`testmod` and :class:`DocTestFinder`, this function raises
+      a :exc:`ValueError` if *module* contains no docstrings.  You can prevent
+      this error by passing a :class:`DocTestFinder` instance as the
+      *test_finder* argument with its *exclude_empty* keyword argument set
+      to ``False``::
+
+         >>> finder = doctest.DocTestFinder(exclude_empty=False)
+         >>> suite = doctest.DocTestSuite(test_finder=finder)
+
 
 Under the covers, :func:`DocTestSuite` creates a :class:`unittest.TestSuite` out
 of :class:`doctest.DocTestCase` instances, and :class:`DocTestCase` is a
diff -r bd8afb90ebf2 Doc/library/dummy_threading.rst
--- a/Doc/library/dummy_threading.rst
+++ b/Doc/library/dummy_threading.rst
@@ -17,7 +17,7 @@
    try:
        import threading
    except ImportError:
-       import dummy_threading
+       import dummy_threading as threading
 
 Be careful to not use this module where deadlock might occur from a thread being
 created that blocks waiting for another thread to be created.  This often occurs
diff -r bd8afb90ebf2 Doc/library/exceptions.rst
--- a/Doc/library/exceptions.rst
+++ b/Doc/library/exceptions.rst
@@ -39,17 +39,31 @@
 new exception is not handled the traceback that is eventually displayed will
 include the originating exception(s) and the final exception.
 
-This implicit exception chain can be made explicit by using :keyword:`from` with
-:keyword:`raise`.  The single argument to :keyword:`from` must be an exception
-or ``None``. It will be set as :attr:`__cause__` on the raised exception.
-Setting :attr:`__cause__` implicitly sets the :attr:`__suppress_context__` to
-``True``. If :attr:`__cause__` is an exception, it will be displayed. If
-:attr:`__cause__` is present or :attr:`__suppress_context__` has a true value,
-:attr:`__context__` will not be displayed.
+When raising a new exception (rather than using a bare ``raise`` to re-raise
+the exception currently being handled), the implicit exception context can be
+supplemented with an explicit cause by using :keyword:`from` with
+:keyword:`raise`::
 
-In either case, the default exception handling code will not display any of the
-remaining links in the :attr:`__context__` chain if :attr:`__cause__` has been
-set.
+   raise new_exc from original_exc
+
+The expression following :keyword:`from` must be an exception or ``None``. It
+will be set as :attr:`__cause__` on the raised exception. Setting
+:attr:`__cause__` also implicitly sets the :attr:`__suppress_context__`
+attribute to ``True``, so that using ``raise new_exc from None``
+effectively replaces the old exception with the new one for display
+purposes (e.g. converting :exc:`KeyError` to :exc:`AttributeError`, while
+leaving the old exception available in :attr:`__context__` for introspection
+when debugging.
+
+The default traceback display code shows these chained exceptions in
+addition to the traceback for the exception itself. An explicitly chained
+exception in :attr:`__cause__` is always shown when present. An implicitly
+chained exception in :attr:`__context__` is shown only if :attr:`__cause__`
+is :const:`None` and :attr:`__suppress_context__` is false.
+
+In either case, the exception itself is always shown after any chained
+exceptions so that the final line of the traceback always shows the last
+exception that was raised.
 
 
 Base classes
@@ -275,8 +289,8 @@
 .. exception:: StopIteration
 
    Raised by built-in function :func:`next` and an :term:`iterator`\'s
-   :meth:`__next__` method to signal that there are no further items to be
-   produced by the iterator.
+   :meth:`~iterator.__next__` method to signal that there are no further
+   items produced by the iterator.
 
    The exception object has a single attribute :attr:`value`, which is
    given as an argument when constructing the exception, and defaults
@@ -371,6 +385,30 @@
    Raised when a Unicode-related encoding or decoding error occurs.  It is a
    subclass of :exc:`ValueError`.
 
+   :exc:`UnicodeError` has attributes that describe the encoding or decoding
+   error.  For example, ``err.object[err.start:err.end]`` gives the particular
+   invalid input that the codec failed on.
+
+   .. attribute:: encoding
+
+       The name of the encoding that raised the error.
+
+   .. attribute:: reason
+
+       A string describing the specific codec error.
+
+   .. attribute:: object
+
+       The object the codec was attempting to encode or decode.
+
+   .. attribute:: start
+
+       The first index of invalid data in :attr:`object`.
+
+   .. attribute:: end
+
+       The index after the last invalid data in :attr:`object`.
+
 
 .. exception:: UnicodeEncodeError
 
@@ -449,34 +487,35 @@
 
 .. exception:: ConnectionError
 
-   A base class for connection-related issues.  Subclasses are
-   :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`,
+   A base class for connection-related issues.
+
+   Subclasses are :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`,
    :exc:`ConnectionRefusedError` and :exc:`ConnectionResetError`.
 
-   .. exception:: BrokenPipeError
+.. exception:: BrokenPipeError
 
-      A subclass of :exc:`ConnectionError`, raised when trying to write on a
-      pipe while the other end has been closed, or trying to write on a socket
-      which has been shutdown for writing.
-      Corresponds to :c:data:`errno` ``EPIPE`` and ``ESHUTDOWN``.
+   A subclass of :exc:`ConnectionError`, raised when trying to write on a
+   pipe while the other end has been closed, or trying to write on a socket
+   which has been shutdown for writing.
+   Corresponds to :c:data:`errno` ``EPIPE`` and ``ESHUTDOWN``.
 
-   .. exception:: ConnectionAbortedError
+.. exception:: ConnectionAbortedError
 
-      A subclass of :exc:`ConnectionError`, raised when a connection attempt
-      is aborted by the peer.
-      Corresponds to :c:data:`errno` ``ECONNABORTED``.
+   A subclass of :exc:`ConnectionError`, raised when a connection attempt
+   is aborted by the peer.
+   Corresponds to :c:data:`errno` ``ECONNABORTED``.
 
-   .. exception:: ConnectionRefusedError
+.. exception:: ConnectionRefusedError
 
-      A subclass of :exc:`ConnectionError`, raised when a connection attempt
-      is refused by the peer.
-      Corresponds to :c:data:`errno` ``ECONNREFUSED``.
+   A subclass of :exc:`ConnectionError`, raised when a connection attempt
+   is refused by the peer.
+   Corresponds to :c:data:`errno` ``ECONNREFUSED``.
 
-   .. exception:: ConnectionResetError
+.. exception:: ConnectionResetError
 
-      A subclass of :exc:`ConnectionError`, raised when a connection is
-      reset by the peer.
-      Corresponds to :c:data:`errno` ``ECONNRESET``.
+   A subclass of :exc:`ConnectionError`, raised when a connection is
+   reset by the peer.
+   Corresponds to :c:data:`errno` ``ECONNRESET``.
 
 .. exception:: FileExistsError
 
@@ -491,7 +530,7 @@
 .. exception:: InterruptedError
 
    Raised when a system call is interrupted by an incoming signal.
-   Corresponds to :c:data:`errno` ``EEINTR``.
+   Corresponds to :c:data:`errno` ``EINTR``.
 
 .. exception:: IsADirectoryError
 
diff -r bd8afb90ebf2 Doc/library/fnmatch.rst
--- a/Doc/library/fnmatch.rst
+++ b/Doc/library/fnmatch.rst
@@ -29,6 +29,9 @@
 | ``[!seq]`` | matches any character not in *seq* |
 +------------+------------------------------------+
 
+For a literal match, wrap the meta-characters in brackets.
+For example, ``'[?]'`` matches the character ``'?'``.
+
 .. index:: module: glob
 
 Note that the filename separator (``'/'`` on Unix) is *not* special to this
@@ -74,8 +77,6 @@
 
    Return the shell-style *pattern* converted to a regular expression.
 
-   Be aware there is no way to quote meta-characters.
-
    Example:
 
       >>> import fnmatch, re
diff -r bd8afb90ebf2 Doc/library/fractions.rst
--- a/Doc/library/fractions.rst
+++ b/Doc/library/fractions.rst
@@ -56,7 +56,6 @@
       Fraction(0, 1)
       >>> Fraction('3/7')
       Fraction(3, 7)
-      [40794 refs]
       >>> Fraction(' -3/7 ')
       Fraction(-3, 7)
       >>> Fraction('1.414213 \t\n')
diff -r bd8afb90ebf2 Doc/library/ftplib.rst
--- a/Doc/library/ftplib.rst
+++ b/Doc/library/ftplib.rst
@@ -270,12 +270,12 @@
 .. method:: FTP.storbinary(cmd, file, blocksize=8192, callback=None, rest=None)
 
    Store a file in binary transfer mode.  *cmd* should be an appropriate
-   ``STOR`` command: ``"STOR filename"``. *file* is an open :term:`file object`
-   which is read until EOF using its :meth:`read` method in blocks of size
-   *blocksize* to provide the data to be stored.  The *blocksize* argument
-   defaults to 8192.  *callback* is an optional single parameter callable that
-   is called on each block of data after it is sent. *rest* means the same thing
-   as in the :meth:`transfercmd` method.
+   ``STOR`` command: ``"STOR filename"``. *file* is a :term:`file object`
+   (opened in binary mode) which is read until EOF using its :meth:`read`
+   method in blocks of size *blocksize* to provide the data to be stored.
+   The *blocksize* argument defaults to 8192.  *callback* is an optional single
+   parameter callable that is called on each block of data after it is sent.
+   *rest* means the same thing as in the :meth:`transfercmd` method.
 
    .. versionchanged:: 3.2
       *rest* parameter added.
@@ -285,9 +285,9 @@
 
    Store a file in ASCII transfer mode.  *cmd* should be an appropriate
    ``STOR`` command (see :meth:`storbinary`).  Lines are read until EOF from the
-   open :term:`file object` *file* using its :meth:`readline` method to provide
-   the data to be stored.  *callback* is an optional single parameter callable
-   that is called on each line after it is sent.
+   :term:`file object` *file* (opened in binary mode) using its :meth:`readline`
+   method to provide the data to be stored.  *callback* is an optional single
+   parameter callable that is called on each line after it is sent.
 
 
 .. method:: FTP.transfercmd(cmd, rest=None)
diff -r bd8afb90ebf2 Doc/library/functions.rst
--- a/Doc/library/functions.rst
+++ b/Doc/library/functions.rst
@@ -14,7 +14,7 @@
 :func:`all`          :func:`dir`        :func:`hex`         :func:`next`      :func:`slice`
 :func:`any`          :func:`divmod`     :func:`id`          :func:`object`    :func:`sorted`
 :func:`ascii`        :func:`enumerate`  :func:`input`       :func:`oct`       :func:`staticmethod`
-:func:`bin`          :func:`eval`       :func:`int`         :func:`open`      :func:`str`
+:func:`bin`          :func:`eval`       :func:`int`         :func:`open`      |func-str|_
 :func:`bool`         :func:`exec`       :func:`isinstance`  :func:`ord`       :func:`sum`
 :func:`bytearray`    :func:`filter`     :func:`issubclass`  :func:`pow`       :func:`super`
 :func:`bytes`        :func:`float`      :func:`iter`        :func:`print`     |func-tuple|_
@@ -34,6 +34,7 @@
 .. |func-memoryview| replace:: ``memoryview()``
 .. |func-set| replace:: ``set()``
 .. |func-list| replace:: ``list()``
+.. |func-str| replace:: ``str()``
 .. |func-tuple| replace:: ``tuple()``
 .. |func-range| replace:: ``range()``
 
@@ -122,6 +123,8 @@
 
    Without an argument, an array of size 0 is created.
 
+   See also :ref:`binaryseq` and :ref:`typebytearray`.
+
 
 .. _func-bytes:
 .. function:: bytes([source[, encoding[, errors]]])
@@ -135,6 +138,8 @@
 
    Bytes objects can also be created with literals, see :ref:`strings`.
 
+   See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`.
+
 
 .. function:: callable(object)
 
@@ -267,14 +272,17 @@
 
 
 .. _func-dict:
-.. function:: dict([arg])
+.. function:: dict(**kwarg)
+              dict(mapping, **kwarg)
+              dict(iterable, **kwarg)
    :noindex:
 
-   Create a new data dictionary, optionally with items taken from *arg*.
-   The dictionary type is described in :ref:`typesmapping`.
+   Create a new dictionary.  The :class:`dict` object is the dictionary class.
+   See :class:`dict` and :ref:`typesmapping` for documentation about this
+   class.
 
-   For other containers see the built in :class:`list`, :class:`set`, and
-   :class:`tuple` classes, and the :mod:`collections` module.
+   For other containers see the built-in :class:`list`, :class:`set`, and
+   :class:`tuple` classes, as well as the :mod:`collections` module.
 
 
 .. function:: dir([object])
@@ -348,10 +356,10 @@
 .. function:: enumerate(iterable, start=0)
 
    Return an enumerate object. *iterable* must be a sequence, an
-   :term:`iterator`, or some other object which supports iteration.  The
-   :meth:`__next__` method of the iterator returned by :func:`enumerate` returns a
-   tuple containing a count (from *start* which defaults to 0) and the
-   values obtained from iterating over *iterable*.
+   :term:`iterator`, or some other object which supports iteration.
+   The :meth:`~iterator.__next__` method of the iterator returned by
+   :func:`enumerate` returns a tuple containing a count (from *start* which
+   defaults to 0) and the values obtained from iterating over *iterable*.
 
       >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
       >>> list(enumerate(seasons))
@@ -514,20 +522,20 @@
 
    The float type is described in :ref:`typesnumeric`.
 
+   .. index::
+      single: __format__
+      single: string; format() (built-in function)
+
 
 .. function:: format(value[, format_spec])
 
-   .. index::
-      pair: str; format
-      single: __format__
-
    Convert a *value* to a "formatted" representation, as controlled by
    *format_spec*.  The interpretation of *format_spec* will depend on the type
    of the *value* argument, however there is a standard formatting syntax that
    is used by most built-in types: :ref:`formatspec`.
 
    The default *format_spec* is an empty string which usually gives the same
-   effect as calling ``str(value)``.
+   effect as calling :func:`str(value) <str>`.
 
    A call to ``format(value, format_spec)`` is translated to
    ``type(value).__format__(format_spec)`` which bypasses the instance
@@ -540,11 +548,13 @@
 .. function:: frozenset([iterable])
    :noindex:
 
-   Return a frozenset object, optionally with elements taken from *iterable*.
-   The frozenset type is described in :ref:`types-set`.
+   Return a new :class:`frozenset` object, optionally with elements taken from
+   *iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and
+   :ref:`types-set` for documentation about this class.
 
-   For other containers see the built in :class:`dict`, :class:`list`, and
-   :class:`tuple` classes, and the :mod:`collections` module.
+   For other containers see the built-in :class:`set`, :class:`list`,
+   :class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections`
+   module.
 
 
 .. function:: getattr(object, name[, default])
@@ -629,14 +639,19 @@
    to provide elaborate line editing and history features.
 
 
-.. function:: int([number | string[, base]])
+.. function:: int(x=0)
+              int(x, base=10)
 
-   Convert a number or string to an integer.  If no arguments are given, return
-   ``0``.  If a number is given, return ``number.__int__()``.  Conversion of
-   floating point numbers to integers truncates towards zero.  A string must be
-   a base-radix integer literal optionally preceded by '+' or '-' (with no space
-   in between) and optionally surrounded by whitespace.  A base-n literal
-   consists of the digits 0 to n-1, with 'a' to 'z' (or 'A' to 'Z') having
+   Convert a number or string *x* to an integer, or return ``0`` if no
+   arguments are given.  If *x* is a number, return :meth:`x.__int__()
+   <object.__int__>`.  For floating point numbers, this truncates towards zero.
+
+   If *x* is not a number or if *base* is given, then *x* must be a string,
+   :class:`bytes`, or :class:`bytearray` instance representing an :ref:`integer
+   literal <integers>` in radix *base*.  Optionally, the literal can be
+   preceded by ``+`` or ``-`` (with no space in between) and surrounded by
+   whitespace.  A base-n literal consists of the digits 0 to n-1, with ``a``
+   to ``z`` (or ``A`` to ``Z``) having
    values 10 to 35.  The default *base* is 10. The allowed values are 0 and 2-36.
    Base-2, -8, and -16 literals can be optionally prefixed with ``0b``/``0B``,
    ``0o``/``0O``, or ``0x``/``0X``, as with integer literals in code.  Base 0
@@ -678,9 +693,12 @@
    starting at ``0``).  If it does not support either of those protocols,
    :exc:`TypeError` is raised. If the second argument, *sentinel*, is given,
    then *object* must be a callable object.  The iterator created in this case
-   will call *object* with no arguments for each call to its :meth:`__next__`
-   method; if the value returned is equal to *sentinel*, :exc:`StopIteration`
-   will be raised, otherwise the value will be returned.
+   will call *object* with no arguments for each call to its
+   :meth:`~iterator.__next__` method; if the value returned is equal to
+   *sentinel*, :exc:`StopIteration` will be raised, otherwise the value will
+   be returned.
+
+   See also :ref:`typeiter`.
 
    One useful application of the second form of :func:`iter` is to read lines of
    a file until a certain line is reached.  The following example reads a file
@@ -702,7 +720,7 @@
    :noindex:
 
    Rather than being a function, :class:`list` is actually a mutable
-   sequence type, as documented in :ref:`typesseq`.
+   sequence type, as documented in :ref:`typesseq-list` and :ref:`typesseq`.
 
 
 .. function:: locals()
@@ -725,11 +743,16 @@
    already arranged into argument tuples, see :func:`itertools.starmap`\.
 
 
-.. function:: max(iterable[, args...], *[, key])
+.. function:: max(iterable, *[, key])
+              max(arg1, arg2, *args[, key])
 
-   With a single argument *iterable*, return the largest item of a non-empty
-   iterable (such as a string, tuple or list).  With more than one argument, return
-   the largest of the arguments.
+   Return the largest item in an iterable or the largest of two or more
+   arguments.
+
+   If one positional argument is provided, *iterable* must be a non-empty
+   iterable (such as a non-empty string, tuple or list).  The largest item
+   in the iterable is returned.  If two or more positional arguments are
+   provided, the largest of the positional arguments is returned.
 
    The optional keyword-only *key* argument specifies a one-argument ordering
    function like that used for :meth:`list.sort`.
@@ -748,11 +771,16 @@
    :ref:`typememoryview` for more information.
 
 
-.. function:: min(iterable[, args...], *[, key])
+.. function:: min(iterable, *[, key])
+              min(arg1, arg2, *args[, key])
 
-   With a single argument *iterable*, return the smallest item of a non-empty
-   iterable (such as a string, tuple or list).  With more than one argument, return
-   the smallest of the arguments.
+   Return the smallest item in an iterable or the smallest of two or more
+   arguments.
+
+   If one positional argument is provided, *iterable* must be a non-empty
+   iterable (such as a non-empty string, tuple or list).  The smallest item
+   in the iterable is returned.  If two or more positional arguments are
+   provided, the smallest of the positional arguments is returned.
 
    The optional keyword-only *key* argument specifies a one-argument ordering
    function like that used for :meth:`list.sort`.
@@ -764,9 +792,9 @@
 
 .. function:: next(iterator[, default])
 
-   Retrieve the next item from the *iterator* by calling its :meth:`__next__`
-   method.  If *default* is given, it is returned if the iterator is exhausted,
-   otherwise :exc:`StopIteration` is raised.
+   Retrieve the next item from the *iterator* by calling its
+   :meth:`~iterator.__next__` method.  If *default* is given, it is returned
+   if the iterator is exhausted, otherwise :exc:`StopIteration` is raised.
 
 
 .. function:: object()
@@ -910,6 +938,19 @@
    :mod:`os.open` as *opener* results in functionality similar to passing
    ``None``).
 
+   The following example uses the :ref:`dir_fd <dir_fd>` parameter of the
+   :func:`os.open` function to open a file relative to a given directory::
+
+      >>> import os
+      >>> dir_fd = os.open('somedir', os.O_RDONLY)
+      >>> def opener(path, flags):
+      ...     return os.open(path, flags, dir_fd=dir_fd)
+      ...
+      >>> with open('spamspam.txt', 'w', opener=opener) as f:
+      ...     print('This will be written to somedir/spamspam.txt', file=f)
+      ...
+      >>> os.close(dir_fd)  # don't leak a file descriptor
+
    .. versionchanged:: 3.3
       The *opener* parameter was added.
       The ``'x'`` mode was added.
@@ -970,16 +1011,16 @@
    must be of integer types, and *y* must be non-negative.
 
 
-.. function:: print([object, ...], *, sep=' ', end='\\n', file=sys.stdout, flush=False)
+.. function:: print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)
 
-   Print *object*\(s) to the stream *file*, separated by *sep* and followed by
+   Print *objects* to the stream *file*, separated by *sep* and followed by
    *end*.  *sep*, *end* and *file*, if present, must be given as keyword
    arguments.
 
    All non-keyword arguments are converted to strings like :func:`str` does and
    written to the stream, separated by *sep* and followed by *end*.  Both *sep*
    and *end* must be strings; they can also be ``None``, which means to use the
-   default values.  If no *object* is given, :func:`print` will just write
+   default values.  If no *objects* are given, :func:`print` will just write
    *end*.
 
    The *file* argument must be an object with a ``write(string)`` method; if it
@@ -1061,11 +1102,12 @@
 
 
 .. _func-range:
-.. function:: range([start,] stop[, step])
+.. function:: range(stop)
+              range(start, stop[, step])
    :noindex:
 
    Rather than being a function, :class:`range` is actually an immutable
-   sequence type, as documented in :ref:`typesseq`.
+   sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`.
 
 
 .. function:: repr(object)
@@ -1087,18 +1129,18 @@
    arguments starting at ``0``).
 
 
-.. function:: round(x[, n])
+.. function:: round(number[, ndigits])
 
-   Return the floating point value *x* rounded to *n* digits after the decimal
-   point.  If *n* is omitted, it defaults to zero.  Delegates to
-   ``x.__round__(n)``.
+   Return the floating point value *number* rounded to *ndigits* digits after
+   the decimal point.  If *ndigits* is omitted, it defaults to zero. Delegates
+   to ``number.__round__(ndigits)``.
 
    For the built-in types supporting :func:`round`, values are rounded to the
-   closest multiple of 10 to the power minus *n*; if two multiples are equally
-   close, rounding is done toward the even choice (so, for example, both
-   ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is ``2``).
-   The return value is an integer if called with one argument, otherwise of the
-   same type as *x*.
+   closest multiple of 10 to the power minus *ndigits*; if two multiples are
+   equally close, rounding is done toward the even choice (so, for example,
+   both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is
+   ``2``).  The return value is an integer if called with one argument,
+   otherwise of the same type as *number*.
 
    .. note::
 
@@ -1113,8 +1155,13 @@
 .. function:: set([iterable])
    :noindex:
 
-   Return a new set, optionally with elements taken from *iterable*.
-   The set type is described in :ref:`types-set`.
+   Return a new :class:`set` object, optionally with elements taken from
+   *iterable*.  ``set`` is a built-in class.  See :class:`set` and
+   :ref:`types-set` for documentation about this class.
+
+   For other containers see the built-in :class:`frozenset`, :class:`list`,
+   :class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections`
+   module.
 
 
 .. function:: setattr(object, name, value)
@@ -1126,7 +1173,8 @@
    ``x.foobar = 123``.
 
 
-.. function:: slice([start,] stop[, step])
+.. function:: slice(stop)
+              slice(start, stop[, step])
 
    .. index:: single: Numerical Python
 
@@ -1184,38 +1232,19 @@
    For more information on static methods, consult the documentation on the
    standard type hierarchy in :ref:`types`.
 
+   .. index::
+      single: string; str() (built-in function)
+
 
 .. _func-str:
-.. function:: str([object[, encoding[, errors]]])
+.. function:: str(object='')
+              str(object=b'', encoding='utf-8', errors='strict')
+   :noindex:
 
-   Return a string version of an object, using one of the following modes:
+   Return a :class:`str` version of *object*.  See :func:`str` for details.
 
-   If *encoding* and/or *errors* are given, :func:`str` will decode the
-   *object* which can either be a byte string or a character buffer using
-   the codec for *encoding*. The *encoding* parameter is a string giving
-   the name of an encoding; if the encoding is not known, :exc:`LookupError`
-   is raised.  Error handling is done according to *errors*; this specifies the
-   treatment of characters which are invalid in the input encoding. If
-   *errors* is ``'strict'`` (the default), a :exc:`ValueError` is raised on
-   errors, while a value of ``'ignore'`` causes errors to be silently ignored,
-   and a value of ``'replace'`` causes the official Unicode replacement character,
-   U+FFFD, to be used to replace input characters which cannot be decoded.
-   See also the :mod:`codecs` module.
-
-   When only *object* is given, this returns its nicely printable representation.
-   For strings, this is the string itself.  The difference with ``repr(object)``
-   is that ``str(object)`` does not always attempt to return a string that is
-   acceptable to :func:`eval`; its goal is to return a printable string.
-   With no arguments, this returns the empty string.
-
-   Objects can specify what ``str(object)`` returns by defining a :meth:`__str__`
-   special method.
-
-   For more information on strings see :ref:`typesseq` which describes sequence
-   functionality (strings are sequences), and also the string-specific methods
-   described in the :ref:`string-methods` section. To output formatted strings,
-   see the :ref:`string-formatting` section. In addition see the
-   :ref:`stringservices` section.
+   ``str`` is the built-in string :term:`class`.  For general information
+   about strings, see :ref:`textseq`.
 
 
 .. function:: sum(iterable[, start])
@@ -1292,39 +1321,37 @@
    :noindex:
 
    Rather than being a function, :class:`tuple` is actually an immutable
-   sequence type, as documented in :ref:`typesseq`.
+   sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`.
 
 
 .. function:: type(object)
+              type(name, bases, dict)
 
    .. index:: object: type
 
-   Return the type of an *object*.  The return value is a type object and
-   generally the same object as returned by ``object.__class__``.
+
+   With one argument, return the type of an *object*.  The return value is a
+   type object and generally the same object as returned by ``object.__class__``.
 
    The :func:`isinstance` built-in function is recommended for testing the type
    of an object, because it takes subclasses into account.
 
-   With three arguments, :func:`type` functions as a constructor as detailed
-   below.
 
-
-.. function:: type(name, bases, dict)
-   :noindex:
-
-   Return a new type object.  This is essentially a dynamic form of the
-   :keyword:`class` statement. The *name* string is the class name and becomes the
-   :attr:`__name__` attribute; the *bases* tuple itemizes the base classes and
-   becomes the :attr:`__bases__` attribute; and the *dict* dictionary is the
-   namespace containing definitions for class body and becomes the :attr:`__dict__`
-   attribute.  For example, the following two statements create identical
-   :class:`type` objects:
+   With three arguments, return a new type object.  This is essentially a
+   dynamic form of the :keyword:`class` statement. The *name* string is the
+   class name and becomes the :attr:`__name__` attribute; the *bases* tuple
+   itemizes the base classes and becomes the :attr:`__bases__` attribute;
+   and the *dict* dictionary is the namespace containing definitions for class
+   body and becomes the :attr:`__dict__` attribute.  For example, the
+   following two statements create identical :class:`type` objects:
 
       >>> class X:
       ...     a = 1
       ...
       >>> X = type('X', (object,), dict(a=1))
 
+   See also :ref:`bltin-type-objects`.
+
 
 .. function:: vars([object])
 
diff -r bd8afb90ebf2 Doc/library/gc.rst
--- a/Doc/library/gc.rst
+++ b/Doc/library/gc.rst
@@ -189,13 +189,13 @@
    after collection.  The callbacks will be called with two arguments,
    *phase* and *info*.
 
-   *phase* can one of two values:
+   *phase* can be one of two values:
 
       "start": The garbage collection is about to start.
 
       "stop": The garbage collection has finished.
 
-   *info* provides more information for the callback.  The following
+   *info* is a dict providing more information for the callback.  The following
    keys are currently defined:
 
       "generation": The oldest generation being collected.
@@ -203,7 +203,7 @@
       "collected": When *phase* is "stop", the number of objects
       successfully collected.
 
-      "uncollectable": when *phase* is "stop", the number of objects
+      "uncollectable": When *phase* is "stop", the number of objects
       that could not be collected and were put in :data:`garbage`.
 
    Applications can add their own callbacks to this list.  The primary
diff -r bd8afb90ebf2 Doc/library/glob.rst
--- a/Doc/library/glob.rst
+++ b/Doc/library/glob.rst
@@ -19,6 +19,9 @@
 subshell.  (For tilde and shell variable expansion, use
 :func:`os.path.expanduser` and :func:`os.path.expandvars`.)
 
+For a literal match, wrap the meta-characters in brackets.
+For example, ``'[?]'`` matches the character ``'?'``.
+
 
 .. function:: glob(pathname)
 
diff -r bd8afb90ebf2 Doc/library/gzip.rst
--- a/Doc/library/gzip.rst
+++ b/Doc/library/gzip.rst
@@ -38,7 +38,7 @@
    ``'w'``, or ``'wb'`` for binary mode, or ``'rt'``, ``'at'``, or ``'wt'`` for
    text mode. The default is ``'rb'``.
 
-   The *compresslevel* argument is an integer from 1 to 9, as for the
+   The *compresslevel* argument is an integer from 0 to 9, as for the
    :class:`GzipFile` constructor.
 
    For binary mode, this function is equivalent to the :class:`GzipFile`
@@ -80,9 +80,10 @@
    in text mode, use :func:`.open` (or wrap your :class:`GzipFile` with an
    :class:`io.TextIOWrapper`).
 
-   The *compresslevel* argument is an integer from ``1`` to ``9`` controlling the
-   level of compression; ``1`` is fastest and produces the least compression, and
-   ``9`` is slowest and produces the most compression.  The default is ``9``.
+   The *compresslevel* argument is an integer from ``0`` to ``9`` controlling
+   the level of compression; ``1`` is fastest and produces the least
+   compression, and ``9`` is slowest and produces the most compression. ``0``
+   is no compression. The default is ``9``.
 
    The *mtime* argument is an optional numeric timestamp to be written to
    the stream when compressing.  All :program:`gzip` compressed streams are
diff -r bd8afb90ebf2 Doc/library/html.rst
--- a/Doc/library/html.rst
+++ b/Doc/library/html.rst
@@ -19,3 +19,10 @@
    attribute value delimited by quotes, as in ``<a href="...">``.
 
    .. versionadded:: 3.2
+
+--------------
+
+Submodules in the ``html`` package are:
+
+* :mod:`html.parser` -- HTML/XHTML parser with lenient parsing mode
+* :mod:`html.entities` -- HTML entity definitions
diff -r bd8afb90ebf2 Doc/library/http.client.rst
--- a/Doc/library/http.client.rst
+++ b/Doc/library/http.client.rst
@@ -27,7 +27,8 @@
 The module provides the following classes:
 
 
-.. class:: HTTPConnection(host, port=None[, strict[, timeout[, source_address]]])
+.. class:: HTTPConnection(host, port=None[, strict][, timeout], \
+                          source_address=None)
 
    An :class:`HTTPConnection` instance represents one transaction with an HTTP
    server.  It should be instantiated passing it a host and optional port
@@ -55,7 +56,10 @@
       are not supported anymore.
 
 
-.. class:: HTTPSConnection(host, port=None, key_file=None, cert_file=None[, strict[, timeout[, source_address]]], *, context=None, check_hostname=None)
+.. class:: HTTPSConnection(host, port=None, key_file=None, \
+                           cert_file=None[, strict][, timeout], \
+                           source_address=None, *, context=None, \
+                           check_hostname=None)
 
    A subclass of :class:`HTTPConnection` that uses SSL for communication with
    secure servers.  Default port is ``443``.  If *context* is specified, it
diff -r bd8afb90ebf2 Doc/library/http.rst
--- /dev/null
+++ b/Doc/library/http.rst
@@ -0,0 +1,11 @@
+:mod:`http` --- HTTP modules
+============================
+
+``http`` is a package that collects several modules for working with the
+HyperText Transfer Protocol:
+
+* :mod:`http.client` is a low-level HTTP protocol client; for high-level URL
+  opening use :mod:`urllib.request`
+* :mod:`http.server` contains basic HTTP server classes based on :mod:`socketserver`
+* :mod:`http.cookies` has utilities for implementing state management with cookies
+* :mod:`http.cookiejar` provides persistence of cookies
diff -r bd8afb90ebf2 Doc/library/idle.rst
--- a/Doc/library/idle.rst
+++ b/Doc/library/idle.rst
@@ -154,27 +154,77 @@
 it to the foreground (deiconifying it if necessary).
 
 
-Debug menu (in the Python Shell window only)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Debug menu
+^^^^^^^^^^
+
+* in the Python Shell window only
 
 Go to file/line
-   look around the insert point for a filename and linenumber, open the file, and
-   show the line.
+   Look around the insert point for a filename and line number, open the file,
+   and show the line.  Useful to view the source lines referenced in an
+   exception traceback.
 
-Open stack viewer
-   show the stack traceback of the last exception
+Debugger
+   Run commands in the shell under the debugger.
 
-Debugger toggle
-   Run commands in the shell under the debugger
+Stack viewer
+   Show the stack traceback of the last exception.
 
-JIT Stack viewer toggle
-   Open stack viewer on traceback
+Auto-open Stack Viewer
+   Open stack viewer on traceback.
 
 .. index::
    single: stack viewer
    single: debugger
 
 
+Edit context menu
+^^^^^^^^^^^^^^^^^
+
+* Right-click in Edit window (Control-click on OS X)
+
+Cut
+   Copy selection into system-wide clipboard; then delete selection
+
+Copy
+   Copy selection into system-wide clipboard
+
+Paste
+   Insert system-wide clipboard into window
+
+Set Breakpoint
+   Sets a breakpoint.  Breakpoints are only enabled when the debugger is open.
+
+Clear Breakpoint
+   Clears the breakpoint on that line.
+
+.. index::
+   single: Cut
+   single: Copy
+   single: Paste
+   single: Set Breakpoint
+   single: Clear Breakpoint
+   single: breakpoints
+
+
+Shell context menu
+^^^^^^^^^^^^^^^^^^
+
+* Right-click in Python Shell window (Control-click on OS X)
+
+Cut
+   Copy selection into system-wide clipboard; then delete selection
+
+Copy
+   Copy selection into system-wide clipboard
+
+Paste
+   Insert system-wide clipboard into window
+
+Go to file/line
+   Same as in Debug menu.
+
+
 Basic editing and navigation
 ----------------------------
 
diff -r bd8afb90ebf2 Doc/library/imaplib.rst
--- a/Doc/library/imaplib.rst
+++ b/Doc/library/imaplib.rst
@@ -75,7 +75,7 @@
    :class:`ssl.SSLContext` object which allows bundling SSL configuration
    options, certificates and private keys into a single (potentially long-lived)
    structure. Note that the *keyfile*/*certfile* parameters are mutually exclusive with *ssl_context*,
-   a :class:`ValueError` is thrown if *keyfile*/*certfile* is provided along with *ssl_context*.
+   a :class:`ValueError` is raised if *keyfile*/*certfile* is provided along with *ssl_context*.
 
    .. versionchanged:: 3.3
       *ssl_context* parameter added.
diff -r bd8afb90ebf2 Doc/library/importlib.rst
--- a/Doc/library/importlib.rst
+++ b/Doc/library/importlib.rst
@@ -94,11 +94,10 @@
    :exc:`ValueError` is raised). Otherwise a search using :attr:`sys.meta_path`
    is done. ``None`` is returned if no loader is found.
 
-   A dotted name does not have its parent's implicitly imported. If that is
-   desired (although not nessarily required to find the loader, it will most
-   likely be needed if the loader actually is used to load the module), then
-   you will have to import the packages containing the module prior to calling
-   this function.
+   A dotted name does not have its parent's implicitly imported as that requires
+   loading them and that may not be desired. To properly import a submodule you
+   will need to import all parent packages of the submodule and use the correct
+   argument to *path*.
 
 .. function:: invalidate_caches()
 
@@ -162,7 +161,7 @@
 
       An abstract method for finding a :term:`loader` for the specified
       module.  If this is a top-level import, *path* will be ``None``.
-      Otheriwse, this is a search for a subpackage or module and *path*
+      Otherwise, this is a search for a subpackage or module and *path*
       will be the value of :attr:`__path__` from the parent
       package. If a loader cannot be found, ``None`` is returned.
 
diff -r bd8afb90ebf2 Doc/library/index.rst
--- a/Doc/library/index.rst
+++ b/Doc/library/index.rst
@@ -4,9 +4,6 @@
   The Python Standard Library
 ###############################
 
-:Release: |version|
-:Date: |today|
-
 While :ref:`reference-index` describes the exact syntax and
 semantics of the Python language, this library reference manual
 describes the standard library that is distributed with Python. It also
diff -r bd8afb90ebf2 Doc/library/inspect.rst
--- a/Doc/library/inspect.rst
+++ b/Doc/library/inspect.rst
@@ -471,7 +471,7 @@
       Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the
       passed arguments do not match the signature.
 
-   .. method:: Signature.replace([parameters], *, [return_annotation])
+   .. method:: Signature.replace(*[, parameters][, return_annotation])
 
       Create a new Signature instance based on the instance replace was invoked
       on.  It is possible to pass different ``parameters`` and/or
@@ -565,7 +565,7 @@
          ...         print('Parameter:', param)
          Parameter: c
 
-   .. method:: Parameter.replace(*, [name], [kind], [default], [annotation])
+   .. method:: Parameter.replace(*[, name][, kind][, default][, annotation])
 
       Create a new Parameter instance based on the instance replaced was invoked
       on.  To override a :class:`Parameter` attribute, pass the corresponding
@@ -716,7 +716,7 @@
    locals dictionary of the given frame.
 
 
-.. function:: formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations])
+.. function:: formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])
 
    Format a pretty argument spec from the values returned by
    :func:`getargspec` or :func:`getfullargspec`.
@@ -725,7 +725,14 @@
    ``defaults``, ``kwonlyargs``, ``kwonlydefaults``, ``annotations``). The
    other five arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings. The last argument
-   is an optional function to format the sequence of arguments.
+   is an optional function to format the sequence of arguments. For example::
+
+    >>> from inspect import formatargspec, getfullargspec
+    >>> def f(a: int, b: float):
+    ...     pass
+    ...
+    >>> formatargspec(*getfullargspec(f))
+    '(a: int, b: float)'
 
 
 .. function:: formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])
diff -r bd8afb90ebf2 Doc/library/internet.rst
--- a/Doc/library/internet.rst
+++ b/Doc/library/internet.rst
@@ -23,10 +23,12 @@
    cgi.rst
    cgitb.rst
    wsgiref.rst
+   urllib.rst
    urllib.request.rst
    urllib.parse.rst
    urllib.error.rst
    urllib.robotparser.rst
+   http.rst
    http.client.rst
    ftplib.rst
    poplib.rst
@@ -40,6 +42,7 @@
    http.server.rst
    http.cookies.rst
    http.cookiejar.rst
+   xmlrpc.rst
    xmlrpc.client.rst
    xmlrpc.server.rst
    ipaddress.rst
diff -r bd8afb90ebf2 Doc/library/io.rst
--- a/Doc/library/io.rst
+++ b/Doc/library/io.rst
@@ -185,6 +185,25 @@
 Argument names are not part of the specification, and only the arguments of
 :func:`open` are intended to be used as keyword arguments.
 
+The following table summarizes the ABCs provided by the :mod:`io` module:
+
+=========================  ==================  ========================  ==================================================
+ABC                        Inherits            Stub Methods              Mixin Methods and Properties
+=========================  ==================  ========================  ==================================================
+:class:`IOBase`                                ``fileno``, ``seek``,     ``close``, ``closed``, ``__enter__``,
+                                               and ``truncate``          ``__exit__``, ``flush``, ``isatty``, ``__iter__``,
+                                                                         ``__next__``, ``readable``, ``readline``,
+                                                                         ``readlines``, ``seekable``, ``tell``,
+                                                                         ``writable``, and ``writelines``
+:class:`RawIOBase`         :class:`IOBase`     ``readinto`` and          Inherited :class:`IOBase` methods, ``read``,
+                                               ``write``                 and ``readall``
+:class:`BufferedIOBase`    :class:`IOBase`     ``detach``, ``read``,     Inherited :class:`IOBase` methods, ``readinto``
+                                               ``read1``, and ``write``
+:class:`TextIOBase`        :class:`IOBase`     ``detach``, ``read``,     Inherited :class:`IOBase` methods, ``encoding``,
+                                               ``readline``, and         ``errors``, and ``newlines``
+                                               ``write``
+=========================  ==================  ========================  ==================================================
+
 
 I/O Base Classes
 ^^^^^^^^^^^^^^^^
@@ -213,7 +232,7 @@
    Note that calling any method (even inquiries) on a closed stream is
    undefined.  Implementations may raise :exc:`ValueError` in this case.
 
-   :class:`IOBase` (and its subclasses) support the iterator protocol, meaning
+   :class:`IOBase` (and its subclasses) supports the iterator protocol, meaning
    that an :class:`IOBase` object can be iterated over yielding the lines in a
    stream.  Lines are defined slightly differently depending on whether the
    stream is a binary stream (yielding bytes), or a text stream (yielding
@@ -498,6 +517,9 @@
    :mod:`os.open` as *opener* results in functionality similar to passing
    ``None``).
 
+   See the :func:`open` built-in function for examples on using the *opener*
+   parameter.
+
    .. versionchanged:: 3.3
       The *opener* parameter was added.
       The ``'x'`` mode was added.
diff -r bd8afb90ebf2 Doc/library/ipaddress.rst
--- a/Doc/library/ipaddress.rst
+++ b/Doc/library/ipaddress.rst
@@ -42,8 +42,15 @@
    Return an :class:`IPv4Address` or :class:`IPv6Address` object depending on
    the IP address passed as argument.  Either IPv4 or IPv6 addresses may be
    supplied; integers less than 2**32 will be considered to be IPv4 by default.
-   A :exc:`ValueError` is raised if *address* does not represent a valid IPv4 or
-   IPv6 address.
+   A :exc:`ValueError` is raised if *address* does not represent a valid IPv4
+   or IPv6 address.
+
+.. testsetup::
+   >>> import ipaddress
+   >>> from ipaddress import (ip_network, IPv4Address, IPv4Interface,
+   ...                        IPv4Network)
+
+::
 
    >>> ipaddress.ip_address('192.168.0.1')
    IPv4Address('192.168.0.1')
@@ -111,7 +118,7 @@
 
    >>> ipaddress.IPv4Address('192.168.0.1')
    IPv4Address('192.168.0.1')
-   >>> ipaddress.IPv4Address(3221225985)
+   >>> ipaddress.IPv4Address(3232235521)
    IPv4Address('192.168.0.1')
    >>> ipaddress.IPv4Address(b'\xC0\xA8\x00\x01')
    IPv4Address('192.168.0.1')
@@ -437,7 +444,7 @@
       hosts are all the IP addresses that belong to the network, except the
       network address itself and the network broadcast address.
 
-         >>> list(ip_network('192.0.2.0/29').hosts())
+         >>> list(ip_network('192.0.2.0/29').hosts())  #doctest: +NORMALIZE_WHITESPACE
          [IPv4Address('192.0.2.1'), IPv4Address('192.0.2.2'),
           IPv4Address('192.0.2.3'), IPv4Address('192.0.2.4'),
           IPv4Address('192.0.2.5'), IPv4Address('192.0.2.6')]
@@ -456,7 +463,7 @@
 
          >>> n1 = ip_network('192.0.2.0/28')
          >>> n2 = ip_network('192.0.2.1/32')
-         >>> list(n1.address_exclude(n2))
+         >>> list(n1.address_exclude(n2))  #doctest: +NORMALIZE_WHITESPACE
          [IPv4Network('192.0.2.8/29'), IPv4Network('192.0.2.4/30'),
           IPv4Network('192.0.2.2/31'), IPv4Network('192.0.2.0/32')]
 
@@ -471,10 +478,10 @@
 
          >>> list(ip_network('192.0.2.0/24').subnets())
          [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]
-         >>> list(ip_network('192.0.2.0/24').subnets(prefixlen_diff=2))
+         >>> list(ip_network('192.0.2.0/24').subnets(prefixlen_diff=2))  #doctest: +NORMALIZE_WHITESPACE
          [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
           IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
-         >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=26))
+         >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=26))  #doctest: +NORMALIZE_WHITESPACE
          [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
           IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
          >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=23))
diff -r bd8afb90ebf2 Doc/library/itertools.rst
--- a/Doc/library/itertools.rst
+++ b/Doc/library/itertools.rst
@@ -401,7 +401,8 @@
                   self.currkey = self.keyfunc(self.currvalue)
 
 
-.. function:: islice(iterable, [start,] stop [, step])
+.. function:: islice(iterable, stop)
+              islice(iterable, start, stop[, step])
 
    Make an iterator that returns selected elements from the iterable. If *start* is
    non-zero, then elements from the iterable are skipped until start is reached.
diff -r bd8afb90ebf2 Doc/library/json.rst
--- a/Doc/library/json.rst
+++ b/Doc/library/json.rst
@@ -42,7 +42,8 @@
 Pretty printing::
 
     >>> import json
-    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
+    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True,
+    ...                  indent=4, separators=(',', ': ')))
     {
         "4": 5,
         "6": 7
@@ -116,7 +117,10 @@
 Basic Usage
 -----------
 
-.. function:: dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)
+.. function:: dump(obj, fp, skipkeys=False, ensure_ascii=True, \
+                   check_circular=True, allow_nan=True, cls=None, \
+                   indent=None, separators=None, default=None, \
+                   sort_keys=False, **kw)
 
    Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-supporting
    :term:`file-like object`).
@@ -146,9 +150,18 @@
    object members will be pretty-printed with that indent level.  An indent level
    of 0, negative, or ``""`` will only insert newlines.  ``None`` (the default)
    selects the most compact representation. Using a positive integer indent
-   indents that many spaces per level.  If *indent* is a string (such at '\t'),
+   indents that many spaces per level.  If *indent* is a string (such as ``"\t"``),
    that string is used to indent each level.
 
+   .. versionchanged:: 3.2
+      Allow strings for *indent* in addition to integers.
+
+   .. note::
+
+      Since the default item separator is ``', '``,  the output might include
+      trailing whitespace when *indent* is specified.  You can use
+      ``separators=(',', ': ')`` to avoid this.
+
    If *separators* is an ``(item_separator, dict_separator)`` tuple, then it
    will be used instead of the default ``(', ', ': ')`` separators.  ``(',',
    ':')`` is the most compact JSON representation.
@@ -156,12 +169,18 @@
    *default(obj)* is a function that should return a serializable version of
    *obj* or raise :exc:`TypeError`.  The default simply raises :exc:`TypeError`.
 
+   If *sort_keys* is ``True`` (default: ``False``), then the output of
+   dictionaries will be sorted by key.
+
    To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the
    :meth:`default` method to serialize additional types), specify it with the
    *cls* kwarg; otherwise :class:`JSONEncoder` is used.
 
 
-.. function:: dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)
+.. function:: dumps(obj, skipkeys=False, ensure_ascii=True, \
+                    check_circular=True, allow_nan=True, cls=None, \
+                    indent=None, separators=None, default=None, \
+                    sort_keys=False, **kw)
 
    Serialize *obj* to a JSON formatted :class:`str`.  The arguments have the
    same meaning as in :func:`dump`.
@@ -371,10 +390,21 @@
    will be sorted by key; this is useful for regression tests to ensure that
    JSON serializations can be compared on a day-to-day basis.
 
-   If *indent* is a non-negative integer (it is ``None`` by default), then JSON
-   array elements and object members will be pretty-printed with that indent
-   level.  An indent level of 0 will only insert newlines.  ``None`` is the most
-   compact representation.
+   If *indent* is a non-negative integer or string, then JSON array elements and
+   object members will be pretty-printed with that indent level.  An indent level
+   of 0, negative, or ``""`` will only insert newlines.  ``None`` (the default)
+   selects the most compact representation. Using a positive integer indent
+   indents that many spaces per level.  If *indent* is a string (such as ``"\t"``),
+   that string is used to indent each level.
+
+   .. versionchanged:: 3.2
+      Allow strings for *indent* in addition to integers.
+
+   .. note::
+
+      Since the default item separator is ``', '``,  the output might include
+      trailing whitespace when *indent* is specified.  You can use
+      ``separators=(',', ': ')`` to avoid this.
 
    If specified, *separators* should be an ``(item_separator, key_separator)``
    tuple.  The default is ``(', ', ': ')``.  To get the most compact JSON
diff -r bd8afb90ebf2 Doc/library/lzma.rst
--- a/Doc/library/lzma.rst
+++ b/Doc/library/lzma.rst
@@ -335,15 +335,15 @@
 Reading in a compressed file::
 
    import lzma
-   with lzma.LZMAFile("file.xz") as f:
-      file_content = f.read()
+   with lzma.open("file.xz") as f:
+       file_content = f.read()
 
 Creating a compressed file::
 
    import lzma
    data = b"Insert Data Here"
-   with lzma.LZMAFile("file.xz", "w") as f:
-      f.write(data)
+   with lzma.open("file.xz", "w") as f:
+       f.write(data)
 
 Compressing data in memory::
 
@@ -367,7 +367,7 @@
    import lzma
    with open("file.xz", "wb") as f:
        f.write(b"This data will not be compressed\n")
-       with lzma.LZMAFile(f, "w") as lzf:
+       with lzma.open(f, "w") as lzf:
            lzf.write(b"This *will* be compressed\n")
        f.write(b"Not compressed\n")
 
@@ -378,5 +378,5 @@
        {"id": lzma.FILTER_DELTA, "dist": 5},
        {"id": lzma.FILTER_LZMA2, "preset": 7 | lzma.PRESET_EXTREME},
    ]
-   with lzma.LZMAFile("file.xz", "w", filters=my_filters) as f:
+   with lzma.open("file.xz", "w", filters=my_filters) as f:
        f.write(b"blah blah blah")
diff -r bd8afb90ebf2 Doc/library/mailbox.rst
--- a/Doc/library/mailbox.rst
+++ b/Doc/library/mailbox.rst
@@ -10,9 +10,9 @@
 This module defines two classes, :class:`Mailbox` and :class:`Message`, for
 accessing and manipulating on-disk mailboxes and the messages they contain.
 :class:`Mailbox` offers a dictionary-like mapping from keys to messages.
-:class:`Message` extends the :mod:`email.Message` module's :class:`Message`
-class with format-specific state and behavior. Supported mailbox formats are
-Maildir, mbox, MH, Babyl, and MMDF.
+:class:`Message` extends the :mod:`email.message` module's
+:class:`~email.message.Message` class with format-specific state and behavior.
+Supported mailbox formats are Maildir, mbox, MH, Babyl, and MMDF.
 
 
 .. seealso::
@@ -81,7 +81,7 @@
       it.
 
       Parameter *message* may be a :class:`Message` instance, an
-      :class:`email.Message.Message` instance, a string, a byte string, or a
+      :class:`email.message.Message` instance, a string, a byte string, or a
       file-like object (which should be open in binary mode). If *message* is
       an instance of the
       appropriate format-specific :class:`Message` subclass (e.g., if it's an
@@ -112,7 +112,7 @@
       :exc:`KeyError` exception if no message already corresponds to *key*.
 
       As with :meth:`add`, parameter *message* may be a :class:`Message`
-      instance, an :class:`email.Message.Message` instance, a string, a byte
+      instance, an :class:`email.message.Message` instance, a string, a byte
       string, or a file-like object (which should be open in binary mode). If
       *message* is an
       instance of the appropriate format-specific :class:`Message` subclass
@@ -757,11 +757,12 @@
 
 .. class:: Message(message=None)
 
-   A subclass of the :mod:`email.Message` module's :class:`Message`. Subclasses of
-   :class:`mailbox.Message` add mailbox-format-specific state and behavior.
+   A subclass of the :mod:`email.message` module's
+   :class:`~email.message.Message`. Subclasses of :class:`mailbox.Message` add
+   mailbox-format-specific state and behavior.
 
    If *message* is omitted, the new instance is created in a default, empty state.
-   If *message* is an :class:`email.Message.Message` instance, its contents are
+   If *message* is an :class:`email.message.Message` instance, its contents are
    copied; furthermore, any format-specific information is converted insofar as
    possible if *message* is a :class:`Message` instance. If *message* is a string,
    a byte string,
@@ -1267,7 +1268,7 @@
 
       Set the message's visible headers to be the same as the headers in
       *message*.  Parameter *visible* should be a :class:`Message` instance, an
-      :class:`email.Message.Message` instance, a string, or a file-like object
+      :class:`email.message.Message` instance, a string, or a file-like object
       (which should be open in text mode).
 
 
diff -r bd8afb90ebf2 Doc/library/markup.rst
--- a/Doc/library/markup.rst
+++ b/Doc/library/markup.rst
@@ -9,20 +9,13 @@
 Language (SGML) and the Hypertext Markup Language (HTML), and several interfaces
 for working with the Extensible Markup Language (XML).
 
-It is important to note that modules in the :mod:`xml` package require that
-there be at least one SAX-compliant XML parser available. The Expat parser is
-included with Python, so the :mod:`xml.parsers.expat` module will always be
-available.
-
-The documentation for the :mod:`xml.dom` and :mod:`xml.sax` packages are the
-definition of the Python bindings for the DOM and SAX interfaces.
-
 
 .. toctree::
 
    html.rst
    html.parser.rst
    html.entities.rst
+   xml.rst
    xml.etree.elementtree.rst
    xml.dom.rst
    xml.dom.minidom.rst
diff -r bd8afb90ebf2 Doc/library/multiprocessing.rst
--- a/Doc/library/multiprocessing.rst
+++ b/Doc/library/multiprocessing.rst
@@ -29,7 +29,7 @@
     Functionality within this package requires that the ``__main__`` module be
     importable by the children. This is covered in :ref:`multiprocessing-programming`
     however it is worth pointing out here. This means that some examples, such
-    as the :class:`multiprocessing.Pool` examples will not work in the
+    as the :class:`multiprocessing.pool.Pool` examples will not work in the
     interactive interpreter. For example::
 
         >>> from multiprocessing import Pool
@@ -279,7 +279,7 @@
        return x*x
 
    if __name__ == '__main__':
-       with Pool(processes=4) as pool         # start 4 worker processes
+       with Pool(processes=4) as pool:        # start 4 worker processes
            result = pool.apply_async(f, [10]) # evaluate "f(10)" asynchronously
            print(result.get(timeout=1))       # prints "100" unless your computer is *very* slow
            print(pool.map(f, range(10)))      # prints "[0, 1, 4,..., 81]"
@@ -295,7 +295,8 @@
 :class:`Process` and exceptions
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-.. class:: Process([group[, target[, name[, args[, kwargs]]]]], *, daemon=None)
+.. class:: Process(group=None, target=None, name=None, args=(), kwargs={}, \
+                   *, daemon=None)
 
    Process objects represent activity that is run in a separate process. The
    :class:`Process` class has equivalents of all the methods of
@@ -915,7 +916,7 @@
 
 .. class:: Condition([lock])
 
-   A condition variable: a clone of :class:`threading.Condition`.
+   A condition variable: an alias for :class:`threading.Condition`.
 
    If *lock* is specified then it should be a :class:`Lock` or :class:`RLock`
    object from :mod:`multiprocessing`.
@@ -1147,7 +1148,7 @@
 
        n = Value('i', 7)
        x = Value(c_double, 1.0/3.0, lock=False)
-       s = Array('c', 'hello world', lock=lock)
+       s = Array('c', b'hello world', lock=lock)
        A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)
 
        p = Process(target=modify, args=(n, x, s, A))
@@ -1637,7 +1638,7 @@
 One can create a pool of processes which will carry out tasks submitted to it
 with the :class:`Pool` class.
 
-.. class:: multiprocessing.Pool([processes[, initializer[, initargs[, maxtasksperchild]]]])
+.. class:: Pool([processes[, initializer[, initargs[, maxtasksperchild]]]])
 
    A process pool object which controls a pool of worker processes to which jobs
    can be submitted.  It supports asynchronous results with timeouts and
diff -r bd8afb90ebf2 Doc/library/nntplib.rst
--- a/Doc/library/nntplib.rst
+++ b/Doc/library/nntplib.rst
@@ -487,10 +487,10 @@
 them have been superseded by newer commands in :rfc:`3977`.
 
 
-.. method:: NNTP.xhdr(header, string, *, file=None)
+.. method:: NNTP.xhdr(hdr, str, *, file=None)
 
-   Send an ``XHDR`` command.  The *header* argument is a header keyword, e.g.
-   ``'subject'``.  The *string* argument should have the form ``'first-last'``
+   Send an ``XHDR`` command.  The *hdr* argument is a header keyword, e.g.
+   ``'subject'``.  The *str* argument should have the form ``'first-last'``
    where *first* and *last* are the first and last article numbers to search.
    Return a pair ``(response, list)``, where *list* is a list of pairs ``(id,
    text)``, where *id* is an article number (as a string) and *text* is the text of
diff -r bd8afb90ebf2 Doc/library/optparse.rst
--- a/Doc/library/optparse.rst
+++ b/Doc/library/optparse.rst
@@ -273,7 +273,8 @@
 strings as you like (including zero), as long as there is at least one option
 string overall.
 
-The option strings passed to :meth:`add_option` are effectively labels for the
+The option strings passed to :meth:`OptionParser.add_option` are effectively
+labels for the
 option defined by that call.  For brevity, we will frequently refer to
 *encountering an option* on the command line; in reality, :mod:`optparse`
 encounters *option strings* and looks up options from them.
@@ -892,7 +893,8 @@
 The canonical way to create an :class:`Option` instance is with the
 :meth:`add_option` method of :class:`OptionParser`.
 
-.. method:: OptionParser.add_option(opt_str[, ...], attr=value, ...)
+.. method:: OptionParser.add_option(option)
+            OptionParser.add_option(*opt_str, attr=value, ...)
 
    To define an option with only a short option string::
 
@@ -1165,6 +1167,17 @@
 
      options.tracks.append(int("4"))
 
+  The ``append`` action calls the ``append`` method on the current value of the
+  option.  This means that any default value specified must have an ``append``
+  method.  It also means that if the default value is non-empty, the default
+  elements will be present in the parsed value for the option, with any values
+  from the command line appended after those default values::
+
+     >>> parser.add_option("--files", action="append", default=['~/.mypkg/defaults'])
+     >>> opts, args = parser.parse_args(['--files', 'overrides.mypkg'])
+     >>> opts.files
+     ['~/.mypkg/defaults', 'overrides.mypkg']
+
 * ``"append_const"`` [required: :attr:`~Option.const`; relevant:
   :attr:`~Option.dest`]
 
diff -r bd8afb90ebf2 Doc/library/os.path.rst
--- a/Doc/library/os.path.rst
+++ b/Doc/library/os.path.rst
@@ -43,13 +43,15 @@
 .. function:: abspath(path)
 
    Return a normalized absolutized version of the pathname *path*. On most
-   platforms, this is equivalent to ``normpath(join(os.getcwd(), path))``.
+   platforms, this is equivalent to calling the function :func:`normpath` as
+   follows: ``normpath(join(os.getcwd(), path))``.
 
 
 .. function:: basename(path)
 
-   Return the base name of pathname *path*.  This is the second half of the pair
-   returned by ``split(path)``.  Note that the result of this function is different
+   Return the base name of pathname *path*.  This is the second element of the
+   pair returned by passing *path* to the function :func:`split`.  Note that
+   the result of this function is different
    from the Unix :program:`basename` program; where :program:`basename` for
    ``'/foo/bar/'`` returns ``'bar'``, the :func:`basename` function returns an
    empty string (``''``).
@@ -64,8 +66,8 @@
 
 .. function:: dirname(path)
 
-   Return the directory name of pathname *path*.  This is the first half of the
-   pair returned by ``split(path)``.
+   Return the directory name of pathname *path*.  This is the first element of
+   the pair returned by passing *path* to the function :func:`split`.
 
 
 .. function:: exists(path)
@@ -124,7 +126,7 @@
 
    Return the time of last access of *path*.  The return value is a number giving
    the number of seconds since the epoch (see the  :mod:`time` module).  Raise
-   :exc:`os.error` if the file does not exist or is inaccessible.
+   :exc:`OSError` if the file does not exist or is inaccessible.
 
    If :func:`os.stat_float_times` returns True, the result is a floating point
    number.
@@ -134,7 +136,7 @@
 
    Return the time of last modification of *path*.  The return value is a number
    giving the number of seconds since the epoch (see the  :mod:`time` module).
-   Raise :exc:`os.error` if the file does not exist or is inaccessible.
+   Raise :exc:`OSError` if the file does not exist or is inaccessible.
 
    If :func:`os.stat_float_times` returns True, the result is a floating point
    number.
@@ -145,13 +147,13 @@
    Return the system's ctime which, on some systems (like Unix) is the time of the
    last change, and, on others (like Windows), is the creation time for *path*.
    The return value is a number giving the number of seconds since the epoch (see
-   the  :mod:`time` module).  Raise :exc:`os.error` if the file does not exist or
+   the  :mod:`time` module).  Raise :exc:`OSError` if the file does not exist or
    is inaccessible.
 
 
 .. function:: getsize(path)
 
-   Return the size, in bytes, of *path*.  Raise :exc:`os.error` if the file does
+   Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does
    not exist or is inaccessible.
 
 
@@ -282,7 +284,8 @@
    *path* is empty, both *head* and *tail* are empty.  Trailing slashes are
    stripped from *head* unless it is the root (one or more slashes only).  In
    all cases, ``join(head, tail)`` returns a path to the same location as *path*
-   (but the strings may differ).
+   (but the strings may differ).  Also see the functions :func:`dirname` and
+   :func:`basename`.
 
 
 .. function:: splitdrive(path)
diff -r bd8afb90ebf2 Doc/library/os.rst
--- a/Doc/library/os.rst
+++ b/Doc/library/os.rst
@@ -105,7 +105,7 @@
 
 .. data:: environ
 
-   A mapping object representing the string environment. For example,
+   A :term:`mapping` object representing the string environment. For example,
    ``environ['HOME']`` is the pathname of your home directory (on some platforms),
    and is equivalent to ``getenv("HOME")`` in C.
 
@@ -145,7 +145,7 @@
 
 .. data:: environb
 
-   Bytes version of :data:`environ`: a mapping object representing the
+   Bytes version of :data:`environ`: a :term:`mapping` object representing the
    environment as byte strings. :data:`environ` and :data:`environb` are
    synchronized (modify :data:`environb` updates :data:`environ`, and vice
    versa).
@@ -1171,7 +1171,7 @@
    output) specifies which file descriptor should be queried.
 
    If the file descriptor is not connected to a terminal, an :exc:`OSError`
-   is thrown.
+   is raised.
 
    :func:`shutil.get_terminal_size` is the high-level function which
    should normally be used, ``os.get_terminal_size`` is the low-level
@@ -1555,18 +1555,21 @@
       single: UNC paths; and os.makedirs()
 
    Recursive directory creation function.  Like :func:`mkdir`, but makes all
-   intermediate-level directories needed to contain the leaf directory.  If
-   the target directory with the same mode as specified already exists,
-   raises an :exc:`OSError` exception if *exist_ok* is False, otherwise no
-   exception is raised.  If the directory cannot be created in other cases,
-   raises an :exc:`OSError` exception.  The default *mode* is ``0o777`` (octal).
-   On some systems, *mode* is ignored.  Where it is used, the current umask
-   value is first masked out.
+   intermediate-level directories needed to contain the leaf directory.
+
+   The default *mode* is ``0o777`` (octal).  On some systems, *mode* is
+   ignored.  Where it is used, the current umask value is first masked out.
+
+   If *exists_ok* is ``False`` (the default), an :exc:`OSError` is raised if
+   the target directory already exists.  If *exists_ok* is ``True`` an
+   :exc:`OSError` is still raised if the umask-masked *mode* is different from
+   the existing mode, on systems where the mode is used.  :exc:`OSError` will
+   also be raised if the directory creation fails.
 
    .. note::
 
       :func:`makedirs` will become confused if the path elements to create
-      include :data:`pardir`.
+      include :data:`pardir` (eg. ".." on UNIX systems).
 
    This function handles UNC paths correctly.
 
@@ -1855,9 +1858,8 @@
    :attr:`st_mtime`, :attr:`st_ctime`. More items may be added at the end by
    some implementations.
 
-   This function can support :ref:`specifying a file descriptor
-   <path_fd>`, :ref:`specifying a file descriptor <path_fd>` and :ref:`not
-   following symlinks <follow_symlinks>`.
+   This function can support :ref:`specifying a file descriptor <path_fd>` and
+   :ref:`not following symlinks <follow_symlinks>`.
 
    .. index:: module: stat
 
@@ -1943,7 +1945,7 @@
    :mod:`os` module permit use of their *dir_fd* parameter.  Different platforms
    provide different functionality, and an option that might work on one might
    be unsupported on another.  For consistency's sakes, functions that support
-   *dir_fd* always allow specifying the parameter, but will throw an exception
+   *dir_fd* always allow specifying the parameter, but will raise an exception
    if the functionality is not actually available.
 
    To check whether a particular function permits use of its *dir_fd*
@@ -1984,7 +1986,7 @@
    descriptor.  Different platforms provide different functionality, and an
    option that might work on one might be unsupported on another.  For
    consistency's sakes, functions that support *fd* always allow specifying
-   the parameter, but will throw an exception if the functionality is not
+   the parameter, but will raise an exception if the functionality is not
    actually available.
 
    To check whether a particular function permits specifying an open file
@@ -2005,7 +2007,7 @@
    platforms provide different functionality, and an option that might work on
    one might be unsupported on another.  For consistency's sakes, functions that
    support *follow_symlinks* always allow specifying the parameter, but will
-   throw an exception if the functionality is not actually available.
+   raise an exception if the functionality is not actually available.
 
    To check whether a particular function permits use of its *follow_symlinks*
    parameter, use the ``in`` operator on ``supports_follow_symlinks``.  As an
@@ -2923,7 +2925,7 @@
    with :const:`P_NOWAIT` return suitable process handles.
 
 
-.. function:: wait3([options])
+.. function:: wait3(options)
 
    Similar to :func:`waitpid`, except no process id argument is given and a
    3-element tuple containing the child's process id, exit status indication, and
@@ -3307,3 +3309,6 @@
    though its exact quality depends on the OS implementation.  On a Unix-like
    system this will query /dev/urandom, and on Windows it will use CryptGenRandom.
    If a randomness source is not found, :exc:`NotImplementedError` will be raised.
+
+   For an easy-to-use interface to the random number generator
+   provided by your platform, please see :class:`random.SystemRandom`.
diff -r bd8afb90ebf2 Doc/library/ossaudiodev.rst
--- a/Doc/library/ossaudiodev.rst
+++ b/Doc/library/ossaudiodev.rst
@@ -67,7 +67,8 @@
    ``ossaudiodev.error``.)
 
 
-.. function:: open([device, ]mode)
+.. function:: open(mode)
+              open(device, mode)
 
    Open an audio device and return an OSS audio device object.  This object
    supports many file-like methods, such as :meth:`read`, :meth:`write`, and
diff -r bd8afb90ebf2 Doc/library/poplib.rst
--- a/Doc/library/poplib.rst
+++ b/Doc/library/poplib.rst
@@ -24,7 +24,7 @@
 mailserver supports IMAP, you would be better off using the
 :class:`imaplib.IMAP4` class, as IMAP servers tend to be better implemented.
 
-A single class is provided by the :mod:`poplib` module:
+The :mod:`poplib` module provides two classes:
 
 
 .. class:: POP3(host, port=POP3_PORT[, timeout])
diff -r bd8afb90ebf2 Doc/library/profile.rst
--- a/Doc/library/profile.rst
+++ b/Doc/library/profile.rst
@@ -240,11 +240,12 @@
         43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)
        ...
 
-   The first line indicates that 2706 calls were monitored.  Of those calls, 2004
-   were :dfn:`primitive`.  We define :dfn:`primitive` to mean that the call was not
-   induced via recursion. The next line: ``Ordered by: standard name``, indicates
-   that the text string in the far right column was used to sort the output. The
-   column headings include:
+   The first line indicates that 2706 calls were monitored.  Of those
+   calls, 2004 were :dfn:`primitive`.  We define :dfn:`primitive` to
+   mean that the call was not induced via recursion. The next line:
+   ``Ordered by: standard name``, indicates that the text string in
+   the far right column was used to sort the output. The column
+   headings include:
 
    ncalls
       for the number of calls,
@@ -266,14 +267,14 @@
    filename:lineno(function)
       provides the respective data of each function
 
-   When there are two numbers in the first column (for example, ``43/3``), then the
-   latter is the number of primitive calls, and the former is the actual number of
-   calls.  Note that when the function does not recurse, these two values are the
-   same, and only the single figure is printed.
+   When there are two numbers in the first column (for example,
+   ``43/3``), then the latter is the number of primitive calls, and
+   the former is the actual number of calls.  Note that when the
+   function does not recurse, these two values are the same, and only
+   the single figure is printed.
 
-   If *sort* is given, it can be one of ``'stdname'`` (sort by filename:lineno),
-   ``'calls'`` (sort by number of calls), ``'time'`` (sort by total time) or
-   ``'cumulative'`` (sort by cumulative time).  The default is ``'stdname'``.
+   If *sort* is given, it can be one of values allowed for *key*
+   parameter from :meth:`pstats.Stats.sort_stats`.
 
 
 .. function:: runctx(command, globals, locals, filename=None)
@@ -291,19 +292,22 @@
 
 .. class:: Stats(*filenames, stream=sys.stdout)
 
-   This class constructor creates an instance of a "statistics object" from a
-   *filename* (or set of filenames).  :class:`Stats` objects are manipulated by
-   methods, in order to print useful reports.  You may specify an alternate output
-   stream by giving the keyword argument, ``stream``.
+   This class constructor creates an instance of a "statistics object"
+   from a *filename* (or set of filenames).  :class:`Stats` objects
+   are manipulated by methods, in order to print useful reports.  You
+   may specify an alternate output stream by giving the keyword
+   argument, ``stream``.
 
-   The file selected by the above constructor must have been created by the
-   corresponding version of :mod:`profile` or :mod:`cProfile`.  To be specific,
-   there is *no* file compatibility guaranteed with future versions of this
-   profiler, and there is no compatibility with files produced by other profilers.
-   If several files are provided, all the statistics for identical functions will
-   be coalesced, so that an overall view of several processes can be considered in
-   a single report.  If additional files need to be combined with data in an
-   existing :class:`Stats` object, the :meth:`add` method can be used.
+   The file selected by the above constructor must have been created
+   by the corresponding version of :mod:`profile` or :mod:`cProfile`.
+   To be specific, there is *no* file compatibility guaranteed with
+   future versions of this profiler, and there is no compatibility
+   with files produced by other profilers.  If several files are
+   provided, all the statistics for identical functions will be
+   coalesced, so that an overall view of several processes can be
+   considered in a single report.  If additional files need to be
+   combined with data in an existing :class:`Stats` object, the
+   :meth:`add` method can be used.
 
    .. (such as the old system profiler).
 
@@ -318,15 +322,17 @@
 
 .. method:: Stats.strip_dirs()
 
-   This method for the :class:`Stats` class removes all leading path information
-   from file names.  It is very useful in reducing the size of the printout to fit
-   within (close to) 80 columns.  This method modifies the object, and the stripped
-   information is lost.  After performing a strip operation, the object is
-   considered to have its entries in a "random" order, as it was just after object
-   initialization and loading.  If :meth:`strip_dirs` causes two function names to
-   be indistinguishable (they are on the same line of the same filename, and have
-   the same function name), then the statistics for these two entries are
-   accumulated into a single entry.
+   This method for the :class:`Stats` class removes all leading path
+   information from file names.  It is very useful in reducing the
+   size of the printout to fit within (close to) 80 columns.  This
+   method modifies the object, and the stripped information is lost.
+   After performing a strip operation, the object is considered to
+   have its entries in a "random" order, as it was just after object
+   initialization and loading.  If :meth:`strip_dirs` causes two
+   function names to be indistinguishable (they are on the same line
+   of the same filename, and have the same function name), then the
+   statistics for these two entries are accumulated into a single
+   entry.
 
 
 .. method:: Stats.add(*filenames)
@@ -340,23 +346,25 @@
 
 .. method:: Stats.dump_stats(filename)
 
-   Save the data loaded into the :class:`Stats` object to a file named *filename*.
-   The file is created if it does not exist, and is overwritten if it already
-   exists.  This is equivalent to the method of the same name on the
-   :class:`profile.Profile` and :class:`cProfile.Profile` classes.
+   Save the data loaded into the :class:`Stats` object to a file named
+   *filename*.  The file is created if it does not exist, and is
+   overwritten if it already exists.  This is equivalent to the method
+   of the same name on the :class:`profile.Profile` and
+   :class:`cProfile.Profile` classes.
 
 
 .. method:: Stats.sort_stats(*keys)
 
-   This method modifies the :class:`Stats` object by sorting it according to the
-   supplied criteria.  The argument is typically a string identifying the basis of
-   a sort (example: ``'time'`` or ``'name'``).
+   This method modifies the :class:`Stats` object by sorting it
+   according to the supplied criteria.  The argument is typically a
+   string identifying the basis of a sort (example: ``'time'`` or
+   ``'name'``).
 
-   When more than one key is provided, then additional keys are used as secondary
-   criteria when there is equality in all keys selected before them.  For example,
-   ``sort_stats('name', 'file')`` will sort all the entries according to their
-   function name, and resolve all ties (identical function names) by sorting by
-   file name.
+   When more than one key is provided, then additional keys are used
+   as secondary criteria when there is equality in all keys selected
+   before them.  For example, ``sort_stats('name', 'file')`` will sort
+   all the entries according to their function name, and resolve all
+   ties (identical function names) by sorting by file name.
 
    Abbreviations can be used for any key names, as long as the abbreviation is
    unambiguous.  The following are the keys currently defined:
@@ -368,10 +376,16 @@
    +------------------+----------------------+
    | ``'cumulative'`` | cumulative time      |
    +------------------+----------------------+
+   | ``'cumtime'``    | cumulative time      |
+   +------------------+----------------------+
    | ``'file'``       | file name            |
    +------------------+----------------------+
+   | ``'filename'``   | file name            |
+   +------------------+----------------------+
    | ``'module'``     | file name            |
    +------------------+----------------------+
+   | ``'ncalls'``     | call count           |
+   +------------------+----------------------+
    | ``'pcalls'``     | primitive call count |
    +------------------+----------------------+
    | ``'line'``       | line number          |
@@ -384,51 +398,60 @@
    +------------------+----------------------+
    | ``'time'``       | internal time        |
    +------------------+----------------------+
+   | ``'tottime'``    | internal time        |
+   +------------------+----------------------+
 
-   Note that all sorts on statistics are in descending order (placing most time
-   consuming items first), where as name, file, and line number searches are in
-   ascending order (alphabetical). The subtle distinction between ``'nfl'`` and
-   ``'stdname'`` is that the standard name is a sort of the name as printed, which
-   means that the embedded line numbers get compared in an odd way.  For example,
-   lines 3, 20, and 40 would (if the file names were the same) appear in the string
-   order 20, 3 and 40.  In contrast, ``'nfl'`` does a numeric compare of the line
-   numbers.  In fact, ``sort_stats('nfl')`` is the same as ``sort_stats('name',
-   'file', 'line')``.
+   Note that all sorts on statistics are in descending order (placing
+   most time consuming items first), where as name, file, and line
+   number searches are in ascending order (alphabetical). The subtle
+   distinction between ``'nfl'`` and ``'stdname'`` is that the
+   standard name is a sort of the name as printed, which means that
+   the embedded line numbers get compared in an odd way.  For example,
+   lines 3, 20, and 40 would (if the file names were the same) appear
+   in the string order 20, 3 and 40.  In contrast, ``'nfl'`` does a
+   numeric compare of the line numbers.  In fact,
+   ``sort_stats('nfl')`` is the same as ``sort_stats('name', 'file',
+   'line')``.
 
-   For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, ``1``,
-   and ``2`` are permitted.  They are interpreted as ``'stdname'``, ``'calls'``,
-   ``'time'``, and ``'cumulative'`` respectively.  If this old style format
-   (numeric) is used, only one sort key (the numeric key) will be used, and
-   additional arguments will be silently ignored.
+   For backward-compatibility reasons, the numeric arguments ``-1``,
+   ``0``, ``1``, and ``2`` are permitted.  They are interpreted as
+   ``'stdname'``, ``'calls'``, ``'time'``, and ``'cumulative'``
+   respectively.  If this old style format (numeric) is used, only one
+   sort key (the numeric key) will be used, and additional arguments
+   will be silently ignored.
 
    .. For compatibility with the old profiler,
 
 
 .. method:: Stats.reverse_order()
 
-   This method for the :class:`Stats` class reverses the ordering of the basic list
-   within the object.  Note that by default ascending vs descending order is
-   properly selected based on the sort key of choice.
+   This method for the :class:`Stats` class reverses the ordering of
+   the basic list within the object.  Note that by default ascending
+   vs descending order is properly selected based on the sort key of
+   choice.
 
    .. This method is provided primarily for compatibility with the old profiler.
 
 
 .. method:: Stats.print_stats(*restrictions)
 
-   This method for the :class:`Stats` class prints out a report as described in the
-   :func:`profile.run` definition.
+   This method for the :class:`Stats` class prints out a report as
+   described in the :func:`profile.run` definition.
 
-   The order of the printing is based on the last :meth:`sort_stats` operation done
-   on the object (subject to caveats in :meth:`add` and :meth:`strip_dirs`).
+   The order of the printing is based on the last :meth:`sort_stats`
+   operation done on the object (subject to caveats in :meth:`add` and
+   :meth:`strip_dirs`).
 
-   The arguments provided (if any) can be used to limit the list down to the
-   significant entries.  Initially, the list is taken to be the complete set of
-   profiled functions.  Each restriction is either an integer (to select a count of
-   lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a
-   percentage of lines), or a regular expression (to pattern match the standard
-   name that is printed; as of Python 1.5b1, this uses the Perl-style regular
-   expression syntax defined by the :mod:`re` module).  If several restrictions are
-   provided, then they are applied sequentially.  For example::
+   The arguments provided (if any) can be used to limit the list down
+   to the significant entries.  Initially, the list is taken to be the
+   complete set of profiled functions.  Each restriction is either an
+   integer (to select a count of lines), or a decimal fraction between
+   0.0 and 1.0 inclusive (to select a percentage of lines), or a
+   regular expression (to pattern match the standard name that is
+   printed; as of Python 1.5b1, this uses the Perl-style regular
+   expression syntax defined by the :mod:`re` module).  If several
+   restrictions are provided, then they are applied sequentially.  For
+   example::
 
       print_stats(.1, 'foo:')
 
@@ -455,17 +478,19 @@
      non-parenthesized number repeats the cumulative time spent in the function
      at the right.
 
-   * With :mod:`cProfile`, each caller is preceded by three numbers: the number of
-     times this specific call was made, and the total and cumulative times spent in
-     the current function while it was invoked by this specific caller.
+   * With :mod:`cProfile`, each caller is preceded by three numbers:
+     the number of times this specific call was made, and the total
+     and cumulative times spent in the current function while it was
+     invoked by this specific caller.
 
 
 .. method:: Stats.print_callees(*restrictions)
 
-   This method for the :class:`Stats` class prints a list of all function that were
-   called by the indicated function.  Aside from this reversal of direction of
-   calls (re: called vs was called by), the arguments and ordering are identical to
-   the :meth:`print_callers` method.
+   This method for the :class:`Stats` class prints a list of all
+   function that were called by the indicated function.  Aside from
+   this reversal of direction of calls (re: called vs was called by),
+   the arguments and ordering are identical to the
+   :meth:`print_callers` method.
 
 
 .. _profile-limits:
@@ -566,29 +591,33 @@
 The resulting profiler will then call :func:`your_time_func`.
 
 :class:`profile.Profile`
-   :func:`your_time_func` should return a single number, or a list of numbers whose
-   sum is the current time (like what :func:`os.times` returns).  If the function
-   returns a single time number, or the list of returned numbers has length 2, then
-   you will get an especially fast version of the dispatch routine.
+   :func:`your_time_func` should return a single number, or a list of
+   numbers whose sum is the current time (like what :func:`os.times`
+   returns).  If the function returns a single time number, or the
+   list of returned numbers has length 2, then you will get an
+   especially fast version of the dispatch routine.
 
-   Be warned that you should calibrate the profiler class for the timer function
-   that you choose.  For most machines, a timer that returns a lone integer value
-   will provide the best results in terms of low overhead during profiling.
-   (:func:`os.times` is *pretty* bad, as it returns a tuple of floating point
-   values).  If you want to substitute a better timer in the cleanest fashion,
-   derive a class and hardwire a replacement dispatch method that best handles your
-   timer call, along with the appropriate calibration constant.
+   Be warned that you should calibrate the profiler class for the
+   timer function that you choose.  For most machines, a timer that
+   returns a lone integer value will provide the best results in terms
+   of low overhead during profiling.  (:func:`os.times` is *pretty*
+   bad, as it returns a tuple of floating point values).  If you want
+   to substitute a better timer in the cleanest fashion, derive a
+   class and hardwire a replacement dispatch method that best handles
+   your timer call, along with the appropriate calibration constant.
 
 :class:`cProfile.Profile`
-   :func:`your_time_func` should return a single number.  If it returns
-   integers, you can also invoke the class constructor with a second argument
-   specifying the real duration of one unit of time.  For example, if
-   :func:`your_integer_time_func` returns times measured in thousands of seconds,
-   you would construct the :class:`Profile` instance as follows::
+   :func:`your_time_func` should return a single number.  If it
+   returns integers, you can also invoke the class constructor with a
+   second argument specifying the real duration of one unit of time.
+   For example, if :func:`your_integer_time_func` returns times
+   measured in thousands of seconds, you would construct the
+   :class:`Profile` instance as follows::
 
       pr = profile.Profile(your_integer_time_func, 0.001)
 
-   As the :mod:`cProfile.Profile` class cannot be calibrated, custom timer
-   functions should be used with care and should be as fast as possible.  For the
-   best results with a custom timer, it might be necessary to hard-code it in the C
-   source of the internal :mod:`_lsprof` module.
+   As the :mod:`cProfile.Profile` class cannot be calibrated, custom
+   timer functions should be used with care and should be as fast as
+   possible.  For the best results with a custom timer, it might be
+   necessary to hard-code it in the C source of the internal
+   :mod:`_lsprof` module.
diff -r bd8afb90ebf2 Doc/library/pyexpat.rst
--- a/Doc/library/pyexpat.rst
+++ b/Doc/library/pyexpat.rst
@@ -402,7 +402,7 @@
 .. method:: xmlparser.CommentHandler(data)
 
    Called for comments.  *data* is the text of the comment, excluding the leading
-   '``<!-``\ ``-``' and trailing '``-``\ ``->``'.
+   ``'<!-``\ ``-'`` and trailing ``'-``\ ``->'``.
 
 
 .. method:: xmlparser.StartCdataSectionHandler()
diff -r bd8afb90ebf2 Doc/library/random.rst
--- a/Doc/library/random.rst
+++ b/Doc/library/random.rst
@@ -52,20 +52,20 @@
 
 Bookkeeping functions:
 
-.. function:: seed([x], version=2)
+.. function:: seed(a=None, version=2)
 
    Initialize the random number generator.
 
-   If *x* is omitted or ``None``, the current system time is used.  If
+   If *a* is omitted or ``None``, the current system time is used.  If
    randomness sources are provided by the operating system, they are used
    instead of the system time (see the :func:`os.urandom` function for details
    on availability).
 
-   If *x* is an int, it is used directly.
+   If *a* is an int, it is used directly.
 
    With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:`bytearray`
    object gets converted to an :class:`int` and all of its bits are used.  With version 1,
-   the :func:`hash` of *x* is used instead.
+   the :func:`hash` of *a* is used instead.
 
    .. versionchanged:: 3.2
       Moved to the version 2 scheme which uses all of the bits in a string seed.
@@ -93,7 +93,8 @@
 
 Functions for integers:
 
-.. function:: randrange([start,] stop[, step])
+.. function:: randrange(stop)
+              randrange(start, stop[, step])
 
    Return a randomly selected element from ``range(start, stop, step)``.  This is
    equivalent to ``choice(range(start, stop, step))``, but doesn't actually build a
diff -r bd8afb90ebf2 Doc/library/re.rst
--- a/Doc/library/re.rst
+++ b/Doc/library/re.rst
@@ -824,9 +824,16 @@
 Match Objects
 -------------
 
-Match objects always have a boolean value of :const:`True`.  This lets you
-use a simple if-statement to test whether a match was found.  Match objects
-support the following methods and attributes:
+Match objects always have a boolean value of ``True``.
+Since :meth:`~regex.match` and :meth:`~regex.search` return ``None``
+when there is no match, you can test whether there was a match with a simple
+``if`` statement::
+
+   match = re.search(pattern, string)
+   if match:
+       process(match)
+
+Match objects support the following methods and attributes:
 
 
 .. method:: match.expand(template)
diff -r bd8afb90ebf2 Doc/library/shutil.rst
--- a/Doc/library/shutil.rst
+++ b/Doc/library/shutil.rst
@@ -372,7 +372,7 @@
                else:
                    copy2(srcname, dstname)
                # XXX What about devices, sockets etc.?
-           except (IOError, os.error) as why:
+           except OSError as why:
                errors.append((srcname, dstname, str(why)))
            # catch the Error from the recursive copytree so that we can
            # continue with other files
diff -r bd8afb90ebf2 Doc/library/site.rst
--- a/Doc/library/site.rst
+++ b/Doc/library/site.rst
@@ -33,7 +33,7 @@
 For the head part, it uses ``sys.prefix`` and ``sys.exec_prefix``; empty heads
 are skipped.  For the tail part, it uses the empty string and then
 :file:`lib/site-packages` (on Windows) or
-:file:`lib/python|version|/site-packages` and then :file:`lib/site-python` (on
+:file:`lib/python{X.Y}/site-packages` and then :file:`lib/site-python` (on
 Unix and Macintosh).  For each of the distinct head-tail combinations, it sees
 if it refers to an existing directory, and if so, adds it to ``sys.path`` and
 also inspects the newly added path for configuration files.
diff -r bd8afb90ebf2 Doc/library/smtpd.rst
--- a/Doc/library/smtpd.rst
+++ b/Doc/library/smtpd.rst
@@ -111,12 +111,13 @@
    .. attribute:: addr
 
       Holds the address of the client, the second value returned by
-      socket.accept()
+      :func:`socket.accept <socket.socket.accept>`
 
    .. attribute:: received_lines
 
       Holds a list of the line strings (decoded using UTF-8) received from
-      the client. The lines have their "\\r\\n" line ending translated to "\\n".
+      the client. The lines have their ``"\r\n"`` line ending translated to
+      ``"\n"``.
 
    .. attribute:: smtp_state
 
@@ -141,12 +142,12 @@
    .. attribute:: received_data
 
       Holds a string containing all of the data sent by the client during the
-      DATA state, up to but not including the terminating "\r\n.\r\n".
+      DATA state, up to but not including the terminating ``"\r\n.\r\n"``.
 
    .. attribute:: fqdn
 
       Holds the fully-qualified domain name of the server as returned by
-      ``socket.getfqdn()``.
+      :func:`socket.getfqdn`.
 
    .. attribute:: peer
 
@@ -170,14 +171,14 @@
    MAIL     Accepts the "MAIL FROM:" syntax and stores the supplied address as
             :attr:`mailfrom`.  In extended command mode, accepts the
             :rfc:`1870` SIZE attribute and responds appropriately based on the
-            value of ``data_size_limit``.
+            value of *data_size_limit*.
    RCPT     Accepts the "RCPT TO:" syntax and stores the supplied addresses in
             the :attr:`rcpttos` list.
    RSET     Resets the :attr:`mailfrom`, :attr:`rcpttos`, and
             :attr:`received_data`, but not the greeting.
    DATA     Sets the internal state to :attr:`DATA` and stores remaining lines
             from the client in :attr:`received_data` until the terminator
-            "\r\n.\r\n" is received.
+            ``"\r\n.\r\n"`` is received.
    HELP     Returns minimal information on command syntax
    VRFY     Returns code 252 (the server doesn't know if the address is valid)
    EXPN     Reports that the command is not implemented.
diff -r bd8afb90ebf2 Doc/library/socket.rst
--- a/Doc/library/socket.rst
+++ b/Doc/library/socket.rst
@@ -1005,7 +1005,8 @@
    much data, if any, was successfully sent.
 
 
-.. method:: socket.sendto(bytes[, flags], address)
+.. method:: socket.sendto(bytes, address)
+            socket.sendto(bytes, flags, address)
 
    Send data to the socket.  The socket should not be connected to a remote socket,
    since the destination socket is specified by *address*.  The optional *flags*
diff -r bd8afb90ebf2 Doc/library/socketserver.rst
--- a/Doc/library/socketserver.rst
+++ b/Doc/library/socketserver.rst
@@ -153,20 +153,22 @@
 
 .. method:: BaseServer.serve_forever(poll_interval=0.5)
 
-   Handle requests until an explicit :meth:`shutdown` request.
-   Poll for shutdown every *poll_interval* seconds. Ignores :attr:`self.timeout`.  It also calls
-   :meth:`service_actions` which may be used by a subclass or Mixin to provide
-   various cleanup actions.  For e.g. ForkingMixin class uses
-   :meth:`service_actions` to cleanup the zombie child processes.
+   Handle requests until an explicit :meth:`shutdown` request.  Poll for
+   shutdown every *poll_interval* seconds. Ignores :attr:`self.timeout`.  It
+   also calls :meth:`service_actions`, which may be used by a subclass or mixin
+   to provide actions specific to a given service.  For example, the
+   :class:`ForkingMixIn` class uses :meth:`service_actions` to clean up zombie
+   child processes.
 
    .. versionchanged:: 3.3
-       Added service_actions call to the serve_forever method.
+       Added ``service_actions`` call to the ``serve_forever`` method.
 
 
 .. method:: BaseServer.service_actions()
 
-   This is called by the serve_forever loop. This method is can be overridden
-   by Mixin's to add cleanup or service specific actions.
+   This is called in the :meth:`serve_forever` loop. This method is can be
+   overridden by subclasses or mixin classes to perform actions specific to
+   a given service, such as cleanup actions.
 
    .. versionadded:: 3.3
 
diff -r bd8afb90ebf2 Doc/library/sqlite3.rst
--- a/Doc/library/sqlite3.rst
+++ b/Doc/library/sqlite3.rst
@@ -222,250 +222,254 @@
 
    A SQLite database connection has the following attributes and methods:
 
-.. attribute:: Connection.isolation_level
+   .. attribute:: isolation_level
 
-   Get or set the current isolation level. :const:`None` for autocommit mode or
-   one of "DEFERRED", "IMMEDIATE" or "EXCLUSIVE". See section
-   :ref:`sqlite3-controlling-transactions` for a more detailed explanation.
+      Get or set the current isolation level. :const:`None` for autocommit mode or
+      one of "DEFERRED", "IMMEDIATE" or "EXCLUSIVE". See section
+      :ref:`sqlite3-controlling-transactions` for a more detailed explanation.
 
-.. attribute:: Connection.in_transaction
+   .. attribute:: in_transaction
 
-   :const:`True` if a transaction is active (there are uncommitted changes),
-   :const:`False` otherwise.  Read-only attribute.
+      :const:`True` if a transaction is active (there are uncommitted changes),
+      :const:`False` otherwise.  Read-only attribute.
 
-   .. versionadded:: 3.2
+      .. versionadded:: 3.2
 
-.. method:: Connection.cursor([cursorClass])
+   .. method:: cursor([cursorClass])
 
-   The cursor method accepts a single optional parameter *cursorClass*. If
-   supplied, this must be a custom cursor class that extends
-   :class:`sqlite3.Cursor`.
+      The cursor method accepts a single optional parameter *cursorClass*. If
+      supplied, this must be a custom cursor class that extends
+      :class:`sqlite3.Cursor`.
 
-.. method:: Connection.commit()
+   .. method:: commit()
 
-   This method commits the current transaction. If you don't call this method,
-   anything you did since the last call to ``commit()`` is not visible from
-   other database connections. If you wonder why you don't see the data you've
-   written to the database, please check you didn't forget to call this method.
+      This method commits the current transaction. If you don't call this method,
+      anything you did since the last call to ``commit()`` is not visible from
+      other database connections. If you wonder why you don't see the data you've
+      written to the database, please check you didn't forget to call this method.
 
-.. method:: Connection.rollback()
+   .. method:: rollback()
 
-   This method rolls back any changes to the database since the last call to
-   :meth:`commit`.
+      This method rolls back any changes to the database since the last call to
+      :meth:`commit`.
 
-.. method:: Connection.close()
+   .. method:: close()
 
-   This closes the database connection. Note that this does not automatically
-   call :meth:`commit`. If you just close your database connection without
-   calling :meth:`commit` first, your changes will be lost!
+      This closes the database connection. Note that this does not automatically
+      call :meth:`commit`. If you just close your database connection without
+      calling :meth:`commit` first, your changes will be lost!
 
-.. method:: Connection.execute(sql, [parameters])
+   .. method:: execute(sql, [parameters])
 
-   This is a nonstandard shortcut that creates an intermediate cursor object by
-   calling the cursor method, then calls the cursor's :meth:`execute
-   <Cursor.execute>` method with the parameters given.
+      This is a nonstandard shortcut that creates an intermediate cursor object by
+      calling the cursor method, then calls the cursor's :meth:`execute
+      <Cursor.execute>` method with the parameters given.
 
 
-.. method:: Connection.executemany(sql, [parameters])
+   .. method:: executemany(sql, [parameters])
 
-   This is a nonstandard shortcut that creates an intermediate cursor object by
-   calling the cursor method, then calls the cursor's :meth:`executemany
-   <Cursor.executemany>` method with the parameters given.
+      This is a nonstandard shortcut that creates an intermediate cursor object by
+      calling the cursor method, then calls the cursor's :meth:`executemany
+      <Cursor.executemany>` method with the parameters given.
 
-.. method:: Connection.executescript(sql_script)
+   .. method:: executescript(sql_script)
 
-   This is a nonstandard shortcut that creates an intermediate cursor object by
-   calling the cursor method, then calls the cursor's :meth:`executescript
-   <Cursor.executescript>` method with the parameters given.
+      This is a nonstandard shortcut that creates an intermediate cursor object by
+      calling the cursor method, then calls the cursor's :meth:`executescript
+      <Cursor.executescript>` method with the parameters given.
 
 
-.. method:: Connection.create_function(name, num_params, func)
+   .. method:: create_function(name, num_params, func)
 
-   Creates a user-defined function that you can later use from within SQL
-   statements under the function name *name*. *num_params* is the number of
-   parameters the function accepts, and *func* is a Python callable that is called
-   as the SQL function.
+      Creates a user-defined function that you can later use from within SQL
+      statements under the function name *name*. *num_params* is the number of
+      parameters the function accepts, and *func* is a Python callable that is called
+      as the SQL function.
 
-   The function can return any of the types supported by SQLite: bytes, str, int,
-   float and None.
+      The function can return any of the types supported by SQLite: bytes, str, int,
+      float and None.
 
-   Example:
+      Example:
 
-   .. literalinclude:: ../includes/sqlite3/md5func.py
+      .. literalinclude:: ../includes/sqlite3/md5func.py
 
 
-.. method:: Connection.create_aggregate(name, num_params, aggregate_class)
+   .. method:: create_aggregate(name, num_params, aggregate_class)
 
-   Creates a user-defined aggregate function.
+      Creates a user-defined aggregate function.
 
-   The aggregate class must implement a ``step`` method, which accepts the number
-   of parameters *num_params*, and a ``finalize`` method which will return the
-   final result of the aggregate.
+      The aggregate class must implement a ``step`` method, which accepts the number
+      of parameters *num_params*, and a ``finalize`` method which will return the
+      final result of the aggregate.
 
-   The ``finalize`` method can return any of the types supported by SQLite:
-   bytes, str, int, float and None.
+      The ``finalize`` method can return any of the types supported by SQLite:
+      bytes, str, int, float and None.
 
-   Example:
+      Example:
 
-   .. literalinclude:: ../includes/sqlite3/mysumaggr.py
+      .. literalinclude:: ../includes/sqlite3/mysumaggr.py
 
 
-.. method:: Connection.create_collation(name, callable)
+   .. method:: create_collation(name, callable)
 
-   Creates a collation with the specified *name* and *callable*. The callable will
-   be passed two string arguments. It should return -1 if the first is ordered
-   lower than the second, 0 if they are ordered equal and 1 if the first is ordered
-   higher than the second.  Note that this controls sorting (ORDER BY in SQL) so
-   your comparisons don't affect other SQL operations.
+      Creates a collation with the specified *name* and *callable*. The callable will
+      be passed two string arguments. It should return -1 if the first is ordered
+      lower than the second, 0 if they are ordered equal and 1 if the first is ordered
+      higher than the second.  Note that this controls sorting (ORDER BY in SQL) so
+      your comparisons don't affect other SQL operations.
 
-   Note that the callable will get its parameters as Python bytestrings, which will
-   normally be encoded in UTF-8.
+      Note that the callable will get its parameters as Python bytestrings, which will
+      normally be encoded in UTF-8.
 
-   The following example shows a custom collation that sorts "the wrong way":
+      The following example shows a custom collation that sorts "the wrong way":
 
-   .. literalinclude:: ../includes/sqlite3/collation_reverse.py
+      .. literalinclude:: ../includes/sqlite3/collation_reverse.py
 
-   To remove a collation, call ``create_collation`` with None as callable::
+      To remove a collation, call ``create_collation`` with None as callable::
 
-      con.create_collation("reverse", None)
+         con.create_collation("reverse", None)
 
 
-.. method:: Connection.interrupt()
+   .. method:: interrupt()
 
-   You can call this method from a different thread to abort any queries that might
-   be executing on the connection. The query will then abort and the caller will
-   get an exception.
+      You can call this method from a different thread to abort any queries that might
+      be executing on the connection. The query will then abort and the caller will
+      get an exception.
 
 
-.. method:: Connection.set_authorizer(authorizer_callback)
+   .. method:: set_authorizer(authorizer_callback)
 
-   This routine registers a callback. The callback is invoked for each attempt to
-   access a column of a table in the database. The callback should return
-   :const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire SQL
-   statement should be aborted with an error and :const:`SQLITE_IGNORE` if the
-   column should be treated as a NULL value. These constants are available in the
-   :mod:`sqlite3` module.
+      This routine registers a callback. The callback is invoked for each attempt to
+      access a column of a table in the database. The callback should return
+      :const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire SQL
+      statement should be aborted with an error and :const:`SQLITE_IGNORE` if the
+      column should be treated as a NULL value. These constants are available in the
+      :mod:`sqlite3` module.
 
-   The first argument to the callback signifies what kind of operation is to be
-   authorized. The second and third argument will be arguments or :const:`None`
-   depending on the first argument. The 4th argument is the name of the database
-   ("main", "temp", etc.) if applicable. The 5th argument is the name of the
-   inner-most trigger or view that is responsible for the access attempt or
-   :const:`None` if this access attempt is directly from input SQL code.
+      The first argument to the callback signifies what kind of operation is to be
+      authorized. The second and third argument will be arguments or :const:`None`
+      depending on the first argument. The 4th argument is the name of the database
+      ("main", "temp", etc.) if applicable. The 5th argument is the name of the
+      inner-most trigger or view that is responsible for the access attempt or
+      :const:`None` if this access attempt is directly from input SQL code.
 
-   Please consult the SQLite documentation about the possible values for the first
-   argument and the meaning of the second and third argument depending on the first
-   one. All necessary constants are available in the :mod:`sqlite3` module.
+      Please consult the SQLite documentation about the possible values for the first
+      argument and the meaning of the second and third argument depending on the first
+      one. All necessary constants are available in the :mod:`sqlite3` module.
 
 
-.. method:: Connection.set_progress_handler(handler, n)
+   .. method:: set_progress_handler(handler, n)
 
-   This routine registers a callback. The callback is invoked for every *n*
-   instructions of the SQLite virtual machine. This is useful if you want to
-   get called from SQLite during long-running operations, for example to update
-   a GUI.
+      This routine registers a callback. The callback is invoked for every *n*
+      instructions of the SQLite virtual machine. This is useful if you want to
+      get called from SQLite during long-running operations, for example to update
+      a GUI.
 
-   If you want to clear any previously installed progress handler, call the
-   method with :const:`None` for *handler*.
+      If you want to clear any previously installed progress handler, call the
+      method with :const:`None` for *handler*.
 
 
-.. method:: Connection.set_trace_callback(trace_callback)
+   .. method:: set_trace_callback(trace_callback)
 
-   Registers *trace_callback* to be called for each SQL statement that is
-   actually executed by the SQLite backend.
+      Registers *trace_callback* to be called for each SQL statement that is
+      actually executed by the SQLite backend.
 
-   The only argument passed to the callback is the statement (as string) that
-   is being executed. The return value of the callback is ignored. Note that
-   the backend does not only run statements passed to the :meth:`Cursor.execute`
-   methods.  Other sources include the transaction management of the Python
-   module and the execution of triggers defined in the current database.
+      The only argument passed to the callback is the statement (as string) that
+      is being executed. The return value of the callback is ignored. Note that
+      the backend does not only run statements passed to the :meth:`Cursor.execute`
+      methods.  Other sources include the transaction management of the Python
+      module and the execution of triggers defined in the current database.
 
-   Passing :const:`None` as *trace_callback* will disable the trace callback.
+      Passing :const:`None` as *trace_callback* will disable the trace callback.
 
-   .. versionadded:: 3.3
+      .. versionadded:: 3.3
 
 
-.. method:: Connection.enable_load_extension(enabled)
+   .. method:: enable_load_extension(enabled)
 
-   This routine allows/disallows the SQLite engine to load SQLite extensions
-   from shared libraries.  SQLite extensions can define new functions,
-   aggregates or whole new virtual table implementations.  One well-known
-   extension is the fulltext-search extension distributed with SQLite.
+      This routine allows/disallows the SQLite engine to load SQLite extensions
+      from shared libraries.  SQLite extensions can define new functions,
+      aggregates or whole new virtual table implementations.  One well-known
+      extension is the fulltext-search extension distributed with SQLite.
 
-   Loadable extensions are disabled by default. See [#f1]_.
+      Loadable extensions are disabled by default. See [#f1]_.
 
-   .. versionadded:: 3.2
+      .. versionadded:: 3.2
 
-   .. literalinclude:: ../includes/sqlite3/load_extension.py
+      .. literalinclude:: ../includes/sqlite3/load_extension.py
 
-.. method:: Connection.load_extension(path)
+   .. method:: load_extension(path)
 
-   This routine loads a SQLite extension from a shared library.  You have to
-   enable extension loading with :meth:`enable_load_extension` before you can
-   use this routine.
+      This routine loads a SQLite extension from a shared library.  You have to
+      enable extension loading with :meth:`enable_load_extension` before you can
+      use this routine.
 
-   Loadable extensions are disabled by default. See [#f1]_.
+      Loadable extensions are disabled by default. See [#f1]_.
 
-   .. versionadded:: 3.2
+      .. versionadded:: 3.2
 
-.. attribute:: Connection.row_factory
+   .. attribute:: row_factory
 
-   You can change this attribute to a callable that accepts the cursor and the
-   original row as a tuple and will return the real result row.  This way, you can
-   implement more advanced ways of returning results, such  as returning an object
-   that can also access columns by name.
+      You can change this attribute to a callable that accepts the cursor and the
+      original row as a tuple and will return the real result row.  This way, you can
+      implement more advanced ways of returning results, such  as returning an object
+      that can also access columns by name.
 
-   Example:
+      Example:
 
-   .. literalinclude:: ../includes/sqlite3/row_factory.py
+      .. literalinclude:: ../includes/sqlite3/row_factory.py
 
-   If returning a tuple doesn't suffice and you want name-based access to
-   columns, you should consider setting :attr:`row_factory` to the
-   highly-optimized :class:`sqlite3.Row` type. :class:`Row` provides both
-   index-based and case-insensitive name-based access to columns with almost no
-   memory overhead. It will probably be better than your own custom
-   dictionary-based approach or even a db_row based solution.
+      If returning a tuple doesn't suffice and you want name-based access to
+      columns, you should consider setting :attr:`row_factory` to the
+      highly-optimized :class:`sqlite3.Row` type. :class:`Row` provides both
+      index-based and case-insensitive name-based access to columns with almost no
+      memory overhead. It will probably be better than your own custom
+      dictionary-based approach or even a db_row based solution.
 
-   .. XXX what's a db_row-based solution?
+      .. XXX what's a db_row-based solution?
 
 
-.. attribute:: Connection.text_factory
+   .. attribute:: text_factory
 
-   Using this attribute you can control what objects are returned for the ``TEXT``
-   data type. By default, this attribute is set to :class:`str` and the
-   :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If you want to
-   return bytestrings instead, you can set it to :class:`bytes`.
+      Using this attribute you can control what objects are returned for the ``TEXT``
+      data type. By default, this attribute is set to :class:`str` and the
+      :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If you want to
+      return bytestrings instead, you can set it to :class:`bytes`.
 
-   You can also set it to any other callable that accepts a single bytestring
-   parameter and returns the resulting object.
+      For efficiency reasons, there's also a way to return :class:`str` objects
+      only for non-ASCII data, and :class:`bytes` otherwise. To activate it, set
+      this attribute to :const:`sqlite3.OptimizedUnicode`.
 
-   See the following example code for illustration:
+      You can also set it to any other callable that accepts a single bytestring
+      parameter and returns the resulting object.
 
-   .. literalinclude:: ../includes/sqlite3/text_factory.py
+      See the following example code for illustration:
 
+      .. literalinclude:: ../includes/sqlite3/text_factory.py
 
-.. attribute:: Connection.total_changes
 
-   Returns the total number of database rows that have been modified, inserted, or
-   deleted since the database connection was opened.
+   .. attribute:: total_changes
 
+      Returns the total number of database rows that have been modified, inserted, or
+      deleted since the database connection was opened.
 
-.. attribute:: Connection.iterdump
 
-   Returns an iterator to dump the database in an SQL text format.  Useful when
-   saving an in-memory database for later restoration.  This function provides
-   the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3`
-   shell.
+   .. attribute:: iterdump
 
-   Example::
+      Returns an iterator to dump the database in an SQL text format.  Useful when
+      saving an in-memory database for later restoration.  This function provides
+      the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3`
+      shell.
 
-      # Convert file existing_db.db to SQL dump file dump.sql
-      import sqlite3, os
+      Example::
 
-      con = sqlite3.connect('existing_db.db')
-      with open('dump.sql', 'w') as f:
-          for line in con.iterdump():
-              f.write('%s\n' % line)
+         # Convert file existing_db.db to SQL dump file dump.sql
+         import sqlite3, os
+
+         con = sqlite3.connect('existing_db.db')
+         with open('dump.sql', 'w') as f:
+             for line in con.iterdump():
+                 f.write('%s\n' % line)
 
 
 .. _sqlite3-cursor-objects:
@@ -477,110 +481,110 @@
 
    A :class:`Cursor` instance has the following attributes and methods.
 
-.. method:: Cursor.execute(sql, [parameters])
+   .. method:: execute(sql, [parameters])
 
-   Executes an SQL statement. The SQL statement may be parametrized (i. e.
-   placeholders instead of SQL literals). The :mod:`sqlite3` module supports two
-   kinds of placeholders: question marks (qmark style) and named placeholders
-   (named style).
+      Executes an SQL statement. The SQL statement may be parametrized (i. e.
+      placeholders instead of SQL literals). The :mod:`sqlite3` module supports two
+      kinds of placeholders: question marks (qmark style) and named placeholders
+      (named style).
 
-   Here's an example of both styles:
+      Here's an example of both styles:
 
-   .. literalinclude:: ../includes/sqlite3/execute_1.py
+      .. literalinclude:: ../includes/sqlite3/execute_1.py
 
-   :meth:`execute` will only execute a single SQL statement. If you try to execute
-   more than one statement with it, it will raise a Warning. Use
-   :meth:`executescript` if you want to execute multiple SQL statements with one
-   call.
+      :meth:`execute` will only execute a single SQL statement. If you try to execute
+      more than one statement with it, it will raise a Warning. Use
+      :meth:`executescript` if you want to execute multiple SQL statements with one
+      call.
 
 
-.. method:: Cursor.executemany(sql, seq_of_parameters)
+   .. method:: executemany(sql, seq_of_parameters)
 
-   Executes an SQL command against all parameter sequences or mappings found in
-   the sequence *sql*.  The :mod:`sqlite3` module also allows using an
-   :term:`iterator` yielding parameters instead of a sequence.
+      Executes an SQL command against all parameter sequences or mappings found in
+      the sequence *sql*.  The :mod:`sqlite3` module also allows using an
+      :term:`iterator` yielding parameters instead of a sequence.
 
-   .. literalinclude:: ../includes/sqlite3/executemany_1.py
+      .. literalinclude:: ../includes/sqlite3/executemany_1.py
 
-   Here's a shorter example using a :term:`generator`:
+      Here's a shorter example using a :term:`generator`:
 
-   .. literalinclude:: ../includes/sqlite3/executemany_2.py
+      .. literalinclude:: ../includes/sqlite3/executemany_2.py
 
 
-.. method:: Cursor.executescript(sql_script)
+   .. method:: executescript(sql_script)
 
-   This is a nonstandard convenience method for executing multiple SQL statements
-   at once. It issues a ``COMMIT`` statement first, then executes the SQL script it
-   gets as a parameter.
+      This is a nonstandard convenience method for executing multiple SQL statements
+      at once. It issues a ``COMMIT`` statement first, then executes the SQL script it
+      gets as a parameter.
 
-   *sql_script* can be an instance of :class:`str` or :class:`bytes`.
+      *sql_script* can be an instance of :class:`str` or :class:`bytes`.
 
-   Example:
+      Example:
 
-   .. literalinclude:: ../includes/sqlite3/executescript.py
+      .. literalinclude:: ../includes/sqlite3/executescript.py
 
 
-.. method:: Cursor.fetchone()
+   .. method:: fetchone()
 
-   Fetches the next row of a query result set, returning a single sequence,
-   or :const:`None` when no more data is available.
+      Fetches the next row of a query result set, returning a single sequence,
+      or :const:`None` when no more data is available.
 
 
-.. method:: Cursor.fetchmany(size=cursor.arraysize)
+   .. method:: fetchmany(size=cursor.arraysize)
 
-   Fetches the next set of rows of a query result, returning a list.  An empty
-   list is returned when no more rows are available.
+      Fetches the next set of rows of a query result, returning a list.  An empty
+      list is returned when no more rows are available.
 
-   The number of rows to fetch per call is specified by the *size* parameter.
-   If it is not given, the cursor's arraysize determines the number of rows
-   to be fetched. The method should try to fetch as many rows as indicated by
-   the size parameter. If this is not possible due to the specified number of
-   rows not being available, fewer rows may be returned.
+      The number of rows to fetch per call is specified by the *size* parameter.
+      If it is not given, the cursor's arraysize determines the number of rows
+      to be fetched. The method should try to fetch as many rows as indicated by
+      the size parameter. If this is not possible due to the specified number of
+      rows not being available, fewer rows may be returned.
 
-   Note there are performance considerations involved with the *size* parameter.
-   For optimal performance, it is usually best to use the arraysize attribute.
-   If the *size* parameter is used, then it is best for it to retain the same
-   value from one :meth:`fetchmany` call to the next.
+      Note there are performance considerations involved with the *size* parameter.
+      For optimal performance, it is usually best to use the arraysize attribute.
+      If the *size* parameter is used, then it is best for it to retain the same
+      value from one :meth:`fetchmany` call to the next.
 
-.. method:: Cursor.fetchall()
+   .. method:: fetchall()
 
-   Fetches all (remaining) rows of a query result, returning a list.  Note that
-   the cursor's arraysize attribute can affect the performance of this operation.
-   An empty list is returned when no rows are available.
+      Fetches all (remaining) rows of a query result, returning a list.  Note that
+      the cursor's arraysize attribute can affect the performance of this operation.
+      An empty list is returned when no rows are available.
 
 
-.. attribute:: Cursor.rowcount
+   .. attribute:: rowcount
 
-   Although the :class:`Cursor` class of the :mod:`sqlite3` module implements this
-   attribute, the database engine's own support for the determination of "rows
-   affected"/"rows selected" is quirky.
+      Although the :class:`Cursor` class of the :mod:`sqlite3` module implements this
+      attribute, the database engine's own support for the determination of "rows
+      affected"/"rows selected" is quirky.
 
-   For :meth:`executemany` statements, the number of modifications are summed up
-   into :attr:`rowcount`.
+      For :meth:`executemany` statements, the number of modifications are summed up
+      into :attr:`rowcount`.
 
-   As required by the Python DB API Spec, the :attr:`rowcount` attribute "is -1 in
-   case no ``executeXX()`` has been performed on the cursor or the rowcount of the
-   last operation is not determinable by the interface". This includes ``SELECT``
-   statements because we cannot determine the number of rows a query produced
-   until all rows were fetched.
+      As required by the Python DB API Spec, the :attr:`rowcount` attribute "is -1 in
+      case no ``executeXX()`` has been performed on the cursor or the rowcount of the
+      last operation is not determinable by the interface". This includes ``SELECT``
+      statements because we cannot determine the number of rows a query produced
+      until all rows were fetched.
 
-   With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if
-   you make a ``DELETE FROM table`` without any condition.
+      With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if
+      you make a ``DELETE FROM table`` without any condition.
 
-.. attribute:: Cursor.lastrowid
+   .. attribute:: lastrowid
 
-   This read-only attribute provides the rowid of the last modified row. It is
-   only set if you issued a ``INSERT`` statement using the :meth:`execute`
-   method. For operations other than ``INSERT`` or when :meth:`executemany` is
-   called, :attr:`lastrowid` is set to :const:`None`.
+      This read-only attribute provides the rowid of the last modified row. It is
+      only set if you issued a ``INSERT`` statement using the :meth:`execute`
+      method. For operations other than ``INSERT`` or when :meth:`executemany` is
+      called, :attr:`lastrowid` is set to :const:`None`.
 
-.. attribute:: Cursor.description
+   .. attribute:: description
 
-   This read-only attribute provides the column names of the last query. To
-   remain compatible with the Python DB API, it returns a 7-tuple for each
-   column where the last six items of each tuple are :const:`None`.
+      This read-only attribute provides the column names of the last query. To
+      remain compatible with the Python DB API, it returns a 7-tuple for each
+      column where the last six items of each tuple are :const:`None`.
 
-   It is set for ``SELECT`` statements without any matching rows as well.
+      It is set for ``SELECT`` statements without any matching rows as well.
 
 .. _sqlite3-row-objects:
 
diff -r bd8afb90ebf2 Doc/library/stdtypes.rst
--- a/Doc/library/stdtypes.rst
+++ b/Doc/library/stdtypes.rst
@@ -779,9 +779,9 @@
 specific types are not important beyond their implementation of the iterator
 protocol.
 
-Once an iterator's :meth:`__next__` method raises :exc:`StopIteration`, it must
-continue to do so on subsequent calls.  Implementations that do not obey this
-property are deemed broken.
+Once an iterator's :meth:`~iterator.__next__` method raises
+:exc:`StopIteration`, it must continue to do so on subsequent calls.
+Implementations that do not obey this property are deemed broken.
 
 
 .. _generator-types:
@@ -792,7 +792,8 @@
 Python's :term:`generator`\s provide a convenient way to implement the iterator
 protocol.  If a container object's :meth:`__iter__` method is implemented as a
 generator, it will automatically return an iterator object (technically, a
-generator object) supplying the :meth:`__iter__` and :meth:`__next__` methods.
+generator object) supplying the :meth:`__iter__` and :meth:`~generator.__next__`
+methods.
 More information about generators can be found in :ref:`the documentation for
 the yield expression <yieldexpr>`.
 
@@ -1235,7 +1236,8 @@
 commonly used for looping a specific number of times in :keyword:`for`
 loops.
 
-.. class:: range([start, ]stop[, step])
+.. class:: range(stop)
+           range(start, stop[, step])
 
    The arguments to the range constructor must be integers (either built-in
    :class:`int` or any object that implements the ``__index__`` special
@@ -1344,20 +1346,19 @@
    The :attr:`start`, :attr:`stop` and :attr:`step` attributes.
 
 
+.. index::
+   single: string; text sequence type
+   single: str (built-in class); (see also string)
+   object: string
+
 .. _textseq:
 
 Text Sequence Type --- :class:`str`
 ===================================
 
-.. index::
-   object: string
-   object: bytes
-   object: bytearray
-   object: io.StringIO
-
-
-Textual data in Python is handled with :class:`str` objects, which are
-immutable sequences of Unicode code points.  String literals are
+Textual data in Python is handled with :class:`str` objects, or :dfn:`strings`.
+Strings are immutable
+:ref:`sequences <typesseq>` of Unicode code points.  String literals are
 written in a variety of ways:
 
 * Single quotes: ``'allows embedded "double" quotes'``
@@ -1375,12 +1376,15 @@
 including supported escape sequences, and the ``r`` ("raw") prefix that
 disables most escape sequence processing.
 
-Strings may also be created from other objects with the :ref:`str <func-str>`
-built-in.
+Strings may also be created from other objects using the :class:`str`
+constructor.
 
 Since there is no separate "character" type, indexing a string produces
 strings of length 1. That is, for a non-empty string *s*, ``s[0] == s[0:1]``.
 
+.. index::
+   object: io.StringIO
+
 There is also no mutable string type, but :meth:`str.join` or
 :class:`io.StringIO` can be used to efficiently construct strings from
 multiple fragments.
@@ -1390,13 +1394,61 @@
    once again permitted on string literals. It has no effect on the meaning
    of string literals and cannot be combined with the ``r`` prefix.
 
+
+.. index::
+   single: string; str (built-in class)
+
+.. class:: str(object='')
+           str(object=b'', encoding='utf-8', errors='strict')
+
+   Return a :ref:`string <textseq>` version of *object*.  If *object* is not
+   provided, returns the empty string.  Otherwise, the behavior of ``str()``
+   depends on whether *encoding* or *errors* is given, as follows.
+
+   If neither *encoding* nor *errors* is given, ``str(object)`` returns
+   :meth:`object.__str__() <object.__str__>`, which is the "informal" or nicely
+   printable string representation of *object*.  For string objects, this is
+   the string itself.  If *object* does not have a :meth:`~object.__str__`
+   method, then :func:`str` falls back to returning
+   :meth:`repr(object) <repr>`.
+
+   .. index::
+      single: buffer protocol; str (built-in class)
+      single: bytes; str (built-in class)
+
+   If at least one of *encoding* or *errors* is given, *object* should be a
+   :class:`bytes` or :class:`bytearray` object, or more generally any object
+   that supports the :ref:`buffer protocol <bufferobjects>`.  In this case, if
+   *object* is a :class:`bytes` (or :class:`bytearray`) object, then
+   ``str(bytes, encoding, errors)`` is equivalent to
+   :meth:`bytes.decode(encoding, errors) <bytes.decode>`.  Otherwise, the bytes
+   object underlying the buffer object is obtained before calling
+   :meth:`bytes.decode`.  See :ref:`binaryseq` and
+   :ref:`bufferobjects` for information on buffer objects.
+
+   Passing a :class:`bytes` object to :func:`str` without the *encoding*
+   or *errors* arguments falls under the first case of returning the informal
+   string representation (see also the :option:`-b` command-line option to
+   Python).  For example::
+
+      >>> str(b'Zoot!')
+      "b'Zoot!'"
+
+   For more information on the ``str`` class and its methods, see
+   :ref:`textseq` and the :ref:`string-methods` section below.  To output
+   formatted strings, see the :ref:`string-formatting` section.  In addition,
+   see the :ref:`stringservices` section.
+
+
+.. index::
+   pair: string; methods
+
 .. _string-methods:
 
 String Methods
 --------------
 
 .. index::
-   pair: string; methods
    module: re
 
 Strings implement all of the :ref:`common <typesseq-common>` sequence
@@ -1830,11 +1882,11 @@
 
         >>> import re
         >>> def titlecase(s):
-                return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
-                              lambda mo: mo.group(0)[0].upper() +
-                                         mo.group(0)[1:].lower(),
-                              s)
-
+        ...     return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
+        ...                   lambda mo: mo.group(0)[0].upper() +
+        ...                              mo.group(0)[1:].lower(),
+        ...                   s)
+        ...
         >>> titlecase("they're bill's friends.")
         "They're Bill's Friends."
 
@@ -2062,6 +2114,9 @@
    longer replaced by ``%g`` conversions.
 
 
+.. index::
+   single: buffer protocol; binary sequence types
+
 .. _binaryseq:
 
 Binary Sequence Types --- :class:`bytes`, :class:`bytearray`, :class:`memoryview`
@@ -2075,8 +2130,8 @@
 
 The core built-in types for manipulating binary data are :class:`bytes` and
 :class:`bytearray`. They are supported by :class:`memoryview` which uses
-the buffer protocol to access the memory of other binary objects without
-needing to make a copy.
+the :ref:`buffer protocol <bufferobjects>` to access the memory of other
+binary objects without needing to make a copy.
 
 The :mod:`array` module supports efficient storage of basic data types like
 32-bit integers and IEEE754 double-precision floating values.
@@ -2162,7 +2217,7 @@
 * Creating an empty instance: ``bytearray()``
 * Creating a zero-filled instance with a given length: ``bytearray(10)``
 * From an iterable of integers: ``bytearray(range(20))``
-* Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!)``
+* Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!')``
 
 As bytearray objects are mutable, they support the
 :ref:`mutable <typesseq-mutable>` sequence operations in addition to the
@@ -2391,12 +2446,6 @@
    .. versionchanged:: 3.3
       One-dimensional memoryviews with formats 'B', 'b' or 'c' are now hashable.
 
-   .. note::
-      Hashing of memoryviews with formats other than 'B', 'b' or 'c' as well
-      as hashing of multi-dimensional memoryviews is possible in version 3.3.0,
-      but will raise an error in 3.3.1 in order to be compatible with the new
-      memoryview equality definition.
-
    :class:`memoryview` has several methods:
 
    .. method:: __eq__(exporter)
@@ -2687,13 +2736,19 @@
    .. attribute:: shape
 
       A tuple of integers the length of :attr:`ndim` giving the shape of the
-      memory as a N-dimensional array.
+      memory as an N-dimensional array.
+
+      .. versionchanged:: 3.3
+         An empty tuple instead of None when ndim = 0.
 
    .. attribute:: strides
 
       A tuple of integers the length of :attr:`ndim` giving the size in bytes to
       access each element for each dimension of the array.
 
+      .. versionchanged:: 3.3
+         An empty tuple instead of None when ndim = 0.
+
    .. attribute:: suboffsets
 
       Used internally for PIL-style arrays. The value is informational only.
@@ -2785,7 +2840,7 @@
 
    .. method:: set < other
 
-      Test whether the set is a true subset of *other*, that is,
+      Test whether the set is a proper subset of *other*, that is,
       ``set <= other and set != other``.
 
    .. method:: issuperset(other)
@@ -2795,7 +2850,7 @@
 
    .. method:: set > other
 
-      Test whether the set is a true superset of *other*, that is, ``set >=
+      Test whether the set is a proper superset of *other*, that is, ``set >=
       other and set != other``.
 
    .. method:: union(other, ...)
@@ -2926,7 +2981,7 @@
    statement: del
    builtin: len
 
-A :dfn:`mapping` object maps :term:`hashable` values to arbitrary objects.
+A :term:`mapping` object maps :term:`hashable` values to arbitrary objects.
 Mappings are mutable objects.  There is currently only one standard mapping
 type, the :dfn:`dictionary`.  (For other containers see the built-in
 :class:`list`, :class:`set`, and :class:`tuple` classes, and the
@@ -2945,33 +3000,41 @@
 pairs within braces, for example: ``{'jack': 4098, 'sjoerd': 4127}`` or ``{4098:
 'jack', 4127: 'sjoerd'}``, or by the :class:`dict` constructor.
 
-.. class:: dict([arg])
-
-   Return a new dictionary initialized from an optional positional argument or
-   from a set of keyword arguments.  If no arguments are given, return a new
-   empty dictionary.  If the positional argument *arg* is a mapping object,
-   return a dictionary mapping the same keys to the same values as does the
-   mapping object.  Otherwise the positional argument must be a sequence, a
-   container that supports iteration, or an iterator object.  The elements of
-   the argument must each also be of one of those kinds, and each must in turn
-   contain exactly two objects.  The first is used as a key in the new
-   dictionary, and the second as the key's value.  If a given key is seen more
-   than once, the last value associated with it is retained in the new
+.. class:: dict(**kwarg)
+           dict(mapping, **kwarg)
+           dict(iterable, **kwarg)
+
+   Return a new dictionary initialized from an optional positional argument
+   and a possibly empty set of keyword arguments.
+
+   If no positional argument is given, an empty dictionary is created.
+   If a positional argument is given and it is a mapping object, a dictionary
+   is created with the same key-value pairs as the mapping object.  Otherwise,
+   the positional argument must be an :term:`iterator` object.  Each item in
+   the iterable must itself be an iterator with exactly two objects.  The
+   first object of each item becomes a key in the new dictionary, and the
+   second object the corresponding value.  If a key occurs more than once, the
+   last value for that key becomes the corresponding value in the new
    dictionary.
 
-   If keyword arguments are given, the keywords themselves with their associated
-   values are added as items to the dictionary.  If a key is specified both in
-   the positional argument and as a keyword argument, the value associated with
-   the keyword is retained in the dictionary.  For example, these all return a
-   dictionary equal to ``{"one": 1, "two": 2}``:
-
-   * ``dict(one=1, two=2)``
-   * ``dict({'one': 1, 'two': 2})``
-   * ``dict(zip(('one', 'two'), (1, 2)))``
-   * ``dict([['two', 2], ['one', 1]])``
-
-   The first example only works for keys that are valid Python identifiers; the
-   others work with any valid keys.
+   If keyword arguments are given, the keyword arguments and their values are
+   added to the dictionary created from the positional argument.  If a key
+   being added is already present, the value from the keyword argument
+   replaces the value from the positional argument.
+
+   To illustrate, the following examples all return a dictionary equal to
+   ``{"one": 1, "two": 2, "three": 3}``::
+
+      >>> a = dict(one=1, two=2, three=3)
+      >>> b = {'one': 1, 'two': 2, 'three': 3}
+      >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
+      >>> d = dict([('two', 2), ('one', 1), ('three', 3)])
+      >>> e = dict({'three': 3, 'one': 1, 'two': 2})
+      >>> a == b == c == d == e
+      True
+
+   Providing keyword arguments as in the first example only works for keys that
+   are valid Python identifiers.  Otherwise, any valid keys can be used.
 
 
    These are the operations that dictionaries support (and therefore, custom
@@ -3333,16 +3396,22 @@
 Like function objects, bound method objects support getting arbitrary
 attributes.  However, since method attributes are actually stored on the
 underlying function object (``meth.__func__``), setting method attributes on
-bound methods is disallowed.  Attempting to set a method attribute results in a
-:exc:`TypeError` being raised.  In order to set a method attribute, you need to
-explicitly set it on the underlying function object::
-
-   class C:
-       def method(self):
-           pass
-
-   c = C()
-   c.method.__func__.whoami = 'my name is c'
+bound methods is disallowed.  Attempting to set an attribute on a method
+results in an :exc:`AttributeError` being raised.  In order to set a method
+attribute, you need to explicitly set it on the underlying function object::
+
+   >>> class C:
+   ...     def method(self):
+   ...         pass
+   ...
+   >>> c = C()
+   >>> c.method.whoami = 'my name is method'  # can't set on the method
+   Traceback (most recent call last):
+     File "<stdin>", line 1, in <module>
+   AttributeError: 'method' object has no attribute 'whoami'
+   >>> c.method.__func__.whoami = 'my name is method'
+   >>> c.method.whoami
+   'my name is method'
 
 See :ref:`types` for more information.
 
diff -r bd8afb90ebf2 Doc/library/string.rst
--- a/Doc/library/string.rst
+++ b/Doc/library/string.rst
@@ -10,7 +10,7 @@
 
 .. seealso::
 
-   :ref:`typesseq`
+   :ref:`textseq`
 
    :ref:`string-methods`
 
@@ -100,7 +100,7 @@
       This function does the actual work of formatting.  It is exposed as a
       separate function for cases where you want to pass in a predefined
       dictionary of arguments, rather than unpacking and repacking the
-      dictionary as individual arguments using the ``*args`` and ``**kwds``
+      dictionary as individual arguments using the ``*args`` and ``**kwargs``
       syntax.  :meth:`vformat` does the work of breaking up the format string
       into character data and replacement fields.  It calls the various
       methods described below.
diff -r bd8afb90ebf2 Doc/library/subprocess.rst
--- a/Doc/library/subprocess.rst
+++ b/Doc/library/subprocess.rst
@@ -22,8 +22,8 @@
    :pep:`324` -- PEP proposing the subprocess module
 
 
-Using the subprocess Module
----------------------------
+Using the :mod:`subprocess` Module
+----------------------------------
 
 The recommended approach to invoking subprocesses is to use the following
 convenience functions for all use cases they can handle. For more advanced
@@ -307,10 +307,14 @@
       :meth:`Popen.communicate` method.
 
    If *shell* is ``True``, the specified command will be executed through
-   the shell. This can be useful if you are using Python primarily for the
+   the shell.  This can be useful if you are using Python primarily for the
    enhanced control flow it offers over most system shells and still want
-   access to other shell features such as filename wildcards, shell pipes and
-   environment variable expansion.
+   convenient access to other shell features such as shell pipes, filename
+   wildcards, environment variable expansion, and expansion of ``~`` to a
+   user's home directory.  However, note that Python itself offers
+   implementations of many shell-like features (in particular, :mod:`glob`,
+   :mod:`fnmatch`, :func:`os.walk`, :func:`os.path.expandvars`,
+   :func:`os.path.expanduser`, and :mod:`shutil`).
 
    .. versionchanged:: 3.3
       When *universal_newlines* is ``True``, the class uses the encoding
@@ -324,8 +328,8 @@
       untrusted source makes a program vulnerable to `shell injection
       <http://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_,
       a serious security flaw which can result in arbitrary command execution.
-      For this reason, the use of *shell=True* is **strongly discouraged** in cases
-      where the command string is constructed from external input::
+      For this reason, the use of ``shell=True`` is **strongly discouraged**
+      in cases where the command string is constructed from external input::
 
          >>> from subprocess import call
          >>> filename = input("What file would you like to display?\n")
@@ -337,6 +341,10 @@
       from this vulnerability; see the Note in the :class:`Popen` constructor
       documentation for helpful hints in getting ``shell=False`` to work.
 
+      When using ``shell=True``, :func:`shlex.quote` can be used to properly
+      escape whitespace and shell metacharacters in strings that are going to
+      be used to construct shell commands.
+
 These options, along with all of the other options, are described in more
 detail in the :class:`Popen` constructor documentation.
 
@@ -350,24 +358,27 @@
 functions.
 
 
-.. class:: Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=())
+.. class:: Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, \
+                 stderr=None, preexec_fn=None, close_fds=True, shell=False, \
+                 cwd=None, env=None, universal_newlines=False, \
+                 startupinfo=None, creationflags=0, restore_signals=True, \
+                 start_new_session=False, pass_fds=())
 
-   Arguments are:
+   Execute a child program in a new process.  On Unix, the class uses
+   :meth:`os.execvp`-like behavior to execute the child program.  On Windows,
+   the class uses the Windows ``CreateProcess()`` function.  The arguments to
+   :class:`Popen` are as follows.
 
-   *args* should be a string, or a sequence of program arguments.  The program
-   to execute is normally the first item in the args sequence or the string if
-   a string is given, but can be explicitly set by using the *executable*
-   argument.  When *executable* is given, the first item in the args sequence
-   is still treated by most programs as the command name, which can then be
-   different from the actual executable name.  On Unix, it becomes the display
-   name for the executing program in utilities such as :program:`ps`.
+   *args* should be a sequence of program arguments or else a single string.
+   By default, the program to execute is the first item in *args* if *args* is
+   a sequence.  If *args* is a string, the interpretation is
+   platform-dependent and described below.  See the *shell* and *executable*
+   arguments for additional differences from the default behavior.  Unless
+   otherwise stated, it is recommended to pass *args* as a sequence.
 
-   On Unix, with *shell=False* (default): In this case, the Popen class uses
-   :meth:`os.execvp` like behavior to execute the child program.
-   *args* should normally be a
-   sequence.  If a string is specified for *args*, it will be used as the name
-   or path of the program to execute; this will only work if the program is
-   being given no arguments.
+   On Unix, if *args* is a string, the string is interpreted as the name or
+   path of the program to execute.  However, this can only be done if not
+   passing arguments to the program.
 
    .. note::
 
@@ -388,27 +399,37 @@
       used in the shell (such as filenames containing spaces or the *echo* command
       shown above) are single list elements.
 
-   On Unix, with *shell=True*: If args is a string, it specifies the command
-   string to execute through the shell.  This means that the string must be
+   On Windows, if *args* is a sequence, it will be converted to a string in a
+   manner described in :ref:`converting-argument-sequence`.  This is because
+   the underlying ``CreateProcess()`` operates on strings.
+
+   The *shell* argument (which defaults to *False*) specifies whether to use
+   the shell as the program to execute.  If *shell* is *True*, it is
+   recommended to pass *args* as a string rather than as a sequence.
+
+   On Unix with ``shell=True``, the shell defaults to :file:`/bin/sh`.  If
+   *args* is a string, the string specifies the command
+   to execute through the shell.  This means that the string must be
    formatted exactly as it would be when typed at the shell prompt.  This
    includes, for example, quoting or backslash escaping filenames with spaces in
    them.  If *args* is a sequence, the first item specifies the command string, and
    any additional items will be treated as additional arguments to the shell
-   itself.  That is to say, *Popen* does the equivalent of::
+   itself.  That is to say, :class:`Popen` does the equivalent of::
 
       Popen(['/bin/sh', '-c', args[0], args[1], ...])
 
+   On Windows with ``shell=True``, the :envvar:`COMSPEC` environment variable
+   specifies the default shell.  The only time you need to specify
+   ``shell=True`` on Windows is when the command you wish to execute is built
+   into the shell (e.g. :command:`dir` or :command:`copy`).  You do not need
+   ``shell=True`` to run a batch file or console-based executable.
+
    .. warning::
 
-      Enabling this option can be a security hazard if combined with untrusted
-      input. See the warning under :ref:`frequently-used-arguments`
+      Passing ``shell=True`` can be a security hazard if combined with
+      untrusted input.  See the warning under :ref:`frequently-used-arguments`
       for details.
 
-   On Windows: the :class:`Popen` class uses CreateProcess() to execute the
-   child program, which operates on strings.  If *args* is a sequence, it will
-   be converted to a string in a manner described in
-   :ref:`converting-argument-sequence`.
-
    *bufsize*, if given, has the same meaning as the corresponding argument to the
    built-in open() function: :const:`0` means unbuffered, :const:`1` means line
    buffered, any other positive value means use a buffer of (approximately) that
@@ -421,15 +442,15 @@
       enable buffering by setting *bufsize* to either -1 or a large enough
       positive value (such as 4096).
 
-   The *executable* argument specifies the program to execute. It is very seldom
-   needed: Usually, the program to execute is defined by the *args* argument. If
-   ``shell=True``, the *executable* argument specifies which shell to use. On Unix,
-   the default shell is :file:`/bin/sh`.  On Windows, the default shell is
-   specified by the :envvar:`COMSPEC` environment variable. The only reason you
-   would need to specify ``shell=True`` on Windows is where the command you
-   wish to execute is actually built in to the shell, eg ``dir``, ``copy``.
-   You don't need ``shell=True`` to run a batch file, nor to run a console-based
-   executable.
+   The *executable* argument specifies a replacement program to execute.   It
+   is very seldom needed.  When ``shell=False``, *executable* replaces the
+   program to execute specified by *args*.  However, the original *args* is
+   still passed to the program.  Most programs treat the program specified
+   by *args* as the command name, which can then be different from the program
+   actually executed.  On Unix, the *args* name
+   becomes the display name for the executable in utilities such as
+   :program:`ps`.  If ``shell=True``, on Unix the *executable* argument
+   specifies a replacement shell for the default :file:`/bin/sh`.
 
    *stdin*, *stdout* and *stderr* specify the executed program's standard input,
    standard output and standard error file handles, respectively.  Valid values
@@ -480,10 +501,10 @@
    .. versionadded:: 3.2
       The *pass_fds* parameter was added.
 
-   If *cwd* is not ``None``, the child's current directory will be changed to *cwd*
-   before it is executed.  Note that this directory is not considered when
-   searching the executable, so you can't specify the program's path relative to
-   *cwd*.
+   If *cwd* is not ``None``, the function changes the working directory to
+   *cwd* before executing the child.  In particular, the function looks for
+   *executable* (or for the first item in *args*) relative to *cwd* if the
+   executable path is a relative path.
 
    If *restore_signals* is True (the default) all signals that Python has set to
    SIG_IGN are restored to SIG_DFL in the child process before the exec.
@@ -669,8 +690,8 @@
 
 .. warning::
 
-   Use :meth:`communicate` rather than :attr:`.stdin.write <stdin>`,
-   :attr:`.stdout.read <stdout>` or :attr:`.stderr.read <stderr>` to avoid
+   Use :meth:`~Popen.communicate` rather than :attr:`.stdin.write <Popen.stdin>`,
+   :attr:`.stdout.read <Popen.stdout>` or :attr:`.stderr.read <Popen.stderr>` to avoid
    deadlocks due to any of the other OS pipe buffers filling up and blocking the
    child process.
 
@@ -818,8 +839,8 @@
 
 .. _subprocess-replacements:
 
-Replacing Older Functions with the subprocess Module
-----------------------------------------------------
+Replacing Older Functions with the :mod:`subprocess` Module
+-----------------------------------------------------------
 
 In this section, "a becomes b" means that b can be used as a replacement for a.
 
@@ -835,7 +856,7 @@
    the raised exception.
 
 In the following examples, we assume that the relevant functions have already
-been imported from the subprocess module.
+been imported from the :mod:`subprocess` module.
 
 
 Replacing /bin/sh shell backquote
diff -r bd8afb90ebf2 Doc/library/sys.rst
--- a/Doc/library/sys.rst
+++ b/Doc/library/sys.rst
@@ -783,7 +783,9 @@
    current directory first.  Notice that the script directory is inserted *before*
    the entries inserted as a result of :envvar:`PYTHONPATH`.
 
-   A program is free to modify this list for its own purposes.
+   A program is free to modify this list for its own purposes.  Only strings
+   and bytes should be added to :data:`sys.path`; all other data types are
+   ignored during import.
 
 
    .. seealso::
@@ -831,7 +833,7 @@
    For other systems, the values are:
 
    ================ ===========================
-   System           :data:`platform` value
+   System           ``platform`` value
    ================ ===========================
    Linux            ``'linux'``
    Windows          ``'win32'``
diff -r bd8afb90ebf2 Doc/library/syslog.rst
--- a/Doc/library/syslog.rst
+++ b/Doc/library/syslog.rst
@@ -17,7 +17,8 @@
 The module defines the following functions:
 
 
-.. function:: syslog([priority,] message)
+.. function:: syslog(message)
+              syslog(priority, message)
 
    Send the string *message* to the system logger.  A trailing newline is added
    if necessary.  Each message is tagged with a priority composed of a
diff -r bd8afb90ebf2 Doc/library/tempfile.rst
--- a/Doc/library/tempfile.rst
+++ b/Doc/library/tempfile.rst
@@ -86,6 +86,9 @@
    whether :func:`rollover` has been called. This file-like object can be
    used in a :keyword:`with` statement, just like a normal file.
 
+   .. versionchanged:: 3.3
+      the truncate method now accepts a ``size`` argument.
+
 
 .. function:: TemporaryDirectory(suffix='', prefix='tmp', dir=None)
 
diff -r bd8afb90ebf2 Doc/library/textwrap.rst
--- a/Doc/library/textwrap.rst
+++ b/Doc/library/textwrap.rst
@@ -25,6 +25,9 @@
    Optional keyword arguments correspond to the instance attributes of
    :class:`TextWrapper`, documented below.  *width* defaults to ``70``.
 
+   See the :meth:`TextWrapper.wrap` method for additional details on how
+   :func:`wrap` behaves.
+
 
 .. function:: fill(text, width=70, **kwargs)
 
@@ -167,15 +170,18 @@
 
    .. attribute:: drop_whitespace
 
-      (default: ``True``) If true, whitespace that, after wrapping, happens to
-      end up at the beginning or end of a line is dropped (leading whitespace in
-      the first line is always preserved, though).
+      (default: ``True``) If true, whitespace at the beginning and ending of
+      every line (after wrapping but before indenting) is dropped.
+      Whitespace at the beginning of the paragraph, however, is not dropped
+      if non-whitespace follows it.  If whitespace being dropped takes up an
+      entire line, the whole line is dropped.
 
 
    .. attribute:: initial_indent
 
       (default: ``''``) String that will be prepended to the first line of
-      wrapped output.  Counts towards the length of the first line.
+      wrapped output.  Counts towards the length of the first line.  The empty
+      string is not indented.
 
 
    .. attribute:: subsequent_indent
@@ -236,8 +242,9 @@
 
       Wraps the single paragraph in *text* (a string) so every line is at most
       :attr:`width` characters long.  All wrapping options are taken from
-      instance attributes of the :class:`TextWrapper` instance. Returns a list
-      of output lines, without final newlines.
+      instance attributes of the :class:`TextWrapper` instance.  Returns a list
+      of output lines, without final newlines.  If the wrapped output has no
+      content, the returned list is empty.
 
 
    .. method:: fill(text)
diff -r bd8afb90ebf2 Doc/library/threading.rst
--- a/Doc/library/threading.rst
+++ b/Doc/library/threading.rst
@@ -21,7 +21,7 @@
    supported by this module.
 
 
-This module defines the following functions and objects:
+This module defines the following functions:
 
 
 .. function:: active_count()
@@ -30,16 +30,6 @@
    count is equal to the length of the list returned by :func:`.enumerate`.
 
 
-.. function:: Condition()
-   :noindex:
-
-   A factory function that returns a new condition variable object. A condition
-   variable allows one or more threads to wait until they are notified by another
-   thread.
-
-   See :ref:`condition-objects`.
-
-
 .. function:: current_thread()
 
    Return the current :class:`Thread` object, corresponding to the caller's thread
@@ -67,88 +57,6 @@
    and threads that have not yet been started.
 
 
-.. function:: Event()
-   :noindex:
-
-   A factory function that returns a new event object.  An event manages a flag
-   that can be set to true with the :meth:`~Event.set` method and reset to false
-   with the :meth:`clear` method.  The :meth:`wait` method blocks until the flag
-   is true.
-
-   See :ref:`event-objects`.
-
-
-.. class:: local
-
-   A class that represents thread-local data.  Thread-local data are data whose
-   values are thread specific.  To manage thread-local data, just create an
-   instance of :class:`local` (or a subclass) and store attributes on it::
-
-      mydata = threading.local()
-      mydata.x = 1
-
-   The instance's values will be different for separate threads.
-
-   For more details and extensive examples, see the documentation string of the
-   :mod:`_threading_local` module.
-
-
-.. function:: Lock()
-
-   A factory function that returns a new primitive lock object.  Once a thread has
-   acquired it, subsequent attempts to acquire it block, until it is released; any
-   thread may release it.
-
-   See :ref:`lock-objects`.
-
-
-.. function:: RLock()
-
-   A factory function that returns a new reentrant lock object. A reentrant lock
-   must be released by the thread that acquired it. Once a thread has acquired a
-   reentrant lock, the same thread may acquire it again without blocking; the
-   thread must release it once for each time it has acquired it.
-
-   See :ref:`rlock-objects`.
-
-
-.. function:: Semaphore(value=1)
-   :noindex:
-
-   A factory function that returns a new semaphore object.  A semaphore manages a
-   counter representing the number of :meth:`release` calls minus the number of
-   :meth:`acquire` calls, plus an initial value. The :meth:`acquire` method blocks
-   if necessary until it can return without making the counter negative.  If not
-   given, *value* defaults to 1.
-
-   See :ref:`semaphore-objects`.
-
-
-.. function:: BoundedSemaphore(value=1)
-
-   A factory function that returns a new bounded semaphore object.  A bounded
-   semaphore checks to make sure its current value doesn't exceed its initial
-   value.  If it does, :exc:`ValueError` is raised. In most situations semaphores
-   are used to guard resources with limited capacity.  If the semaphore is released
-   too many times it's a sign of a bug.  If not given, *value* defaults to 1.
-
-
-.. class:: Thread
-
-   A class that represents a thread of control.  This class can be safely
-   subclassed in a limited fashion.
-
-   See :ref:`thread-objects`.
-
-
-.. class:: Timer
-   :noindex:
-
-   A thread that executes a function after a specified interval has passed.
-
-   See :ref:`timer-objects`.
-
-
 .. function:: settrace(func)
 
    .. index:: single: trace function
@@ -197,7 +105,8 @@
    .. versionadded:: 3.2
 
 
-Detailed interfaces for the objects are documented below.
+This module defines a number of classes, which are detailed in the sections
+below.
 
 The design of this module is loosely based on Java's threading model. However,
 where Java makes locks and condition variables basic behavior of every object,
@@ -210,17 +119,38 @@
 All of the methods described below are executed atomically.
 
 
+Thread-Local Data
+-----------------
+
+Thread-local data is data whose values are thread specific.  To manage
+thread-local data, just create an instance of :class:`local` (or a
+subclass) and store attributes on it::
+
+  mydata = threading.local()
+  mydata.x = 1
+
+The instance's values will be different for separate threads.
+
+
+.. class:: local()
+
+   A class that represents thread-local data.
+
+   For more details and extensive examples, see the documentation string of the
+   :mod:`_threading_local` module.
+
+
 .. _thread-objects:
 
 Thread Objects
 --------------
 
-This class represents an activity that is run in a separate thread of control.
-There are two ways to specify the activity: by passing a callable object to the
-constructor, or by overriding the :meth:`~Thread.run` method in a subclass.
-No other methods (except for the constructor) should be overridden in a
-subclass.  In other words,  *only*  override the :meth:`~Thread.__init__`
-and :meth:`~Thread.run` methods of this class.
+The :class:`Thread` class represents an activity that is run in a separate
+thread of control.  There are two ways to specify the activity: by passing a
+callable object to the constructor, or by overriding the :meth:`~Thread.run`
+method in a subclass.  No other methods (except for the constructor) should be
+overridden in a subclass.  In other words, *only*  override the
+:meth:`~Thread.__init__` and :meth:`~Thread.run` methods of this class.
 
 Once a thread object is created, its activity must be started by calling the
 thread's :meth:`~Thread.start` method.  This invokes the :meth:`~Thread.run`
@@ -255,8 +185,8 @@
 since it is impossible to detect the termination of alien threads.
 
 
-.. class:: Thread(group=None, target=None, name=None, args=(), kwargs={},
-                  verbose=None, *, daemon=None)
+.. class:: Thread(group=None, target=None, name=None, args=(), kwargs={}, *, \
+                  daemon=None)
 
    This constructor should always be called with keyword arguments.  Arguments
    are:
@@ -275,8 +205,6 @@
    *kwargs* is a dictionary of keyword arguments for the target invocation.
    Defaults to ``{}``.
 
-   *verbose* is a flag used for debugging messages.
-
    If not ``None``, *daemon* explicitly sets whether the thread is daemonic.
    If ``None`` (the default), the daemonic property is inherited from the
    current thread.
@@ -421,45 +349,55 @@
 All methods are executed atomically.
 
 
-.. method:: Lock.acquire(blocking=True, timeout=-1)
+.. class:: Lock()
 
-   Acquire a lock, blocking or non-blocking.
+   The class implementing primitive lock objects.  Once a thread has acquired a
+   lock, subsequent attempts to acquire it block, until it is released; any
+   thread may release it.
 
-   When invoked with the *blocking* argument set to ``True`` (the default),
-   block until the lock is unlocked, then set it to locked and return ``True``.
+   .. versionchanged:: 3.3
+      Changed from a factory function to a class.
 
-   When invoked with the *blocking* argument set to ``False``, do not block.
-   If a call with *blocking* set to ``True`` would block, return ``False``
-   immediately; otherwise, set the lock to locked and return ``True``.
 
-   When invoked with the floating-point *timeout* argument set to a positive
-   value, block for at most the number of seconds specified by *timeout*
-   and as long as the lock cannot be acquired.  A negative *timeout* argument
-   specifies an unbounded wait.  It is forbidden to specify a *timeout*
-   when *blocking* is false.
+   .. method:: acquire(blocking=True, timeout=-1)
 
-   The return value is ``True`` if the lock is acquired successfully,
-   ``False`` if not (for example if the *timeout* expired).
+      Acquire a lock, blocking or non-blocking.
 
-   .. versionchanged:: 3.2
-      The *timeout* parameter is new.
+      When invoked with the *blocking* argument set to ``True`` (the default),
+      block until the lock is unlocked, then set it to locked and return ``True``.
 
-   .. versionchanged:: 3.2
-      Lock acquires can now be interrupted by signals on POSIX.
+      When invoked with the *blocking* argument set to ``False``, do not block.
+      If a call with *blocking* set to ``True`` would block, return ``False``
+      immediately; otherwise, set the lock to locked and return ``True``.
 
+      When invoked with the floating-point *timeout* argument set to a positive
+      value, block for at most the number of seconds specified by *timeout*
+      and as long as the lock cannot be acquired.  A negative *timeout* argument
+      specifies an unbounded wait.  It is forbidden to specify a *timeout*
+      when *blocking* is false.
 
-.. method:: Lock.release()
+      The return value is ``True`` if the lock is acquired successfully,
+      ``False`` if not (for example if the *timeout* expired).
 
-   Release a lock.  This can be called from any thread, not only the thread
-   which has acquired the lock.
+      .. versionchanged:: 3.2
+         The *timeout* parameter is new.
 
-   When the lock is locked, reset it to unlocked, and return.  If any other threads
-   are blocked waiting for the lock to become unlocked, allow exactly one of them
-   to proceed.
+      .. versionchanged:: 3.2
+         Lock acquires can now be interrupted by signals on POSIX.
 
-   When invoked on an unlocked lock, a :exc:`RuntimeError` is raised.
 
-   There is no return value.
+   .. method:: release()
+
+      Release a lock.  This can be called from any thread, not only the thread
+      which has acquired the lock.
+
+      When the lock is locked, reset it to unlocked, and return.  If any other threads
+      are blocked waiting for the lock to become unlocked, allow exactly one of them
+      to proceed.
+
+      When invoked on an unlocked lock, a :exc:`RuntimeError` is raised.
+
+      There is no return value.
 
 
 .. _rlock-objects:
@@ -483,47 +421,59 @@
 Reentrant locks also support the :ref:`context manager protocol <with-locks>`.
 
 
-.. method:: RLock.acquire(blocking=True, timeout=-1)
+.. class:: RLock()
 
-   Acquire a lock, blocking or non-blocking.
+   This class implements reentrant lock objects.  A reentrant lock must be
+   released by the thread that acquired it.  Once a thread has acquired a
+   reentrant lock, the same thread may acquire it again without blocking; the
+   thread must release it once for each time it has acquired it.
 
-   When invoked without arguments: if this thread already owns the lock, increment
-   the recursion level by one, and return immediately.  Otherwise, if another
-   thread owns the lock, block until the lock is unlocked.  Once the lock is
-   unlocked (not owned by any thread), then grab ownership, set the recursion level
-   to one, and return.  If more than one thread is blocked waiting until the lock
-   is unlocked, only one at a time will be able to grab ownership of the lock.
-   There is no return value in this case.
+   Note that ``RLock`` is actually a factory function which returns an instance
+   of the most efficient version of the concrete RLock class that is supported
+   by the platform.
 
-   When invoked with the *blocking* argument set to true, do the same thing as when
-   called without arguments, and return true.
 
-   When invoked with the *blocking* argument set to false, do not block.  If a call
-   without an argument would block, return false immediately; otherwise, do the
-   same thing as when called without arguments, and return true.
+   .. method:: acquire(blocking=True, timeout=-1)
 
-   When invoked with the floating-point *timeout* argument set to a positive
-   value, block for at most the number of seconds specified by *timeout*
-   and as long as the lock cannot be acquired.  Return true if the lock has
-   been acquired, false if the timeout has elapsed.
+      Acquire a lock, blocking or non-blocking.
 
-   .. versionchanged:: 3.2
-      The *timeout* parameter is new.
+      When invoked without arguments: if this thread already owns the lock, increment
+      the recursion level by one, and return immediately.  Otherwise, if another
+      thread owns the lock, block until the lock is unlocked.  Once the lock is
+      unlocked (not owned by any thread), then grab ownership, set the recursion level
+      to one, and return.  If more than one thread is blocked waiting until the lock
+      is unlocked, only one at a time will be able to grab ownership of the lock.
+      There is no return value in this case.
 
+      When invoked with the *blocking* argument set to true, do the same thing as when
+      called without arguments, and return true.
 
-.. method:: RLock.release()
+      When invoked with the *blocking* argument set to false, do not block.  If a call
+      without an argument would block, return false immediately; otherwise, do the
+      same thing as when called without arguments, and return true.
 
-   Release a lock, decrementing the recursion level.  If after the decrement it is
-   zero, reset the lock to unlocked (not owned by any thread), and if any other
-   threads are blocked waiting for the lock to become unlocked, allow exactly one
-   of them to proceed.  If after the decrement the recursion level is still
-   nonzero, the lock remains locked and owned by the calling thread.
+      When invoked with the floating-point *timeout* argument set to a positive
+      value, block for at most the number of seconds specified by *timeout*
+      and as long as the lock cannot be acquired.  Return true if the lock has
+      been acquired, false if the timeout has elapsed.
 
-   Only call this method when the calling thread owns the lock. A
-   :exc:`RuntimeError` is raised if this method is called when the lock is
-   unlocked.
+      .. versionchanged:: 3.2
+         The *timeout* parameter is new.
 
-   There is no return value.
+
+   .. method:: release()
+
+      Release a lock, decrementing the recursion level.  If after the decrement it is
+      zero, reset the lock to unlocked (not owned by any thread), and if any other
+      threads are blocked waiting for the lock to become unlocked, allow exactly one
+      of them to proceed.  If after the decrement the recursion level is still
+      nonzero, the lock remains locked and owned by the calling thread.
+
+      Only call this method when the calling thread owns the lock. A
+      :exc:`RuntimeError` is raised if this method is called when the lock is
+      unlocked.
+
+      There is no return value.
 
 
 .. _condition-objects:
@@ -558,10 +508,6 @@
 the thread that called :meth:`~Condition.notify` or :meth:`~Condition.notify_all`
 finally relinquishes ownership of the lock.
 
-
-Usage
-^^^^^
-
 The typical programming style using condition variables uses the lock to
 synchronize access to some shared state; threads that are interested in a
 particular change of state call :meth:`~Condition.wait` repeatedly until they
@@ -600,15 +546,18 @@
 item to the buffer only needs to wake up one consumer thread.
 
 
-Interface
-^^^^^^^^^
+.. class:: Condition(lock=None)
 
-.. class:: Condition(lock=None)
+   This class implements condition variable objects.  A condition variable
+   allows one or more threads to wait until they are notified by another thread.
 
    If the *lock* argument is given and not ``None``, it must be a :class:`Lock`
    or :class:`RLock` object, and it is used as the underlying lock.  Otherwise,
    a new :class:`RLock` object is created and used as the underlying lock.
 
+   .. versionchanged:: 3.3
+      changed from a factory function to a class.
+
    .. method:: acquire(*args)
 
       Acquire the underlying lock. This method calls the corresponding method on
@@ -718,10 +667,19 @@
 
 .. class:: Semaphore(value=1)
 
+   This class implements semaphore objects.  A semaphore manages a counter
+   representing the number of :meth:`release` calls minus the number of
+   :meth:`acquire` calls, plus an initial value.  The :meth:`acquire` method
+   blocks if necessary until it can return without making the counter negative.
+   If not given, *value* defaults to 1.
+
    The optional argument gives the initial *value* for the internal counter; it
    defaults to ``1``. If the *value* given is less than 0, :exc:`ValueError` is
    raised.
 
+   .. versionchanged:: 3.3
+      changed from a factory function to a class.
+
    .. method:: acquire(blocking=True, timeout=None)
 
       Acquire a semaphore.
@@ -754,6 +712,18 @@
       than zero again, wake up that thread.
 
 
+.. class:: BoundedSemaphore(value=1)
+
+   Class implementing bounded semaphore objects.  A bounded semaphore checks to
+   make sure its current value doesn't exceed its initial value.  If it does,
+   :exc:`ValueError` is raised. In most situations semaphores are used to guard
+   resources with limited capacity.  If the semaphore is released too many times
+   it's a sign of a bug.  If not given, *value* defaults to 1.
+
+   .. versionchanged:: 3.3
+      changed from a factory function to a class.
+
+
 .. _semaphore-examples:
 
 :class:`Semaphore` Example
@@ -765,7 +735,7 @@
 main thread would initialize the semaphore::
 
    maxconnections = 5
-   ...
+   # ...
    pool_sema = BoundedSemaphore(value=maxconnections)
 
 Once spawned, worker threads call the semaphore's acquire and release methods
@@ -774,7 +744,7 @@
    with pool_sema:
        conn = connectdb()
        try:
-           ... use connection ...
+           # ... use connection ...
        finally:
            conn.close()
 
@@ -797,7 +767,13 @@
 
 .. class:: Event()
 
-   The internal flag is initially false.
+   Class implementing event objects.  An event manages a flag that can be set to
+   true with the :meth:`~Event.set` method and reset to false with the
+   :meth:`clear` method.  The :meth:`wait` method blocks until the flag is true.
+   The flag is initially false.
+
+   .. versionchanged:: 3.3
+      changed from a factory function to a class.
 
    .. method:: is_set()
 
@@ -862,6 +838,9 @@
    Create a timer that will run *function* with arguments *args* and  keyword
    arguments *kwargs*, after *interval* seconds have passed.
 
+   .. versionchanged:: 3.3
+      changed from a factory function to a class.
+
    .. method:: cancel()
 
       Stop the timer, and cancel the execution of the timer's action.  This will
diff -r bd8afb90ebf2 Doc/library/time.rst
--- a/Doc/library/time.rst
+++ b/Doc/library/time.rst
@@ -309,7 +309,7 @@
 
    On Windows versions older than Vista, :func:`monotonic` detects
    :c:func:`GetTickCount` integer overflow (32 bits, roll-over after 49.7 days).
-   It increases an internal epoch (reference time by) 2\ :sup:`32` each time
+   It increases an internal epoch (reference time) by 2\ :sup:`32` each time
    that an overflow is detected.  The epoch is stored in the process-local state
    and so the value of :func:`monotonic` may be different in two Python
    processes running for more than 49 days. On more recent versions of Windows
@@ -557,7 +557,7 @@
    :exc:`TypeError` is raised.
 
   .. versionchanged:: 3.3
-     :attr:`tm_gmtoff` and :attr:`tm_zone` attributes are avaliable on platforms
+     :attr:`tm_gmtoff` and :attr:`tm_zone` attributes are available on platforms
      with C library supporting the corresponding fields in ``struct tm``.
 
 .. function:: time()
diff -r bd8afb90ebf2 Doc/library/timeit.rst
--- a/Doc/library/timeit.rst
+++ b/Doc/library/timeit.rst
@@ -14,113 +14,154 @@
 --------------
 
 This module provides a simple way to time small bits of Python code. It has both
-command line as well as callable interfaces.  It avoids a number of common traps
-for measuring execution times.  See also Tim Peters' introduction to the
-"Algorithms" chapter in the Python Cookbook, published by O'Reilly.
+a :ref:`command-line-interface` as well as a :ref:`callable <python-interface>`
+one.  It avoids a number of common traps for measuring execution times.
+See also Tim Peters' introduction to the "Algorithms" chapter in the *Python
+Cookbook*, published by O'Reilly.
 
-The module defines the following public class:
+
+Basic Examples
+--------------
+
+The following example shows how the :ref:`command-line-interface`
+can be used to compare three different expressions:
+
+.. code-block:: sh
+
+   $ python -m timeit '"-".join(str(n) for n in range(100))'
+   10000 loops, best of 3: 40.3 usec per loop
+   $ python -m timeit '"-".join([str(n) for n in range(100)])'
+   10000 loops, best of 3: 33.4 usec per loop
+   $ python -m timeit '"-".join(map(str, range(100)))'
+   10000 loops, best of 3: 25.2 usec per loop
+
+This can be achieved from the :ref:`python-interface` with::
+
+   >>> import timeit
+   >>> timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
+   0.8187260627746582
+   >>> timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
+   0.7288308143615723
+   >>> timeit.timeit('"-".join(map(str, range(100)))', number=10000)
+   0.5858950614929199
+
+Note however that :mod:`timeit` will automatically determine the number of
+repetitions only when the command-line interface is used.  In the
+:ref:`timeit-examples` section you can find more advanced examples.
+
+
+.. _python-interface:
+
+Python Interface
+----------------
+
+The module defines three convenience functions and a public class:
+
+
+.. function:: timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000)
+
+   Create a :class:`Timer` instance with the given statement, *setup* code and
+   *timer* function and run its :meth:`.timeit` method with *number* executions.
+
+
+.. function:: repeat(stmt='pass', setup='pass', timer=<default timer>, repeat=3, number=1000000)
+
+   Create a :class:`Timer` instance with the given statement, *setup* code and
+   *timer* function and run its :meth:`.repeat` method with the given *repeat*
+   count and *number* executions.
+
+
+.. function:: default_timer()
+
+   The default timer, which is always :func:`time.perf_counter`.
+
+   .. versionchanged:: 3.3
+      :func:`time.perf_counter` is now the default timer.
 
 
 .. class:: Timer(stmt='pass', setup='pass', timer=<timer function>)
 
    Class for timing execution speed of small code snippets.
 
-   The constructor takes a statement to be timed, an additional statement used for
-   setup, and a timer function.  Both statements default to ``'pass'``; the timer
-   function is platform-dependent (see the module doc string).  *stmt* and *setup*
-   may also contain multiple statements separated by ``;`` or newlines, as long as
-   they don't contain multi-line string literals.
+   The constructor takes a statement to be timed, an additional statement used
+   for setup, and a timer function.  Both statements default to ``'pass'``;
+   the timer function is platform-dependent (see the module doc string).
+   *stmt* and *setup* may also contain multiple statements separated by ``;``
+   or newlines, as long as they don't contain multi-line string literals.
 
-   To measure the execution time of the first statement, use the :meth:`timeit`
-   method.  The :meth:`repeat` method is a convenience to call :meth:`timeit`
+   To measure the execution time of the first statement, use the :meth:`.timeit`
+   method.  The :meth:`.repeat` method is a convenience to call :meth:`.timeit`
    multiple times and return a list of results.
 
    The *stmt* and *setup* parameters can also take objects that are callable
-   without arguments. This will embed calls to them in a timer function that
-   will then be executed by :meth:`timeit`.  Note that the timing overhead is a
+   without arguments.  This will embed calls to them in a timer function that
+   will then be executed by :meth:`.timeit`.  Note that the timing overhead is a
    little larger in this case because of the extra function calls.
 
 
-.. method:: Timer.print_exc(file=None)
+   .. method:: Timer.timeit(number=1000000)
 
-   Helper to print a traceback from the timed code.
+      Time *number* executions of the main statement.  This executes the setup
+      statement once, and then returns the time it takes to execute the main
+      statement a number of times, measured in seconds as a float.
+      The argument is the number of times through the loop, defaulting to one
+      million.  The main statement, the setup statement and the timer function
+      to be used are passed to the constructor.
 
-   Typical use::
+      .. note::
 
-      t = Timer(...)       # outside the try/except
-      try:
-          t.timeit(...)    # or t.repeat(...)
-      except:
-          t.print_exc()
+         By default, :meth:`.timeit` temporarily turns off :term:`garbage
+         collection` during the timing.  The advantage of this approach is that
+         it makes independent timings more comparable.  This disadvantage is
+         that GC may be an important component of the performance of the
+         function being measured.  If so, GC can be re-enabled as the first
+         statement in the *setup* string.  For example::
 
-   The advantage over the standard traceback is that source lines in the compiled
-   template will be displayed. The optional *file* argument directs where the
-   traceback is sent; it defaults to ``sys.stderr``.
+            timeit.Timer('for i in range(10): oct(i)', 'gc.enable()').timeit()
 
 
-.. method:: Timer.repeat(repeat=3, number=1000000)
+   .. method:: Timer.repeat(repeat=3, number=1000000)
 
-   Call :meth:`timeit` a few times.
+      Call :meth:`.timeit` a few times.
 
-   This is a convenience function that calls the :meth:`timeit` repeatedly,
-   returning a list of results.  The first argument specifies how many times to
-   call :meth:`timeit`.  The second argument specifies the *number* argument for
-   :func:`timeit`.
+      This is a convenience function that calls the :meth:`.timeit` repeatedly,
+      returning a list of results.  The first argument specifies how many times
+      to call :meth:`.timeit`.  The second argument specifies the *number*
+      argument for :meth:`.timeit`.
 
-   .. note::
+      .. note::
 
-      It's tempting to calculate mean and standard deviation from the result vector
-      and report these.  However, this is not very useful.  In a typical case, the
-      lowest value gives a lower bound for how fast your machine can run the given
-      code snippet; higher values in the result vector are typically not caused by
-      variability in Python's speed, but by other processes interfering with your
-      timing accuracy.  So the :func:`min` of the result is probably the only number
-      you should be interested in.  After that, you should look at the entire vector
-      and apply common sense rather than statistics.
+         It's tempting to calculate mean and standard deviation from the result
+         vector and report these.  However, this is not very useful.
+         In a typical case, the lowest value gives a lower bound for how fast
+         your machine can run the given code snippet; higher values in the
+         result vector are typically not caused by variability in Python's
+         speed, but by other processes interfering with your timing accuracy.
+         So the :func:`min` of the result is probably the only number you
+         should be interested in.  After that, you should look at the entire
+         vector and apply common sense rather than statistics.
 
 
-.. method:: Timer.timeit(number=1000000)
+   .. method:: Timer.print_exc(file=None)
 
-   Time *number* executions of the main statement. This executes the setup
-   statement once, and then returns the time it takes to execute the main statement
-   a number of times, measured in seconds as a float.  The argument is the number
-   of times through the loop, defaulting to one million.  The main statement, the
-   setup statement and the timer function to be used are passed to the constructor.
+      Helper to print a traceback from the timed code.
 
-   .. note::
+      Typical use::
 
-      By default, :meth:`timeit` temporarily turns off :term:`garbage collection`
-      during the timing.  The advantage of this approach is that it makes
-      independent timings more comparable.  This disadvantage is that GC may be
-      an important component of the performance of the function being measured.
-      If so, GC can be re-enabled as the first statement in the *setup* string.
-      For example::
+         t = Timer(...)       # outside the try/except
+         try:
+             t.timeit(...)    # or t.repeat(...)
+         except:
+             t.print_exc()
 
-         timeit.Timer('for i in range(10): oct(i)', 'gc.enable()').timeit()
+      The advantage over the standard traceback is that source lines in the
+      compiled template will be displayed.  The optional *file* argument directs
+      where the traceback is sent; it defaults to :data:`sys.stderr`.
 
 
-The module also defines three convenience functions:
+.. _command-line-interface:
 
-
-.. function:: default_timer()
-
-   The default timer, which is always :func:`time.perf_counter`.
-
-
-.. function:: repeat(stmt='pass', setup='pass', timer=<default timer>, repeat=3, number=1000000)
-
-   Create a :class:`Timer` instance with the given statement, setup code and timer
-   function and run its :meth:`repeat` method with the given repeat count and
-   *number* executions.
-
-
-.. function:: timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000)
-
-   Create a :class:`Timer` instance with the given statement, setup code and timer
-   function and run its :meth:`timeit` method with *number* executions.
-
-
-Command Line Interface
+Command-Line Interface
 ----------------------
 
 When called as a program from the command line, the following form is used::
@@ -184,25 +225,53 @@
 
    There is a certain baseline overhead associated with executing a pass statement.
    The code here doesn't try to hide it, but you should be aware of it.  The
-   baseline overhead can be measured by invoking the program without arguments.
+   baseline overhead can be measured by invoking the program without arguments,
+   and it might differ between Python versions.
 
-The baseline overhead differs between Python versions!  Also, to fairly compare
-older Python versions to Python 2.3, you may want to use Python's :option:`-O`
-option for the older versions to avoid timing ``SET_LINENO`` instructions.
 
+.. _timeit-examples:
 
 Examples
 --------
 
-Here are two example sessions (one using the command line, one using the module
-interface) that compare the cost of using :func:`hasattr` vs.
-:keyword:`try`/:keyword:`except` to test for missing and present object
-attributes. ::
+It is possible to provide a setup statement that is executed only once at the beginning:
+
+.. code-block:: sh
+
+   $ python -m timeit -s 'text = "sample string"; char = "g"'  'char in text'
+   10000000 loops, best of 3: 0.0877 usec per loop
+   $ python -m timeit -s 'text = "sample string"; char = "g"'  'text.find(char)'
+   1000000 loops, best of 3: 0.342 usec per loop
+
+::
+
+   >>> import timeit
+   >>> timeit.timeit('char in text', setup='text = "sample string"; char = "g"')
+   0.41440500499993504
+   >>> timeit.timeit('text.find(char)', setup='text = "sample string"; char = "g"')
+   1.7246671520006203
+
+The same can be done using the :class:`Timer` class and its methods::
+
+   >>> import timeit
+   >>> t = timeit.Timer('char in text', setup='text = "sample string"; char = "g"')
+   >>> t.timeit()
+   0.3955516149999312
+   >>> t.repeat()
+   [0.40193588800002544, 0.3960157959998014, 0.39594301399984033]
+
+
+The following examples show how to time expressions that contain multiple lines.
+Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:keyword:`except`
+to test for missing and present object attributes:
+
+.. code-block:: sh
 
    $ python -m timeit 'try:' '  str.__bool__' 'except AttributeError:' '  pass'
    100000 loops, best of 3: 15.7 usec per loop
    $ python -m timeit 'if hasattr(str, "__bool__"): pass'
    100000 loops, best of 3: 4.26 usec per loop
+
    $ python -m timeit 'try:' '  int.__bool__' 'except AttributeError:' '  pass'
    1000000 loops, best of 3: 1.43 usec per loop
    $ python -m timeit 'if hasattr(int, "__bool__"): pass'
@@ -211,46 +280,40 @@
 ::
 
    >>> import timeit
+   >>> # attribute is missing
    >>> s = """\
    ... try:
    ...     str.__bool__
    ... except AttributeError:
    ...     pass
    ... """
-   >>> t = timeit.Timer(stmt=s)
-   >>> print("%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000))
-   17.09 usec/pass
-   >>> s = """\
-   ... if hasattr(str, '__bool__'): pass
-   ... """
-   >>> t = timeit.Timer(stmt=s)
-   >>> print("%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000))
-   4.85 usec/pass
+   >>> timeit.timeit(stmt=s, number=100000)
+   0.9138244460009446
+   >>> s = "if hasattr(str, '__bool__'): pass"
+   >>> timeit.timeit(stmt=s, number=100000)
+   0.5829014980008651
+   >>>
+   >>> # attribute is present
    >>> s = """\
    ... try:
    ...     int.__bool__
    ... except AttributeError:
    ...     pass
    ... """
-   >>> t = timeit.Timer(stmt=s)
-   >>> print("%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000))
-   1.97 usec/pass
-   >>> s = """\
-   ... if hasattr(int, '__bool__'): pass
-   ... """
-   >>> t = timeit.Timer(stmt=s)
-   >>> print("%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000))
-   3.15 usec/pass
+   >>> timeit.timeit(stmt=s, number=100000)
+   0.04215312199994514
+   >>> s = "if hasattr(int, '__bool__'): pass"
+   >>> timeit.timeit(stmt=s, number=100000)
+   0.08588060699912603
+
 
 To give the :mod:`timeit` module access to functions you define, you can pass a
-``setup`` parameter which contains an import statement::
+*setup* parameter which contains an import statement::
 
    def test():
        """Stupid test function"""
        L = [i for i in range(100)]
 
    if __name__ == '__main__':
-       from timeit import Timer
-       t = Timer("test()", "from __main__ import test")
-       print(t.timeit())
-
+       import timeit
+       print(timeit.timeit("test()", setup="from __main__ import test"))
diff -r bd8afb90ebf2 Doc/library/tkinter.tix.rst
--- a/Doc/library/tkinter.tix.rst
+++ b/Doc/library/tkinter.tix.rst
@@ -504,7 +504,7 @@
       print(root.tix_configure())
 
 
-.. method:: tixCommand.tix_configure([cnf,] **kw)
+.. method:: tixCommand.tix_configure(cnf=None, **kw)
 
    Query or modify the configuration options of the Tix application context. If no
    option is specified, returns a dictionary all of the available options.  If
diff -r bd8afb90ebf2 Doc/library/types.rst
--- a/Doc/library/types.rst
+++ b/Doc/library/types.rst
@@ -69,7 +69,7 @@
 the types that arise only incidentally during processing such as the
 ``listiterator`` type.
 
-Typical use is of these names is for :func:`isinstance` or
+Typical use of these names is for :func:`isinstance` or
 :func:`issubclass` checks.
 
 Standard names are defined for the following types:
diff -r bd8afb90ebf2 Doc/library/unicodedata.rst
--- a/Doc/library/unicodedata.rst
+++ b/Doc/library/unicodedata.rst
@@ -69,7 +69,7 @@
 
 .. function:: bidirectional(chr)
 
-   Returns the bidirectional category assigned to the character *chr* as
+   Returns the bidirectional class assigned to the character *chr* as
    string. If no such value is defined, an empty string is returned.
 
 
diff -r bd8afb90ebf2 Doc/library/unittest.mock.rst
--- a/Doc/library/unittest.mock.rst
+++ b/Doc/library/unittest.mock.rst
@@ -1,3 +1,4 @@
+
 :mod:`unittest.mock` --- mock object library
 ============================================
 
@@ -276,7 +277,7 @@
             >>> mock.assert_called_once_with('foo', bar='baz')
             Traceback (most recent call last):
               ...
-            AssertionError: Expected to be called once. Called 2 times.
+            AssertionError: Expected 'mock' to be called once. Called 2 times.
 
 
     .. method:: assert_any_call(*args, **kwargs)
@@ -646,7 +647,7 @@
     which have no meaning on a non-callable mock.
 
 Mock objects that use a class or an instance as a `spec` or `spec_set` are able
-to pass `isintance` tests:
+to pass `isinstance` tests:
 
     >>> mock = Mock(spec=SomeClass)
     >>> isinstance(mock, SomeClass)
@@ -2020,7 +2021,7 @@
     >>> mock.assert_called_once_with(1, 2, 3)
     Traceback (most recent call last):
      ...
-    AssertionError: Expected to be called once. Called 2 times.
+    AssertionError: Expected 'mock' to be called once. Called 2 times.
 
 Because mocks auto-create attributes on demand, and allow you to call them
 with arbitrary arguments, if you misspell one of these assert methods then
diff -r bd8afb90ebf2 Doc/library/unittest.rst
--- a/Doc/library/unittest.rst
+++ b/Doc/library/unittest.rst
@@ -99,9 +99,10 @@
 
    The script :file:`Tools/unittestgui/unittestgui.py` in the Python source distribution is
    a GUI tool for test discovery and execution.  This is intended largely for ease of use
-   for those new to unit testing.  For production environments it is recommended that
-   tests be driven by a continuous integration system such as `Hudson <http://hudson-ci.org/>`_
-   or `Buildbot <http://buildbot.net/trac>`_.
+   for those new to unit testing.  For production environments it is
+   recommended that tests be driven by a continuous integration system such as
+   `Buildbot <http://buildbot.net/trac>`_, `Jenkins <http://jenkins-ci.org>`_
+   or  `Hudson <http://hudson-ci.org/>`_.
 
 
 .. _unittest-minimal-example:
@@ -1265,7 +1266,7 @@
    .. method:: assertListEqual(first, second, msg=None)
                assertTupleEqual(first, second, msg=None)
 
-      Tests that two lists or tuples are equal.  If not an error message is
+      Tests that two lists or tuples are equal.  If not, an error message is
       constructed that shows only the differences between the two.  An error
       is also raised if either of the parameters are of the wrong type.
       These methods are used by default when comparing lists or tuples with
diff -r bd8afb90ebf2 Doc/library/urllib.error.rst
--- a/Doc/library/urllib.error.rst
+++ b/Doc/library/urllib.error.rst
@@ -41,6 +41,10 @@
       to a value found in the dictionary of codes as found in
       :attr:`http.server.BaseHTTPRequestHandler.responses`.
 
+   .. attribute:: reason
+
+      This is usually a string explaining the reason for this error.
+
 .. exception:: ContentTooShortError(msg, content)
 
    This exception is raised when the :func:`urlretrieve` function detects that
diff -r bd8afb90ebf2 Doc/library/urllib.parse.rst
--- a/Doc/library/urllib.parse.rst
+++ b/Doc/library/urllib.parse.rst
@@ -145,8 +145,9 @@
    percent-encoded sequences into Unicode characters, as accepted by the
    :meth:`bytes.decode` method.
 
-   Use the :func:`urllib.parse.urlencode` function to convert such
-   dictionaries into query strings.
+   Use the :func:`urllib.parse.urlencode` function (with the ``doseq``
+   parameter set to ``True``) to convert such dictionaries into query
+   strings.
 
 
    .. versionchanged:: 3.2
diff -r bd8afb90ebf2 Doc/library/urllib.request.rst
--- a/Doc/library/urllib.request.rst
+++ b/Doc/library/urllib.request.rst
@@ -1305,7 +1305,8 @@
        *filename* is not given, the filename is the output of :func:`tempfile.mktemp`
        with a suffix that matches the suffix of the last path component of the input
        URL.  If *reporthook* is given, it must be a function accepting three numeric
-       parameters.  It will be called after each chunk of data is read from the
+       parameters: A chunk number, the maximum size chunks are read in and the total size of the download
+       (-1 if unknown).  It will be called once at the start and after each chunk of data is read from the
        network.  *reporthook* is ignored for local URLs.
 
        If the *url* uses the :file:`http:` scheme identifier, the optional *data*
diff -r bd8afb90ebf2 Doc/library/urllib.rst
--- /dev/null
+++ b/Doc/library/urllib.rst
@@ -0,0 +1,9 @@
+:mod:`urllib` --- URL handling modules
+======================================
+
+``urllib`` is a package that collects several modules for working with URLs:
+
+* :mod:`urllib.request` for opening and reading URLs
+* :mod:`urllib.error` containing the exceptions raised by :mod:`urllib.request`
+* :mod:`urllib.parse` for parsing URLs
+* :mod:`urllib.robotparser` for parsing ``robots.txt`` files
diff -r bd8afb90ebf2 Doc/library/winreg.rst
--- a/Doc/library/winreg.rst
+++ b/Doc/library/winreg.rst
@@ -12,6 +12,17 @@
 to ensure that the handles are closed correctly, even if the programmer neglects
 to explicitly close them.
 
+.. _exception-changed:
+
+.. versionchanged:: 3.3
+   Several functions in this module used to raise a
+   :exc:`WindowsError`, which is now an alias of :exc:`OSError`.
+
+.. _functions:
+
+Functions
+------------------
+
 This module offers the following functions:
 
 
@@ -37,12 +48,11 @@
 
    *key* is the predefined handle to connect to.
 
-   The return value is the handle of the opened key. If the function fails, a
+   The return value is the handle of the opened key. If the function fails, an
    :exc:`OSError` exception is raised.
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: CreateKey(key, sub_key)
@@ -60,15 +70,14 @@
 
    If the key already exists, this function opens the existing key.
 
-   The return value is the handle of the opened key. If the function fails, a
+   The return value is the handle of the opened key. If the function fails, an
    :exc:`OSError` exception is raised.
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
-.. function:: CreateKeyEx(key, sub_key, reserved=0, access=KEY_ALL_ACCESS)
+.. function:: CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)
 
    Creates or opens the specified key, returning a
    :ref:`handle object <handle-object>`.
@@ -78,10 +87,10 @@
 
    *sub_key* is a string that names the key this method opens or creates.
 
-   *res* is a reserved integer, and must be zero. The default is zero.
+   *reserved* is a reserved integer, and must be zero. The default is zero.
 
-   *sam* is an integer that specifies an access mask that describes the desired
-   security access for the key.  Default is :const:`KEY_ALL_ACCESS`.  See
+   *access* is an integer that specifies an access mask that describes the desired
+   security access for the key.  Default is :const:`KEY_WRITE`.  See
    :ref:`Access Rights <access-rights>` for other allowed values.
 
    If *key* is one of the predefined keys, *sub_key* may be ``None``. In that
@@ -89,14 +98,13 @@
 
    If the key already exists, this function opens the existing key.
 
-   The return value is the handle of the opened key. If the function fails, a
+   The return value is the handle of the opened key. If the function fails, an
    :exc:`OSError` exception is raised.
 
    .. versionadded:: 3.2
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: DeleteKey(key, sub_key)
@@ -112,14 +120,13 @@
    *This method can not delete keys with subkeys.*
 
    If the method succeeds, the entire key, including all of its values, is removed.
-   If the method fails, a :exc:`OSError` exception is raised.
+   If the method fails, an :exc:`OSError` exception is raised.
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
-.. function:: DeleteKeyEx(key, sub_key, access=KEY_ALL_ACCESS, reserved=0)
+.. function:: DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)
 
    Deletes the specified key.
 
@@ -136,24 +143,23 @@
    *key* parameter. This value must not be ``None``, and the key may not have
    subkeys.
 
-   *res* is a reserved integer, and must be zero. The default is zero.
+   *reserved* is a reserved integer, and must be zero. The default is zero.
 
-   *sam* is an integer that specifies an access mask that describes the desired
+   *access* is an integer that specifies an access mask that describes the desired
    security access for the key.  Default is :const:`KEY_ALL_ACCESS`.  See
    :ref:`Access Rights <access-rights>` for other allowed values.
 
    *This method can not delete keys with subkeys.*
 
    If the method succeeds, the entire key, including all of its values, is
-   removed. If the method fails, a :exc:`OSError` exception is raised.
+   removed. If the method fails, an :exc:`OSError` exception is raised.
 
    On unsupported Windows versions, :exc:`NotImplementedError` is raised.
 
    .. versionadded:: 3.2
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: DeleteValue(key, value)
@@ -176,12 +182,11 @@
    *index* is an integer that identifies the index of the key to retrieve.
 
    The function retrieves the name of one subkey each time it is called.  It is
-   typically called repeatedly until a :exc:`OSError` exception is
+   typically called repeatedly until an :exc:`OSError` exception is
    raised, indicating, no more values are available.
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: EnumValue(key, index)
@@ -194,7 +199,7 @@
    *index* is an integer that identifies the index of the value to retrieve.
 
    The function retrieves the name of one subkey each time it is called. It is
-   typically called repeatedly, until a :exc:`OSError` exception is
+   typically called repeatedly, until an :exc:`OSError` exception is
    raised, indicating no more values.
 
    The result is a tuple of 3 items:
@@ -214,8 +219,7 @@
    +-------+--------------------------------------------+
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: ExpandEnvironmentStrings(str)
@@ -272,6 +276,7 @@
 
 
 .. function:: OpenKey(key, sub_key, reserved=0, access=KEY_READ)
+              OpenKeyEx(key, sub_key, reserved=0, access=KEY_READ)
 
    Opens the specified key, returning a :ref:`handle object <handle-object>`.
 
@@ -294,14 +299,7 @@
       Allow the use of named arguments.
 
    .. versionchanged:: 3.3
-      This function used to raise a :exc:`WindowsError`, which is now an
-      alias of :exc:`OSError`.
-
-
-.. function:: OpenKeyEx()
-
-   The functionality of :func:`OpenKeyEx` is provided via :func:`OpenKey`,
-   by the use of default arguments.
+      See :ref:`above <exception-changed>`.
 
 
 .. function:: QueryInfoKey(key)
@@ -427,11 +425,11 @@
    *value_name* is a string that names the subkey with which the value is
    associated.
 
+   *reserved* can be anything -- zero is always passed to the API.
+
    *type* is an integer that specifies the type of the data. See
    :ref:`Value Types <value-types>` for the available types.
 
-   *reserved* can be anything -- zero is always passed to the API.
-
    *value* is a string that specifies the new value.
 
    This method can also set additional value and type information for the specified
diff -r bd8afb90ebf2 Doc/library/xml.etree.elementtree.rst
--- a/Doc/library/xml.etree.elementtree.rst
+++ b/Doc/library/xml.etree.elementtree.rst
@@ -291,7 +291,9 @@
 |                       | current  element.  For example, ``.//egg`` selects   |
 |                       | all ``egg`` elements in the entire tree.             |
 +-----------------------+------------------------------------------------------+
-| ``..``                | Selects the parent element.                          |
+| ``..``                | Selects the parent element.  Returns ``None`` if the |
+|                       | path attempts to reach the ancestors of the start    |
+|                       | element (the element ``find`` was called on).        |
 +-----------------------+------------------------------------------------------+
 | ``[@attrib]``         | Selects all elements that have the given attribute.  |
 +-----------------------+------------------------------------------------------+
@@ -431,9 +433,9 @@
    Generates a string representation of an XML element, including all
    subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is
    the output encoding (default is US-ASCII).  Use ``encoding="unicode"`` to
-   generate a Unicode string.  *method* is either ``"xml"``,
-   ``"html"`` or ``"text"`` (default is ``"xml"``).  Returns an (optionally)
-   encoded string containing the XML data.
+   generate a Unicode string (otherwise, a bytestring is generated).  *method*
+   is either ``"xml"``, ``"html"`` or ``"text"`` (default is ``"xml"``).
+   Returns an (optionally) encoded string containing the XML data.
 
 
 .. function:: tostringlist(element, encoding="us-ascii", method="xml")
@@ -441,11 +443,11 @@
    Generates a string representation of an XML element, including all
    subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is
    the output encoding (default is US-ASCII).  Use ``encoding="unicode"`` to
-   generate a Unicode string.  *method* is either ``"xml"``,
-   ``"html"`` or ``"text"`` (default is ``"xml"``).  Returns a list of
-   (optionally) encoded strings containing the XML data.  It does not guarantee
-   any specific sequence, except that ``"".join(tostringlist(element)) ==
-   tostring(element)``.
+   generate a Unicode string (otherwise, a bytestring is generated).  *method*
+   is either ``"xml"``, ``"html"`` or ``"text"`` (default is ``"xml"``).
+   Returns a list of (optionally) encoded strings containing the XML data.
+   It does not guarantee any specific sequence, except that
+   ``"".join(tostringlist(element)) == tostring(element)``.
 
    .. versionadded:: 3.2
 
@@ -521,7 +523,7 @@
    .. method:: clear()
 
       Resets an element.  This function removes all subelements, clears all
-      attributes, and sets the text and tail attributes to None.
+      attributes, and sets the text and tail attributes to ``None``.
 
 
    .. method:: get(key, default=None)
diff -r bd8afb90ebf2 Doc/library/xml.rst
--- /dev/null
+++ b/Doc/library/xml.rst
@@ -0,0 +1,29 @@
+.. _xml:
+
+XML Processing Modules
+======================
+
+Python's interfaces for processing XML are grouped in the ``xml`` package.
+
+It is important to note that modules in the :mod:`xml` package require that
+there be at least one SAX-compliant XML parser available. The Expat parser is
+included with Python, so the :mod:`xml.parsers.expat` module will always be
+available.
+
+The documentation for the :mod:`xml.dom` and :mod:`xml.sax` packages are the
+definition of the Python bindings for the DOM and SAX interfaces.
+
+The XML handling submodules are:
+
+* :mod:`xml.etree.ElementTree`: the ElementTree API, a simple and lightweight
+
+..
+
+* :mod:`xml.dom`: the DOM API definition
+* :mod:`xml.dom.minidom`: a lightweight DOM implementation
+* :mod:`xml.dom.pulldom`: support for building partial DOM trees
+
+..
+
+* :mod:`xml.sax`: SAX2 base classes and convenience functions
+* :mod:`xml.parsers.expat`: the Expat parser binding
diff -r bd8afb90ebf2 Doc/library/xmlrpc.rst
--- /dev/null
+++ b/Doc/library/xmlrpc.rst
@@ -0,0 +1,12 @@
+:mod:`xmlrpc` --- XMLRPC server and client modules
+==================================================
+
+XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a
+transport.  With it, a client can call methods with parameters on a remote
+server (the server is named by a URI) and get back structured data.
+
+``xmlrpc`` is a package that collects server and client modules implementing
+XML-RPC.  The modules are:
+
+* :mod:`xmlrpc.client`
+* :mod:`xmlrpc.server`
diff -r bd8afb90ebf2 Doc/library/zipfile.rst
--- a/Doc/library/zipfile.rst
+++ b/Doc/library/zipfile.rst
@@ -61,7 +61,7 @@
 .. class:: ZipInfo(filename='NoName', date_time=(1980,1,1,0,0,0))
 
    Class used to represent information about a member of an archive. Instances
-   of this class are returned by the :meth:`getinfo` and :meth:`infolist`
+   of this class are returned by the :meth:`.getinfo` and :meth:`.infolist`
    methods of :class:`ZipFile` objects.  Most users of the :mod:`zipfile` module
    will not need to create these, but only use those created by this
    module. *filename* should be the full name of the archive member, and
@@ -87,20 +87,20 @@
 .. data:: ZIP_DEFLATED
 
    The numeric constant for the usual ZIP compression method.  This requires the
-   zlib module.
+   :mod:`zlib` module.
 
 
 .. data:: ZIP_BZIP2
 
    The numeric constant for the BZIP2 compression method.  This requires the
-   bz2 module.
+   :mod:`bz2` module.
 
    .. versionadded:: 3.3
 
 .. data:: ZIP_LZMA
 
    The numeric constant for the LZMA compression method.  This requires the
-   lzma module.
+   :mod:`lzma` module.
 
    .. versionadded:: 3.3
 
@@ -155,7 +155,7 @@
    these extensions.
 
    If the file is created with mode ``'a'`` or ``'w'`` and then
-   :meth:`close`\ d without adding any files to the archive, the appropriate
+   :meth:`closed <close>` without adding any files to the archive, the appropriate
    ZIP structures for an empty archive will be written to the file.
 
    ZipFile is also a context manager and therefore supports the
@@ -169,7 +169,7 @@
       Added the ability to use :class:`ZipFile` as a context manager.
 
    .. versionchanged:: 3.3
-      Added support for :mod:`bzip2` and :mod:`lzma` compression.
+      Added support for :mod:`bzip2 <bz2>` and :mod:`lzma` compression.
 
 
 .. method:: ZipFile.close()
@@ -207,7 +207,7 @@
    *mode* parameter, if included, must be one of the following: ``'r'`` (the
    default), ``'U'``, or ``'rU'``. Choosing ``'U'`` or  ``'rU'`` will enable
    :term:`universal newlines` support in the read-only object.  *pwd* is the
-   password used for encrypted files.  Calling  :meth:`open` on a closed
+   password used for encrypted files.  Calling  :meth:`.open` on a closed
    ZipFile will raise a  :exc:`RuntimeError`.
 
    .. note::
@@ -229,7 +229,7 @@
 
    .. note::
 
-      The :meth:`open`, :meth:`read` and :meth:`extract` methods can take a filename
+      The :meth:`.open`, :meth:`read` and :meth:`extract` methods can take a filename
       or a :class:`ZipInfo` object.  You will appreciate this when trying to read a
       ZIP file that contains members with duplicate names.
 
@@ -335,7 +335,7 @@
       :class:`ZipInfo` constructor sets this member to :const:`ZIP_STORED`.
 
    .. versionchanged:: 3.2
-      The *compression_type* argument.
+      The *compress_type* argument.
 
 The following data attributes are also available:
 
@@ -351,7 +351,7 @@
    The comment text associated with the ZIP file.  If assigning a comment to a
    :class:`ZipFile` instance created with mode 'a' or 'w', this should be a
    string no longer than 65535 bytes.  Comments longer than this will be
-   truncated in the written archive when :meth:`ZipFile.close` is called.
+   truncated in the written archive when :meth:`close` is called.
 
 
 .. _pyzipfile-objects:
@@ -407,8 +407,8 @@
 ZipInfo Objects
 ---------------
 
-Instances of the :class:`ZipInfo` class are returned by the :meth:`getinfo` and
-:meth:`infolist` methods of :class:`ZipFile` objects.  Each object stores
+Instances of the :class:`ZipInfo` class are returned by the :meth:`.getinfo` and
+:meth:`.infolist` methods of :class:`ZipFile` objects.  Each object stores
 information about a single member of the ZIP archive.
 
 Instances have the following attributes:
diff -r bd8afb90ebf2 Doc/library/zlib.rst
--- a/Doc/library/zlib.rst
+++ b/Doc/library/zlib.rst
@@ -52,10 +52,10 @@
 .. function:: compress(data[, level])
 
    Compresses the bytes in *data*, returning a bytes object containing compressed data.
-   *level* is an integer from ``1`` to ``9`` controlling the level of compression;
+   *level* is an integer from ``0`` to ``9`` controlling the level of compression;
    ``1`` is fastest and produces the least compression, ``9`` is slowest and
-   produces the most.  The default value is ``6``.  Raises the :exc:`error`
-   exception if any error occurs.
+   produces the most.  ``0`` is no compression.  The default value is ``6``.
+   Raises the :exc:`error` exception if any error occurs.
 
 
 .. function:: compressobj(level=-1, method=DEFLATED, wbits=15, memlevel=8, strategy=Z_DEFAULT_STRATEGY[, zdict])
@@ -63,9 +63,10 @@
    Returns a compression object, to be used for compressing data streams that won't
    fit into memory at once.
 
-   *level* is the compression level -- an integer from ``1`` to ``9``. A value
+   *level* is the compression level -- an integer from ``0`` to ``9``. A value
    of ``1`` is fastest and produces the least compression, while a value of
-   ``9`` is slowest and produces the most. The default value is ``6``.
+   ``9`` is slowest and produces the most. ``0`` is no compression. The default
+   value is ``6``.
 
    *method* is the compression algorithm. Currently, the only supported value is
    ``DEFLATED``.
diff -r bd8afb90ebf2 Doc/license.rst
--- a/Doc/license.rst
+++ b/Doc/license.rst
@@ -327,7 +327,7 @@
 ----------------
 
 The :mod:`_random` module includes code based on a download from
-http://www.math.keio.ac.jp/ matumoto/MT2002/emt19937ar.html. The following are
+http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. The following are
 the verbatim comments from the original code::
 
    A C-program for MT19937, with initialization improved 2002/1/26.
@@ -368,8 +368,8 @@
 
 
    Any feedback is very welcome.
-   http://www.math.keio.ac.jp/matumoto/emt.html
-   email: matumoto@math.keio.ac.jp
+   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
+   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
 
 
 Sockets
diff -r bd8afb90ebf2 Doc/make.bat
--- a/Doc/make.bat
+++ b/Doc/make.bat
@@ -37,7 +37,7 @@
 svn co %SVNROOT%/external/Sphinx-1.0.7/sphinx tools/sphinx
 svn co %SVNROOT%/external/docutils-0.6/docutils tools/docutils
 svn co %SVNROOT%/external/Jinja-2.3.1/jinja2 tools/jinja2
-svn co %SVNROOT%/external/Pygments-1.3.1/pygments tools/pygments
+svn co %SVNROOT%/external/Pygments-1.5dev-20120930/pygments tools/pygments
 goto end
 
 :update
diff -r bd8afb90ebf2 Doc/reference/compound_stmts.rst
--- a/Doc/reference/compound_stmts.rst
+++ b/Doc/reference/compound_stmts.rst
@@ -307,11 +307,11 @@
 :keyword:`try` clause is executed, including any :keyword:`except` and
 :keyword:`else` clauses.  If an exception occurs in any of the clauses and is
 not handled, the exception is temporarily saved. The :keyword:`finally` clause
-is executed.  If there is a saved exception or :keyword:`break` statement,
-it is re-raised at the end of the :keyword:`finally` clause. If the
-:keyword:`finally` clause raises another exception the saved exception
-is set as the context of the new exception; if the :keyword:`finally` clause
-executes a :keyword:`return` statement, the saved exception is discarded::
+is executed.  If there is a saved exception it is re-raised at the end of the
+:keyword:`finally` clause.  If the :keyword:`finally` clause raises another
+exception, the saved exception is set as the context of the new exception.
+If the :keyword:`finally` clause executes a :keyword:`return` or :keyword:`break`
+statement, the saved exception is discarded::
 
     def f():
         try:
@@ -442,8 +442,7 @@
    decorator: "@" `dotted_name` ["(" [`parameter_list` [","]] ")"] NEWLINE
    dotted_name: `identifier` ("." `identifier`)*
    parameter_list: (`defparameter` ",")*
-                 : (  "*" [`parameter`] ("," `defparameter`)*
-                 : [, "**" `parameter`]
+                 : ( "*" [`parameter`] ("," `defparameter`)* ["," "**" `parameter`]
                  : | "**" `parameter`
                  : | `defparameter` [","] )
    parameter: `identifier` [":" `expression`]
diff -r bd8afb90ebf2 Doc/reference/datamodel.rst
--- a/Doc/reference/datamodel.rst
+++ b/Doc/reference/datamodel.rst
@@ -274,11 +274,13 @@
 
       The following types are immutable sequences:
 
+      .. index::
+         single: string; immutable sequences
+
       Strings
          .. index::
             builtin: chr
             builtin: ord
-            builtin: str
             single: character
             single: integer
             single: Unicode
@@ -312,7 +314,7 @@
 
          A bytes object is an immutable array.  The items are 8-bit bytes,
          represented by integers in the range 0 <= x < 256.  Bytes literals
-         (like ``b'abc'`` and the built-in function :func:`bytes` can be used to
+         (like ``b'abc'``) and the built-in function :func:`bytes` can be used to
          construct bytes objects.  Also, bytes objects can be decoded to strings
          via the :meth:`decode` method.
 
@@ -600,9 +602,9 @@
       A function or method which uses the :keyword:`yield` statement (see section
       :ref:`yield`) is called a :dfn:`generator function`.  Such a function, when
       called, always returns an iterator object which can be used to execute the
-      body of the function:  calling the iterator's :meth:`__next__` method will
-      cause the function to execute until it provides a value using the
-      :keyword:`yield` statement.  When the function executes a
+      body of the function:  calling the iterator's :meth:`iterator__next__`
+      method will cause the function to execute until it provides a value
+      using the :keyword:`yield` statement.  When the function executes a
       :keyword:`return` statement or falls off the end, a :exc:`StopIteration`
       exception is raised and the iterator will have reached the end of the set of
       values to be returned.
@@ -1140,11 +1142,12 @@
       modules are still available at the time when the :meth:`__del__` method is
       called.
 
+      .. index::
+         single: repr() (built-in function); __repr__() (object method)
+
 
 .. method:: object.__repr__(self)
 
-   .. index:: builtin: repr
-
    Called by the :func:`repr` built-in function to compute the "official" string
    representation of an object.  If at all possible, this should look like a
    valid Python expression that could be used to recreate an object with the
@@ -1157,18 +1160,25 @@
    This is typically used for debugging, so it is important that the representation
    is information-rich and unambiguous.
 
+   .. index::
+      single: string; __str__() (object method)
+      single: format() (built-in function); __str__() (object method)
+      single: print() (built-in function); __str__() (object method)
+
 
 .. method:: object.__str__(self)
 
-   .. index::
-      builtin: str
-      builtin: print
-
-   Called by the :func:`str` built-in function and by the :func:`print` function
-   to compute the "informal" string representation of an object.  This differs
-   from :meth:`__repr__` in that it does not have to be a valid Python
-   expression: a more convenient or concise representation may be used instead.
-   The return value must be a string object.
+   Called by :func:`str(object) <str>` and the built-in functions
+   :func:`format` and :func:`print` to compute the "informal" or nicely
+   printable string representation of an object.  The return value must be a
+   :ref:`string <textseq>` object.
+
+   This method differs from :meth:`object.__repr__` in that there is no
+   expectation that :meth:`__str__` return a valid Python expression: a more
+   convenient or concise representation can be used.
+
+   The default implementation defined by the built-in type :class:`object`
+   calls :meth:`object.__repr__`.
 
    .. XXX what about subclasses of string?
 
@@ -1180,16 +1190,16 @@
    Called by :func:`bytes` to compute a byte-string representation of an
    object. This should return a ``bytes`` object.
 
+   .. index::
+      single: string; __format__() (object method)
+      pair: string; conversion
+      builtin: print
+
 
 .. method:: object.__format__(self, format_spec)
 
-   .. index::
-      pair: string; conversion
-      builtin: str
-      builtin: print
-
    Called by the :func:`format` built-in function (and by extension, the
-   :meth:`format` method of class :class:`str`) to produce a "formatted"
+   :meth:`str.format` method of class :class:`str`) to produce a "formatted"
    string representation of an object. The ``format_spec`` argument is
    a string that contains a description of the formatting options desired.
    The interpretation of the ``format_spec`` argument is up to the type
@@ -1271,22 +1281,22 @@
    and ``x.__hash__()`` returns an appropriate value such that ``x == y``
    implies both that ``x is y`` and ``hash(x) == hash(y)``.
 
-   Classes which inherit a :meth:`__hash__` method from a parent class but
-   change the meaning of :meth:`__eq__` such that the hash value returned is no
-   longer appropriate (e.g. by switching to a value-based concept of equality
-   instead of the default identity based equality) can explicitly flag
-   themselves as being unhashable by setting ``__hash__ = None`` in the class
-   definition. Doing so means that not only will instances of the class raise an
-   appropriate :exc:`TypeError` when a program attempts to retrieve their hash
-   value, but they will also be correctly identified as unhashable when checking
-   ``isinstance(obj, collections.Hashable)`` (unlike classes which define their
-   own :meth:`__hash__` to explicitly raise :exc:`TypeError`).
+   A class that overrides :meth:`__eq__` and does not define :meth:`__hash__`
+   will have its :meth:`__hash__` implicitly set to ``None``.  When the
+   :meth:`__hash__` method of a class is ``None``, instances of the class will
+   raise an appropriate :exc:`TypeError` when a program attempts to retrieve
+   their hash value, and will also be correctly identified as unhashable when
+   checking ``isinstance(obj, collections.Hashable``).
 
    If a class that overrides :meth:`__eq__` needs to retain the implementation
    of :meth:`__hash__` from a parent class, the interpreter must be told this
-   explicitly by setting ``__hash__ = <ParentClass>.__hash__``. Otherwise the
-   inheritance of :meth:`__hash__` will be blocked, just as if :attr:`__hash__`
-   had been explicitly set to :const:`None`.
+   explicitly by setting ``__hash__ = <ParentClass>.__hash__``.
+
+   If a class that does not override :meth:`__eq__` wishes to suppress hash
+   support, it should include ``__hash__ = None`` in the class definition.
+   A class which defines its own :meth:`__hash__` that explicitly raises
+   a :exc:`TypeError` would be incorrectly identified as hashable by
+   an ``isinstance(obj, collections.Hashable)`` call.
 
 
    .. note::
diff -r bd8afb90ebf2 Doc/reference/expressions.rst
--- a/Doc/reference/expressions.rst
+++ b/Doc/reference/expressions.rst
@@ -294,13 +294,13 @@
 brackets or curly braces.
 
 Variables used in the generator expression are evaluated lazily when the
-:meth:`__next__` method is called for generator object (in the same fashion as
-normal generators).  However, the leftmost :keyword:`for` clause is immediately
-evaluated, so that an error produced by it can be seen before any other possible
-error in the code that handles the generator expression.  Subsequent
-:keyword:`for` clauses cannot be evaluated immediately since they may depend on
-the previous :keyword:`for` loop. For example: ``(x*y for x in range(10) for y
-in bar(x))``.
+:meth:`~generator.__next__` method is called for generator object (in the same
+fashion as normal generators).  However, the leftmost :keyword:`for` clause is
+immediately evaluated, so that an error produced by it can be seen before any
+other possible error in the code that handles the generator expression.
+Subsequent :keyword:`for` clauses cannot be evaluated immediately since they
+may depend on the previous :keyword:`for` loop. For example: ``(x*y for x in
+range(10) for y in bar(x))``.
 
 The parentheses can be omitted on calls with only one argument.  See section
 :ref:`calls` for the detail.
@@ -394,10 +394,11 @@
 
    Starts the execution of a generator function or resumes it at the last
    executed :keyword:`yield` expression.  When a generator function is resumed
-   with a :meth:`__next__` method, the current :keyword:`yield` expression
-   always evaluates to :const:`None`.  The execution then continues to the next
-   :keyword:`yield` expression, where the generator is suspended again, and the
-   value of the :token:`expression_list` is returned to :meth:`next`'s caller.
+   with a :meth:`~generator.__next__` method, the current :keyword:`yield`
+   expression always evaluates to :const:`None`.  The execution then continues
+   to the next :keyword:`yield` expression, where the generator is suspended
+   again, and the value of the :token:`expression_list` is returned to
+   :meth:`next`'s caller.
    If the generator exits without yielding another value, a :exc:`StopIteration`
    exception is raised.
 
@@ -1094,16 +1095,10 @@
   another one is made arbitrarily but consistently within one execution of a
   program.
 
-Comparison of objects of the differing types depends on whether either
-of the types provide explicit support for the comparison.  Most numeric types
-can be compared with one another, but comparisons of :class:`float` and
-:class:`Decimal` are not supported to avoid the inevitable confusion arising
-from representation issues such as ``float('1.1')`` being inexactly represented
-and therefore not exactly equal to ``Decimal('1.1')`` which is.  When
-cross-type comparison is not supported, the comparison method returns
-``NotImplemented``.  This can create the illusion of non-transitivity between
-supported cross-type comparisons and unsupported comparisons.  For example,
-``Decimal(2) == 2`` and ``2 == float(2)`` but ``Decimal(2) != float(2)``.
+Comparison of objects of the differing types depends on whether either of the
+types provide explicit support for the comparison.  Most numeric types can be
+compared with one another.  When cross-type comparison is not supported, the
+comparison method returns ``NotImplemented``.
 
 .. _membership-test-details:
 
diff -r bd8afb90ebf2 Doc/reference/import.rst
--- a/Doc/reference/import.rst
+++ b/Doc/reference/import.rst
@@ -44,9 +44,9 @@
 
 .. versionchanged:: 3.3
    The import system has been updated to fully implement the second phase
-   of PEP 302. There is no longer any implicit import machinery - the full
+   of :pep:`302`. There is no longer any implicit import machinery - the full
    import system is exposed through :data:`sys.meta_path`. In addition,
-   native namespace package support has been implemented (see PEP 420).
+   native namespace package support has been implemented (see :pep:`420`).
 
 
 :mod:`importlib`
@@ -219,9 +219,9 @@
 interfaces are referred to as :term:`importers <importer>` - they return
 themselves when they find that they can load the requested module.
 
-Python includes a number of default finders and importers.  One
-knows how to locate frozen modules, and another knows how to locate
-built-in modules.  A third default finder searches an :term:`import path`
+Python includes a number of default finders and importers.  The first one
+knows how to locate built-in modules, and the second knows how to locate
+frozen modules.  A third default finder searches an :term:`import path`
 for modules.  The :term:`import path` is a list of locations that may
 name file system paths or zip files.  It can also be extended to search
 for any locatable resource, such as those identified by URLs.
@@ -540,7 +540,10 @@
 implementation-specific defaults.  Entries in :data:`sys.path` can name
 directories on the file system, zip files, and potentially other "locations"
 (see the :mod:`site` module) that should be searched for modules, such as
-URLs, or database queries.
+URLs, or database queries.  Only strings and bytes should be present on
+:data:`sys.path`; all other data types are ignored.  The encoding of bytes
+entries is determined by the individual :term:`path entry finders <path entry
+finder>`.
 
 The :term:`path based finder` is a :term:`meta path finder`, so the import
 machinery begins the :term:`import path` search by calling the path
@@ -563,14 +566,17 @@
 the path based finder to perform the path entry search again [#fnpic]_.
 
 If the path entry is not present in the cache, the path based finder iterates
-over every callable in :data:`sys.path_hooks`.  Each of the
-:term:`path entry hooks <path entry hook>` in this list is called with a
-single argument, the path entry to be searched.  This callable may either
-return a :term:`path entry finder` that can handle the path entry, or it may
-raise :exc:`ImportError`.
-An :exc:`ImportError` is used by the path based finder to signal that the hook
-cannot find a :term:`path entry finder` for that :term:`path entry`.  The
-exception is ignored and :term:`import path` iteration continues.
+over every callable in :data:`sys.path_hooks`.  Each of the :term:`path entry
+hooks <path entry hook>` in this list is called with a single argument, the
+path entry to be searched.  This callable may either return a :term:`path
+entry finder` that can handle the path entry, or it may raise
+:exc:`ImportError`.  An :exc:`ImportError` is used by the path based finder to
+signal that the hook cannot find a :term:`path entry finder` for that
+:term:`path entry`.  The exception is ignored and :term:`import path`
+iteration continues.  The hook should expect either a string or bytes object;
+the encoding of bytes objects is up to the hook (e.g. it may be a file system
+encoding, UTF-8, or something else), and if the hook cannot decode the
+argument, it should raise :exc:`ImportError`.
 
 If :data:`sys.path_hooks` iteration ends with no :term:`path entry finder`
 being returned, then the path based finder's :meth:`find_module()` method
diff -r bd8afb90ebf2 Doc/reference/index.rst
--- a/Doc/reference/index.rst
+++ b/Doc/reference/index.rst
@@ -4,9 +4,6 @@
   The Python Language Reference
 #################################
 
-:Release: |version|
-:Date: |today|
-
 This reference manual describes the syntax and "core semantics" of the
 language. It is terse, but attempts to be exact and complete. The semantics of
 non-essential built-in object types and of the built-in functions and modules
diff -r bd8afb90ebf2 Doc/reference/lexical_analysis.rst
--- a/Doc/reference/lexical_analysis.rst
+++ b/Doc/reference/lexical_analysis.rst
@@ -538,9 +538,7 @@
    this escape sequence.  Exactly four hex digits are required.
 
 (6)
-   Any Unicode character can be encoded this way, but characters outside the Basic
-   Multilingual Plane (BMP) will be encoded using a surrogate pair if Python is
-   compiled to use 16-bit code units (the default).  Exactly eight hex digits
+   Any Unicode character can be encoded this way.  Exactly eight hex digits
    are required.
 
 
diff -r bd8afb90ebf2 Doc/tools/sphinxext/indexsidebar.html
--- a/Doc/tools/sphinxext/indexsidebar.html
+++ b/Doc/tools/sphinxext/indexsidebar.html
@@ -3,7 +3,7 @@
 	    <h3>Docs for other versions</h3>
 	    <ul>
 	      <li><a href="http://docs.python.org/2.7/">Python 2.7 (stable)</a></li>
-	      <li><a href="http://docs.python.org/3.2/">Python 3.2 (stable)</a></li>
+	      <li><a href="http://docs.python.org/3.4/">Python 3.4 (in development)</a></li>
               <li><a href="http://www.python.org/doc/versions/">Old versions</a></li>
             </ul>
 
diff -r bd8afb90ebf2 Doc/tools/sphinxext/layout.html
--- a/Doc/tools/sphinxext/layout.html
+++ b/Doc/tools/sphinxext/layout.html
@@ -3,18 +3,83 @@
         <li><img src="{{ pathto('_static/py.png', 1) }}" alt=""
                  style="vertical-align: middle; margin-top: -1px"/></li>
         <li><a href="http://www.python.org/">Python</a>{{ reldelim1 }}</li>
-        <li><a href="{{ pathto('index') }}">{{ shorttitle }}</a>{{ reldelim1 }}</li>
+        <li>
+          {%- if versionswitcher is defined %}
+          <span class="version_switcher_placeholder">{{ release }}</span>
+          <a href="{{ pathto('index') }}">Documentation</a>{{ reldelim1 }}
+          {%- else %}
+          <a href="{{ pathto('index') }}">{{ shorttitle }}</a>{{ reldelim1 }}
+          {%- endif %}
+        </li>
 {% endblock %}
 {% block extrahead %}
     <link rel="shortcut icon" type="image/png" href="{{ pathto('_static/py.png', 1) }}" />
     {% if not embedded %}<script type="text/javascript" src="{{ pathto('_static/copybutton.js', 1) }}"></script>{% endif %}
+    {% if versionswitcher is defined and not embedded %}<script type="text/javascript" src="{{ pathto('_static/version_switch.js', 1) }}"></script>{% endif %}
+    {% if pagename == 'whatsnew/changelog' %}
+    <script type="text/javascript">
+      $(document).ready(function() {
+          // add the search form and bind the events
+          $('h1').after([
+            '<p>Filter entries by content:',
+            '<input type="text" value="" id="searchbox" style="width: 50%">',
+            '<input type="submit" id="searchbox-submit" value="Filter"></p>'
+          ].join('\n'));
+
+          function dofilter() {
+              try {
+                  var query = new RegExp($('#searchbox').val(), 'i');
+              }
+              catch (e) {
+                  return; // not a valid regex (yet)
+              }
+              // find headers for the versions (What's new in Python X.Y.Z?)
+              $('#changelog h2').each(function(index1, h2) {
+                  var h2_parent = $(h2).parent();
+                  var sections_found = 0;
+                  // find headers for the sections (Core, Library, etc.)
+                  h2_parent.find('h3').each(function(index2, h3) {
+                      var h3_parent = $(h3).parent();
+                      var entries_found = 0;
+                      // find all the entries
+                      h3_parent.find('li').each(function(index3, li) {
+                          var li = $(li);
+                          // check if the query matches the entry
+                          if (query.test(li.text())) {
+                              li.show();
+                              entries_found++;
+                          }
+                          else {
+                              li.hide();
+                          }
+                      });
+                      // if there are entries, show the section, otherwise hide it
+                      if (entries_found > 0) {
+                          h3_parent.show();
+                          sections_found++;
+                      }
+                      else {
+                          h3_parent.hide();
+                      }
+                  });
+                  if (sections_found > 0)
+                      h2_parent.show();
+                  else
+                      h2_parent.hide();
+              });
+          }
+          $('#searchbox').keyup(dofilter);
+          $('#searchbox-submit').click(dofilter);
+      });
+    </script>
+    {% endif %}
 {{ super() }}
 {% endblock %}
 {% block footer %}
     <div class="footer">
     &copy; <a href="{{ pathto('copyright') }}">Copyright</a> {{ copyright|e }}.
     <br />
-    The Python Software Foundation is a non-profit corporation.  
+    The Python Software Foundation is a non-profit corporation.
     <a href="http://www.python.org/psf/donations/">Please donate.</a>
     <br />
     Last updated on {{ last_updated|e }}.
diff -r bd8afb90ebf2 Doc/tools/sphinxext/pyspecific.py
--- a/Doc/tools/sphinxext/pyspecific.py
+++ b/Doc/tools/sphinxext/pyspecific.py
@@ -33,9 +33,38 @@
     self.body.append('<span class="versionmodified">%s</span> ' % text)
 
 from sphinx.writers.html import HTMLTranslator
+from sphinx.writers.latex import LaTeXTranslator
 from sphinx.locale import versionlabels
 HTMLTranslator.visit_versionmodified = new_visit_versionmodified
+HTMLTranslator.visit_versionmodified = new_visit_versionmodified
 
+# monkey-patch HTML and LaTeX translators to keep doctest blocks in the
+# doctest docs themselves
+orig_visit_literal_block = HTMLTranslator.visit_literal_block
+def new_visit_literal_block(self, node):
+    meta = self.builder.env.metadata[self.builder.current_docname]
+    old_trim_doctest_flags = self.highlighter.trim_doctest_flags
+    if 'keepdoctest' in meta:
+        self.highlighter.trim_doctest_flags = False
+    try:
+        orig_visit_literal_block(self, node)
+    finally:
+        self.highlighter.trim_doctest_flags = old_trim_doctest_flags
+
+HTMLTranslator.visit_literal_block = new_visit_literal_block
+
+orig_depart_literal_block = LaTeXTranslator.depart_literal_block
+def new_depart_literal_block(self, node):
+    meta = self.builder.env.metadata[self.curfilestack[-1]]
+    old_trim_doctest_flags = self.highlighter.trim_doctest_flags
+    if 'keepdoctest' in meta:
+        self.highlighter.trim_doctest_flags = False
+    try:
+        orig_depart_literal_block(self, node)
+    finally:
+        self.highlighter.trim_doctest_flags = old_trim_doctest_flags
+
+LaTeXTranslator.depart_literal_block = new_depart_literal_block
 
 # Support for marking up and linking to bugs.python.org issues
 
@@ -145,6 +174,47 @@
         return ret
 
 
+# Support for including Misc/NEWS
+
+import re
+import codecs
+
+issue_re = re.compile('([Ii])ssue #([0-9]+)')
+whatsnew_re = re.compile(r"(?im)^what's new in (.*?)\??$")
+
+class MiscNews(Directive):
+    has_content = False
+    required_arguments = 1
+    optional_arguments = 0
+    final_argument_whitespace = False
+    option_spec = {}
+
+    def run(self):
+        fname = self.arguments[0]
+        source = self.state_machine.input_lines.source(
+            self.lineno - self.state_machine.input_offset - 1)
+        source_dir = path.dirname(path.abspath(source))
+        fpath = path.join(source_dir, fname)
+        self.state.document.settings.record_dependencies.add(fpath)
+        try:
+            fp = codecs.open(fpath, encoding='utf-8')
+            try:
+                content = fp.read()
+            finally:
+                fp.close()
+        except Exception:
+            text = 'The NEWS file is not available.'
+            node = nodes.strong(text, text)
+            return [node]
+        content = issue_re.sub(r'`\1ssue #\2 <http://bugs.python.org/\2>`__',
+                               content)
+        content = whatsnew_re.sub(r'\1', content)
+        # remove first 3 lines as they are the main heading
+        lines = ['.. default-role:: obj', ''] + content.splitlines()[3:]
+        self.state_machine.insert_input(lines, fname)
+        return []
+
+
 # Support for building "topic help" for pydoc
 
 pydoc_topic_labels = [
@@ -276,3 +346,4 @@
     app.add_description_unit('2to3fixer', '2to3fixer', '%s (2to3 fixer)')
     app.add_directive_to_domain('py', 'decorator', PyDecoratorFunction)
     app.add_directive_to_domain('py', 'decoratormethod', PyDecoratorMethod)
+    app.add_directive('miscnews', MiscNews)
diff -r bd8afb90ebf2 Doc/tools/sphinxext/static/basic.css
--- a/Doc/tools/sphinxext/static/basic.css
+++ b/Doc/tools/sphinxext/static/basic.css
@@ -39,6 +39,7 @@
 
 div.sphinxsidebarwrapper {
     padding: 10px 5px 0 10px;
+    word-wrap: break-word;
 }
 
 div.sphinxsidebar {
diff -r bd8afb90ebf2 Doc/tools/sphinxext/static/version_switch.js
--- /dev/null
+++ b/Doc/tools/sphinxext/static/version_switch.js
@@ -0,0 +1,66 @@
+(function() {
+  'use strict';
+
+  var all_versions = {
+    '3.4': 'dev (3.4)',
+    '3.3': '3.3',
+    '3.2': '3.2',
+    '2.7': '2.7',
+    '2.6': '2.6'
+  };
+
+  function build_select(current_version, current_release) {
+    var buf = ['<select>'];
+
+    $.each(all_versions, function(version, title) {
+      buf.push('<option value="' + version + '"');
+      if (version == current_version)
+        buf.push(' selected="selected">' + current_release + '</option>');
+      else
+        buf.push('>' + title + '</option>');
+    });
+
+    buf.push('</select>');
+    return buf.join('');
+  }
+
+  function patch_url(url, new_version) {
+    var url_re = /\.org\/(\d|py3k|dev|((release\/)?\d\.\d[\w\d\.]*))\//,
+        new_url = url.replace(url_re, '.org/' + new_version + '/');
+
+    if (new_url == url && !new_url.match(url_re)) {
+      // python 2 url without version?
+      new_url = url.replace(/\.org\//, '.org/' + new_version + '/');
+    }
+    return new_url;
+  }
+
+  function on_switch() {
+    var selected = $(this).children('option:selected').attr('value');
+
+    var url = window.location.href,
+        new_url = patch_url(url, selected);
+
+    if (new_url != url) {
+      // check beforehand if url exists, else redirect to version's start page
+      $.ajax({
+        url: new_url,
+        success: function() {
+           window.location.href = new_url;
+        },
+        error: function() {
+           window.location.href = 'http://docs.python.org/' + selected;
+        }
+      });
+    }
+  }
+
+  $(document).ready(function() {
+    var release = DOCUMENTATION_OPTIONS.VERSION;
+    var version = release.substr(0, 3);
+    var select = build_select(version, release);
+
+    $('.version_switcher_placeholder').html(select);
+    $('.version_switcher_placeholder select').bind('change', on_switch);
+  });
+})();
diff -r bd8afb90ebf2 Doc/tools/sphinxext/susp-ignored.csv
--- a/Doc/tools/sphinxext/susp-ignored.csv
+++ b/Doc/tools/sphinxext/susp-ignored.csv
@@ -124,9 +124,8 @@
 library/functions,,:stop,"a[start:stop, i]"
 library/functions,,:stop,a[start:stop:step]
 library/hotshot,,:lineno,"ncalls  tottime  percall  cumtime  percall filename:lineno(function)"
-library/http.client,52,:port,host:port
+library/http.client,,:port,host:port
 library/http.cookies,,`,!#$%&'*+-.^_`|~:
-library/httplib,,:port,host:port
 library/imaplib,,:MM,"""DD-Mmm-YYYY HH:MM:SS"
 library/imaplib,,:SS,"""DD-Mmm-YYYY HH:MM:SS"
 library/inspect,,:int,">>> def foo(a, *, b:int, **kwargs):"
@@ -358,3 +357,15 @@
 whatsnew/3.2,,:location,zope9-location = ${zope9:location}
 whatsnew/3.2,,:prefix,... zope-conf = ${custom:prefix}/etc/zope.conf
 whatsnew/3.2,,:prefix,zope-conf = ${custom:prefix}/etc/zope.conf
+whatsnew/news,,:platform,:platform:
+whatsnew/news,,:password,: Unquote before b64encoding user:password during Basic
+whatsnew/news,,:close,Connection:close header.
+whatsnew/news,,:PythonCmd,"With Tk < 8.5 _tkinter.c:PythonCmd() raised UnicodeDecodeError, caused"
+whatsnew/news,,:close,: Connection:close header is sent by requests using URLOpener
+whatsnew/news,,::,": Fix FTP tests for IPv6, bind to ""::1"" instead of ""localhost""."
+whatsnew/news,,:test,: test_subprocess:test_leaking_fds_on_error no longer gives a
+whatsnew/news,,:test,: Fix test_posix:test_getgroups failure under Solaris.  Patch
+whatsnew/news,,:Olimit,Drop -OPT:Olimit compiler option.
+whatsnew/news,,:MAXYEAR,timedelta from date or datetime falls outside of the MINYEAR:MAXYEAR range.
+whatsnew/news,,:bz2,with mode 'r' or 'r:bz2' and a fileobj argument that contained no data or
+whatsnew/news,,:db2,: Add configure option --with-dbmliborder=db1:db2:... to specify
diff -r bd8afb90ebf2 Doc/tutorial/classes.rst
--- a/Doc/tutorial/classes.rst
+++ b/Doc/tutorial/classes.rst
@@ -737,11 +737,11 @@
 This style of access is clear, concise, and convenient.  The use of iterators
 pervades and unifies Python.  Behind the scenes, the :keyword:`for` statement
 calls :func:`iter` on the container object.  The function returns an iterator
-object that defines the method :meth:`__next__` which accesses elements in the
-container one at a time.  When there are no more elements, :meth:`__next__`
-raises a :exc:`StopIteration` exception which tells the :keyword:`for` loop to
-terminate.  You can call the :meth:`__next__` method using the :func:`next`
-built-in function; this example shows how it all works::
+object that defines the method :meth:`~iterator.__next__` which accesses
+elements in the container one at a time.  When there are no more elements,
+:meth:`__next__` raises a :exc:`StopIteration` exception which tells the
+:keyword:`for` loop to terminate.  You can call the :meth:`__next__` method
+using the :func:`next` built-in function; this example shows how it all works::
 
    >>> s = 'abc'
    >>> it = iter(s)
@@ -761,8 +761,8 @@
 
 Having seen the mechanics behind the iterator protocol, it is easy to add
 iterator behavior to your classes.  Define an :meth:`__iter__` method which
-returns an object with a :meth:`__next__` method.  If the class defines
-:meth:`__next__`, then :meth:`__iter__` can just return ``self``::
+returns an object with a :meth:`~iterator.__next__` method.  If the class
+defines :meth:`__next__`, then :meth:`__iter__` can just return ``self``::
 
    class Reverse:
        """Iterator for looping over a sequence backwards."""
@@ -819,8 +819,8 @@
 
 Anything that can be done with generators can also be done with class based
 iterators as described in the previous section.  What makes generators so
-compact is that the :meth:`__iter__` and :meth:`__next__` methods are created
-automatically.
+compact is that the :meth:`__iter__` and :meth:`~generator.__next__` methods
+are created automatically.
 
 Another key feature is that the local variables and execution state are
 automatically saved between calls.  This made the function easier to write and
diff -r bd8afb90ebf2 Doc/tutorial/controlflow.rst
--- a/Doc/tutorial/controlflow.rst
+++ b/Doc/tutorial/controlflow.rst
@@ -58,24 +58,24 @@
 ::
 
    >>> # Measure some strings:
-   ... a = ['cat', 'window', 'defenestrate']
-   >>> for x in a:
-   ...     print(x, len(x))
+   ... words = ['cat', 'window', 'defenestrate']
+   >>> for w in words:
+   ...     print(w, len(w))
    ...
    cat 3
    window 6
    defenestrate 12
 
-It is not safe to modify the sequence being iterated over in the loop (this can
-only happen for mutable sequence types, such as lists).  If you need to modify
-the list you are iterating over (for example, to duplicate selected items) you
-must iterate over a copy.  The slice notation makes this particularly
-convenient::
+If you need to modify the sequence you are iterating over while inside the loop
+(for example to duplicate selected items), it is recommended that you first
+make a copy.  Iterating over a sequence does not implicitly make a copy.  The
+slice notation makes this especially convenient::
 
-   >>> for x in a[:]: # make a slice copy of the entire list
-   ...    if len(x) > 6: a.insert(0, x)
+   >>> for w in words[:]:  # Loop over a slice copy of the entire list.
+   ...     if len(w) > 6:
+   ...         words.insert(0, w)
    ...
-   >>> a
+   >>> words
    ['defenestrate', 'cat', 'window', 'defenestrate']
 
 
@@ -656,6 +656,40 @@
        No, really, it doesn't do anything.
 
 
+.. _tut-annotations:
+
+Function Annotations
+--------------------
+
+.. sectionauthor:: Zachary Ware <zachary.ware@gmail.com>
+.. index::
+   pair: function; annotations
+   single: -> (return annotation assignment)
+
+:ref:`Function annotations <function>` are completely optional,
+arbitrary metadata information about user-defined functions.  Neither Python
+itself nor the standard library use function annotations in any way; this
+section just shows the syntax. Third-party projects are free to use function
+annotations for documentation, type checking, and other uses.
+
+Annotations are stored in the :attr:`__annotations__` attribute of the function
+as a dictionary and have no effect on any other part of the function.  Parameter
+annotations are defined by a colon after the parameter name, followed by an
+expression evaluating to the value of the annotation.  Return annotations are
+defined by a literal ``->``, followed by an expression, between the parameter
+list and the colon denoting the end of the :keyword:`def` statement.  The
+following example has a positional argument, a keyword argument, and the return
+value annotated with nonsense::
+
+   >>> def f(ham: 42, eggs: int = 'spam') -> "Nothing to see here":
+   ...     print("Annotations:", f.__annotations__)
+   ...     print("Arguments:", ham, eggs)
+   ...
+   >>> f('wonderful')
+   Annotations: {'eggs': <class 'int'>, 'return': 'Nothing to see here', 'ham': 42}
+   Arguments: wonderful spam
+
+
 .. _tut-codingstyle:
 
 Intermezzo: Coding Style
diff -r bd8afb90ebf2 Doc/tutorial/datastructures.rst
--- a/Doc/tutorial/datastructures.rst
+++ b/Doc/tutorial/datastructures.rst
@@ -186,7 +186,7 @@
 
    squares = [x**2 for x in range(10)]
 
-This is also equivalent to ``squares = map(lambda x: x**2, range(10))``,
+This is also equivalent to ``squares = list(map(lambda x: x**2, range(10)))``,
 but it's more concise and readable.
 
 A list comprehension consists of brackets containing an expression followed
@@ -418,7 +418,7 @@
 eliminating duplicate entries.  Set objects also support mathematical operations
 like union, intersection, difference, and symmetric difference.
 
-Curly braces or the :func:`set` function can be used to create sets.  Note: To
+Curly braces or the :func:`set` function can be used to create sets.  Note: to
 create an empty set you have to use ``set()``, not ``{}``; the latter creates an
 empty dictionary, a data structure that we discuss in the next section.
 
@@ -447,14 +447,14 @@
    >>> a ^ b                              # letters in a or b but not both
    {'r', 'd', 'b', 'm', 'z', 'l'}
 
-Like :ref:`for lists <tut-listcomps>`, there is a set comprehension syntax::
+Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions
+are also supported::
 
    >>> a = {x for x in 'abracadabra' if x not in 'abc'}
    >>> a
    {'r', 'd'}
 
 
-
 .. _tut-dictionaries:
 
 Dictionaries
@@ -589,6 +589,19 @@
    orange
    pear
 
+To change a sequence you are iterating over while inside the loop (for
+example to duplicate certain items), it is recommended that you first make
+a copy.  Looping over a sequence does not implicitly make a copy.  The slice
+notation makes this especially convenient::
+
+   >>> words = ['cat', 'window', 'defenestrate']
+   >>> for w in words[:]:  # Loop over a slice copy of the entire list.
+   ...     if len(w) > 6:
+   ...         words.insert(0, w)
+   ...
+   >>> words
+   ['defenestrate', 'cat', 'window', 'defenestrate']
+
 
 .. _tut-conditions:
 
diff -r bd8afb90ebf2 Doc/tutorial/errors.rst
--- a/Doc/tutorial/errors.rst
+++ b/Doc/tutorial/errors.rst
@@ -387,7 +387,7 @@
 and print its contents to the screen. ::
 
    for line in open("myfile.txt"):
-       print(line)
+       print(line, end="")
 
 The problem with this code is that it leaves the file open for an indeterminate
 amount of time after this part of the code has finished executing.
@@ -397,7 +397,7 @@
 
    with open("myfile.txt") as f:
        for line in f:
-           print(line)
+           print(line, end="")
 
 After the statement is executed, the file *f* is always closed, even if a
 problem was encountered while processing the lines. Objects which, like files,
diff -r bd8afb90ebf2 Doc/tutorial/index.rst
--- a/Doc/tutorial/index.rst
+++ b/Doc/tutorial/index.rst
@@ -4,9 +4,6 @@
   The Python Tutorial
 ######################
 
-:Release: |version|
-:Date: |today|
-
 Python is an easy to learn, powerful programming language. It has efficient
 high-level data structures and a simple but effective approach to
 object-oriented programming. Python's elegant syntax and dynamic typing,
diff -r bd8afb90ebf2 Doc/tutorial/inputoutput.rst
--- a/Doc/tutorial/inputoutput.rst
+++ b/Doc/tutorial/inputoutput.rst
@@ -184,7 +184,7 @@
 
    >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
    >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
-             'Dcab: {0[Dcab]:d}'.format(table))
+   ...       'Dcab: {0[Dcab]:d}'.format(table))
    Jack: 4098; Sjoerd: 4127; Dcab: 8637678
 
 This could also be done by passing the table as keyword arguments with the '**'
@@ -256,9 +256,10 @@
 :dfn:`binary mode`: now the data is read and written in the form of bytes
 objects.  This mode should be used for all files that don't contain text.
 
-In text mode, the default is to convert platform-specific line endings (``\n``
-on Unix, ``\r\n`` on Windows) to just ``\n`` on reading and ``\n`` back to
-platform-specific line endings on writing.  This behind-the-scenes modification
+In text mode, the default when reading is to convert platform-specific line
+endings (``\n`` on Unix, ``\r\n`` on Windows) to just ``\n``.  When writing in
+text mode, the default is to convert occurrences of ``\n`` back to
+platform-specific line endings.  This behind-the-scenes modification
 to file data is fine for text files, but will corrupt binary data like that in
 :file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when
 reading and writing such files.
diff -r bd8afb90ebf2 Doc/tutorial/interpreter.rst
--- a/Doc/tutorial/interpreter.rst
+++ b/Doc/tutorial/interpreter.rst
@@ -12,7 +12,9 @@
 
 The Python interpreter is usually installed as :file:`/usr/local/bin/python3.3`
 on those machines where it is available; putting :file:`/usr/local/bin` in your
-Unix shell's search path makes it possible to start it by typing the command ::
+Unix shell's search path makes it possible to start it by typing the command:
+
+.. code-block:: text
 
    python3.3
 
@@ -94,8 +96,8 @@
 before printing the first prompt::
 
    $ python3.3
-   Python 3.3 (py3k, Sep 12 2007, 12:21:02)
-   [GCC 3.4.6 20060404 (Red Hat 3.4.6-8)] on linux2
+   Python 3.3 (default, Sep 24 2012, 09:25:04)
+   [GCC 4.6.3] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
 
diff -r bd8afb90ebf2 Doc/tutorial/introduction.rst
--- a/Doc/tutorial/introduction.rst
+++ b/Doc/tutorial/introduction.rst
@@ -94,8 +94,7 @@
 Variables must be "defined" (assigned a value) before they can be used, or an
 error will occur::
 
-   >>> # try to access an undefined variable
-   ... n
+   >>> n  # try to access an undefined variable
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'n' is not defined
@@ -391,7 +390,7 @@
 
 .. seealso::
 
-   :ref:`typesseq`
+   :ref:`textseq`
       Strings are examples of *sequence types*, and support the common
       operations supported by such types.
 
diff -r bd8afb90ebf2 Doc/tutorial/modules.rst
--- a/Doc/tutorial/modules.rst
+++ b/Doc/tutorial/modules.rst
@@ -288,17 +288,25 @@
    >>> import fibo, sys
    >>> dir(fibo)
    ['__name__', 'fib', 'fib2']
-   >>> dir(sys)
-   ['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
-    '__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',
-    'builtin_module_names', 'byteorder', 'callstats', 'copyright',
-    'displayhook', 'exc_info', 'excepthook',
-    'exec_prefix', 'executable', 'exit', 'getdefaultencoding', 'getdlopenflags',
-    'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
+   >>> dir(sys)  # doctest: +NORMALIZE_WHITESPACE
+   ['__displayhook__', '__doc__', '__egginsert', '__excepthook__',
+    '__loader__', '__name__', '__package__', '__plen', '__stderr__',
+    '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames',
+    '_debugmallocstats', '_getframe', '_home', '_mercurial', '_xoptions',
+    'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix',
+    'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
+    'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',
+    'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',
+    'float_repr_style', 'getcheckinterval', 'getdefaultencoding',
+    'getdlopenflags', 'getfilesystemencoding', 'getobjects', 'getprofile',
+    'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',
+    'gettotalrefcount', 'gettrace', 'hash_info', 'hexversion',
+    'implementation', 'int_info', 'intern', 'maxsize', 'maxunicode',
     'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache',
-    'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
-    'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',
-    'version', 'version_info', 'warnoptions']
+    'platform', 'prefix', 'ps1', 'setcheckinterval', 'setdlopenflags',
+    'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace',
+    'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info',
+    'warnoptions']
 
 Without arguments, :func:`dir` lists the names you have defined currently::
 
@@ -306,7 +314,7 @@
    >>> import fibo
    >>> fib = fibo.fib
    >>> dir()
-   ['__builtins__', '__doc__', '__file__', '__name__', 'a', 'fib', 'fibo', 'sys']
+   ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']
 
 Note that it lists all types of names: variables, modules, functions, etc.
 
@@ -317,28 +325,36 @@
 :mod:`builtins`::
 
    >>> import builtins
-   >>> dir(builtins)
-
-   ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'Buffer
-   Error', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'Environme
-   ntError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'Generato
-   rExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexErr
-   or', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError',
-    'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'P
-   endingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', '
-   StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'Ta
-   bError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'Unicod
-   eEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserW
-   arning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__deb
-   ug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any',
-   'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'chr', 'classmethod', 'compile', '
-   complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate
-   ', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr',
-   'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance',
-    'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memory
-   view', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property'
-   , 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sort
-   ed', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
+   >>> dir(builtins)  # doctest: +NORMALIZE_WHITESPACE
+   ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',
+    'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
+    'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
+    'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',
+    'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',
+    'FileExistsError', 'FileNotFoundError', 'FloatingPointError',
+    'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',
+    'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',
+    'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
+    'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
+    'NotImplementedError', 'OSError', 'OverflowError',
+    'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',
+    'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
+    'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',
+    'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',
+    'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',
+    'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',
+    'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',
+    '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',
+    'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',
+    'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',
+    'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
+    'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',
+    'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
+    'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',
+    'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',
+    'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',
+    'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',
+    'zip']
 
 .. _tut-packages:
 
diff -r bd8afb90ebf2 Doc/tutorial/stdlib.rst
--- a/Doc/tutorial/stdlib.rst
+++ b/Doc/tutorial/stdlib.rst
@@ -148,7 +148,7 @@
 
 There are a number of modules for accessing the internet and processing internet
 protocols. Two of the simplest are :mod:`urllib.request` for retrieving data
-from urls and :mod:`smtplib` for sending mail::
+from URLs and :mod:`smtplib` for sending mail::
 
    >>> from urllib.request import urlopen
    >>> for line in urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):
@@ -203,7 +203,7 @@
 ================
 
 Common data archiving and compression formats are directly supported by modules
-including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`zipfile` and
+including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:`zipfile` and
 :mod:`tarfile`. ::
 
    >>> import zlib
diff -r bd8afb90ebf2 Doc/tutorial/stdlib2.rst
--- a/Doc/tutorial/stdlib2.rst
+++ b/Doc/tutorial/stdlib2.rst
@@ -95,7 +95,7 @@
    >>> d = dict(item='unladen swallow')
    >>> t.substitute(d)
    Traceback (most recent call last):
-     . . .
+     ...
    KeyError: 'owner'
    >>> t.safe_substitute(d)
    'Return the unladen swallow to $owner.'
@@ -220,7 +220,9 @@
    logging.error('Error occurred')
    logging.critical('Critical error -- shutting down')
 
-This produces the following output::
+This produces the following output:
+
+.. code-block:: none
 
    WARNING:root:Warning:config file server.conf not found
    ERROR:root:Error occurred
@@ -257,9 +259,9 @@
    >>> import weakref, gc
    >>> class A:
    ...     def __init__(self, value):
-   ...             self.value = value
+   ...         self.value = value
    ...     def __repr__(self):
-   ...             return str(self.value)
+   ...         return str(self.value)
    ...
    >>> a = A(10)                   # create a reference
    >>> d = weakref.WeakValueDictionary()
@@ -311,6 +313,8 @@
    >>> print("Handling", d.popleft())
    Handling task1
 
+::
+
    unsearched = deque([starting_node])
    def breadth_first_search(unsearched):
        node = unsearched.popleft()
diff -r bd8afb90ebf2 Doc/tutorial/whatnow.rst
--- a/Doc/tutorial/whatnow.rst
+++ b/Doc/tutorial/whatnow.rst
@@ -59,15 +59,12 @@
 messages posted to one will automatically be forwarded to the other.  There are
 around 120 postings a day (with peaks up to several hundred), asking (and
 answering) questions, suggesting new features, and announcing new modules.
-Before posting, be sure to check the list of `Frequently Asked Questions
-<http://www.python.org/doc/faq/>`_ (also called the FAQ), or look for it in the
-:file:`Misc/` directory of the Python source distribution.  Mailing list
-archives are available at http://mail.python.org/pipermail/. The FAQ answers
-many of the questions that come up again and again, and may already contain the
-solution for your problem.
+Before posting, be sure to check the list of :ref:`Frequently Asked Questions
+<faq-index>` (also called the FAQ).
+Mailing list archives are available at http://mail.python.org/pipermail/.
+The FAQ answers many of the questions that come up again and again,
+and may already contain the solution for your problem.
 
 .. Postings figure based on average of last six months activity as
    reported by www.egroups.com; Jan. 2000 - June 2000: 21272 msgs / 182
    days = 116.9 msgs / day and steadily increasing. (XXX up to date figures?)
-
-
diff -r bd8afb90ebf2 Doc/using/cmdline.rst
--- a/Doc/using/cmdline.rst
+++ b/Doc/using/cmdline.rst
@@ -358,7 +358,8 @@
 .. cmdoption:: -X
 
    Reserved for various implementation-specific options.  CPython currently
-   defines none of them, but allows to pass arbitrary values and retrieve
+   defines just one, you can use ``-X faulthander`` to enable
+   :data:`faulthandler`. It also allows to pass arbitrary values and retrieve
    them through the :data:`sys._xoptions` dictionary.
 
    .. versionchanged:: 3.2
@@ -380,7 +381,10 @@
 Environment variables
 ---------------------
 
-These environment variables influence Python's behavior.
+These environment variables influence Python's behavior, they are processed
+before the command-line switches other than -E.  It is customary that
+command-line switches override environmental variables where there is a
+conflict.
 
 .. envvar:: PYTHONHOME
 
@@ -577,4 +581,3 @@
 
    If set, Python will print memory allocation statistics every time a new
    object arena is created, and on shutdown.
-
diff -r bd8afb90ebf2 Doc/using/windows.rst
--- a/Doc/using/windows.rst
+++ b/Doc/using/windows.rst
@@ -132,6 +132,8 @@
       Setting Environment variables, Louis J. Farrugia
 
 
+.. _windows-path-mod:
+
 Finding the Python executable
 -----------------------------
 
@@ -454,7 +456,7 @@
 In addition to environment variables, the same settings can be configured
 in the .INI file used by the launcher.  The section in the INI file is
 called ``[defaults]`` and the key name will be the same as the
-environment variables without the leading ``PY\_`` prefix (and note that
+environment variables without the leading ``PY_`` prefix (and note that
 the key names in the INI file are case insensitive.)  The contents of
 an environment variable will override things specified in the INI file.
 
diff -r bd8afb90ebf2 Doc/whatsnew/2.6.rst
--- a/Doc/whatsnew/2.6.rst
+++ b/Doc/whatsnew/2.6.rst
@@ -7,8 +7,6 @@
 .. XXX add trademark info for Apple, Microsoft, SourceForge.
 
 :Author: A.M. Kuchling (amk at amk.ca)
-:Release: |release|
-:Date: |today|
 
 .. $Id$
    Rules for maintenance:
diff -r bd8afb90ebf2 Doc/whatsnew/2.7.rst
--- a/Doc/whatsnew/2.7.rst
+++ b/Doc/whatsnew/2.7.rst
@@ -3,8 +3,6 @@
 ****************************
 
 :Author: A.M. Kuchling (amk at amk.ca)
-:Release: |release|
-:Date: |today|
 
 ..  hyperlink all the methods & functions.
 
diff -r bd8afb90ebf2 Doc/whatsnew/3.0.rst
--- a/Doc/whatsnew/3.0.rst
+++ b/Doc/whatsnew/3.0.rst
@@ -5,8 +5,6 @@
 .. XXX Add trademark info for Apple, Microsoft.
 
 :Author: Guido van Rossum
-:Release: |release|
-:Date: |today|
 
 .. $Id$
    Rules for maintenance:
@@ -771,7 +769,7 @@
   respectively).
 
 * :pep:`3114`: the standard :meth:`next` method has been renamed to
-  :meth:`__next__`.
+  :meth:`~iterator.__next__`.
 
 * The :meth:`__oct__` and :meth:`__hex__` special methods are removed
   -- :func:`oct` and :func:`hex` use :meth:`__index__` now to convert
@@ -807,7 +805,7 @@
   To get the old behavior of :func:`input`, use ``eval(input())``.
 
 * A new built-in function :func:`next` was added to call the
-  :meth:`__next__` method on an object.
+  :meth:`~iterator.__next__` method on an object.
 
 * The :func:`round` function rounding strategy and return type have
   changed.  Exact halfway cases are now rounded to the nearest even
diff -r bd8afb90ebf2 Doc/whatsnew/3.1.rst
--- a/Doc/whatsnew/3.1.rst
+++ b/Doc/whatsnew/3.1.rst
@@ -3,8 +3,6 @@
 ****************************
 
 :Author: Raymond Hettinger
-:Release: |release|
-:Date: |today|
 
 .. $Id$
    Rules for maintenance:
diff -r bd8afb90ebf2 Doc/whatsnew/3.2.rst
--- a/Doc/whatsnew/3.2.rst
+++ b/Doc/whatsnew/3.2.rst
@@ -3,8 +3,6 @@
 ****************************
 
 :Author: Raymond Hettinger
-:Release: |release|
-:Date: |today|
 
 .. $Id$
    Rules for maintenance:
@@ -52,7 +50,7 @@
 
 This article explains the new features in Python 3.2 as compared to 3.1.  It
 focuses on a few highlights and gives a few examples.  For full details, see the
-:source:`Misc/NEWS <Misc/NEWS>` file.
+`Misc/NEWS <http://hg.python.org/cpython/file/3.2/Misc/NEWS>`_ file.
 
 .. seealso::
 
diff -r bd8afb90ebf2 Doc/whatsnew/3.3.rst
--- a/Doc/whatsnew/3.3.rst
+++ b/Doc/whatsnew/3.3.rst
@@ -2,10 +2,6 @@
   What's New In Python 3.3
 ****************************
 
-:Author: Raymond Hettinger
-:Release: |release|
-:Date: |today|
-
 .. Rules for maintenance:
 
    * Anyone can add text to this document.  Do not spend very much time
@@ -47,7 +43,12 @@
    when researching a change.
 
 This article explains the new features in Python 3.3, compared to 3.2.
-Python 3.3 was released on September 29, 2012.
+Python 3.3 was released on September 29, 2012.  For full details,
+see the `changelog <http://docs.python.org/3.3/whatsnew/changelog.html>`_.
+
+.. seealso::
+
+    :pep:`398` - Python 3.3 Release Schedule
 
 
 Summary -- Release highlights
@@ -66,6 +67,7 @@
 * :mod:`faulthandler` (helps debugging low-level crashes)
 * :mod:`ipaddress` (high-level objects representing IP addresses and masks)
 * :mod:`lzma` (compress data using the XZ / LZMA algorithm)
+* :mod:`unittest.mock` (replace parts of your system under test with mock objects)
 * :mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the
   popular ``virtualenv`` package)
 
@@ -79,6 +81,12 @@
 * More compact :ref:`unicode strings <pep-393>`.
 * More compact :ref:`attribute dictionaries <pep-412>`.
 
+Significantly Improved Library Modules:
+
+* C Accelerator for the :ref:`decimal <new-decimal>` module.
+* Better unicode handling in the :ref:`email <new-email>` module
+  (:term:`provisional <provisional package>`).
+
 Security improvements:
 
 * Hash randomization is switched on by default.
@@ -91,9 +99,6 @@
 PEP 405: Virtual Environments
 =============================
 
-:pep:`405` - Python Virtual Environments
- PEP written by Carl Meyer, implemented by Carl Meyer and Vinay Sajip.
-
 Virtual environments help create separate Python setups while sharing a
 system-wide base install, for ease of maintenance.  Virtual environments
 have their own set of private site packages (i.e. locally-installed
@@ -104,27 +109,37 @@
 
 This PEP adds the :mod:`venv` module for programmatic access, and the
 :ref:`pyvenv <scripts-pyvenv>` script for command-line access and
-administration.  The Python interpreter becomes aware of a ``pvenv.cfg``
+administration.  The Python interpreter checks for a ``pyvenv.cfg``,
 file whose existence signals the base of a virtual environment's directory
 tree.
 
-
-PEP 420: Namespace Packages
-===========================
+.. seealso::
+
+    :pep:`405` - Python Virtual Environments
+       PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip
+
+
+PEP 420: Implicit Namespace Packages
+====================================
 
 Native support for package directories that don't require ``__init__.py``
 marker files and can automatically span multiple path segments (inspired by
 various third party approaches to namespace packages, as described in
 :pep:`420`)
 
+.. seealso::
+
+   :pep:`420` - Implicit Namespace Packages
+      PEP written by Eric V. Smith; implementation by Eric V. Smith
+      and Barry Warsaw
+
 
 .. _pep-3118-update:
 
 PEP 3118: New memoryview implementation and buffer protocol documentation
 =========================================================================
 
-:issue:`10181` - memoryview bug fixes and features.
-  Written by Stefan Krah.
+The implementation of :pep:`3118` has been significantly improved.
 
 The new memoryview implementation comprehensively fixes all ownership and
 lifetime issues of dynamically allocated fields in the Py_buffer struct
@@ -181,6 +196,13 @@
 
 * For further changes see `Build and C API Changes`_ and `Porting C code`_ .
 
+(Contributed by Stefan Krah in :issue:`10181`)
+
+.. seealso::
+
+   :pep:`3118` - Revising the Buffer Protocol
+
+
 .. _pep-393:
 
 PEP 393: Flexible String Representation
@@ -255,15 +277,55 @@
 bit better than Python 2.7, on a Django benchmark (see the PEP for
 details).
 
+.. seealso::
+
+   :pep:`393` - Flexible String Representation
+      PEP written by Martin von Löwis; implementation by Torsten Becker
+      and Martin von Löwis.
+
+
+.. _pep-397:
+
+PEP 397: Python Launcher for Windows
+====================================
+
+The Python 3.3 Windows installer now includes a ``py`` launcher application
+that can be used to launch Python applications in a version independent
+fashion.
+
+This launcher is invoked implicitly when double-clicking ``*.py`` files.
+If only a single Python version is installed on the system, that version
+will be used to run the file. If multiple versions are installed, the most
+recent version is used by default, but this can be overridden by including
+a Unix-style "shebang line" in the Python script.
+
+The launcher can also be used explicitly from the command line as the ``py``
+application. Running ``py`` follows the same version selection rules as
+implicitly launching scripts, but a more specific version can be selected
+by passing appropriate arguments (such as ``-3`` to request Python 3 when
+Python 2 is also installed, or ``-2.6`` to specifclly request an earlier
+Python version when a more recent version is installed).
+
+In addition to the launcher, the Windows installer now includes an
+option to add the newly installed Python to the system PATH (contributed
+by Brian Curtin in :issue:`3561`).
+
+.. seealso::
+
+   :pep:`397` - Python Launcher for Windows
+      PEP written by Mark Hammond and Martin v. Löwis; implementation by
+      Vinay Sajip.
+
+   Launcher documentation: :ref:`launcher`
+
+   Installer PATH modification: :ref:`windows-path-mod`
+
 
 .. _pep-3151:
 
 PEP 3151: Reworking the OS and IO exception hierarchy
 =====================================================
 
-:pep:`3151` - Reworking the OS and IO exception hierarchy
- PEP written and implemented by Antoine Pitrou.
-
 The hierarchy of exceptions raised by operating system errors is now both
 simplified and finer-grained.
 
@@ -325,15 +387,17 @@
     except PermissionError:
         print("You are not allowed to read document.txt")
 
+.. seealso::
+
+   :pep:`3151` - Reworking the OS and IO Exception Hierarchy
+      PEP written and implemented by Antoine Pitrou
+
 
 .. _pep-380:
 
 PEP 380: Syntax for Delegating to a Subgenerator
 ================================================
 
-:pep:`380` - Syntax for Delegating to a Subgenerator
- PEP written by Greg Ewing.
-
 PEP 380 adds the ``yield from`` expression, allowing a generator to delegate
 part of its operations to another generator. This allows a section of code
 containing 'yield' to be factored out and placed in another generator.
@@ -389,17 +453,17 @@
 multiple subgenerators as easily as a single large function can be split into
 multiple subfunctions.
 
-(Implementation by Greg Ewing, integrated into 3.3 by Renaud Blanch, Ryan
-Kelly and Nick Coghlan, documentation by Zbigniew Jędrzejewski-Szmek and
-Nick Coghlan)
+.. seealso::
+
+   :pep:`380` - Syntax for Delegating to a Subgenerator
+      PEP written by Greg Ewing; implementation by Greg Ewing, integrated into
+      3.3 by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by
+      Zbigniew Jędrzejewski-Szmek and Nick Coghlan
 
 
 PEP 409: Suppressing exception context
 ======================================
 
-:pep:`409` - Suppressing exception context
- PEP written by Ethan Furman, implemented by Ethan Furman and Nick Coghlan.
-
 PEP 409 introduces new syntax that allows the display of the chained
 exception context to be disabled. This allows cleaner error messages in
 applications that convert between exception types::
@@ -454,13 +518,16 @@
     ...
     KeyError('x',)
 
+.. seealso::
+
+   :pep:`409` - Suppressing exception context
+      PEP written by Ethan Furman; implemented by Ethan Furman and Nick
+      Coghlan.
+
 
 PEP 414: Explicit Unicode literals
 ======================================
 
-:pep:`414` - Explicit Unicode literals
- PEP written by Armin Ronacher.
-
 To ease the transition from Python 2 for Unicode aware Python applications
 that make heavy use of Unicode literals, Python 3.3 once again supports the
 "``u``" prefix for string literals. This prefix has no semantic significance
@@ -469,13 +536,15 @@
 the more significant semantic changes (such as the stricter default
 separation of binary and text data).
 
+.. seealso::
+
+   :pep:`414` - Explicit Unicode literals
+      PEP written by Armin Ronacher.
+
 
 PEP 3155: Qualified name for classes and functions
 ==================================================
 
-:pep:`3155` - Qualified name for classes and functions
- PEP written and implemented by Antoine Pitrou.
-
 Functions and class objects have a new ``__qualname__`` attribute representing
 the "path" from the module top-level to their definition.  For global functions
 and classes, this is the same as ``__name__``.  For other functions and classes,
@@ -528,28 +597,31 @@
    >>> str(C.D.meth)
    '<function C.D.meth at 0x7f46b9fe31e0>'
 
+.. seealso::
+
+   :pep:`3155` - Qualified name for classes and functions
+      PEP written and implemented by Antoine Pitrou.
+
 
 .. _pep-412:
 
 PEP 412: Key-Sharing Dictionary
 ===============================
 
-:pep:`412` - Key-Sharing Dictionary
- PEP written and implemented by Mark Shannon.
-
 Dictionaries used for the storage of objects' attributes are now able to
 share part of their internal storage between each other (namely, the part
 which stores the keys and their respective hashes).  This reduces the memory
 consumption of programs creating many instances of non-builtin types.
 
+.. seealso::
+
+   :pep:`412` - Key-Sharing Dictionary
+      PEP written and implemented by Mark Shannon.
+
 
 PEP 362: Function Signature Object
 ==================================
 
-:pep:`362`: -  Function Signature Object
- PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo.
- Implemented by Yury Selivanov.
-
 A new function :func:`inspect.signature` makes introspection of python
 callables easy and straightforward.  A broad range of callables is supported:
 python functions, decorated or not, classes, and :func:`functools.partial`
@@ -559,6 +631,49 @@
 which considerably simplifies writing decorators and any code that validates
 or amends calling signatures or arguments.
 
+.. seealso::
+
+   :pep:`362`: -  Function Signature Object
+      PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo;
+      implemented by Yury Selivanov.
+
+
+PEP 421: Adding sys.implementation
+==================================
+
+A new attribute on the :mod:`sys` module exposes details specific to the
+implementation of the currently running interpreter.  The initial set of
+attributes on :attr:`sys.implementation` are ``name``, ``version``,
+``hexversion``, and ``cache_tag``.
+
+The intention of ``sys.implementation`` is to consolidate into one namespace
+the implementation-specific data used by the standard library.  This allows
+different Python implementations to share a single standard library code base
+much more easily.  In its initial state, ``sys.implementation`` holds only a
+small portion of the implementation-specific data.  Over time that ratio will
+shift in order to make the standard library more portable.
+
+One example of improved standard library portability is ``cache_tag``.  As of
+Python 3.3, ``sys.implementation.cache_tag`` is used by :mod:`importlib` to
+support :pep:`3147` compliance.  Any Python implementation that uses
+``importlib`` for its built-in import system may use ``cache_tag`` to control
+the caching behavior for modules.
+
+SimpleNamespace
+---------------
+
+The implementation of ``sys.implementation`` also introduces a new type to
+Python: :class:`types.SimpleNamespace`.  In contrast to a mapping-based
+namespace, like :class:`dict`, ``SimpleNamespace`` is attribute-based, like
+:class:`object`.  However, unlike ``object``, ``SimpleNamespace`` instances
+are writable.  This means that you can add, remove, and modify the namespace
+through normal attribute access.
+
+.. seealso::
+
+   :pep:`421` - Adding sys.implementation
+      PEP written and implemented by Eric Snow.
+
 
 .. _importlib:
 
@@ -569,8 +684,6 @@
 :issue:`14605` - Make import machinery explicit
 :issue:`14646` - Require loaders set __loader__ and __package__
 
-(Written by Brett Cannon)
-
 The :func:`__import__` function is now powered by :func:`importlib.__import__`.
 This work leads to the completion of "phase 2" of :pep:`302`. There are
 multiple benefits to this change. First, it has allowed for more of the
@@ -580,11 +693,10 @@
 import semantics. And finally it eases the maintenance of import, allowing for
 future growth to occur.
 
-For the common user, this change should result in no visible change in
-semantics. Any possible changes required in one's code to handle this change
-should read the `Porting Python code`_ section of this document to see what
-needs to be changed, but it will only affect those that currently manipulate
-import or try calling it programmatically.
+For the common user, there should be no visible change in semantics.  For
+those whose code currently manipulates import or calls import
+programmatically, the code changes that might possibly be required are covered
+in the `Porting Python code`_ section of this document.
 
 New APIs
 --------
@@ -623,8 +735,9 @@
 
 Visible Changes
 ---------------
-[For potential required changes to code, see the `Porting Python code`_
-section]
+
+For potential required changes to code, see the `Porting Python code`_
+section.
 
 Beyond the expanse of what :mod:`importlib` now exposes, there are other
 visible changes to import. The biggest is that :attr:`sys.meta_path` and
@@ -652,12 +765,429 @@
 consideration when updating code for Python 3.3, and thus should be read about
 in the `Porting Python code`_ section of this document.
 
-
-New Email Package Features
-==========================
+(Implementation by Brett Cannon)
+
+
+Other Language Changes
+======================
+
+Some smaller changes made to the core Python language are:
+
+* Added support for Unicode name aliases and named sequences.
+  Both :func:`unicodedata.lookup()` and ``'\N{...}'`` now resolve name aliases,
+  and :func:`unicodedata.lookup()` resolves named sequences too.
+
+  (Contributed by Ezio Melotti in :issue:`12753`)
+
+* Unicode database updated to UCD version 6.1.0
+
+* Equality comparisons on :func:`range` objects now return a result reflecting
+  the equality of the underlying sequences generated by those range objects.
+  (:issue:`13201`)
+
+* The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()``
+  methods of :class:`bytes` and :class:`bytearray` objects now accept an
+  integer between 0 and 255 as their first argument.
+
+  (Contributed by Petri Lehtinen in :issue:`12170`)
+
+* The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes`
+  and :class:`bytearray` now accept a :class:`bytearray` for the ``fill``
+  argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)
+
+* New methods have been added to :class:`list` and :class:`bytearray`:
+  ``copy()`` and ``clear()`` (:issue:`10516`).  Consequently,
+  :class:`~collections.abc.MutableSequence` now also defines a
+  :meth:`~collections.abc.MutableSequence.clear` method (:issue:`11388`).
+
+* Raw bytes literals can now be written ``rb"..."`` as well as ``br"..."``.
+
+  (Contributed by Antoine Pitrou in :issue:`13748`.)
+
+* :meth:`dict.setdefault` now does only one lookup for the given key, making
+  it atomic when used with built-in types.
+
+  (Contributed by Filip Gruszczyński in :issue:`13521`.)
+
+* The error messages produced when a function call does not match the function
+  signature have been significantly improved.
+
+  (Contributed by Benjamin Peterson.)
+
+
+A Finer-Grained Import Lock
+===========================
+
+Previous versions of CPython have always relied on a global import lock.
+This led to unexpected annoyances, such as deadlocks when importing a module
+would trigger code execution in a different thread as a side-effect.
+Clumsy workarounds were sometimes employed, such as the
+:c:func:`PyImport_ImportModuleNoBlock` C API function.
+
+In Python 3.3, importing a module takes a per-module lock.  This correctly
+serializes importation of a given module from multiple threads (preventing
+the exposure of incompletely initialized modules), while eliminating the
+aforementioned annoyances.
+
+(Contributed by Antoine Pitrou in :issue:`9260`.)
+
+
+Builtin functions and types
+===========================
+
+* :func:`open` gets a new *opener* parameter: the underlying file descriptor
+  for the file object is then obtained by calling *opener* with (*file*,
+  *flags*). It can be used to use custom flags like :data:`os.O_CLOEXEC` for
+  example. The ``'x'`` mode was added: open for exclusive creation, failing if
+  the file already exists.
+* :func:`print`: added the *flush* keyword argument. If the *flush* keyword
+  argument is true, the stream is forcibly flushed.
+* :func:`hash`: hash randomization is enabled by default, see
+  :meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`.
+* The :class:`str` type gets a new :meth:`~str.casefold` method: return a
+  casefolded copy of the string, casefolded strings may be used for caseless
+  matching. For example, ``'ß'.casefold()`` returns ``'ss'``.
+* The sequence documentation has been substantially rewritten to better
+  explain the binary/text sequence distinction and to provide specific
+  documentation sections for the individual builtin sequence types
+  (:issue:`4966`)
+
+
+New Modules
+===========
+
+faulthandler
+------------
+
+This new debug module :mod:`faulthandler` contains functions to dump Python tracebacks explicitly,
+on a fault (a crash like a segmentation fault), after a timeout, or on a user
+signal. Call :func:`faulthandler.enable` to install fault handlers for the
+:const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS`, and
+:const:`SIGILL` signals. You can also enable them at startup by setting the
+:envvar:`PYTHONFAULTHANDLER` environment variable or by using :option:`-X`
+``faulthandler`` command line option.
+
+Example of a segmentation fault on Linux: ::
+
+    $ python -q -X faulthandler
+    >>> import ctypes
+    >>> ctypes.string_at(0)
+    Fatal Python error: Segmentation fault
+
+    Current thread 0x00007fb899f39700:
+      File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
+      File "<stdin>", line 1 in <module>
+    Segmentation fault
+
+
+ipaddress
+---------
+
+The new :mod:`ipaddress` module provides tools for creating and manipulating
+objects representing IPv4 and IPv6 addresses, networks and interfaces (i.e.
+an IP address associated with a specific IP subnet).
+
+(Contributed by Google and Peter Moody in :pep:`3144`)
+
+lzma
+----
+
+The newly-added :mod:`lzma` module provides data compression and decompression
+using the LZMA algorithm, including support for the ``.xz`` and ``.lzma``
+file formats.
+
+(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`)
+
+
+Improved Modules
+================
+
+abc
+---
+
+Improved support for abstract base classes containing descriptors composed with
+abstract methods. The recommended approach to declaring abstract descriptors is
+now to provide :attr:`__isabstractmethod__` as a dynamically updated
+property. The built-in descriptors have been updated accordingly.
+
+  * :class:`abc.abstractproperty` has been deprecated, use :class:`property`
+    with :func:`abc.abstractmethod` instead.
+  * :class:`abc.abstractclassmethod` has been deprecated, use
+    :class:`classmethod` with :func:`abc.abstractmethod` instead.
+  * :class:`abc.abstractstaticmethod` has been deprecated, use
+    :class:`staticmethod` with :func:`abc.abstractmethod` instead.
+
+(Contributed by Darren Dale in :issue:`11610`)
+
+:meth:`abc.ABCMeta.register` now returns the registered subclass, which means
+it can now be used as a class decorator (:issue:`10868`).
+
+
+array
+-----
+
+The :mod:`array` module supports the :c:type:`long long` type using ``q`` and
+``Q`` type codes.
+
+(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`)
+
+
+base64
+------
+
+ASCII-only Unicode strings are now accepted by the decoding functions of the
+:mod:`base64` modern interface. For example, ``base64.b64decode('YWJj')``
+returns ``b'abc'``.  (Contributed by Catalin Iacob in :issue:`13641`.)
+
+
+binascii
+--------
+
+In addition to the binary objects they normally accept, the ``a2b_`` functions
+now all also accept ASCII-only strings as input.  (Contributed by Antoine
+Pitrou in :issue:`13637`.)
+
+
+bz2
+---
+
+The :mod:`bz2` module has been rewritten from scratch. In the process, several
+new features have been added:
+
+* New :func:`bz2.open` function: open a bzip2-compressed file in binary or
+  text mode.
+
+* :class:`bz2.BZ2File` can now read from and write to arbitrary file-like
+  objects, by means of its constructor's *fileobj* argument.
+
+  (Contributed by Nadeem Vawda in :issue:`5863`)
+
+* :class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress
+  multi-stream inputs (such as those produced by the :program:`pbzip2` tool).
+  :class:`bz2.BZ2File` can now also be used to create this type of file, using
+  the ``'a'`` (append) mode.
+
+  (Contributed by Nir Aides in :issue:`1625`)
+
+* :class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` API,
+  except for the :meth:`detach` and :meth:`truncate` methods.
+
+
+codecs
+------
+
+The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly
+``replace`` and ``ignore`` error handlers on all Windows versions.  The
+:mod:`~encodings.mbcs` codec now supports all error handlers, instead of only
+``replace`` to encode and ``ignore`` to decode.
+
+A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is the
+Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it is used
+by ``sys.stdout`` if the console output code page is set to cp65001 (e.g., using
+``chcp 65001`` command).
+
+Multibyte CJK decoders now resynchronize faster.  They only ignore the first
+byte of an invalid byte sequence. For example, ``b'\xff\n'.decode('gb2312',
+'replace')`` now returns a ``\n`` after the replacement character.
+
+(:issue:`12016`)
+
+Incremental CJK codec encoders are no longer reset at each call to their
+encode() methods. For example::
+
+    $ ./python -q
+    >>> import codecs
+    >>> encoder = codecs.getincrementalencoder('hz')('strict')
+    >>> b''.join(encoder.encode(x) for x in '\u52ff\u65bd\u65bc\u4eba\u3002 Bye.')
+    b'~{NpJ)l6HK!#~} Bye.'
+
+This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older Python
+versions.
+
+(:issue:`12100`)
+
+The ``unicode_internal`` codec has been deprecated.
+
+
+collections
+-----------
+
+Addition of a new :class:`~collections.ChainMap` class to allow treating a
+number of mappings as a single unit.  (Written by Raymond Hettinger for
+:issue:`11089`, made public in :issue:`11297`)
+
+The abstract base classes have been moved in a new :mod:`collections.abc`
+module, to better differentiate between the abstract and the concrete
+collections classes.  Aliases for ABCs are still present in the
+:mod:`collections` module to preserve existing imports.  (:issue:`11085`)
+
+.. XXX addition of __slots__ to ABCs not recorded here: internal detail
+
+The :class:`~collections.Counter` class now supports the unary ``+`` and ``-``
+operators, as well as the in-place operators ``+=``, ``-=``, ``|=``, and
+``&=``.  (Contributed by Raymond Hettinger in :issue:`13121`.)
+
+
+contextlib
+----------
+
+:class:`~contextlib.ExitStack` now provides a solid foundation for
+programmatic manipulation of context managers and similar cleanup
+functionality. Unlike the previous ``contextlib.nested`` API (which was
+deprecated and removed), the new API is designed to work correctly
+regardless of whether context managers acquire their resources in
+their ``__init__`` method (for example, file objects) or in their
+``__enter__`` method (for example, synchronisation objects from the
+:mod:`threading` module).
+
+(:issue:`13585`)
+
+
+crypt
+-----
+
+Addition of salt and modular crypt format (hashing method) and the :func:`~crypt.mksalt`
+function to the :mod:`crypt` module.
+
+(:issue:`10924`)
+
+curses
+------
+
+ * If the :mod:`curses` module is linked to the ncursesw library, use Unicode
+   functions when Unicode strings or characters are passed (e.g.
+   :c:func:`waddwstr`), and bytes functions otherwise (e.g. :c:func:`waddstr`).
+ * Use the locale encoding instead of ``utf-8`` to encode Unicode strings.
+ * :class:`curses.window` has a new :attr:`curses.window.encoding` attribute.
+ * The :class:`curses.window` class has a new :meth:`~curses.window.get_wch`
+   method to get a wide character
+ * The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to
+   push a wide character so the next :meth:`~curses.window.get_wch` will return
+   it
+
+(Contributed by Iñigo Serna in :issue:`6755`)
+
+datetime
+--------
+
+ * Equality comparisons between naive and aware :class:`~datetime.datetime`
+   instances now return :const:`False` instead of raising :exc:`TypeError`
+   (:issue:`15006`).
+ * New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp
+   corresponding to the :class:`~datetime.datetime` instance.
+ * The :meth:`datetime.datetime.strftime` method supports formatting years
+   older than 1000.
+ * The :meth:`datetime.datetime.astimezone` method can now be
+   called without arguments to convert datetime instance to the system
+   timezone.
+
+
+.. _new-decimal:
+
+decimal
+-------
+
+:issue:`7652` - integrate fast native decimal arithmetic.
+   C-module and libmpdec written by Stefan Krah.
+
+The new C version of the decimal module integrates the high speed libmpdec
+library for arbitrary precision correctly-rounded decimal floating point
+arithmetic. libmpdec conforms to IBM's General Decimal Arithmetic Specification.
+
+Performance gains range from 10x for database applications to 100x for
+numerically intensive applications. These numbers are expected gains
+for standard precisions used in decimal floating point arithmetic. Since
+the precision is user configurable, the exact figures may vary. For example,
+in integer bignum arithmetic the differences can be significantly higher.
+
+The following table is meant as an illustration. Benchmarks are available
+at http://www.bytereef.org/mpdecimal/quickstart.html.
+
+   +---------+-------------+--------------+-------------+
+   |         |  decimal.py |   _decimal   |   speedup   |
+   +=========+=============+==============+=============+
+   |   pi    |    42.02s   |    0.345s    |    120x     |
+   +---------+-------------+--------------+-------------+
+   | telco   |   172.19s   |    5.68s     |     30x     |
+   +---------+-------------+--------------+-------------+
+   | psycopg |     3.57s   |    0.29s     |     12x     |
+   +---------+-------------+--------------+-------------+
+
+Features
+~~~~~~~~
+
+* The :exc:`~decimal.FloatOperation` signal optionally enables stricter
+  semantics for mixing floats and Decimals.
+
+* If Python is compiled without threads, the C version automatically
+  disables the expensive thread local context machinery. In this case,
+  the variable :data:`~decimal.HAVE_THREADS` is set to False.
+
+API changes
+~~~~~~~~~~~
+
+* The C module has the following context limits, depending on the machine
+  architecture:
+
+   +-------------------+---------------------+------------------------------+
+   |                   |       32-bit        |            64-bit            |
+   +===================+=====================+==============================+
+   | :const:`MAX_PREC` | :const:`425000000`  | :const:`999999999999999999`  |
+   +-------------------+---------------------+------------------------------+
+   | :const:`MAX_EMAX` | :const:`425000000`  | :const:`999999999999999999`  |
+   +-------------------+---------------------+------------------------------+
+   | :const:`MIN_EMIN` | :const:`-425000000` | :const:`-999999999999999999` |
+   +-------------------+---------------------+------------------------------+
+
+* In the context templates (:class:`~decimal.DefaultContext`,
+  :class:`~decimal.BasicContext` and :class:`~decimal.ExtendedContext`)
+  the magnitude of :attr:`~decimal.Context.Emax` and
+  :attr:`~decimal.Context.Emin` has changed to :const:`999999`.
+
+* The :class:`~decimal.Decimal` constructor in decimal.py does not observe
+  the context limits and converts values with arbitrary exponents or precision
+  exactly. Since the C version has internal limits, the following scheme is
+  used: If possible, values are converted exactly, otherwise
+  :exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the
+  latter case it is always possible to use :meth:`~decimal.Context.create_decimal`
+  in order to obtain a rounded or inexact value.
+
+
+* The power function in decimal.py is always correctly-rounded. In the
+  C version, it is defined in terms of the correctly-rounded
+  :meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions,
+  but the final result is only "almost always correctly rounded".
+
+
+* In the C version, the context dictionary containing the signals is a
+  :class:`~collections.abc.MutableMapping`.  For speed reasons,
+  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always
+  refer to the same :class:`~collections.abc.MutableMapping` that the context
+  was initialized with. If a new signal dictionary is assigned,
+  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps`
+  are updated with the new values, but they do not reference the RHS
+  dictionary.
+
+
+* Pickling a :class:`~decimal.Context` produces a different output in order
+  to have a common interchange format for the Python and C versions.
+
+
+* The order of arguments in the :class:`~decimal.Context` constructor has been
+  changed to match the order displayed by :func:`repr`.
+
+
+* The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method
+  is deprecated.
+
+
+.. _new-email:
+
+email
+-----
 
 Policy Framework
-----------------
+~~~~~~~~~~~~~~~~
 
 The email package now has a :mod:`~email.policy` framework.  A
 :class:`~email.policy.Policy` is an object with several methods and properties
@@ -712,7 +1242,7 @@
 
 
 Provisional Policy with New Header API
---------------------------------------
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 While the policy framework is worthwhile all by itself, the main motivation for
 introducing it is to allow the creation of new policies that implement new
@@ -803,402 +1333,55 @@
 package transparently encodes and decodes the unicode to and from the RFC
 standard Content Transfer Encodings.
 
-
-Other Language Changes
-======================
-
-Some smaller changes made to the core Python language are:
-
-* Added support for Unicode name aliases and named sequences.
-  Both :func:`unicodedata.lookup()` and ``'\N{...}'`` now resolve name aliases,
-  and :func:`unicodedata.lookup()` resolves named sequences too.
-
-  (Contributed by Ezio Melotti in :issue:`12753`)
-
-* Equality comparisons on :func:`range` objects now return a result reflecting
-  the equality of the underlying sequences generated by those range objects.
-
-  (:issue:`13201`)
-
-* The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()``
-  methods of :class:`bytes` and :class:`bytearray` objects now accept an
-  integer between 0 and 255 as their first argument.
-
-  (Contributed by Petri Lehtinen in :issue:`12170`)
-
-* New methods have been added to :class:`list` and :class:`bytearray`:
-  ``copy()`` and ``clear()``.
-
-  (:issue:`10516`)
-
-* Raw bytes literals can now be written ``rb"..."`` as well as ``br"..."``.
-  (Contributed by Antoine Pitrou in :issue:`13748`.)
-
-* :meth:`dict.setdefault` now does only one lookup for the given key, making
-  it atomic when used with built-in types.
-  (Contributed by Filip Gruszczyński in :issue:`13521`.)
-
-
-.. XXX mention new error messages for passing wrong number of arguments to functions
-
-
-A Finer-Grained Import Lock
-===========================
-
-Previous versions of CPython have always relied on a global import lock.
-This led to unexpected annoyances, such as deadlocks when importing a module
-would trigger code execution in a different thread as a side-effect.
-Clumsy workarounds were sometimes employed, such as the
-:c:func:`PyImport_ImportModuleNoBlock` C API function.
-
-In Python 3.3, importing a module takes a per-module lock.  This correctly
-serializes importation of a given module from multiple threads (preventing
-the exposure of incompletely initialized modules), while eliminating the
-aforementioned annoyances.
-
-(contributed by Antoine Pitrou in :issue:`9260`.)
-
-
-Builtin functions and types
-===========================
-
-* :func:`open` gets a new *opener* parameter: the underlying file descriptor
-  for the file object is then obtained by calling *opener* with (*file*,
-  *flags*). It can be used to use custom flags like :data:`os.O_CLOEXEC` for
-  example. The ``'x'`` mode was added: open for exclusive creation, failing if
-  the file already exists.
-* :func:`print`: added the *flush* keyword argument. If the *flush* keyword
-  argument is true, the stream is forcibly flushed.
-* :func:`hash`: hash randomization is enabled by default, see
-  :meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`.
-* The :class:`str` type gets a new :meth:`~str.casefold` method: return a
-  casefolded copy of the string, casefolded strings may be used for caseless
-  matching. For example, ``'ß'.casefold()`` returns ``'ss'``.
-* The sequence documentation has been substantially rewritten to better
-  explain the binary/text sequence distinction and to provide specific
-  documentation sections for the individual builtin sequence types
-  (:issue:`4966`)
-
-New Modules
-===========
-
-faulthandler
-------------
-
-This new debug module contains functions to dump Python tracebacks explicitly,
-on a fault (a crash like a segmentation fault), after a timeout, or on a user
-signal. Call :func:`faulthandler.enable` to install fault handlers for the
-:const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS`, and
-:const:`SIGILL` signals. You can also enable them at startup by setting the
-:envvar:`PYTHONFAULTHANDLER` environment variable or by using :option:`-X`
-``faulthandler`` command line option.
-
-Example of a segmentation fault on Linux: ::
-
-    $ python -q -X faulthandler
-    >>> import ctypes
-    >>> ctypes.string_at(0)
-    Fatal Python error: Segmentation fault
-
-    Current thread 0x00007fb899f39700:
-      File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
-      File "<stdin>", line 1 in <module>
-    Segmentation fault
-
-
-ipaddress
----------
-
-The new :mod:`ipaddress` module provides tools for creating and manipulating
-objects representing IPv4 and IPv6 addresses, networks and interfaces (i.e.
-an IP address associated with a specific IP subnet).
-
-(Contributed by Google and Peter Moody in :pep:`3144`)
-
-lzma
-----
-
-The newly-added :mod:`lzma` module provides data compression and decompression
-using the LZMA algorithm, including support for the ``.xz`` and ``.lzma``
-file formats.
-
-(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`)
-
-
-Improved Modules
-================
-
-abc
----
-
-Improved support for abstract base classes containing descriptors composed with
-abstract methods. The recommended approach to declaring abstract descriptors is
-now to provide :attr:`__isabstractmethod__` as a dynamically updated
-property. The built-in descriptors have been updated accordingly.
-
-  * :class:`abc.abstractproperty` has been deprecated, use :class:`property`
-    with :func:`abc.abstractmethod` instead.
-  * :class:`abc.abstractclassmethod` has been deprecated, use
-    :class:`classmethod` with :func:`abc.abstractmethod` instead.
-  * :class:`abc.abstractstaticmethod` has been deprecated, use
-    :class:`staticmethod` with :func:`abc.abstractmethod` instead.
-
-(Contributed by Darren Dale in :issue:`11610`)
-
-array
------
-
-The :mod:`array` module supports the :c:type:`long long` type using ``q`` and
-``Q`` type codes.
-
-(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`)
-
-
-base64, binascii
-----------------
-
-ASCII-only Unicode strings are now accepted by the decoding functions of the
-modern interface. For example, ``base64.b64decode('YWJj')`` returns ``b'abc'``.
-
-
-bz2
----
-
-The :mod:`bz2` module has been rewritten from scratch. In the process, several
-new features have been added:
-
-* New :func:`bz2.open` function: open a bzip2-compressed file in binary or
-  text mode.
-
-* :class:`bz2.BZ2File` can now read from and write to arbitrary file-like
-  objects, by means of its constructor's *fileobj* argument.
-
-  (Contributed by Nadeem Vawda in :issue:`5863`)
-
-* :class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress
-  multi-stream inputs (such as those produced by the :program:`pbzip2` tool).
-  :class:`bz2.BZ2File` can now also be used to create this type of file, using
-  the ``'a'`` (append) mode.
-
-  (Contributed by Nir Aides in :issue:`1625`)
-
-* :class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` API,
-  except for the :meth:`detach` and :meth:`truncate` methods.
-
-
-codecs
-------
-
-The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly
-``replace`` and ``ignore`` error handlers on all Windows versions.  The
-:mod:`~encodings.mbcs` codec now supports all error handlers, instead of only
-``replace`` to encode and ``ignore`` to decode.
-
-A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is the
-Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it is used
-by ``sys.stdout`` if the console output code page is set to cp65001 (e.g., using
-``chcp 65001`` command).
-
-Multibyte CJK decoders now resynchronize faster.  They only ignore the first
-byte of an invalid byte sequence. For example, ``b'\xff\n'.decode('gb2312',
-'replace')`` now returns a ``\n`` after the replacement character.
-
-(:issue:`12016`)
-
-Incremental CJK codec encoders are no longer reset at each call to their
-encode() methods. For example::
-
-    $ ./python -q
-    >>> import codecs
-    >>> encoder = codecs.getincrementalencoder('hz')('strict')
-    >>> b''.join(encoder.encode(x) for x in '\u52ff\u65bd\u65bc\u4eba\u3002 Bye.')
-    b'~{NpJ)l6HK!#~} Bye.'
-
-This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older Python
-versions.
-
-(:issue:`12100`)
-
-The ``unicode_internal`` codec has been deprecated.
-
-
-collections
------------
-
-Addition of a new :class:`~collections.ChainMap` class to allow treating a
-number of mappings as a single unit.
-
-(Written by Raymond Hettinger for :issue:`11089`, made public in
-:issue:`11297`)
-
-The abstract base classes have been moved in a new :mod:`collections.abc`
-module, to better differentiate between the abstract and the concrete
-collections classes.  Aliases for ABCs are still present in the
-:mod:`collections` module to preserve existing imports.
-
-(:issue:`11085`)
-
-.. XXX addition of __slots__ to ABCs not recorded here: internal detail
-
-
-contextlib
-----------
-
-:class:`~collections.ExitStack` now provides a solid foundation for
-programmatic manipulation of context managers and similar cleanup
-functionality. Unlike the previous ``contextlib.nested`` API (which was
-deprecated and removed), the new API is designed to work correctly
-regardless of whether context managers acquire their resources in
-their ``__init__`` method (for example, file objects) or in their
-``__enter__`` method (for example, synchronisation objects from the
-:mod:`threading` module).
-
-(:issue:`13585`)
-
-
-crypt
------
-
-Addition of salt and modular crypt format (hashing method) and the :func:`~crypt.mksalt`
-function to the :mod:`crypt` module.
-
-(:issue:`10924`)
-
-curses
-------
-
- * If the :mod:`curses` module is linked to the ncursesw library, use Unicode
-   functions when Unicode strings or characters are passed (e.g.
-   :c:func:`waddwstr`), and bytes functions otherwise (e.g. :c:func:`waddstr`).
- * Use the locale encoding instead of ``utf-8`` to encode Unicode strings.
- * :class:`curses.window` has a new :attr:`curses.window.encoding` attribute.
- * The :class:`curses.window` class has a new :meth:`~curses.window.get_wch`
-   method to get a wide character
- * The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to
-   push a wide character so the next :meth:`~curses.window.get_wch` will return
-   it
-
-(Contributed by Iñigo Serna in :issue:`6755`)
-
-datetime
---------
-
- * Equality comparisons between naive and aware :class:`~datetime.datetime`
-   instances don't raise :exc:`TypeError`.
- * New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp
-   corresponding to the :class:`~datetime.datetime` instance.
- * The :meth:`datetime.datetime.strftime` method supports formatting years
-   older than 1000.
- * XXX The :meth:`datetime.datetime.astimezone` method can now be
-   called without arguments to convert datetime instance to the system
-   timezone.
-
-decimal
--------
-
-:issue:`7652` - integrate fast native decimal arithmetic.
-   C-module and libmpdec written by Stefan Krah.
-
-The new C version of the decimal module integrates the high speed libmpdec
-library for arbitrary precision correctly-rounded decimal floating point
-arithmetic. libmpdec conforms to IBM's General Decimal Arithmetic Specification.
-
-Performance gains range from 10x for database applications to 100x for
-numerically intensive applications. These numbers are expected gains
-for standard precisions used in decimal floating point arithmetic. Since
-the precision is user configurable, the exact figures may vary. For example,
-in integer bignum arithmetic the differences can be significantly higher.
-
-The following table is meant as an illustration. Benchmarks are available
-at http://www.bytereef.org/mpdecimal/quickstart.html.
-
-   +---------+-------------+--------------+-------------+
-   |         |  decimal.py |   _decimal   |   speedup   |
-   +=========+=============+==============+=============+
-   |   pi    |    42.02s   |    0.345s    |    120x     |
-   +---------+-------------+--------------+-------------+
-   | telco   |   172.19s   |    5.68s     |     30x     |
-   +---------+-------------+--------------+-------------+
-   | psycopg |     3.57s   |    0.29s     |     12x     |
-   +---------+-------------+--------------+-------------+
-
-Features
-~~~~~~~~
-
-* The :exc:`~decimal.FloatOperation` signal optionally enables stricter
-  semantics for mixing floats and Decimals.
-
-* If Python is compiled without threads, the C version automatically
-  disables the expensive thread local context machinery. In this case,
-  the variable :data:`~decimal.HAVE_THREADS` is set to False.
-
-API changes
-~~~~~~~~~~~
-
-* The C module has the following context limits, depending on the machine
-  architecture:
-
-   +-------------------+---------------------+------------------------------+
-   |                   |       32-bit        |            64-bit            |
-   +===================+=====================+==============================+
-   | :const:`MAX_PREC` | :const:`425000000`  | :const:`999999999999999999`  |
-   +-------------------+---------------------+------------------------------+
-   | :const:`MAX_EMAX` | :const:`425000000`  | :const:`999999999999999999`  |
-   +-------------------+---------------------+------------------------------+
-   | :const:`MIN_EMIN` | :const:`-425000000` | :const:`-999999999999999999` |
-   +-------------------+---------------------+------------------------------+
-
-* In the context templates (:class:`~decimal.DefaultContext`,
-  :class:`~decimal.BasicContext` and :class:`~decimal.ExtendedContext`)
-  the magnitude of :attr:`~decimal.Context.Emax` and
-  :attr:`~decimal.Context.Emin` has changed to :const:`999999`.
-
-* The :class:`~decimal.Decimal` constructor in decimal.py does not observe
-  the context limits and converts values with arbitrary exponents or precision
-  exactly. Since the C version has internal limits, the following scheme is
-  used: If possible, values are converted exactly, otherwise
-  :exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the
-  latter case it is always possible to use :meth:`~decimal.Context.create_decimal`
-  in order to obtain a rounded or inexact value.
-
-
-* The power function in decimal.py is always correctly-rounded. In the
-  C version, it is defined in terms of the correctly-rounded
-  :meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions,
-  but the final result is only "almost always correctly rounded".
-
-
-* In the C version, the context dictionary containing the signals is a
-  :class:`~collections.abc.MutableMapping`.  For speed reasons,
-  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always
-  refer to the same :class:`~collections.abc.MutableMapping` that the context
-  was initialized with. If a new signal dictionary is assigned,
-  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps`
-  are updated with the new values, but they do not reference the RHS
-  dictionary.
-
-
-* Pickling a :class:`~decimal.Context` produces a different output in order
-  to have a common interchange format for the Python and C versions.
-
-
-* The order of arguments in the :class:`~decimal.Context` constructor has been
-  changed to match the order displayed by :func:`repr`.
-
-
-* The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method
-  is deprecated.
+Other API Changes
+~~~~~~~~~~~~~~~~~
+
+New :class:`~email.parser.BytesHeaderParser`, added to the :mod:`~email.parser`
+module to complement :class:`~email.parser.HeaderParser` and complete the Bytes
+API.
+
+New utility functions:
+
+   * :func:`~email.utils.format_datetime`: given a :class:`~datetime.datetime`,
+     produce a string formatted for use in an email header.
+
+   * :func:`~email.utils.parsedate_to_datetime`: given a date string from
+     an email header, convert it into an aware :class:`~datetime.datetime`,
+     or a naive :class:`~datetime.datetime` if the offset is ``-0000``.
+
+   * :func:`~email.utils.localtime`: With no argument, returns the
+     current local time as an aware :class:`~datetime.datetime` using the local
+     :class:`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`,
+     converts it into an aware :class:`~datetime.datetime` using the
+     local :class:`~datetime.timezone`.
 
 
 ftplib
 ------
 
-The :class:`~ftplib.FTP_TLS` class now provides a new
-:func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to
-plaintext.  This can be useful to take advantage of firewalls that know how to
-handle NAT with non-secure FTP without opening fixed ports.
-
-(Contributed by Giampaolo Rodolà in :issue:`12139`)
+* :class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to
+  specify the ``(host, port)`` to use as the source address in the bind call
+  when creating the outgoing socket.  (Contributed by Giampaolo Rodolà
+  in :issue:`8594`.)
+
+* The :class:`~ftplib.FTP_TLS` class now provides a new
+  :func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to
+  plaintext.  This can be useful to take advantage of firewalls that know how
+  to handle NAT with non-secure FTP without opening fixed ports.  (Contributed
+  by Giampaolo Rodolà in :issue:`12139`)
+
+* Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory
+  listing format and deprecates :meth:`ftplib.FTP.nlst` and
+  :meth:`ftplib.FTP.dir`.  (Contributed by Giampaolo Rodolà in :issue:`11072`)
+
+
+functools
+---------
+
+The :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword
+argument (that defaults to ``False`` to ensure that it caches values of
+different types that compare equal in separate cache slots.  (Contributed
+by Raymond Hettinger in :issue:`13227`.)
 
 
 gc
@@ -1211,10 +1394,47 @@
 hmac
 ----
 
-A new :func:`~hmac.compare_digest` function has been added to prevent
-side channel attacks on digests through timing analysis.
-
-(Contributed by Nick Coghlan and Christian Heimes in issue:`15061`)
+A new :func:`~hmac.compare_digest` function has been added to prevent side
+channel attacks on digests through timing analysis.  (Contributed by Nick
+Coghlan and Christian Heimes in :issue:`15061`)
+
+
+http
+----
+
+:class:`http.server.BaseHTTPRequestHandler` now buffers the headers and writes
+them all at once when :meth:`~http.server.BaseHTTPRequestHandler.end_headers` is
+called.  A new method :meth:`~http.server.BaseHTTPRequestHandler.flush_headers`
+can be used to directly manage when the accumlated headers are sent.
+(Contributed by Andrew Schaaf in :issue:`3709`.)
+
+:class:`http.server` now produces valid ``HTML 4.01 strict`` output.
+(Contributed by Ezio Melotti in :issue:`13295`.)
+
+:class:`http.client.HTTPResponse` now has a
+:meth:`~http.client.HTTPResponse.readinto` method, which means it can be used
+as a :class:`io.RawIOBase` class.  (Contributed by John Kuhn in
+:issue:`13464`.)
+
+
+html
+----
+
+:class:`html.parser.HTMLParser` is now able to parse broken markup without
+raising errors, therefore the *strict* argument of the constructor and the
+:exc:`~html.parser.HTMLParseError` exception are now deprecated.
+The ability to parse broken markup is the result of a number of bug fixes that
+are also available on the latest bug fix releases of Python 2.7/3.2.
+(Contributed by Ezio Melotti in :issue:`15114`, and :issue:`14538`,
+:issue:`13993`, :issue:`13960`, :issue:`13358`, :issue:`1745761`,
+:issue:`755670`, :issue:`13357`, :issue:`12629`, :issue:`1200313`,
+:issue:`670664`, :issue:`13273`, :issue:`12888`, :issue:`7311`)
+
+A new :data:`~html.entities.html5` dictionary that maps HTML5 named character
+references to the equivalent Unicode character(s) (e.g. ``html5['gt;'] ==
+'>'``) has been added to the :mod:`html.entities` module.  The dictionary is
+now also used by :class:`~html.parser.HTMLParser`.  (Contributed by Ezio
+Melotti in :issue:`11113` and :issue:`15156`)
 
 
 imaplib
@@ -1259,13 +1479,42 @@
 underlying binary buffer.
 
 
+itertools
+---------
+
+:func:`~itertools.accumulate` now takes an optional ``func`` argument for
+providing a user-supplied binary function.
+
+
+logging
+-------
+
+The :func:`~logging.basicConfig` function now supports an optional ``handlers``
+argument taking an iterable of handlers to be added to the root logger.
+
+A class level attribute :attr:`~logging.handlers.SysLogHandler.append_nul` has
+been added to :class:`~logging.handlers.SysLogHandler` to allow control of the
+appending of the ``NUL`` (``\000``) byte to syslog records, since for some
+deamons it is required while for others it is passed through to the log.
+
+
+
 math
 ----
 
-The :mod:`math` module has a new function:
-
-  * :func:`~math.log2`: return the base-2 logarithm of *x*
-    (Written by Mark Dickinson in :issue:`11888`).
+The :mod:`math` module has a new function, :func:`~math.log2`,  which returns
+the base-2 logarithm of *x*.
+
+(Written by Mark Dickinson in :issue:`11888`).
+
+
+mmap
+----
+
+The :meth:`~mmap.mmap.read` method is now more compatible with other file-like
+objects: if the argument is omitted or specified as ``None``, it returns the
+bytes from the current file position to the end of the mapping.  (Contributed
+by Petri Lehtinen in :issue:`12021`.)
 
 
 multiprocessing
@@ -1279,6 +1528,22 @@
 multiprocessing connections.
 (Contributed by Richard Oudkerk in :issue:`4892`.)
 
+:class:`multiprocessing.Process` now accepts a ``daemon`` keyword argument
+to override the default behavior of inheriting the ``daemon`` flag from
+the parent process (:issue:`6064`).
+
+New attribute attribute :data:`multiprocessing.Process.sentinel` allows a
+program to wait on multiple :class:`~multiprocessing.Process` objects at one
+time using the appropriate OS primitives (for example, :mod:`select` on
+posix systems).
+
+New methods :meth:`multiprocessing.pool.Pool.starmap` and
+:meth:`~multiprocessing.pool.Pool.starmap_async` provide
+:func:`itertools.starmap` equivalents to the existing
+:meth:`multiprocessing.pool.Pool.map` and
+:meth:`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by Hynek
+Schlawack in :issue:`12708`.)
+
 
 nntplib
 -------
@@ -1332,12 +1597,20 @@
     :func:`~os.link`, :func:`~os.lstat`, :func:`~os.mkdir`, :func:`~os.mkfifo`,
     :func:`~os.mknod`, :func:`~os.open`, :func:`~os.readlink`, :func:`~os.remove`,
     :func:`~os.rename`, :func:`~os.replace`, :func:`~os.rmdir`, :func:`~os.stat`,
-    :func:`~os.symlink`, :func:`~os.unlink`, :func:`~os.utime`.
+    :func:`~os.symlink`, :func:`~os.unlink`, :func:`~os.utime`.  Platform
+    support for using these parameters can be checked via the sets
+    :data:`os.supports_dir_fd` and :data:`os.supports_follows_symlinks`.
 
   - The following functions now support a file descriptor for their path argument:
     :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`,
     :func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, :func:`~os.path.exists`,
-    :func:`~os.stat`, :func:`~os.statvfs`, :func:`~os.utime`.
+    :func:`~os.stat`, :func:`~os.statvfs`, :func:`~os.utime`.  Platform support
+    for this can be checked via the :data:`os.supports_fd` set.
+
+* :func:`~os.access` accepts an ``effective_ids`` keyword argument to turn on
+  using the effective uid/gid rather than the real uid/gid in the access check.
+  Platform support for this can be checked via the
+  :data:`~os.supports_effective_ids` set.
 
 * The :mod:`os` module has two new functions: :func:`~os.getpriority` and
   :func:`~os.setpriority`. They can be used to get or set process
@@ -1386,7 +1659,7 @@
     for a file.
   * :func:`~os.sync`: Force write of everything to disk.
 
-* Add some extra posix functions to the os module:
+* Additional new  posix functions:
 
   * :func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file descriptor.
   * :func:`~os.pread`: Read from a file descriptor at an offset, the file
@@ -1405,13 +1678,29 @@
 * :func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple to
   a tuple-like object with named attributes.
 
+* Some platforms now support additional constants for the :func:`~os.lseek`
+  function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``.
+
+* New constants :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`,
+  :data:`~os.RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE`,
+  :data:`~os.RTLD_NOLOAD`, and :data:`~os.RTLD_DEEPBIND` are available on
+  platforms that support them.   These are for use with the
+  :func:`sys.setdlopenflags` function, and supersede the similar constants
+  defined in :mod:`ctypes` and :mod:`DLFCN`.  (Contributed by Victor Stinner
+  in :issue:`13226`.)
+
+* :func:`os.symlink` now accepts (and ignores) the ``target_is_directory``
+  keyword argument on non-Windows platforms, to ease cross-platform support.
+
 
 pdb
 ---
 
-* Tab-completion is now available not only for command names, but also their
-  arguments.  For example, for the ``break`` command, function and file names
-  are completed.  (Contributed by Georg Brandl in :issue:`14210`)
+Tab-completion is now available not only for command names, but also their
+arguments.  For example, for the ``break`` command, function and file names
+are completed.
+
+(Contributed by Georg Brandl in :issue:`14210`)
 
 
 pickle
@@ -1420,6 +1709,7 @@
 :class:`pickle.Pickler` objects now have an optional
 :attr:`~pickle.Pickler.dispatch_table` attribute allowing to set per-pickler
 reduction functions.
+
 (Contributed by Richard Oudkerk in :issue:`14166`.)
 
 
@@ -1466,38 +1756,59 @@
   :issue:`13245`)
 
 
+select
+------
+
+Solaris and derivatives platforms have a new class :class:`select.devpoll`
+for high performance asynchronous sockets via :file:`/dev/poll`.
+(Contributed by Jesús Cea Avión in :issue:`6397`.)
+
+
+shlex
+-----
+
+The previously undocumented helper function ``quote`` from the
+:mod:`pipes` modules has been moved to the :mod:`shlex` module and
+documented.  :func:`~shlex.quote` properly escapes all characters in a string
+that might be otherwise given special meaning by the shell.
+
+
 shutil
 ------
 
-* The :mod:`shutil` module has these new fuctions:
+* New functions:
 
   * :func:`~shutil.disk_usage`: provides total, used and free disk space
     statistics. (Contributed by Giampaolo Rodolà in :issue:`12442`)
   * :func:`~shutil.chown`: allows one to change user and/or group of the given
     path also specifying the user/group names and not only their numeric
     ids. (Contributed by Sandro Tosi in :issue:`12191`)
+  * :func:`shutil.get_terminal_size`: returns the size of the terminal window
+    to which the interpreter is attached.  (Contributed by Zbigniew
+    Jędrzejewski-Szmek in :issue:`13609`.)
 
 * :func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file
   timestamps with nanosecond precision on platforms that support it.
   They also preserve file "extended attributes" on Linux.  (Contributed
   by Larry Hastings in :issue:`14127` and  :issue:`15238`.)
 
-* The new :func:`shutil.get_terminal_size` function returns the size of the
-  terminal window the interpreter is attached to.
-  (Contributed by Zbigniew Jędrzejewski-Szmek in :issue:`13609`.)
-
 * Several functions now take an optional ``symlinks`` argument: when that
   parameter is true, symlinks aren't dereferenced and the operation instead
   acts on the symlink itself (or creates one, if relevant).
   (Contributed by Hynek Schlawack in :issue:`12715`.)
 
+* When copying files to a different file system, :func:`~shutil.move` now
+  handles symlinks the way the posix ``mv`` command does, recreating the
+  symlink rather than copying the target file contents.  (Contributed by
+  Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns
+  the ``dst`` argument as its result.
+
 * :func:`~shutil.rmtree` is now resistant to symlink attacks on platforms
   which support the new ``dir_fd`` parameter in :func:`os.open` and
   :func:`os.unlink`. (Contributed by Martin von Löwis and Hynek Schlawack
   in :issue:`4489`.)
 
 
-
 signal
 ------
 
@@ -1520,14 +1831,35 @@
 * :func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError,
   instead of a RuntimeError: OSError has an errno attribute.
 
+
+smtpd
+-----
+
+The :mod:`smtpd` module now supports :rfc:`5321` (extended SMTP) and :rfc:`1870`
+(size extension).  Per the standard, these extensions are enabled if and only
+if the client initiates the session with an ``EHLO`` command.
+
+(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana
+Jauhiainen.  Substantial additional work on the patch contributed by Michele
+Orrù and Dan Boswell.  :issue:`8739`)
+
+
 smtplib
 -------
 
+The :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and
+:class:`~smtplib.LMTP` classes now accept a ``source_address`` keyword argument
+to specify the ``(host, port)`` to use as the source address in the bind call
+when creating the outgoing socket.  (Contributed by Paulo Scardine in
+:issue:`11281`.)
+
+:class:`~smtplib.SMTP` now supports the context manager protocol, allowing an
+``SMTP`` instance to be used in a ``with`` statement.  (Contributed
+by Giampaolo Rodolà in :issue:`11289`.)
+
 The :class:`~smtplib.SMTP_SSL` constructor and the :meth:`~smtplib.SMTP.starttls`
 method now accept an SSLContext parameter to control parameters of the secure
-channel.
-
-(Contributed by Kasun Herath in :issue:`8809`)
+channel.  (Contributed by Kasun Herath in :issue:`8809`)
 
 
 socket
@@ -1553,6 +1885,32 @@
   (http://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and
   http://oss.oracle.com/projects/rds/).
 
+* The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol
+  family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)
+
+* New function :func:`~socket.sethostname` allows the hostname to be set
+  on unix systems if the calling process has sufficient privileges.
+  (Contributed by Ross Lagerwall in :issue:`10866`.)
+
+
+socketserver
+------------
+
+:class:`~socketserver.BaseServer` now has an overridable method
+:meth:`~socketserver.BaseServer.service_actions` that is called by the
+:meth:`~socketserver.BaseServer.serve_forever` method in the service loop.
+:class:`~socketserver.ForkingMixIn` now uses this to clean up zombie
+child proceses.  (Contributed by Justin Warkentin in :issue:`11109`.)
+
+
+sqlite3
+-------
+
+New :class:`sqlite3.Connection` method
+:meth:`~sqlite3.Connection.set_trace_callback` can be used to capture a trace of
+all sql commands processed by sqlite.  (Contributed by Torsten Landschoff
+in :issue:`11688`.)
+
 
 ssl
 ---
@@ -1567,66 +1925,121 @@
 
 * The :mod:`ssl` module now exposes a finer-grained exception hierarchy
   in order to make it easier to inspect the various kinds of errors.
-
   (Contributed by Antoine Pitrou in :issue:`11183`)
 
 * :meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument
   to be used if the private key is encrypted.
-
   (Contributed by Adam Simpkins in :issue:`12803`)
 
 * Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is
   now supported through the :meth:`~ssl.SSLContext.load_dh_params` and
   :meth:`~ssl.SSLContext.set_ecdh_curve` methods.
-
   (Contributed by Antoine Pitrou in :issue:`13626` and :issue:`13627`)
 
 * SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method
   allowing the implementation of certain authentication mechanisms such as
-  SCRAM-SHA-1-PLUS.
-
-  (Contributed by Jacek Konieczny in :issue:`12551`)
+  SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`)
 
 * You can query the SSL compression algorithm used by an SSL socket, thanks
-  to its new :meth:`~ssl.SSLSocket.compression` method.
-
+  to its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute
+  :attr:`~ssl.OP_NO_COMPRESSION` can be used to disable compression.
   (Contributed by Antoine Pitrou in :issue:`13634`)
 
 * Support has been added for the Next Procotol Negotiation extension using
   the :meth:`ssl.SSLContext.set_npn_protocols` method.
-
   (Contributed by Colin Marc in :issue:`14204`)
 
 * SSL errors can now be introspected more easily thanks to
   :attr:`~ssl.SSLError.library` and :attr:`~ssl.SSLError.reason` attributes.
-
   (Contributed by Antoine Pitrou in :issue:`14837`)
 
+* The :func:`~ssl.get_server_certificate` function now supports IPv6.
+  (Contributed by Charles-François Natali in :issue:`11811`.)
+
+* New attribute :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting
+  SSLv3 server sockets to use the server's cipher ordering preference rather
+  than the client's (:issue:`13635`).
+
+
 stat
 ----
 
-- The undocumented tarfile.filemode function has been moved to
-  :func:`stat.filemode`. It can be used to convert a file's mode to a string of
-  the form '-rwxrwxrwx'.
-
-  (Contributed by Giampaolo Rodolà in :issue:`14807`)
+The undocumented tarfile.filemode function has been moved to
+:func:`stat.filemode`. It can be used to convert a file's mode to a string of
+the form '-rwxrwxrwx'.
+
+(Contributed by Giampaolo Rodolà in :issue:`14807`)
+
+
+struct
+------
+
+The :mod:`struct` module now supports ``ssize_t`` and ``size_t`` via the
+new codes ``n`` and ``N``, respectively.  (Contributed by Antoine Pitrou
+in :issue:`3163`.)
+
+
+subprocess
+----------
+
+Command strings can now be bytes objects on posix platforms.  (Contributed by
+Victor Stinner in :issue:`8513`.)
+
+A new constant :data:`~subprocess.DEVNULL` allows suppressing output in a
+platform-independent fashion.  (Contributed by Ross Lagerwall in
+:issue:`5870`.)
+
 
 sys
 ---
 
-* The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`struct
-  sequence` holding informations about the thread implementation.
-
-  (:issue:`11223`)
+The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`struct
+sequence` holding informations about the thread implementation
+(:issue:`11223`).
+
+
+tarfile
+-------
+
+:mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module.
+(Contributed by Lars Gustäbel in :issue:`5689`.)
+
+
+tempfile
+--------
+
+:class:`tempfile.SpooledTemporaryFile`\'s
+:meth:`~tempfile.SpooledTemporaryFile.trucate` method now accepts
+a ``size`` parameter.  (Contributed by Ryan Kelly in :issue:`9957`.)
+
 
 textwrap
 --------
 
-* The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes
-  it straightforward to add a common prefix to selected lines in a block
-  of text.
-
-  (:issue:`13857`)
+The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes
+it straightforward to add a common prefix to selected lines in a block
+of text  (:issue:`13857`).
+
+
+threading
+---------
+
+:class:`threading.Condition`, :class:`threading.Semaphore`,
+:class:`threading.BoundedSemaphore`, :class:`threading.Event`, and
+:class:`threading.Timer`, all of which used to be factory functions returning a
+class instance, are now classes and may be subclassed. (Contributed by Éric
+Araujo in :issue:`10968`).
+
+The :class:`threading.Thread` constructor now accepts a ``daemon`` keyword
+argument to override the default behavior of inheriting the ``deamon`` flag
+value from the parent thread (:issue:`6064`).
+
+The formerly private function ``_thread.get_ident`` is now available as the
+public function :func:`threading.get_ident`.  This eliminates several cases of
+direct access to the ``_thread`` module in the stdlib.  Third party code that
+used ``_thread.get_ident`` should likewise be changed to use the new public
+interface.
+
 
 time
 ----
@@ -1647,6 +2060,10 @@
   :func:`~time.clock_settime` functions with ``CLOCK_xxx`` constants.
   (Contributed by Victor Stinner in :issue:`10278`)
 
+To improve cross platform consistency, :func:`~time.sleep` now raises a
+:exc:`ValueError` when passed a negative sleep value.  Previously this was an
+error on posix, but produced an infinite sleep on Windows.
+
 
 types
 -----
@@ -1659,6 +2076,18 @@
 for PEP 3115 compliant dynamic type creation. (:issue:`14588`)
 
 
+unittest
+--------
+
+:meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, and
+:meth:`.assertWarnsRegex` now accept a keyword argument *msg* when used as
+context managers.  (Contributed by Ezio Melotti and Winston Ewert in
+:issue:`10775`)
+
+:meth:`unittest.TestCase.run` now returns the :class:`~unittest.TestResult`
+object.
+
+
 urllib
 ------
 
@@ -1674,13 +2103,13 @@
 webbrowser
 ----------
 
-The :mod:`webbrowser` module supports more browsers: Google Chrome (named
+The :mod:`webbrowser` module supports more "browsers": Google Chrome (named
 :program:`chrome`, :program:`chromium`, :program:`chrome-browser` or
-:program:`chromium-browser` depending on the version and operating system) as
-well as the the generic launchers :program:`xdg-open` from the FreeDesktop.org
-project and :program:`gvfs-open` which is the default URI handler for GNOME 3.
-
-(:issue:`13620` and :issue:`14493`)
+:program:`chromium-browser` depending on the version and operating system),
+and the generic launchers :program:`xdg-open`, from the FreeDesktop.org
+project, and :program:`gvfs-open`, which is the default URI handler for GNOME
+3.  (The former contributed by Arnaud Calmettes in :issue:`13620`, the latter
+by Matthias Klose in :issue:`14493`)
 
 
 xml.etree.ElementTree
@@ -1695,6 +2124,18 @@
 and a more detailed reference.
 
 
+zlib
+----
+
+New attribute :attr:`zlib.Decompress.eof` makes it possible to distinguish
+between a properly-formed compressed stream and an incomplete or truncated one.
+(Contributed by Nadeem Vawda in :issue:`12646`.)
+
+New attribute :attr:`zlib.ZLIB_RUNTIME_VERSION` reports the version string of
+the underlying ``zlib`` library that is loaded at runtime.  (Contributed by
+Torsten Landschoff in :issue:`12306`.)
+
+
 Optimizations
 =============
 
@@ -1750,6 +2191,9 @@
     * :c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, :c:macro:`PyUnicode_WRITE`
     * :c:macro:`PyUnicode_MAX_CHAR_VALUE`
 
+* :c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the ``c``
+  format (:issue:`12380`).
+
 
 
 Deprecated
@@ -1763,17 +2207,21 @@
 Windows 2000 and Windows platforms which set ``COMSPEC`` to ``command.com``
 are no longer supported due to maintenance burden.
 
+OSF support, which was deprecated in 3.2, has been completely removed.
+
 
 Deprecated Python modules, functions and methods
 ------------------------------------------------
 
+* Passing a non-empty string to ``object.__format__()`` is deprecated, and
+  will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`).
 * The ``unicode_internal`` codec has been deprecated because of the
   :pep:`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32
   (``utf-32-le`` or ``utf-32-be``)
 * :meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use
   :meth:`ftplib.FTP.mlsd`
 * :func:`platform.popen`: use the :mod:`subprocess` module. Check especially
-  the :ref:`subprocess-replacements` section.
+  the :ref:`subprocess-replacements` section (:issue:`11377`).
 * :issue:`13374`: The Windows bytes API has been deprecated in the :mod:`os`
   module. Use Unicode filenames, instead of bytes filenames, to not depend on
   the ANSI code page anymore and to support any filename.
@@ -1792,6 +2240,15 @@
   * :class:`abc.abstractstaticmethod` has been deprecated, use
     :class:`staticmethod` with :func:`abc.abstractmethod` instead.
 
+* :mod:`importlib` package:
+
+  * :meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour of
+    :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store
+    both the modification time and size of the source file the bytecode file was
+    compiled from.
+
+
+
 
 
 Deprecated functions and types of the C API
@@ -1803,58 +2260,58 @@
 Unicode functions and methods using :c:type:`Py_UNICODE` and
 :c:type:`Py_UNICODE*` types:
 
- * :c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or
-   :c:func:`PyUnicode_FromKindAndData`
- * :c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`,
-   :c:func:`PyUnicode_AsUnicodeAndSize`: use :c:func:`PyUnicode_AsWideCharString`
- * :c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with
-   :c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`
- * :c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use
-   :c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`
- * :c:macro:`PyUnicode_GET_DATA_SIZE`: use
-   ``PyUnicode_GET_LENGTH(str) * PyUnicode_KIND(str)`` (only work on ready
-   strings)
- * :c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or
-   :c:func:`PyUnicode_AsWideCharString`
- * :c:func:`PyUnicode_GetMax`
+* :c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or
+  :c:func:`PyUnicode_FromKindAndData`
+* :c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`,
+  :c:func:`PyUnicode_AsUnicodeAndSize`: use :c:func:`PyUnicode_AsWideCharString`
+* :c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with
+  :c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`
+* :c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use
+  :c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`
+* :c:macro:`PyUnicode_GET_DATA_SIZE`: use
+  ``PyUnicode_GET_LENGTH(str) * PyUnicode_KIND(str)`` (only work on ready
+  strings)
+* :c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or
+  :c:func:`PyUnicode_AsWideCharString`
+* :c:func:`PyUnicode_GetMax`
 
 
 Functions and macros manipulating Py_UNICODE* strings:
 
- * :c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or
-   :c:macro:`PyUnicode_GET_LENGTH`
- * :c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or
-   :c:func:`PyUnicode_FromFormat`
- * :c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`,
-   :c:macro:`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or
-   :c:func:`PyUnicode_Substring`
- * :c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`
- * :c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`
- * :c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use
-   :c:func:`PyUnicode_FindChar`
- * :c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`
- * :c:macro:`Py_UNICODE_MATCH`
+* :c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or
+  :c:macro:`PyUnicode_GET_LENGTH`
+* :c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or
+  :c:func:`PyUnicode_FromFormat`
+* :c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`,
+  :c:macro:`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or
+  :c:func:`PyUnicode_Substring`
+* :c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`
+* :c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`
+* :c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use
+  :c:func:`PyUnicode_FindChar`
+* :c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`
+* :c:macro:`Py_UNICODE_MATCH`
 
 Encoders:
 
- * :c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`
- * :c:func:`PyUnicode_EncodeUTF7`
- * :c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or
-   :c:func:`PyUnicode_AsUTF8String`
- * :c:func:`PyUnicode_EncodeUTF32`
- * :c:func:`PyUnicode_EncodeUTF16`
- * :c:func:`PyUnicode_EncodeUnicodeEscape:` use
-   :c:func:`PyUnicode_AsUnicodeEscapeString`
- * :c:func:`PyUnicode_EncodeRawUnicodeEscape:` use
-   :c:func:`PyUnicode_AsRawUnicodeEscapeString`
- * :c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`
- * :c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`
- * :c:func:`PyUnicode_EncodeCharmap`
- * :c:func:`PyUnicode_TranslateCharmap`
- * :c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or
-   :c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)
- * :c:func:`PyUnicode_EncodeDecimal`,
-   :c:func:`PyUnicode_TransformDecimalToASCII`
+* :c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`
+* :c:func:`PyUnicode_EncodeUTF7`
+* :c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or
+  :c:func:`PyUnicode_AsUTF8String`
+* :c:func:`PyUnicode_EncodeUTF32`
+* :c:func:`PyUnicode_EncodeUTF16`
+* :c:func:`PyUnicode_EncodeUnicodeEscape:` use
+  :c:func:`PyUnicode_AsUnicodeEscapeString`
+* :c:func:`PyUnicode_EncodeRawUnicodeEscape:` use
+  :c:func:`PyUnicode_AsRawUnicodeEscapeString`
+* :c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`
+* :c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`
+* :c:func:`PyUnicode_EncodeCharmap`
+* :c:func:`PyUnicode_TranslateCharmap`
+* :c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or
+  :c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)
+* :c:func:`PyUnicode_EncodeDecimal`,
+  :c:func:`PyUnicode_TransformDecimalToASCII`
 
 
 Deprecated features
@@ -1900,7 +2357,7 @@
   updated to use the full name of the module instead of just the tail of the
   name.
 
-* The **index** argument to :func:`__import__` now defaults to 0 instead of -1
+* The *index* argument to :func:`__import__` now defaults to 0 instead of -1
   and no longer support negative values. It was an oversight when :pep:`328` was
   implemented that the default value remained -1. If you need to continue to
   perform a relative import followed by an absolute import, then perform the
@@ -1923,11 +2380,6 @@
   :attr:`sys.path_importer_cache` where it repesents the use of implicit
   finders, but semantically it should not change anything.
 
-* :meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour of
-  :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store
-  both the modification time and size of the source file the bytecode file was
-  compiled from.
-
 * :class:`importlib.abc.Finder` no longer specifies a `find_module()` abstract
   method that must be implemented. If you were relying on subclasses to
   implement that method, make sure to check for the method's existence first.
@@ -1942,6 +2394,59 @@
   special case the standard import hooks so they are still supported even
   though they do not provide the non-standard ``iter_modules()`` method.
 
+* A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by
+  :func:`email.header.decode_header` has been fixed.  Code that uses the
+  standard idiom to convert encoded headers into unicode
+  (``str(make_header(decode_header(h))``) will see no change, but code that
+  looks at the individual tuples returned by decode_header will see that
+  whitespace that precedes or follows ``ASCII`` sections is now included in the
+  ``ASCII`` section.  Code that builds headers using ``make_header`` should
+  also continue to work without change, since ``make_header`` continues to add
+  whitespace between ``ASCII`` and non-``ASCII`` sections if it is not already
+  present in the input strings.
+
+* :func:`email.utils.formataddr` now does the correct content transfer
+  encoding when passed non-``ASCII`` display names.  Any code that depended on
+  the previous buggy behavior that preserved the non-``ASCII`` unicode in the
+  formatted output string will need to be changed (:issue:`1690608`).
+
+* :meth:`poplib.POP3.quit` may now raise protocol errors like all other
+  ``poplib`` methods.  Code that assumes ``quit`` does not raise
+  :exc:`poplib.error_proto` errors may need to be changed if errors on ``quit``
+  are encountered by a particular application (:issue:`11291`).
+
+* The ``strict`` argument to :class:`email.parser.Parser`, deprecated since
+  Python 2.4, has finally been removed.
+
+* The deprecated method ``unittest.TestCase.assertSameElements`` has been
+  removed.
+
+* The deprecated variable ``time.accept2dyear`` has been removed.
+
+* The deprecated ``Context._clamp`` attribute has been removed from the
+  :mod:`decimal` module.  It was previously replaced by the public attribute
+  :attr:`~decimal.Context.clamp`.  (See :issue:`8540`.)
+
+* The undocumented internal helper class ``SSLFakeFile`` has been removed
+  from :mod:`smtplib`, since its functionality has long been provided directly
+  by :meth:`socket.socket.makefile`.
+
+* Passing a negative value to :func:`time.sleep` on Windows now raises an
+  error instead of sleeping forever.  It has always raised an error on posix.
+
+* The ``ast.__version__`` constant has been removed.  If you need to
+  make decisions affected by the AST version, use :attr:`sys.version_info`
+  to make the decision.
+
+* Code that used to work around the fact that the :mod:`threading` module used
+  factory functions by subclassing the private classes will need to change to
+  subclass the now-public classes.
+
+* The undocumented debugging machinery in the threading module has been
+  removed, simplifying the code.  This should have no effect on production
+  code, but is mentioned here in case any application debug frameworks were
+  interacting with it (:issue:`13550`).
+
 
 Porting C code
 --------------
@@ -1968,9 +2473,9 @@
 
 * :c:func:`PyImport_GetMagicNumber` now returns -1 upon failure.
 
-* As a negative value for the **level** argument to :func:`__import__` is no
+* As a negative value for the *level* argument to :func:`__import__` is no
   longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`.
-  This also means that the value of **level** used by
+  This also means that the value of *level* used by
   :c:func:`PyImport_ImportModuleEx` is now 0 instead of -1.
 
 
@@ -1988,14 +2493,16 @@
   (implemented in :issue:`14040`.)
 
 
-Other issues
-------------
-
-.. Issue #11591: When :program:`python` was started with :option:`-S`,
-   ``import site`` will not add site-specific paths to the module search
-   paths.  In previous versions, it did.  See changeset for doc changes in
-   various files.  Contributed by Carl Meyer with editions by Éric Araujo.
-
-.. Issue #10998: the -Q command-line flag and related artifacts have been
-   removed.  Code checking sys.flags.division_warning will need updating.
-   Contributed by Éric Araujo.
+Command Line Switch Changes
+---------------------------
+
+* The -Q command-line flag and related artifacts have been removed.  Code
+  checking sys.flags.division_warning will need updating.
+
+  (:issue:`10998`, contributed by Éric Araujo.)
+
+* When :program:`python` is started with :option:`-S`, ``import site``
+  will no longer add site-specific paths to the module search paths.  In
+  previous versions, it did.
+
+  (:issue:`11591`, contributed by Carl Meyer with editions by Éric Araujo.)
diff -r bd8afb90ebf2 Doc/whatsnew/changelog.rst
--- /dev/null
+++ b/Doc/whatsnew/changelog.rst
@@ -0,0 +1,6 @@
++++++++++
+Changelog
++++++++++
+
+.. miscnews:: ../../Misc/NEWS
+
diff -r bd8afb90ebf2 Doc/whatsnew/index.rst
--- a/Doc/whatsnew/index.rst
+++ b/Doc/whatsnew/index.rst
@@ -23,3 +23,11 @@
    2.2.rst
    2.1.rst
    2.0.rst
+
+The "Changelog" is a HTML version of the file :source:`Misc/NEWS` which
+contains *all* nontrivial changes to Python for the current version.
+
+.. toctree::
+   :maxdepth: 2
+
+   changelog.rst
diff -r bd8afb90ebf2 Include/frameobject.h
--- a/Include/frameobject.h
+++ b/Include/frameobject.h
@@ -33,8 +33,8 @@
            frame (which shouldn't be impacted when the generator "yields"
            from an except handler).
            These three fields exist exactly for that, and are unused for
-           non-generator frames. See the SAVE_EXC_STATE and SWAP_EXC_STATE
-           macros in ceval.c for details of their use. */
+           non-generator frames. See the save_exc_state and swap_exc_state
+           functions in ceval.c for details of their use. */
     PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;
 
     PyThreadState *f_tstate;
diff -r bd8afb90ebf2 Include/object.h
--- a/Include/object.h
+++ b/Include/object.h
@@ -962,7 +962,7 @@
 */
 
 /* This is the old private API, invoked by the macros before 3.2.4.
-   Kept for binary compatibility of extensions. */
+   Kept for binary compatibility of extensions using the stable ABI. */
 PyAPI_FUNC(void) _PyTrash_deposit_object(PyObject*);
 PyAPI_FUNC(void) _PyTrash_destroy_chain(void);
 PyAPI_DATA(int) _PyTrash_delete_nesting;
diff -r bd8afb90ebf2 Include/objimpl.h
--- a/Include/objimpl.h
+++ b/Include/objimpl.h
@@ -181,12 +181,9 @@
 #endif
 
 #define _PyObject_VAR_SIZE(typeobj, nitems)     \
-    (size_t)                                    \
-    ( ( (typeobj)->tp_basicsize +               \
-        (nitems)*(typeobj)->tp_itemsize +       \
-        (SIZEOF_VOID_P - 1)                     \
-      ) & ~(SIZEOF_VOID_P - 1)                  \
-    )
+    _Py_SIZE_ROUND_UP((typeobj)->tp_basicsize + \
+        (nitems)*(typeobj)->tp_itemsize,        \
+        SIZEOF_VOID_P)
 
 #define PyObject_NEW(type, typeobj) \
 ( (type *) PyObject_Init( \
diff -r bd8afb90ebf2 Include/osdefs.h
--- a/Include/osdefs.h
+++ b/Include/osdefs.h
@@ -29,6 +29,14 @@
 #endif
 
 /* Max pathname length */
+#ifdef __hpux
+#include <sys/param.h>
+#include <limits.h>
+#ifndef PATH_MAX
+#define PATH_MAX MAXPATHLEN
+#endif
+#endif
+
 #ifndef MAXPATHLEN
 #if defined(PATH_MAX) && PATH_MAX > 1024
 #define MAXPATHLEN PATH_MAX
diff -r bd8afb90ebf2 Include/pyfpe.h
--- a/Include/pyfpe.h
+++ b/Include/pyfpe.h
@@ -4,8 +4,8 @@
 extern "C" {
 #endif
 /*
-     ---------------------------------------------------------------------  
-    /                       Copyright (c) 1996.                           \ 
+     ---------------------------------------------------------------------
+    /                       Copyright (c) 1996.                           \
    |          The Regents of the University of California.                 |
    |                        All rights reserved.                           |
    |                                                                       |
@@ -37,8 +37,8 @@
    |   opinions  of authors expressed herein do not necessarily state or   |
    |   reflect those of the United States Government or  the  University   |
    |   of  California,  and shall not be used for advertising or product   |
-    \  endorsement purposes.                                              / 
-     ---------------------------------------------------------------------  
+    \  endorsement purposes.                                              /
+     ---------------------------------------------------------------------
 */
 
 /*
diff -r bd8afb90ebf2 Include/pymacro.h
--- a/Include/pymacro.h
+++ b/Include/pymacro.h
@@ -52,4 +52,18 @@
 #define PyDoc_STR(str) ""
 #endif
 
+/* Below "a" is a power of 2. */
+/* Round down size "n" to be a multiple of "a". */
+#define _Py_SIZE_ROUND_DOWN(n, a) ((size_t)(n) & ~(size_t)((a) - 1))
+/* Round up size "n" to be a multiple of "a". */
+#define _Py_SIZE_ROUND_UP(n, a) (((size_t)(n) + \
+        (size_t)((a) - 1)) & ~(size_t)((a) - 1))
+/* Round pointer "p" down to the closest "a"-aligned address <= "p". */
+#define _Py_ALIGN_DOWN(p, a) ((void *)((Py_uintptr_t)(p) & ~(Py_uintptr_t)((a) - 1)))
+/* Round pointer "p" up to the closest "a"-aligned address >= "p". */
+#define _Py_ALIGN_UP(p, a) ((void *)(((Py_uintptr_t)(p) + \
+        (Py_uintptr_t)((a) - 1)) & ~(Py_uintptr_t)((a) - 1)))
+/* Check if pointer "p" is aligned to "a"-bytes boundary. */
+#define _Py_IS_ALIGNED(p, a) (!((Py_uintptr_t)(p) & (Py_uintptr_t)((a) - 1)))
+
 #endif /* Py_PYMACRO_H */
diff -r bd8afb90ebf2 Include/pyport.h
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -87,9 +87,12 @@
  * uint32_t to be such a type unless stdint.h or inttypes.h defines uint32_t.
  * However, it doesn't set HAVE_UINT32_T, so we do that here.
  */
-#if (defined UINT32_MAX || defined uint32_t)
+#ifdef uint32_t
+#define HAVE_UINT32_T 1
+#endif
+
+#ifdef HAVE_UINT32_T
 #ifndef PY_UINT32_T
-#define HAVE_UINT32_T 1
 #define PY_UINT32_T uint32_t
 #endif
 #endif
@@ -97,23 +100,33 @@
 /* Macros for a 64-bit unsigned integer type; used for type 'twodigits' in the
  * long integer implementation, when 30-bit digits are enabled.
  */
-#if (defined UINT64_MAX || defined uint64_t)
+#ifdef uint64_t
+#define HAVE_UINT64_T 1
+#endif
+
+#ifdef HAVE_UINT64_T
 #ifndef PY_UINT64_T
-#define HAVE_UINT64_T 1
 #define PY_UINT64_T uint64_t
 #endif
 #endif
 
 /* Signed variants of the above */
-#if (defined INT32_MAX || defined int32_t)
+#ifdef int32_t
+#define HAVE_INT32_T 1
+#endif
+
+#ifdef HAVE_INT32_T
 #ifndef PY_INT32_T
-#define HAVE_INT32_T 1
 #define PY_INT32_T int32_t
 #endif
 #endif
-#if (defined INT64_MAX || defined int64_t)
+
+#ifdef int64_t
+#define HAVE_INT64_T 1
+#endif
+
+#ifdef HAVE_INT64_T
 #ifndef PY_INT64_T
-#define HAVE_INT64_T 1
 #define PY_INT64_T int64_t
 #endif
 #endif
@@ -132,7 +145,7 @@
 #endif
 
 /* Prime multiplier used in string and various other hashes. */
-#define _PyHASH_MULTIPLIER 1000003  /* 0xf4243 */
+#define _PyHASH_MULTIPLIER 1000003UL  /* 0xf4243 */
 
 /* Parameters used for the numeric hash implementation.  See notes for
    _Py_HashDouble in Objects/object.c.  Numeric hashes are based on
@@ -649,7 +662,7 @@
 /* On QNX 6, struct termio must be declared by including sys/termio.h
    if TCGETA, TCSETA, TCSETAW, or TCSETAF are used.  sys/termio.h must
    be included before termios.h or it will generate an error. */
-#ifdef HAVE_SYS_TERMIO_H
+#if defined(HAVE_SYS_TERMIO_H) && !defined(__hpux)
 #include <sys/termio.h>
 #endif
 
diff -r bd8afb90ebf2 Include/symtable.h
--- a/Include/symtable.h
+++ b/Include/symtable.h
@@ -30,6 +30,8 @@
     PyObject *st_private;           /* name of current class or NULL */
     PyFutureFeatures *st_future;    /* module's future features that affect
                                        the symbol table */
+    int recursion_depth;            /* current recursion depth */
+    int recursion_limit;            /* recursion limit */
 };
 
 typedef struct _symtable_entry {
diff -r bd8afb90ebf2 Include/unicodeobject.h
--- a/Include/unicodeobject.h
+++ b/Include/unicodeobject.h
@@ -1022,8 +1022,7 @@
 
 /* Create a Unicode Object from the given Unicode code point ordinal.
 
-   The ordinal must be in range(0x10000) on narrow Python builds
-   (UCS2), and range(0x110000) on wide builds (UCS4). A ValueError is
+   The ordinal must be in range(0x110000). A ValueError is
    raised in case it is not.
 
 */
diff -r bd8afb90ebf2 Include/weakrefobject.h
--- a/Include/weakrefobject.h
+++ b/Include/weakrefobject.h
@@ -70,7 +70,17 @@
 PyAPI_FUNC(void) _PyWeakref_ClearRef(PyWeakReference *self);
 #endif
 
-#define PyWeakref_GET_OBJECT(ref) (((PyWeakReference *)(ref))->wr_object)
+/* Explanation for the Py_REFCNT() check: when a weakref's target is part
+   of a long chain of deallocations which triggers the trashcan mechanism,
+   clearing the weakrefs can be delayed long after the target's refcount
+   has dropped to zero.  In the meantime, code accessing the weakref will
+   be able to "see" the target object even though it is supposed to be
+   unreachable.  See issue #16602. */
+
+#define PyWeakref_GET_OBJECT(ref)                           \
+    (Py_REFCNT(((PyWeakReference *)(ref))->wr_object) > 0   \
+     ? ((PyWeakReference *)(ref))->wr_object                \
+     : Py_None)
 
 
 #ifdef __cplusplus
diff -r bd8afb90ebf2 Lib/_pyio.py
--- a/Lib/_pyio.py
+++ b/Lib/_pyio.py
@@ -895,12 +895,18 @@
         return pos
 
     def readable(self):
+        if self.closed:
+            raise ValueError("I/O operation on closed file.")
         return True
 
     def writable(self):
+        if self.closed:
+            raise ValueError("I/O operation on closed file.")
         return True
 
     def seekable(self):
+        if self.closed:
+            raise ValueError("I/O operation on closed file.")
         return True
 
 
@@ -1562,6 +1568,8 @@
         return self._buffer
 
     def seekable(self):
+        if self.closed:
+            raise ValueError("I/O operation on closed file.")
         return self._seekable
 
     def readable(self):
diff -r bd8afb90ebf2 Lib/argparse.py
--- a/Lib/argparse.py
+++ b/Lib/argparse.py
@@ -1725,10 +1725,7 @@
             if action.dest is not SUPPRESS:
                 if not hasattr(namespace, action.dest):
                     if action.default is not SUPPRESS:
-                        default = action.default
-                        if isinstance(action.default, str):
-                            default = self._get_value(action, default)
-                        setattr(namespace, action.dest, default)
+                        setattr(namespace, action.dest, action.default)
 
         # add any parser defaults that aren't present
         for dest in self._defaults:
@@ -1951,9 +1948,25 @@
         # if we didn't consume all the argument strings, there were extras
         extras.extend(arg_strings[stop_index:])
 
-        # make sure all required actions were present
-        required_actions = [_get_action_name(action) for action in self._actions
-                            if action.required and action not in seen_actions]
+        # make sure all required actions were present and also convert
+        # action defaults which were not given as arguments
+        required_actions = []
+        for action in self._actions:
+            if action not in seen_actions:
+                if action.required:
+                    required_actions.append(_get_action_name(action))
+                else:
+                    # Convert action default now instead of doing it before
+                    # parsing arguments to avoid calling convert functions
+                    # twice (which may fail) if the argument was given, but
+                    # only if it was defined already in the namespace
+                    if (action.default is not None and
+                        isinstance(action.default, str) and
+                        hasattr(namespace, action.dest) and
+                        action.default is getattr(namespace, action.dest)):
+                        setattr(namespace, action.dest,
+                                self._get_value(action, action.default))
+
         if required_actions:
             self.error(_('the following arguments are required: %s') %
                        ', '.join(required_actions))
diff -r bd8afb90ebf2 Lib/asyncore.py
--- a/Lib/asyncore.py
+++ b/Lib/asyncore.py
@@ -385,7 +385,7 @@
             else:
                 return data
         except socket.error as why:
-            # winsock sometimes throws ENOTCONN
+            # winsock sometimes raises ENOTCONN
             if why.args[0] in _DISCONNECTED:
                 self.handle_close()
                 return b''
diff -r bd8afb90ebf2 Lib/bz2.py
--- a/Lib/bz2.py
+++ b/Lib/bz2.py
@@ -79,7 +79,8 @@
             mode = "rb"
             mode_code = _MODE_READ
             self._decompressor = BZ2Decompressor()
-            self._buffer = None
+            self._buffer = b""
+            self._buffer_offset = 0
         elif mode in ("w", "wb"):
             mode = "wb"
             mode_code = _MODE_WRITE
@@ -124,7 +125,8 @@
                     self._fp = None
                     self._closefp = False
                     self._mode = _MODE_CLOSED
-                    self._buffer = None
+                    self._buffer = b""
+                    self._buffer_offset = 0
 
     @property
     def closed(self):
@@ -157,15 +159,18 @@
             raise ValueError("I/O operation on closed file")
 
     def _check_can_read(self):
-        if not self.readable():
+        if self._mode not in (_MODE_READ, _MODE_READ_EOF):
+            self._check_not_closed()
             raise io.UnsupportedOperation("File not open for reading")
 
     def _check_can_write(self):
-        if not self.writable():
+        if self._mode != _MODE_WRITE:
+            self._check_not_closed()
             raise io.UnsupportedOperation("File not open for writing")
 
     def _check_can_seek(self):
-        if not self.readable():
+        if self._mode not in (_MODE_READ, _MODE_READ_EOF):
+            self._check_not_closed()
             raise io.UnsupportedOperation("Seeking is only supported "
                                           "on files open for reading")
         if not self._fp.seekable():
@@ -174,16 +179,13 @@
 
     # Fill the readahead buffer if it is empty. Returns False on EOF.
     def _fill_buffer(self):
+        if self._mode == _MODE_READ_EOF:
+            return False
         # Depending on the input data, our call to the decompressor may not
         # return any data. In this case, try again after reading another block.
-        while True:
-            if self._buffer:
-                return True
-
-            if self._decompressor.unused_data:
-                rawblock = self._decompressor.unused_data
-            else:
-                rawblock = self._fp.read(_BUFFER_SIZE)
+        while self._buffer_offset == len(self._buffer):
+            rawblock = (self._decompressor.unused_data or
+                        self._fp.read(_BUFFER_SIZE))
 
             if not rawblock:
                 if self._decompressor.eof:
@@ -199,30 +201,48 @@
                 self._decompressor = BZ2Decompressor()
 
             self._buffer = self._decompressor.decompress(rawblock)
+            self._buffer_offset = 0
+        return True
 
     # Read data until EOF.
     # If return_data is false, consume the data without returning it.
     def _read_all(self, return_data=True):
+        # The loop assumes that _buffer_offset is 0. Ensure that this is true.
+        self._buffer = self._buffer[self._buffer_offset:]
+        self._buffer_offset = 0
+
         blocks = []
         while self._fill_buffer():
             if return_data:
                 blocks.append(self._buffer)
             self._pos += len(self._buffer)
-            self._buffer = None
+            self._buffer = b""
         if return_data:
             return b"".join(blocks)
 
     # Read a block of up to n bytes.
     # If return_data is false, consume the data without returning it.
     def _read_block(self, n, return_data=True):
+        # If we have enough data buffered, return immediately.
+        end = self._buffer_offset + n
+        if end <= len(self._buffer):
+            data = self._buffer[self._buffer_offset : end]
+            self._buffer_offset = end
+            self._pos += len(data)
+            return data if return_data else None
+
+        # The loop assumes that _buffer_offset is 0. Ensure that this is true.
+        self._buffer = self._buffer[self._buffer_offset:]
+        self._buffer_offset = 0
+
         blocks = []
         while n > 0 and self._fill_buffer():
             if n < len(self._buffer):
                 data = self._buffer[:n]
-                self._buffer = self._buffer[n:]
+                self._buffer_offset = n
             else:
                 data = self._buffer
-                self._buffer = None
+                self._buffer = b""
             if return_data:
                 blocks.append(data)
             self._pos += len(data)
@@ -238,9 +258,9 @@
         """
         with self._lock:
             self._check_can_read()
-            if self._mode == _MODE_READ_EOF or not self._fill_buffer():
+            if not self._fill_buffer():
                 return b""
-            return self._buffer
+            return self._buffer[self._buffer_offset:]
 
     def read(self, size=-1):
         """Read up to size uncompressed bytes from the file.
@@ -250,7 +270,7 @@
         """
         with self._lock:
             self._check_can_read()
-            if self._mode == _MODE_READ_EOF or size == 0:
+            if size == 0:
                 return b""
             elif size < 0:
                 return self._read_all()
@@ -268,15 +288,19 @@
         # In this case we make multiple reads, to avoid returning b"".
         with self._lock:
             self._check_can_read()
-            if (size == 0 or self._mode == _MODE_READ_EOF or
-                not self._fill_buffer()):
+            if (size == 0 or
+                # Only call _fill_buffer() if the buffer is actually empty.
+                # This gives a significant speedup if *size* is small.
+                (self._buffer_offset == len(self._buffer) and not self._fill_buffer())):
                 return b""
-            if 0 < size < len(self._buffer):
-                data = self._buffer[:size]
-                self._buffer = self._buffer[size:]
+            if size > 0:
+                data = self._buffer[self._buffer_offset :
+                                    self._buffer_offset + size]
+                self._buffer_offset += len(data)
             else:
-                data = self._buffer
-                self._buffer = None
+                data = self._buffer[self._buffer_offset:]
+                self._buffer = b""
+                self._buffer_offset = 0
             self._pos += len(data)
             return data
 
@@ -295,10 +319,20 @@
         non-negative, no more than size bytes will be read (in which
         case the line may be incomplete). Returns b'' if already at EOF.
         """
-        if not hasattr(size, "__index__"):
-            raise TypeError("Integer argument expected")
-        size = size.__index__()
+        if not isinstance(size, int):
+            if not hasattr(size, "__index__"):
+                raise TypeError("Integer argument expected")
+            size = size.__index__()
         with self._lock:
+            self._check_can_read()
+            # Shortcut for the common case - the whole line is in the buffer.
+            if size < 0:
+                end = self._buffer.find(b"\n", self._buffer_offset) + 1
+                if end > 0:
+                    line = self._buffer[self._buffer_offset : end]
+                    self._buffer_offset = end
+                    self._pos += len(line)
+                    return line
             return io.BufferedIOBase.readline(self, size)
 
     def readlines(self, size=-1):
@@ -308,9 +342,10 @@
         further lines will be read once the total size of the lines read
         so far equals or exceeds size.
         """
-        if not hasattr(size, "__index__"):
-            raise TypeError("Integer argument expected")
-        size = size.__index__()
+        if not isinstance(size, int):
+            if not hasattr(size, "__index__"):
+                raise TypeError("Integer argument expected")
+            size = size.__index__()
         with self._lock:
             return io.BufferedIOBase.readlines(self, size)
 
@@ -345,7 +380,8 @@
         self._mode = _MODE_READ
         self._pos = 0
         self._decompressor = BZ2Decompressor()
-        self._buffer = None
+        self._buffer = b""
+        self._buffer_offset = 0
 
     def seek(self, offset, whence=0):
         """Change the file position.
@@ -385,8 +421,7 @@
                 offset -= self._pos
 
             # Read and discard data until we reach the desired position.
-            if self._mode != _MODE_READ_EOF:
-                self._read_block(offset, return_data=False)
+            self._read_block(offset, return_data=False)
 
             return self._pos
 
diff -r bd8afb90ebf2 Lib/calendar.py
--- a/Lib/calendar.py
+++ b/Lib/calendar.py
@@ -161,7 +161,11 @@
         oneday = datetime.timedelta(days=1)
         while True:
             yield date
-            date += oneday
+            try:
+                date += oneday
+            except OverflowError:
+                # Adding one day could fail after datetime.MAXYEAR
+                break
             if date.month != month and date.weekday() == self.firstweekday:
                 break
 
diff -r bd8afb90ebf2 Lib/cgitb.py
--- a/Lib/cgitb.py
+++ b/Lib/cgitb.py
@@ -292,14 +292,19 @@
         if self.logdir is not None:
             suffix = ['.txt', '.html'][self.format=="html"]
             (fd, path) = tempfile.mkstemp(suffix=suffix, dir=self.logdir)
+
             try:
                 file = os.fdopen(fd, 'w')
                 file.write(doc)
                 file.close()
-                msg = '<p> %s contains the description of this error.' % path
+                msg = '%s contains the description of this error.' % path
             except:
-                msg = '<p> Tried to save traceback to %s, but failed.' % path
-            self.file.write(msg + '\n')
+                msg = 'Tried to save traceback to %s, but failed.' % path
+
+            if self.format == 'html':
+                self.file.write('<p>%s</p>\n' % msg)
+            else:
+                self.file.write(msg + '\n')
         try:
             self.file.flush()
         except: pass
diff -r bd8afb90ebf2 Lib/codecs.py
--- a/Lib/codecs.py
+++ b/Lib/codecs.py
@@ -461,7 +461,7 @@
 
         # read until we get the required number of characters (if available)
         while True:
-            # can the request can be satisfied from the character buffer?
+            # can the request be satisfied from the character buffer?
             if chars < 0:
                 if size < 0:
                     if self.charbuffer:
diff -r bd8afb90ebf2 Lib/collections/abc.py
--- a/Lib/collections/abc.py
+++ b/Lib/collections/abc.py
@@ -200,12 +200,12 @@
     def __gt__(self, other):
         if not isinstance(other, Set):
             return NotImplemented
-        return other < self
+        return other.__lt__(self)
 
     def __ge__(self, other):
         if not isinstance(other, Set):
             return NotImplemented
-        return other <= self
+        return other.__le__(self)
 
     def __eq__(self, other):
         if not isinstance(other, Set):
diff -r bd8afb90ebf2 Lib/contextlib.py
--- a/Lib/contextlib.py
+++ b/Lib/contextlib.py
@@ -151,7 +151,7 @@
             files = [stack.enter_context(open(fname)) for fname in filenames]
             # All opened files will automatically be closed at the end of
             # the with statement, even if attempts to open files later
-            # in the list throw an exception
+            # in the list raise an exception
 
     """
     def __init__(self):
diff -r bd8afb90ebf2 Lib/ctypes/__init__.py
--- a/Lib/ctypes/__init__.py
+++ b/Lib/ctypes/__init__.py
@@ -456,7 +456,7 @@
             code = GetLastError()
         if descr is None:
             descr = FormatError(code).strip()
-        return WindowsError(code, descr)
+        return WindowsError(None, descr, None, code)
 
 if sizeof(c_uint) == sizeof(c_void_p):
     c_size_t = c_uint
diff -r bd8afb90ebf2 Lib/ctypes/test/test_win32.py
--- a/Lib/ctypes/test/test_win32.py
+++ b/Lib/ctypes/test/test_win32.py
@@ -67,6 +67,28 @@
             self.assertEqual(ex.text, "text")
             self.assertEqual(ex.details, ("details",))
 
+    class TestWinError(unittest.TestCase):
+        def test_winerror(self):
+            # see Issue 16169
+            import errno
+            ERROR_INVALID_PARAMETER = 87
+            msg = FormatError(ERROR_INVALID_PARAMETER).strip()
+            args = (errno.EINVAL, msg, None, ERROR_INVALID_PARAMETER)
+
+            e = WinError(ERROR_INVALID_PARAMETER)
+            self.assertEqual(e.args, args)
+            self.assertEqual(e.errno, errno.EINVAL)
+            self.assertEqual(e.winerror, ERROR_INVALID_PARAMETER)
+
+            windll.kernel32.SetLastError(ERROR_INVALID_PARAMETER)
+            try:
+                raise WinError()
+            except OSError as exc:
+                e = exc
+            self.assertEqual(e.args, args)
+            self.assertEqual(e.errno, errno.EINVAL)
+            self.assertEqual(e.winerror, ERROR_INVALID_PARAMETER)
+
 class Structures(unittest.TestCase):
 
     def test_struct_by_value(self):
diff -r bd8afb90ebf2 Lib/decimal.py
--- a/Lib/decimal.py
+++ b/Lib/decimal.py
@@ -2596,7 +2596,7 @@
         ans = ans._fix(context)
         return ans
 
-    def same_quantum(self, other):
+    def same_quantum(self, other, context=None):
         """Return True if self and other have the same exponent; otherwise
         return False.
 
@@ -2914,7 +2914,7 @@
         except TypeError:
             return 0
 
-    def canonical(self, context=None):
+    def canonical(self):
         """Returns the same Decimal object.
 
         As we do not have different encodings for the same number, the
@@ -2934,7 +2934,7 @@
             return ans
         return self.compare(other, context=context)
 
-    def compare_total(self, other):
+    def compare_total(self, other, context=None):
         """Compares self to other using the abstract representations.
 
         This is not like the standard compare, which use their numerical
@@ -3007,7 +3007,7 @@
         return _Zero
 
 
-    def compare_total_mag(self, other):
+    def compare_total_mag(self, other, context=None):
         """Compares self to other using abstract repr., ignoring sign.
 
         Like compare_total, but with operand's sign ignored and assumed to be 0.
@@ -3029,7 +3029,7 @@
         else:
             return _dec_from_triple(1, self._int, self._exp, self._is_special)
 
-    def copy_sign(self, other):
+    def copy_sign(self, other, context=None):
         """Returns self with the sign of other."""
         other = _convert_other(other, raiseit=True)
         return _dec_from_triple(other._sign, self._int,
@@ -4182,7 +4182,7 @@
         """
         if not isinstance(a, Decimal):
             raise TypeError("canonical requires a Decimal as an argument.")
-        return a.canonical(context=self)
+        return a.canonical()
 
     def compare(self, a, b):
         """Compares values numerically.
diff -r bd8afb90ebf2 Lib/distutils/command/build_ext.py
--- a/Lib/distutils/command/build_ext.py
+++ b/Lib/distutils/command/build_ext.py
@@ -160,6 +160,11 @@
         if isinstance(self.include_dirs, str):
             self.include_dirs = self.include_dirs.split(os.pathsep)
 
+        # If in a virtualenv, add its include directory
+        # Issue 16116
+        if sys.exec_prefix != sys.base_exec_prefix:
+            self.include_dirs.append(os.path.join(sys.exec_prefix, 'include'))
+
         # Put the Python "system" include dir at the end, so that
         # any local include dirs take precedence.
         self.include_dirs.append(py_include)
@@ -190,6 +195,8 @@
             # must be the *native* platform.  But we don't really support
             # cross-compiling via a binary install anyway, so we let it go.
             self.library_dirs.append(os.path.join(sys.exec_prefix, 'libs'))
+            if sys.base_exec_prefix != sys.prefix:  # Issue 16116
+                self.library_dirs.append(os.path.join(sys.base_exec_prefix, 'libs'))
             if self.debug:
                 self.build_temp = os.path.join(self.build_temp, "Debug")
             else:
diff -r bd8afb90ebf2 Lib/distutils/command/check.py
--- a/Lib/distutils/command/check.py
+++ b/Lib/distutils/command/check.py
@@ -23,6 +23,9 @@
 
         def system_message(self, level, message, *children, **kwargs):
             self.messages.append((level, message, children, kwargs))
+            return nodes.system_message(message, level=level,
+                                        type=self.levels[level],
+                                        *children, **kwargs)
 
     HAS_DOCUTILS = True
 except Exception:
diff -r bd8afb90ebf2 Lib/distutils/config.py
--- a/Lib/distutils/config.py
+++ b/Lib/distutils/config.py
@@ -4,7 +4,6 @@
 that uses .pypirc in the distutils.command package.
 """
 import os
-import sys
 from configparser import ConfigParser
 
 from distutils.cmd import Command
@@ -43,16 +42,8 @@
     def _store_pypirc(self, username, password):
         """Creates a default .pypirc file."""
         rc = self._get_rc_file()
-        f = open(rc, 'w')
-        try:
+        with os.fdopen(os.open(rc, os.O_CREAT | os.O_WRONLY, 0o600), 'w') as f:
             f.write(DEFAULT_PYPIRC % (username, password))
-        finally:
-            f.close()
-        try:
-            os.chmod(rc, 0o600)
-        except OSError:
-            # should do something better here
-            pass
 
     def _read_pypirc(self):
         """Reads the .pypirc file."""
diff -r bd8afb90ebf2 Lib/distutils/dir_util.py
--- a/Lib/distutils/dir_util.py
+++ b/Lib/distutils/dir_util.py
@@ -141,6 +141,10 @@
         src_name = os.path.join(src, n)
         dst_name = os.path.join(dst, n)
 
+        if n.startswith('.nfs'):
+            # skip NFS rename files
+            continue
+
         if preserve_symlinks and os.path.islink(src_name):
             link_dest = os.readlink(src_name)
             if verbose >= 1:
diff -r bd8afb90ebf2 Lib/distutils/tests/test_dir_util.py
--- a/Lib/distutils/tests/test_dir_util.py
+++ b/Lib/distutils/tests/test_dir_util.py
@@ -76,7 +76,6 @@
 
         remove_tree(self.root_target, verbose=0)
 
-
     def test_copy_tree_verbosity(self):
 
         mkpath(self.target, verbose=0)
@@ -88,11 +87,8 @@
 
         mkpath(self.target, verbose=0)
         a_file = os.path.join(self.target, 'ok.txt')
-        f = open(a_file, 'w')
-        try:
+        with open(a_file, 'w') as f:
             f.write('some content')
-        finally:
-            f.close()
 
         wanted = ['copying %s -> %s' % (a_file, self.target2)]
         copy_tree(self.target, self.target2, verbose=1)
@@ -101,6 +97,21 @@
         remove_tree(self.root_target, verbose=0)
         remove_tree(self.target2, verbose=0)
 
+    def test_copy_tree_skips_nfs_temp_files(self):
+        mkpath(self.target, verbose=0)
+
+        a_file = os.path.join(self.target, 'ok.txt')
+        nfs_file = os.path.join(self.target, '.nfs123abc')
+        for f in a_file, nfs_file:
+            with open(f, 'w') as fh:
+                fh.write('some content')
+
+        copy_tree(self.target, self.target2)
+        self.assertEqual(os.listdir(self.target2), ['ok.txt'])
+
+        remove_tree(self.root_target, verbose=0)
+        remove_tree(self.target2, verbose=0)
+
     def test_ensure_relative(self):
         if os.sep == '/':
             self.assertEqual(ensure_relative('/home/foo'), 'home/foo')
diff -r bd8afb90ebf2 Lib/distutils/tests/test_msvc9compiler.py
--- a/Lib/distutils/tests/test_msvc9compiler.py
+++ b/Lib/distutils/tests/test_msvc9compiler.py
@@ -104,7 +104,7 @@
                             unittest.TestCase):
 
     def test_no_compiler(self):
-        # makes sure query_vcvarsall throws
+        # makes sure query_vcvarsall raises
         # a DistutilsPlatformError if the compiler
         # is not found
         from distutils.msvc9compiler import query_vcvarsall
diff -r bd8afb90ebf2 Lib/distutils/tests/test_register.py
--- a/Lib/distutils/tests/test_register.py
+++ b/Lib/distutils/tests/test_register.py
@@ -1,5 +1,4 @@
 """Tests for distutils.command.register."""
-import sys
 import os
 import unittest
 import getpass
@@ -10,11 +9,14 @@
 
 from distutils.command import register as register_module
 from distutils.command.register import register
-from distutils.core import Distribution
 from distutils.errors import DistutilsSetupError
 
-from distutils.tests import support
-from distutils.tests.test_config import PYPIRC, PyPIRCCommandTestCase
+from distutils.tests.test_config import PyPIRCCommandTestCase
+
+try:
+    import docutils
+except ImportError:
+    docutils = None
 
 PYPIRC_NOPASSWORD = """\
 [distutils]
@@ -193,6 +195,7 @@
         self.assertEqual(headers['Content-length'], '290')
         self.assertTrue((b'tarek') in req.data)
 
+    @unittest.skipUnless(docutils is not None, 'needs docutils')
     def test_strict(self):
         # testing the script option
         # when on, the register command stops if
@@ -205,13 +208,6 @@
         cmd.strict = 1
         self.assertRaises(DistutilsSetupError, cmd.run)
 
-        # we don't test the reSt feature if docutils
-        # is not installed
-        try:
-            import docutils
-        except ImportError:
-            return
-
         # metadata are OK but long_description is broken
         metadata = {'url': 'xxx', 'author': 'xxx',
                     'author_email': 'éxéxé',
@@ -265,6 +261,22 @@
         finally:
             del register_module.input
 
+    @unittest.skipUnless(docutils is not None, 'needs docutils')
+    def test_register_invalid_long_description(self):
+        description = ':funkie:`str`'  # mimic Sphinx-specific markup
+        metadata = {'url': 'xxx', 'author': 'xxx',
+                    'author_email': 'xxx',
+                    'name': 'xxx', 'version': 'xxx',
+                    'long_description': description}
+        cmd = self._get_cmd(metadata)
+        cmd.ensure_finalized()
+        cmd.strict = True
+        inputs = Inputs('2', 'tarek', 'tarek@ziade.org')
+        register_module.input = inputs
+        self.addCleanup(delattr, register_module, 'input')
+
+        self.assertRaises(DistutilsSetupError, cmd.run)
+
     def test_check_metadata_deprecated(self):
         # makes sure make_metadata is deprecated
         cmd = self._get_cmd()
diff -r bd8afb90ebf2 Lib/distutils/tests/test_sdist.py
--- a/Lib/distutils/tests/test_sdist.py
+++ b/Lib/distutils/tests/test_sdist.py
@@ -83,9 +83,8 @@
 
     @unittest.skipUnless(ZLIB_SUPPORT, 'Need zlib support to run')
     def test_prune_file_list(self):
-        # this test creates a package with some vcs dirs in it
-        # and launch sdist to make sure they get pruned
-        # on all systems
+        # this test creates a project with some VCS dirs and an NFS rename
+        # file, then launches sdist to check they get pruned on all systems
 
         # creating VCS directories with some files in them
         os.mkdir(join(self.tmp_dir, 'somecode', '.svn'))
@@ -99,6 +98,8 @@
         self.write_file((self.tmp_dir, 'somecode', '.git',
                          'ok'), 'xxx')
 
+        self.write_file((self.tmp_dir, 'somecode', '.nfs0001'), 'xxx')
+
         # now building a sdist
         dist, cmd = self.get_cmd()
 
diff -r bd8afb90ebf2 Lib/doctest.py
--- a/Lib/doctest.py
+++ b/Lib/doctest.py
@@ -2334,7 +2334,12 @@
     elif not tests:
         # Why do we want to do this? Because it reveals a bug that might
         # otherwise be hidden.
-        raise ValueError(module, "has no tests")
+        # It is probably a bug that this exception is not also raised if the
+        # number of doctest examples in tests is zero (i.e. if no doctest
+        # examples were found).  However, we should probably not be raising
+        # an exception at all here, though it is too late to make this change
+        # for a maintenance release.  See also issue #14649.
+        raise ValueError(module, "has no docstrings")
 
     tests.sort()
     suite = unittest.TestSuite()
diff -r bd8afb90ebf2 Lib/email/feedparser.py
--- a/Lib/email/feedparser.py
+++ b/Lib/email/feedparser.py
@@ -13,7 +13,7 @@
 data.  When you have no more data to push into the parser, call .close().
 This completes the parsing and returns the root message object.
 
-The other advantage of this parser is that it will never throw a parsing
+The other advantage of this parser is that it will never raise a parsing
 exception.  Instead, when it finds something unexpected, it adds a 'defect' to
 the current message.  Defects are just instances that live on the message
 object's .defects attribute.
@@ -228,7 +228,7 @@
         # supposed to see in the body of the message.
         self._parse_headers(headers)
         # Headers-only parsing is a backwards compatibility hack, which was
-        # necessary in the older parser, which could throw errors.  All
+        # necessary in the older parser, which could raise errors.  All
         # remaining lines in the input are thrown into the message body.
         if self._headersonly:
             lines = []
diff -r bd8afb90ebf2 Lib/email/header.py
--- a/Lib/email/header.py
+++ b/Lib/email/header.py
@@ -298,7 +298,7 @@
             else:
                 s = s.decode(input_charset, errors)
         # Ensure that the bytes we're storing can be decoded to the output
-        # character set, otherwise an early error is thrown.
+        # character set, otherwise an early error is raised.
         output_charset = charset.output_codec or 'us-ascii'
         if output_charset != _charset.UNKNOWN8BIT:
             try:
diff -r bd8afb90ebf2 Lib/email/utils.py
--- a/Lib/email/utils.py
+++ b/Lib/email/utils.py
@@ -83,7 +83,7 @@
     'utf-8'.
     """
     name, address = pair
-    # The address MUST (per RFC) be ascii, so throw a UnicodeError if it isn't.
+    # The address MUST (per RFC) be ascii, so raise an UnicodeError if it isn't.
     address.encode('ascii')
     if name:
         try:
diff -r bd8afb90ebf2 Lib/ftplib.py
--- a/Lib/ftplib.py
+++ b/Lib/ftplib.py
@@ -288,20 +288,25 @@
 
     def makeport(self):
         '''Create a new socket and send a PORT command for it.'''
-        msg = "getaddrinfo returns an empty list"
+        err = None
         sock = None
         for res in socket.getaddrinfo(None, 0, self.af, socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
             af, socktype, proto, canonname, sa = res
             try:
                 sock = socket.socket(af, socktype, proto)
                 sock.bind(sa)
-            except socket.error as msg:
+            except socket.error as _:
+                err = _
                 if sock:
                     sock.close()
                 sock = None
                 continue
             break
-        if not sock:
+        if sock is None:
+            if err is not None:
+                raise err
+            else:
+                raise socket.error("getaddrinfo returns an empty list")
             raise socket.error(msg)
         sock.listen(1)
         port = sock.getsockname()[1] # Get proper port
diff -r bd8afb90ebf2 Lib/glob.py
--- a/Lib/glob.py
+++ b/Lib/glob.py
@@ -29,7 +29,10 @@
         for name in glob1(None, basename):
             yield name
         return
-    if has_magic(dirname):
+    # `os.path.split()` returns the argument itself as a dirname if it is a
+    # drive or UNC path.  Prevent an infinite recursion if a drive or UNC path
+    # contains magic characters (i.e. r'\\?\C:').
+    if dirname != pathname and has_magic(dirname):
         dirs = iglob(dirname)
     else:
         dirs = [dirname]
@@ -60,7 +63,7 @@
     return fnmatch.filter(names, pattern)
 
 def glob0(dirname, basename):
-    if basename == '':
+    if not basename:
         # `os.path.split()` returns an empty basename for paths ending with a
         # directory separator.  'q*x/' should match only directories.
         if os.path.isdir(dirname):
diff -r bd8afb90ebf2 Lib/gzip.py
--- a/Lib/gzip.py
+++ b/Lib/gzip.py
@@ -160,9 +160,10 @@
         A mode of 'r' is equivalent to one of 'rb', and similarly for 'w' and
         'wb', and 'a' and 'ab'.
 
-        The compresslevel argument is an integer from 1 to 9 controlling the
+        The compresslevel argument is an integer from 0 to 9 controlling the
         level of compression; 1 is fastest and produces the least compression,
-        and 9 is slowest and produces the most compression.  The default is 9.
+        and 9 is slowest and produces the most compression. 0 is no compression
+        at all. The default is 9.
 
         The mtime argument is an optional numeric timestamp to be written
         to the stream when compressing.  All gzip compressed streams
@@ -622,7 +623,7 @@
 
 def compress(data, compresslevel=9):
     """Compress data in one shot and return the compressed string.
-    Optional argument is the compression level, in range of 1-9.
+    Optional argument is the compression level, in range of 0-9.
     """
     buf = io.BytesIO()
     with GzipFile(fileobj=buf, mode='wb', compresslevel=compresslevel) as f:
@@ -670,9 +671,9 @@
             if not chunk:
                 break
             g.write(chunk)
-        if g is not sys.stdout:
+        if g is not sys.stdout.buffer:
             g.close()
-        if f is not sys.stdin:
+        if f is not sys.stdin.buffer:
             f.close()
 
 if __name__ == '__main__':
diff -r bd8afb90ebf2 Lib/html/entities.py
--- a/Lib/html/entities.py
+++ b/Lib/html/entities.py
@@ -259,34 +259,34 @@
 
 # maps the HTML5 named character references to the equivalent Unicode character(s)
 html5 = {
+    'Aacute': '\xc1',
+    'aacute': '\xe1',
     'Aacute;': '\xc1',
-    'Aacute': '\xc1',
     'aacute;': '\xe1',
-    'aacute': '\xe1',
     'Abreve;': '\u0102',
     'abreve;': '\u0103',
     'ac;': '\u223e',
     'acd;': '\u223f',
     'acE;': '\u223e\u0333',
+    'Acirc': '\xc2',
+    'acirc': '\xe2',
     'Acirc;': '\xc2',
-    'Acirc': '\xc2',
     'acirc;': '\xe2',
-    'acirc': '\xe2',
+    'acute': '\xb4',
     'acute;': '\xb4',
-    'acute': '\xb4',
     'Acy;': '\u0410',
     'acy;': '\u0430',
+    'AElig': '\xc6',
+    'aelig': '\xe6',
     'AElig;': '\xc6',
-    'AElig': '\xc6',
     'aelig;': '\xe6',
-    'aelig': '\xe6',
     'af;': '\u2061',
     'Afr;': '\U0001d504',
     'afr;': '\U0001d51e',
+    'Agrave': '\xc0',
+    'agrave': '\xe0',
     'Agrave;': '\xc0',
-    'Agrave': '\xc0',
     'agrave;': '\xe0',
-    'agrave': '\xe0',
     'alefsym;': '\u2135',
     'aleph;': '\u2135',
     'Alpha;': '\u0391',
@@ -294,10 +294,10 @@
     'Amacr;': '\u0100',
     'amacr;': '\u0101',
     'amalg;': '\u2a3f',
+    'AMP': '&',
+    'amp': '&',
     'AMP;': '&',
-    'AMP': '&',
     'amp;': '&',
-    'amp': '&',
     'And;': '\u2a53',
     'and;': '\u2227',
     'andand;': '\u2a55',
@@ -335,24 +335,24 @@
     'ApplyFunction;': '\u2061',
     'approx;': '\u2248',
     'approxeq;': '\u224a',
+    'Aring': '\xc5',
+    'aring': '\xe5',
     'Aring;': '\xc5',
-    'Aring': '\xc5',
     'aring;': '\xe5',
-    'aring': '\xe5',
     'Ascr;': '\U0001d49c',
     'ascr;': '\U0001d4b6',
     'Assign;': '\u2254',
     'ast;': '*',
     'asymp;': '\u2248',
     'asympeq;': '\u224d',
+    'Atilde': '\xc3',
+    'atilde': '\xe3',
     'Atilde;': '\xc3',
-    'Atilde': '\xc3',
     'atilde;': '\xe3',
-    'atilde': '\xe3',
+    'Auml': '\xc4',
+    'auml': '\xe4',
     'Auml;': '\xc4',
-    'Auml': '\xc4',
     'auml;': '\xe4',
-    'auml': '\xe4',
     'awconint;': '\u2233',
     'awint;': '\u2a11',
     'backcong;': '\u224c',
@@ -466,8 +466,8 @@
     'bprime;': '\u2035',
     'Breve;': '\u02d8',
     'breve;': '\u02d8',
+    'brvbar': '\xa6',
     'brvbar;': '\xa6',
-    'brvbar': '\xa6',
     'Bscr;': '\u212c',
     'bscr;': '\U0001d4b7',
     'bsemi;': '\u204f',
@@ -500,10 +500,10 @@
     'ccaps;': '\u2a4d',
     'Ccaron;': '\u010c',
     'ccaron;': '\u010d',
+    'Ccedil': '\xc7',
+    'ccedil': '\xe7',
     'Ccedil;': '\xc7',
-    'Ccedil': '\xc7',
     'ccedil;': '\xe7',
-    'ccedil': '\xe7',
     'Ccirc;': '\u0108',
     'ccirc;': '\u0109',
     'Cconint;': '\u2230',
@@ -511,12 +511,12 @@
     'ccupssm;': '\u2a50',
     'Cdot;': '\u010a',
     'cdot;': '\u010b',
+    'cedil': '\xb8',
     'cedil;': '\xb8',
-    'cedil': '\xb8',
     'Cedilla;': '\xb8',
     'cemptyv;': '\u29b2',
+    'cent': '\xa2',
     'cent;': '\xa2',
-    'cent': '\xa2',
     'CenterDot;': '\xb7',
     'centerdot;': '\xb7',
     'Cfr;': '\u212d',
@@ -572,10 +572,10 @@
     'copf;': '\U0001d554',
     'coprod;': '\u2210',
     'Coproduct;': '\u2210',
+    'COPY': '\xa9',
+    'copy': '\xa9',
     'COPY;': '\xa9',
-    'COPY': '\xa9',
     'copy;': '\xa9',
-    'copy': '\xa9',
     'copysr;': '\u2117',
     'CounterClockwiseContourIntegral;': '\u2233',
     'crarr;': '\u21b5',
@@ -609,8 +609,8 @@
     'curlyeqsucc;': '\u22df',
     'curlyvee;': '\u22ce',
     'curlywedge;': '\u22cf',
+    'curren': '\xa4',
     'curren;': '\xa4',
-    'curren': '\xa4',
     'curvearrowleft;': '\u21b6',
     'curvearrowright;': '\u21b7',
     'cuvee;': '\u22ce',
@@ -639,8 +639,8 @@
     'ddarr;': '\u21ca',
     'DDotrahd;': '\u2911',
     'ddotseq;': '\u2a77',
+    'deg': '\xb0',
     'deg;': '\xb0',
-    'deg': '\xb0',
     'Del;': '\u2207',
     'Delta;': '\u0394',
     'delta;': '\u03b4',
@@ -666,8 +666,8 @@
     'digamma;': '\u03dd',
     'disin;': '\u22f2',
     'div;': '\xf7',
+    'divide': '\xf7',
     'divide;': '\xf7',
-    'divide': '\xf7',
     'divideontimes;': '\u22c7',
     'divonx;': '\u22c7',
     'DJcy;': '\u0402',
@@ -679,7 +679,7 @@
     'dopf;': '\U0001d555',
     'Dot;': '\xa8',
     'dot;': '\u02d9',
-    'DotDot;': '\u25cc\u20dc',
+    'DotDot;': '\u20dc',
     'doteq;': '\u2250',
     'doteqdot;': '\u2251',
     'DotEqual;': '\u2250',
@@ -706,7 +706,7 @@
     'downarrow;': '\u2193',
     'DownArrowBar;': '\u2913',
     'DownArrowUpArrow;': '\u21f5',
-    'DownBreve;': '\u25cc\u0311',
+    'DownBreve;': '\u0311',
     'downdownarrows;': '\u21ca',
     'downharpoonleft;': '\u21c3',
     'downharpoonright;': '\u21c2',
@@ -738,18 +738,18 @@
     'DZcy;': '\u040f',
     'dzcy;': '\u045f',
     'dzigrarr;': '\u27ff',
+    'Eacute': '\xc9',
+    'eacute': '\xe9',
     'Eacute;': '\xc9',
-    'Eacute': '\xc9',
     'eacute;': '\xe9',
-    'eacute': '\xe9',
     'easter;': '\u2a6e',
     'Ecaron;': '\u011a',
     'ecaron;': '\u011b',
     'ecir;': '\u2256',
+    'Ecirc': '\xca',
+    'ecirc': '\xea',
     'Ecirc;': '\xca',
-    'Ecirc': '\xca',
     'ecirc;': '\xea',
-    'ecirc': '\xea',
     'ecolon;': '\u2255',
     'Ecy;': '\u042d',
     'ecy;': '\u044d',
@@ -762,10 +762,10 @@
     'Efr;': '\U0001d508',
     'efr;': '\U0001d522',
     'eg;': '\u2a9a',
+    'Egrave': '\xc8',
+    'egrave': '\xe8',
     'Egrave;': '\xc8',
-    'Egrave': '\xc8',
     'egrave;': '\xe8',
-    'egrave': '\xe8',
     'egs;': '\u2a96',
     'egsdot;': '\u2a98',
     'el;': '\u2a99',
@@ -781,9 +781,9 @@
     'EmptySmallSquare;': '\u25fb',
     'emptyv;': '\u2205',
     'EmptyVerySmallSquare;': '\u25ab',
-    'emsp;': '\u2003',
     'emsp13;': '\u2004',
     'emsp14;': '\u2005',
+    'emsp;': '\u2003',
     'ENG;': '\u014a',
     'eng;': '\u014b',
     'ensp;': '\u2002',
@@ -820,14 +820,14 @@
     'esim;': '\u2242',
     'Eta;': '\u0397',
     'eta;': '\u03b7',
+    'ETH': '\xd0',
+    'eth': '\xf0',
     'ETH;': '\xd0',
-    'ETH': '\xd0',
     'eth;': '\xf0',
-    'eth': '\xf0',
+    'Euml': '\xcb',
+    'euml': '\xeb',
     'Euml;': '\xcb',
-    'Euml': '\xcb',
     'euml;': '\xeb',
-    'euml': '\xeb',
     'euro;': '\u20ac',
     'excl;': '!',
     'exist;': '\u2203',
@@ -860,18 +860,18 @@
     'forkv;': '\u2ad9',
     'Fouriertrf;': '\u2131',
     'fpartint;': '\u2a0d',
+    'frac12': '\xbd',
     'frac12;': '\xbd',
-    'frac12': '\xbd',
     'frac13;': '\u2153',
+    'frac14': '\xbc',
     'frac14;': '\xbc',
-    'frac14': '\xbc',
     'frac15;': '\u2155',
     'frac16;': '\u2159',
     'frac18;': '\u215b',
     'frac23;': '\u2154',
     'frac25;': '\u2156',
+    'frac34': '\xbe',
     'frac34;': '\xbe',
-    'frac34': '\xbe',
     'frac35;': '\u2157',
     'frac38;': '\u215c',
     'frac45;': '\u2158',
@@ -945,11 +945,11 @@
     'gsim;': '\u2273',
     'gsime;': '\u2a8e',
     'gsiml;': '\u2a90',
+    'GT': '>',
+    'gt': '>',
     'GT;': '>',
-    'GT': '>',
     'Gt;': '\u226b',
     'gt;': '>',
-    'gt': '>',
     'gtcc;': '\u2aa7',
     'gtcir;': '\u2a7a',
     'gtdot;': '\u22d7',
@@ -1004,29 +1004,29 @@
     'HumpEqual;': '\u224f',
     'hybull;': '\u2043',
     'hyphen;': '\u2010',
+    'Iacute': '\xcd',
+    'iacute': '\xed',
     'Iacute;': '\xcd',
-    'Iacute': '\xcd',
     'iacute;': '\xed',
-    'iacute': '\xed',
     'ic;': '\u2063',
+    'Icirc': '\xce',
+    'icirc': '\xee',
     'Icirc;': '\xce',
-    'Icirc': '\xce',
     'icirc;': '\xee',
-    'icirc': '\xee',
     'Icy;': '\u0418',
     'icy;': '\u0438',
     'Idot;': '\u0130',
     'IEcy;': '\u0415',
     'iecy;': '\u0435',
+    'iexcl': '\xa1',
     'iexcl;': '\xa1',
-    'iexcl': '\xa1',
     'iff;': '\u21d4',
     'Ifr;': '\u2111',
     'ifr;': '\U0001d526',
+    'Igrave': '\xcc',
+    'igrave': '\xec',
     'Igrave;': '\xcc',
-    'Igrave': '\xcc',
     'igrave;': '\xec',
-    'igrave': '\xec',
     'ii;': '\u2148',
     'iiiint;': '\u2a0c',
     'iiint;': '\u222d',
@@ -1070,8 +1070,8 @@
     'Iota;': '\u0399',
     'iota;': '\u03b9',
     'iprod;': '\u2a3c',
+    'iquest': '\xbf',
     'iquest;': '\xbf',
-    'iquest': '\xbf',
     'Iscr;': '\u2110',
     'iscr;': '\U0001d4be',
     'isin;': '\u2208',
@@ -1085,10 +1085,10 @@
     'itilde;': '\u0129',
     'Iukcy;': '\u0406',
     'iukcy;': '\u0456',
+    'Iuml': '\xcf',
+    'iuml': '\xef',
     'Iuml;': '\xcf',
-    'Iuml': '\xcf',
     'iuml;': '\xef',
-    'iuml': '\xef',
     'Jcirc;': '\u0134',
     'jcirc;': '\u0135',
     'Jcy;': '\u0419',
@@ -1130,13 +1130,13 @@
     'Lambda;': '\u039b',
     'lambda;': '\u03bb',
     'Lang;': '\u27ea',
-    'lang;': '\u2329',
+    'lang;': '\u27e8',
     'langd;': '\u2991',
-    'langle;': '\u2329',
+    'langle;': '\u27e8',
     'lap;': '\u2a85',
     'Laplacetrf;': '\u2112',
+    'laquo': '\xab',
     'laquo;': '\xab',
-    'laquo': '\xab',
     'Larr;': '\u219e',
     'lArr;': '\u21d0',
     'larr;': '\u2190',
@@ -1177,7 +1177,7 @@
     'ldsh;': '\u21b2',
     'lE;': '\u2266',
     'le;': '\u2264',
-    'LeftAngleBracket;': '\u2329',
+    'LeftAngleBracket;': '\u27e8',
     'LeftArrow;': '\u2190',
     'Leftarrow;': '\u21d0',
     'leftarrow;': '\u2190',
@@ -1316,11 +1316,11 @@
     'lsquor;': '\u201a',
     'Lstrok;': '\u0141',
     'lstrok;': '\u0142',
+    'LT': '<',
+    'lt': '<',
     'LT;': '<',
-    'LT': '<',
     'Lt;': '\u226a',
     'lt;': '<',
-    'lt': '<',
     'ltcc;': '\u2aa6',
     'ltcir;': '\u2a79',
     'ltdot;': '\u22d6',
@@ -1336,8 +1336,8 @@
     'luruhar;': '\u2966',
     'lvertneqq;': '\u2268\ufe00',
     'lvnE;': '\u2268\ufe00',
+    'macr': '\xaf',
     'macr;': '\xaf',
-    'macr': '\xaf',
     'male;': '\u2642',
     'malt;': '\u2720',
     'maltese;': '\u2720',
@@ -1359,13 +1359,13 @@
     'Mfr;': '\U0001d510',
     'mfr;': '\U0001d52a',
     'mho;': '\u2127',
+    'micro': '\xb5',
     'micro;': '\xb5',
-    'micro': '\xb5',
     'mid;': '\u2223',
     'midast;': '*',
     'midcir;': '\u2af0',
+    'middot': '\xb7',
     'middot;': '\xb7',
-    'middot': '\xb7',
     'minus;': '\u2212',
     'minusb;': '\u229f',
     'minusd;': '\u2238',
@@ -1397,8 +1397,8 @@
     'natur;': '\u266e',
     'natural;': '\u266e',
     'naturals;': '\u2115',
+    'nbsp': '\xa0',
     'nbsp;': '\xa0',
-    'nbsp': '\xa0',
     'nbump;': '\u224e\u0338',
     'nbumpe;': '\u224f\u0338',
     'ncap;': '\u2a43',
@@ -1427,7 +1427,7 @@
     'nesim;': '\u2242\u0338',
     'NestedGreaterGreater;': '\u226b',
     'NestedLessLess;': '\u226a',
-    'NewLine;': '\u240a',
+    'NewLine;': '\n',
     'nexist;': '\u2204',
     'nexists;': '\u2204',
     'Nfr;': '\U0001d511',
@@ -1479,9 +1479,9 @@
     'NonBreakingSpace;': '\xa0',
     'Nopf;': '\u2115',
     'nopf;': '\U0001d55f',
+    'not': '\xac',
     'Not;': '\u2aec',
     'not;': '\xac',
-    'not': '\xac',
     'NotCongruent;': '\u2262',
     'NotCupCap;': '\u226d',
     'NotDoubleVerticalBar;': '\u2226',
@@ -1590,10 +1590,10 @@
     'nsupseteq;': '\u2289',
     'nsupseteqq;': '\u2ac6\u0338',
     'ntgl;': '\u2279',
+    'Ntilde': '\xd1',
+    'ntilde': '\xf1',
     'Ntilde;': '\xd1',
-    'Ntilde': '\xd1',
     'ntilde;': '\xf1',
-    'ntilde': '\xf1',
     'ntlg;': '\u2278',
     'ntriangleleft;': '\u22ea',
     'ntrianglelefteq;': '\u22ec',
@@ -1625,16 +1625,16 @@
     'nwarr;': '\u2196',
     'nwarrow;': '\u2196',
     'nwnear;': '\u2927',
+    'Oacute': '\xd3',
+    'oacute': '\xf3',
     'Oacute;': '\xd3',
-    'Oacute': '\xd3',
     'oacute;': '\xf3',
-    'oacute': '\xf3',
     'oast;': '\u229b',
     'ocir;': '\u229a',
+    'Ocirc': '\xd4',
+    'ocirc': '\xf4',
     'Ocirc;': '\xd4',
-    'Ocirc': '\xd4',
     'ocirc;': '\xf4',
-    'ocirc': '\xf4',
     'Ocy;': '\u041e',
     'ocy;': '\u043e',
     'odash;': '\u229d',
@@ -1649,10 +1649,10 @@
     'Ofr;': '\U0001d512',
     'ofr;': '\U0001d52c',
     'ogon;': '\u02db',
+    'Ograve': '\xd2',
+    'ograve': '\xf2',
     'Ograve;': '\xd2',
-    'Ograve': '\xd2',
     'ograve;': '\xf2',
-    'ograve': '\xf2',
     'ogt;': '\u29c1',
     'ohbar;': '\u29b5',
     'ohm;': '\u03a9',
@@ -1683,10 +1683,10 @@
     'ord;': '\u2a5d',
     'order;': '\u2134',
     'orderof;': '\u2134',
+    'ordf': '\xaa',
     'ordf;': '\xaa',
-    'ordf': '\xaa',
+    'ordm': '\xba',
     'ordm;': '\xba',
-    'ordm': '\xba',
     'origof;': '\u22b6',
     'oror;': '\u2a56',
     'orslope;': '\u2a57',
@@ -1694,30 +1694,30 @@
     'oS;': '\u24c8',
     'Oscr;': '\U0001d4aa',
     'oscr;': '\u2134',
+    'Oslash': '\xd8',
+    'oslash': '\xf8',
     'Oslash;': '\xd8',
-    'Oslash': '\xd8',
     'oslash;': '\xf8',
-    'oslash': '\xf8',
     'osol;': '\u2298',
+    'Otilde': '\xd5',
+    'otilde': '\xf5',
     'Otilde;': '\xd5',
-    'Otilde': '\xd5',
     'otilde;': '\xf5',
-    'otilde': '\xf5',
     'Otimes;': '\u2a37',
     'otimes;': '\u2297',
     'otimesas;': '\u2a36',
+    'Ouml': '\xd6',
+    'ouml': '\xf6',
     'Ouml;': '\xd6',
-    'Ouml': '\xd6',
     'ouml;': '\xf6',
-    'ouml': '\xf6',
     'ovbar;': '\u233d',
     'OverBar;': '\u203e',
     'OverBrace;': '\u23de',
     'OverBracket;': '\u23b4',
     'OverParenthesis;': '\u23dc',
     'par;': '\u2225',
+    'para': '\xb6',
     'para;': '\xb6',
-    'para': '\xb6',
     'parallel;': '\u2225',
     'parsim;': '\u2af3',
     'parsl;': '\u2afd',
@@ -1752,8 +1752,8 @@
     'plusdu;': '\u2a25',
     'pluse;': '\u2a72',
     'PlusMinus;': '\xb1',
+    'plusmn': '\xb1',
     'plusmn;': '\xb1',
-    'plusmn': '\xb1',
     'plussim;': '\u2a26',
     'plustwo;': '\u2a27',
     'pm;': '\xb1',
@@ -1761,8 +1761,8 @@
     'pointint;': '\u2a15',
     'Popf;': '\u2119',
     'popf;': '\U0001d561',
+    'pound': '\xa3',
     'pound;': '\xa3',
-    'pound': '\xa3',
     'Pr;': '\u2abb',
     'pr;': '\u227a',
     'prap;': '\u2ab7',
@@ -1815,10 +1815,10 @@
     'quatint;': '\u2a16',
     'quest;': '?',
     'questeq;': '\u225f',
+    'QUOT': '"',
+    'quot': '"',
     'QUOT;': '"',
-    'QUOT': '"',
     'quot;': '"',
-    'quot': '"',
     'rAarr;': '\u21db',
     'race;': '\u223d\u0331',
     'Racute;': '\u0154',
@@ -1826,12 +1826,12 @@
     'radic;': '\u221a',
     'raemptyv;': '\u29b3',
     'Rang;': '\u27eb',
-    'rang;': '\u232a',
+    'rang;': '\u27e9',
     'rangd;': '\u2992',
     'range;': '\u29a5',
-    'rangle;': '\u232a',
+    'rangle;': '\u27e9',
+    'raquo': '\xbb',
     'raquo;': '\xbb',
-    'raquo': '\xbb',
     'Rarr;': '\u21a0',
     'rArr;': '\u21d2',
     'rarr;': '\u2192',
@@ -1879,10 +1879,10 @@
     'realpart;': '\u211c',
     'reals;': '\u211d',
     'rect;': '\u25ad',
+    'REG': '\xae',
+    'reg': '\xae',
     'REG;': '\xae',
-    'REG': '\xae',
     'reg;': '\xae',
-    'reg': '\xae',
     'ReverseElement;': '\u220b',
     'ReverseEquilibrium;': '\u21cb',
     'ReverseUpEquilibrium;': '\u296f',
@@ -1897,7 +1897,7 @@
     'Rho;': '\u03a1',
     'rho;': '\u03c1',
     'rhov;': '\u03f1',
-    'RightAngleBracket;': '\u232a',
+    'RightAngleBracket;': '\u27e9',
     'RightArrow;': '\u2192',
     'Rightarrow;': '\u21d2',
     'rightarrow;': '\u2192',
@@ -1997,8 +1997,8 @@
     'seArr;': '\u21d8',
     'searr;': '\u2198',
     'searrow;': '\u2198',
+    'sect': '\xa7',
     'sect;': '\xa7',
-    'sect': '\xa7',
     'semi;': ';',
     'seswar;': '\u2929',
     'setminus;': '\u2216',
@@ -2018,8 +2018,8 @@
     'shortparallel;': '\u2225',
     'ShortRightArrow;': '\u2192',
     'ShortUpArrow;': '\u2191',
+    'shy': '\xad',
     'shy;': '\xad',
-    'shy': '\xad',
     'Sigma;': '\u03a3',
     'sigma;': '\u03c3',
     'sigmaf;': '\u03c2',
@@ -2128,14 +2128,14 @@
     'Sum;': '\u2211',
     'sum;': '\u2211',
     'sung;': '\u266a',
+    'sup1': '\xb9',
+    'sup1;': '\xb9',
+    'sup2': '\xb2',
+    'sup2;': '\xb2',
+    'sup3': '\xb3',
+    'sup3;': '\xb3',
     'Sup;': '\u22d1',
     'sup;': '\u2283',
-    'sup1;': '\xb9',
-    'sup1': '\xb9',
-    'sup2;': '\xb2',
-    'sup2': '\xb2',
-    'sup3;': '\xb3',
-    'sup3': '\xb3',
     'supdot;': '\u2abe',
     'supdsub;': '\u2ad8',
     'supE;': '\u2ac6',
@@ -2164,9 +2164,9 @@
     'swarr;': '\u2199',
     'swarrow;': '\u2199',
     'swnwar;': '\u292a',
+    'szlig': '\xdf',
     'szlig;': '\xdf',
-    'szlig': '\xdf',
-    'Tab;': '\u2409',
+    'Tab;': '\t',
     'target;': '\u2316',
     'Tau;': '\u03a4',
     'tau;': '\u03c4',
@@ -2177,7 +2177,7 @@
     'tcedil;': '\u0163',
     'Tcy;': '\u0422',
     'tcy;': '\u0442',
-    'tdot;': '\u25cc\u20db',
+    'tdot;': '\u20db',
     'telrec;': '\u2315',
     'Tfr;': '\U0001d517',
     'tfr;': '\U0001d531',
@@ -2195,17 +2195,17 @@
     'ThinSpace;': '\u2009',
     'thkap;': '\u2248',
     'thksim;': '\u223c',
+    'THORN': '\xde',
+    'thorn': '\xfe',
     'THORN;': '\xde',
-    'THORN': '\xde',
     'thorn;': '\xfe',
-    'thorn': '\xfe',
     'Tilde;': '\u223c',
     'tilde;': '\u02dc',
     'TildeEqual;': '\u2243',
     'TildeFullEqual;': '\u2245',
     'TildeTilde;': '\u2248',
+    'times': '\xd7',
     'times;': '\xd7',
-    'times': '\xd7',
     'timesb;': '\u22a0',
     'timesbar;': '\u2a31',
     'timesd;': '\u2a30',
@@ -2231,7 +2231,7 @@
     'tridot;': '\u25ec',
     'trie;': '\u225c',
     'triminus;': '\u2a3a',
-    'TripleDot;': '\u25cc\u20db',
+    'TripleDot;': '\u20db',
     'triplus;': '\u2a39',
     'trisb;': '\u29cd',
     'tritime;': '\u2a3b',
@@ -2247,10 +2247,10 @@
     'twixt;': '\u226c',
     'twoheadleftarrow;': '\u219e',
     'twoheadrightarrow;': '\u21a0',
+    'Uacute': '\xda',
+    'uacute': '\xfa',
     'Uacute;': '\xda',
-    'Uacute': '\xda',
     'uacute;': '\xfa',
-    'uacute': '\xfa',
     'Uarr;': '\u219f',
     'uArr;': '\u21d1',
     'uarr;': '\u2191',
@@ -2259,10 +2259,10 @@
     'ubrcy;': '\u045e',
     'Ubreve;': '\u016c',
     'ubreve;': '\u016d',
+    'Ucirc': '\xdb',
+    'ucirc': '\xfb',
     'Ucirc;': '\xdb',
-    'Ucirc': '\xdb',
     'ucirc;': '\xfb',
-    'ucirc': '\xfb',
     'Ucy;': '\u0423',
     'ucy;': '\u0443',
     'udarr;': '\u21c5',
@@ -2272,10 +2272,10 @@
     'ufisht;': '\u297e',
     'Ufr;': '\U0001d518',
     'ufr;': '\U0001d532',
+    'Ugrave': '\xd9',
+    'ugrave': '\xf9',
     'Ugrave;': '\xd9',
-    'Ugrave': '\xd9',
     'ugrave;': '\xf9',
-    'ugrave': '\xf9',
     'uHar;': '\u2963',
     'uharl;': '\u21bf',
     'uharr;': '\u21be',
@@ -2286,8 +2286,8 @@
     'ultri;': '\u25f8',
     'Umacr;': '\u016a',
     'umacr;': '\u016b',
+    'uml': '\xa8',
     'uml;': '\xa8',
-    'uml': '\xa8',
     'UnderBar;': '_',
     'UnderBrace;': '\u23df',
     'UnderBracket;': '\u23b5',
@@ -2334,10 +2334,10 @@
     'utri;': '\u25b5',
     'utrif;': '\u25b4',
     'uuarr;': '\u21c8',
+    'Uuml': '\xdc',
+    'uuml': '\xfc',
     'Uuml;': '\xdc',
-    'Uuml': '\xdc',
     'uuml;': '\xfc',
-    'uuml': '\xfc',
     'uwangle;': '\u29a7',
     'vangrt;': '\u299c',
     'varepsilon;': '\u03f5',
@@ -2442,18 +2442,18 @@
     'xutri;': '\u25b3',
     'xvee;': '\u22c1',
     'xwedge;': '\u22c0',
+    'Yacute': '\xdd',
+    'yacute': '\xfd',
     'Yacute;': '\xdd',
-    'Yacute': '\xdd',
     'yacute;': '\xfd',
-    'yacute': '\xfd',
     'YAcy;': '\u042f',
     'yacy;': '\u044f',
     'Ycirc;': '\u0176',
     'ycirc;': '\u0177',
     'Ycy;': '\u042b',
     'ycy;': '\u044b',
+    'yen': '\xa5',
     'yen;': '\xa5',
-    'yen': '\xa5',
     'Yfr;': '\U0001d51c',
     'yfr;': '\U0001d536',
     'YIcy;': '\u0407',
@@ -2464,9 +2464,9 @@
     'yscr;': '\U0001d4ce',
     'YUcy;': '\u042e',
     'yucy;': '\u044e',
+    'yuml': '\xff',
     'Yuml;': '\u0178',
     'yuml;': '\xff',
-    'yuml': '\xff',
     'Zacute;': '\u0179',
     'zacute;': '\u017a',
     'Zcaron;': '\u017d',
diff -r bd8afb90ebf2 Lib/http/client.py
--- a/Lib/http/client.py
+++ b/Lib/http/client.py
@@ -536,6 +536,9 @@
             self.length -= n
             if not self.length:
                 self.close()
+        else:
+            if not n:
+                self.close()
         return n
 
     def _read_next_chunk_size(self):
diff -r bd8afb90ebf2 Lib/http/cookiejar.py
--- a/Lib/http/cookiejar.py
+++ b/Lib/http/cookiejar.py
@@ -1825,7 +1825,7 @@
 
 class LWPCookieJar(FileCookieJar):
     """
-    The LWPCookieJar saves a sequence of"Set-Cookie3" lines.
+    The LWPCookieJar saves a sequence of "Set-Cookie3" lines.
     "Set-Cookie3" is the format used by the libwww-perl libary, not known
     to be compatible with any browser, but which is easy to read and
     doesn't lose information about RFC 2965 cookies.
@@ -1837,7 +1837,7 @@
     """
 
     def as_lwp_str(self, ignore_discard=True, ignore_expires=True):
-        """Return cookies as a string of "\n"-separated "Set-Cookie3" headers.
+        """Return cookies as a string of "\\n"-separated "Set-Cookie3" headers.
 
         ignore_discard and ignore_expires: see docstring for FileCookieJar.save
 
diff -r bd8afb90ebf2 Lib/idlelib/CallTips.py
--- a/Lib/idlelib/CallTips.py
+++ b/Lib/idlelib/CallTips.py
@@ -211,7 +211,7 @@
     def test_builtins():
         # if first line of a possibly multiline compiled docstring changes,
         # must change corresponding test string
-        test('int',  "int(x[, base]) -> integer")
+        test('int',  "int(x=0) -> integer")
         test('Int',  Int.__doc__)
         test('types.MethodType', "method(function, instance)")
         test('list', "list() -> new empty list")
diff -r bd8afb90ebf2 Lib/idlelib/EditorWindow.py
--- a/Lib/idlelib/EditorWindow.py
+++ b/Lib/idlelib/EditorWindow.py
@@ -464,7 +464,6 @@
     rmenu = None
 
     def right_menu_event(self, event):
-        self.text.tag_remove("sel", "1.0", "end")
         self.text.mark_set("insert", "@%d,%d" % (event.x, event.y))
         if not self.rmenu:
             self.make_rmenu()
@@ -473,23 +472,53 @@
         iswin = sys.platform[:3] == 'win'
         if iswin:
             self.text.config(cursor="arrow")
+
+        for label, eventname, verify_state in self.rmenu_specs:
+            if verify_state is None:
+                continue
+            state = getattr(self, verify_state)()
+            rmenu.entryconfigure(label, state=state)
+
+
         rmenu.tk_popup(event.x_root, event.y_root)
         if iswin:
             self.text.config(cursor="ibeam")
 
     rmenu_specs = [
-        # ("Label", "<<virtual-event>>"), ...
-        ("Close", "<<close-window>>"), # Example
+        # ("Label", "<<virtual-event>>", "statefuncname"), ...
+        ("Close", "<<close-window>>", None), # Example
     ]
 
     def make_rmenu(self):
         rmenu = Menu(self.text, tearoff=0)
-        for label, eventname in self.rmenu_specs:
-            def command(text=self.text, eventname=eventname):
-                text.event_generate(eventname)
-            rmenu.add_command(label=label, command=command)
+        for label, eventname, _ in self.rmenu_specs:
+            if label is not None:
+                def command(text=self.text, eventname=eventname):
+                    text.event_generate(eventname)
+                rmenu.add_command(label=label, command=command)
+            else:
+                rmenu.add_separator()
         self.rmenu = rmenu
 
+    def rmenu_check_cut(self):
+        return self.rmenu_check_copy()
+
+    def rmenu_check_copy(self):
+        try:
+            indx = self.text.index('sel.first')
+        except TclError:
+            return 'disabled'
+        else:
+            return 'normal' if indx else 'disabled'
+
+    def rmenu_check_paste(self):
+        try:
+            self.text.tk.call('tk::GetSelection', self.text, 'CLIPBOARD')
+        except TclError:
+            return 'disabled'
+        else:
+            return 'normal'
+
     def about_dialog(self, event=None):
         aboutDialog.AboutDialog(self.top,'About IDLE')
 
diff -r bd8afb90ebf2 Lib/idlelib/NEWS.txt
--- a/Lib/idlelib/NEWS.txt
+++ b/Lib/idlelib/NEWS.txt
@@ -1,3 +1,13 @@
+What's New in IDLE 3.3.1?
+=========================
+
+- Issue #16226: Fix IDLE Path Browser crash.
+  (Patch by Roger Serwy)
+
+- Issue #15853: Prevent IDLE crash on OS X when opening Preferences menu
+  with certain versions of Tk 8.5.  Initial patch by Kevin Walzer.
+
+
 What's New in IDLE 3.3.0?
 =========================
 
diff -r bd8afb90ebf2 Lib/idlelib/OutputWindow.py
--- a/Lib/idlelib/OutputWindow.py
+++ b/Lib/idlelib/OutputWindow.py
@@ -52,7 +52,11 @@
     # Our own right-button menu
 
     rmenu_specs = [
-        ("Go to file/line", "<<goto-file-line>>"),
+        ("Cut", "<<cut>>", "rmenu_check_cut"),
+        ("Copy", "<<copy>>", "rmenu_check_copy"),
+        ("Paste", "<<paste>>", "rmenu_check_paste"),
+        (None, None, None),
+        ("Go to file/line", "<<goto-file-line>>", None),
     ]
 
     file_line_pats = [
diff -r bd8afb90ebf2 Lib/idlelib/PathBrowser.py
--- a/Lib/idlelib/PathBrowser.py
+++ b/Lib/idlelib/PathBrowser.py
@@ -75,7 +75,7 @@
         suffixes += importlib.machinery.SOURCE_SUFFIXES[:]
         suffixes += importlib.machinery.BYTECODE_SUFFIXES[:]
         sorted = []
-        for suff, mode, flag in suffixes:
+        for suff in suffixes:
             i = -len(suff)
             for name in allnames[:]:
                 normed_name = os.path.normcase(name)
diff -r bd8afb90ebf2 Lib/idlelib/PyShell.py
--- a/Lib/idlelib/PyShell.py
+++ b/Lib/idlelib/PyShell.py
@@ -117,8 +117,14 @@
             old_hook()
         self.io.set_filename_change_hook(filename_changed_hook)
 
-    rmenu_specs = [("Set Breakpoint", "<<set-breakpoint-here>>"),
-                   ("Clear Breakpoint", "<<clear-breakpoint-here>>")]
+    rmenu_specs = [
+        ("Cut", "<<cut>>", "rmenu_check_cut"),
+        ("Copy", "<<copy>>", "rmenu_check_copy"),
+        ("Paste", "<<paste>>", "rmenu_check_paste"),
+        (None, None, None),
+        ("Set Breakpoint", "<<set-breakpoint-here>>", None),
+        ("Clear Breakpoint", "<<clear-breakpoint-here>>", None)
+    ]
 
     def set_breakpoint(self, lineno):
         text = self.text
@@ -1256,6 +1262,19 @@
                 raise KeyboardInterrupt
         return count
 
+    def rmenu_check_cut(self):
+        try:
+            if self.text.compare('sel.first', '<', 'iomark'):
+                return 'disabled'
+        except TclError: # no selection, so the index 'sel.first' doesn't exist
+            return 'disabled'
+        return super().rmenu_check_cut()
+
+    def rmenu_check_paste(self):
+        if self.text.compare('insert','<','iomark'):
+            return 'disabled'
+        return super().rmenu_check_paste()
+
 class PseudoFile(object):
 
     def __init__(self, shell, tags, encoding=None):
diff -r bd8afb90ebf2 Lib/idlelib/config-extensions.def
--- a/Lib/idlelib/config-extensions.def
+++ b/Lib/idlelib/config-extensions.def
@@ -46,6 +46,8 @@
 
 [ScriptBinding]
 enable=1
+enable_shell=0
+enable_editor=1
 [ScriptBinding_cfgBindings]
 run-module=<Key-F5>
 check-module=<Alt-Key-x>
diff -r bd8afb90ebf2 Lib/idlelib/configDialog.py
--- a/Lib/idlelib/configDialog.py
+++ b/Lib/idlelib/configDialog.py
@@ -821,10 +821,9 @@
             fontWeight=tkFont.BOLD
         else:
             fontWeight=tkFont.NORMAL
-        size=self.fontSize.get()
-        self.editFont.config(size=size,
-                weight=fontWeight,family=fontName)
-        self.textHighlightSample.configure(font=(fontName, size, fontWeight))
+        newFont = (fontName, self.fontSize.get(), fontWeight)
+        self.labelFontSample.config(font=newFont)
+        self.textHighlightSample.configure(font=newFont)
 
     def SetHighlightTarget(self):
         if self.highlightTarget.get()=='Cursor': #bg not possible
diff -r bd8afb90ebf2 Lib/idlelib/help.txt
--- a/Lib/idlelib/help.txt
+++ b/Lib/idlelib/help.txt
@@ -80,7 +80,7 @@
 Debug Menu (only in Shell window):
 
 	Go to File/Line   -- look around the insert point for a filename
-		             and linenumber, open the file, and show the line
+		             and line number, open the file, and show the line
 	Debugger (toggle) -- Run commands in the shell under the debugger
 	Stack Viewer      -- Show the stack traceback of the last exception
 	Auto-open Stack Viewer (toggle) -- Open stack viewer on traceback
@@ -92,7 +92,7 @@
                           Startup Preferences may be set, and Additional Help
                           Sources can be specified.
 			  
-			  On MacOS X this menu is not present, use
+			  On OS X this menu is not present, use
 			  menu 'IDLE -> Preferences...' instead.
 	---
 	Code Context --	  Open a pane at the top of the edit window which
@@ -120,6 +120,24 @@
 	---
 	(Additional Help Sources may be added here)
 
+Edit context menu (Right-click / Control-click on OS X in Edit window):
+
+	Cut              -- Copy a selection into system-wide clipboard,
+                            then delete the selection
+	Copy             -- Copy selection into system-wide clipboard
+	Paste            -- Insert system-wide clipboard into window
+	Set Breakpoint   -- Sets a breakpoint (when debugger open)
+	Clear Breakpoint -- Clears the breakpoint on that line
+
+Shell context menu (Right-click / Control-click on OS X in Shell window):
+
+	Cut              -- Copy a selection into system-wide clipboard,
+                            then delete the selection
+	Copy             -- Copy selection into system-wide clipboard
+	Paste            -- Insert system-wide clipboard into window
+	---
+	Go to file/line  -- Same as in Debug menu
+
 
 ** TIPS **
 ==========
@@ -222,7 +240,7 @@
 
 	Alt-p retrieves previous command matching what you have typed.
 	Alt-n retrieves next.
-	      (These are Control-p, Control-n on the Mac)
+	      (These are Control-p, Control-n on OS X)
 	Return while cursor is on a previous command retrieves that command.
 	Expand word is also useful to reduce typing.
 
diff -r bd8afb90ebf2 Lib/imaplib.py
--- a/Lib/imaplib.py
+++ b/Lib/imaplib.py
@@ -1178,7 +1178,7 @@
                 ssl_context - a SSLContext object that contains your certificate chain
                               and private key (default: None)
                 Note: if ssl_context is provided, then parameters keyfile or
-                certfile should not be set otherwise ValueError is thrown.
+                certfile should not be set otherwise ValueError is raised.
 
         for more documentation see the docstring of the parent class IMAP4.
         """
diff -r bd8afb90ebf2 Lib/importlib/__init__.py
--- a/Lib/importlib/__init__.py
+++ b/Lib/importlib/__init__.py
@@ -55,7 +55,9 @@
     value of 'path' given to the finders. None is returned if no loader could
     be found.
 
-    Dotted names do not have their parent packages implicitly imported.
+    Dotted names do not have their parent packages implicitly imported. You will
+    most likely need to explicitly import all parent packages in the proper
+    order for a submodule to get the correct loader.
 
     """
     try:
diff -r bd8afb90ebf2 Lib/importlib/_bootstrap.py
--- a/Lib/importlib/_bootstrap.py
+++ b/Lib/importlib/_bootstrap.py
@@ -419,8 +419,8 @@
     .pyc/.pyo file calculated as if the .py file were imported.  The extension
     will be .pyc unless sys.flags.optimize is non-zero, then it will be .pyo.
 
-    If debug_override is not None, then it must be a boolean and is taken as
-    the value of bool(sys.flags.optimize) instead.
+    If debug_override is not None, then it must be a boolean and is used in
+    place of sys.flags.optimize.
 
     If sys.implementation.cache_tag is None then NotImplementedError is raised.
 
@@ -1048,6 +1048,9 @@
             mode = _os.stat(source_path).st_mode
         except OSError:
             mode = 0o666
+        # We always ensure write access so we can update cached files
+        # later even when the source files are read-only on Windows (#6074)
+        mode |= 0o200
         return self.set_data(bytecode_path, data, _mode=mode)
 
     def set_data(self, path, data, *, _mode=0o666):
@@ -1066,17 +1069,17 @@
             except FileExistsError:
                 # Probably another Python process already created the dir.
                 continue
-            except PermissionError:
-                # If can't get proper access, then just forget about writing
-                # the data.
+            except OSError as exc:
+                # Could be a permission error, read-only filesystem: just forget
+                # about writing the data.
+                _verbose_message('could not create {!r}: {!r}', parent, exc)
                 return
         try:
             _write_atomic(path, data, _mode)
             _verbose_message('created {!r}', path)
-        except (PermissionError, FileExistsError):
-            # Don't worry if you can't write bytecode or someone is writing
-            # it at the same time.
-            pass
+        except OSError as exc:
+            # Same as above: just don't write the bytecode.
+            _verbose_message('could not create {!r}: {!r}', path, exc)
 
 
 class SourcelessFileLoader(FileLoader, _LoaderBasics):
@@ -1156,7 +1159,7 @@
     """Represents a namespace package's path.  It uses the module name
     to find its parent module, and from there it looks up the parent's
     __path__.  When this changes, the module's own path is recomputed,
-    using path_finder.  For top-leve modules, the parent module's path
+    using path_finder.  For top-level modules, the parent module's path
     is sys.path."""
 
     def __init__(self, name, path, path_finder):
@@ -1278,6 +1281,8 @@
         #  the list of paths that will become its __path__
         namespace_path = []
         for entry in path:
+            if not isinstance(entry, (str, bytes)):
+                continue
             finder = cls._path_importer_cache(entry)
             if finder is not None:
                 if hasattr(finder, 'find_loader'):
@@ -1602,19 +1607,19 @@
                 fromlist.extend(module.__all__)
         for x in fromlist:
             if not hasattr(module, x):
+                from_name = '{}.{}'.format(module.__name__, x)
                 try:
-                    _call_with_frames_removed(import_,
-                                      '{}.{}'.format(module.__name__, x))
+                    _call_with_frames_removed(import_, from_name)
                 except ImportError as exc:
                     # Backwards-compatibility dictates we ignore failed
                     # imports triggered by fromlist for modules that don't
                     # exist.
                     # TODO(brett): In Python 3.4, have import raise
                     #   ModuleNotFound and catch that.
-                    if hasattr(exc, '_not_found') and exc._not_found:
-                        pass
-                    else:
-                        raise
+                    if getattr(exc, '_not_found', False):
+                        if exc.name == from_name:
+                            continue
+                    raise
     return module
 
 
@@ -1669,7 +1674,11 @@
         elif not name:
             return module
         else:
+            # Figure out where to slice the module's name up to the first dot
+            # in 'name'.
             cut_off = len(name) - len(name.partition('.')[0])
+            # Slice end needs to be positive to alleviate need to special-case
+            # when ``'.' not in name``.
             return sys.modules[module.__name__[:len(module.__name__)-cut_off]]
     else:
         return _handle_fromlist(module, fromlist, _gcd_import)
diff -r bd8afb90ebf2 Lib/io.py
--- a/Lib/io.py
+++ b/Lib/io.py
@@ -4,7 +4,7 @@
 At the top of the I/O hierarchy is the abstract base class IOBase. It
 defines the basic interface to a stream. Note, however, that there is no
 separation between reading and writing to streams; implementations are
-allowed to throw an IOError if they do not support a given operation.
+allowed to raise an IOError if they do not support a given operation.
 
 Extending IOBase is RawIOBase which deals simply with the reading and
 writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
diff -r bd8afb90ebf2 Lib/ipaddress.py
--- a/Lib/ipaddress.py
+++ b/Lib/ipaddress.py
@@ -206,10 +206,11 @@
     """Summarize a network range given the first and last IP addresses.
 
     Example:
-        >>> summarize_address_range(IPv4Address('192.0.2.0'),
-            IPv4Address('192.0.2.130'))
+        >>> list(summarize_address_range(IPv4Address('192.0.2.0'),
+        ...                              IPv4Address('192.0.2.130')))
+        ...                                #doctest: +NORMALIZE_WHITESPACE
         [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'),
-        IPv4Network('192.0.2.130/32')]
+         IPv4Network('192.0.2.130/32')]
 
     Args:
         first: the first IPv4Address or IPv6Address in the range.
diff -r bd8afb90ebf2 Lib/json/__init__.py
--- a/Lib/json/__init__.py
+++ b/Lib/json/__init__.py
@@ -39,8 +39,8 @@
 Pretty printing::
 
     >>> import json
-    >>> s = json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4)
-    >>> print('\n'.join([l.rstrip() for l in  s.splitlines()]))
+    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True,
+    ...                  indent=4, separators=(',', ': ')))
     {
         "4": 5,
         "6": 7
@@ -122,7 +122,7 @@
 
 def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,
         allow_nan=True, cls=None, indent=None, separators=None,
-        default=None, **kw):
+        default=None, sort_keys=False, **kw):
     """Serialize ``obj`` as a JSON formatted stream to ``fp`` (a
     ``.write()``-supporting file-like object).
 
@@ -146,7 +146,9 @@
     If ``indent`` is a non-negative integer, then JSON array elements and
     object members will be pretty-printed with that indent level. An indent
     level of 0 will only insert newlines. ``None`` is the most compact
-    representation.
+    representation.  Since the default item separator is ``', '``,  the
+    output might include trailing whitespace when ``indent`` is specified.
+    You can use ``separators=(',', ': ')`` to avoid this.
 
     If ``separators`` is an ``(item_separator, dict_separator)`` tuple
     then it will be used instead of the default ``(', ', ': ')`` separators.
@@ -155,6 +157,9 @@
     ``default(obj)`` is a function that should return a serializable version
     of obj or raise TypeError. The default simply raises TypeError.
 
+    If *sort_keys* is ``True`` (default: ``False``), then the output of
+    dictionaries will be sorted by key.
+
     To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the
     ``.default()`` method to serialize additional types), specify it with
     the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.
@@ -164,7 +169,7 @@
     if (not skipkeys and ensure_ascii and
         check_circular and allow_nan and
         cls is None and indent is None and separators is None and
-        default is None and not kw):
+        default is None and not sort_keys and not kw):
         iterable = _default_encoder.iterencode(obj)
     else:
         if cls is None:
@@ -172,7 +177,7 @@
         iterable = cls(skipkeys=skipkeys, ensure_ascii=ensure_ascii,
             check_circular=check_circular, allow_nan=allow_nan, indent=indent,
             separators=separators,
-            default=default, **kw).iterencode(obj)
+            default=default, sort_keys=sort_keys, **kw).iterencode(obj)
     # could accelerate with writelines in some versions of Python, at
     # a debuggability cost
     for chunk in iterable:
@@ -181,7 +186,7 @@
 
 def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,
         allow_nan=True, cls=None, indent=None, separators=None,
-        default=None, **kw):
+        default=None, sort_keys=False, **kw):
     """Serialize ``obj`` to a JSON formatted ``str``.
 
     If ``skipkeys`` is false then ``dict`` keys that are not basic types
@@ -204,7 +209,9 @@
     If ``indent`` is a non-negative integer, then JSON array elements and
     object members will be pretty-printed with that indent level. An indent
     level of 0 will only insert newlines. ``None`` is the most compact
-    representation.
+    representation.  Since the default item separator is ``', '``,  the
+    output might include trailing whitespace when ``indent`` is specified.
+    You can use ``separators=(',', ': ')`` to avoid this.
 
     If ``separators`` is an ``(item_separator, dict_separator)`` tuple
     then it will be used instead of the default ``(', ', ': ')`` separators.
@@ -213,6 +220,9 @@
     ``default(obj)`` is a function that should return a serializable version
     of obj or raise TypeError. The default simply raises TypeError.
 
+    If *sort_keys* is ``True`` (default: ``False``), then the output of
+    dictionaries will be sorted by key.
+
     To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the
     ``.default()`` method to serialize additional types), specify it with
     the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.
@@ -222,14 +232,14 @@
     if (not skipkeys and ensure_ascii and
         check_circular and allow_nan and
         cls is None and indent is None and separators is None and
-        default is None and not kw):
+        default is None and not sort_keys and not kw):
         return _default_encoder.encode(obj)
     if cls is None:
         cls = JSONEncoder
     return cls(
         skipkeys=skipkeys, ensure_ascii=ensure_ascii,
         check_circular=check_circular, allow_nan=allow_nan, indent=indent,
-        separators=separators, default=default,
+        separators=separators, default=default, sort_keys=sort_keys,
         **kw).encode(obj)
 
 
diff -r bd8afb90ebf2 Lib/json/encoder.py
--- a/Lib/json/encoder.py
+++ b/Lib/json/encoder.py
@@ -125,7 +125,10 @@
         If indent is a non-negative integer, then JSON array
         elements and object members will be pretty-printed with that
         indent level.  An indent level of 0 will only insert newlines.
-        None is the most compact representation.
+        None is the most compact representation.  Since the default
+        item separator is ', ',  the output might include trailing
+        whitespace when indent is specified.  You can use
+        separators=(',', ': ') to avoid this.
 
         If specified, separators should be a (item_separator, key_separator)
         tuple.  The default is (', ', ': ').  To get the most compact JSON
diff -r bd8afb90ebf2 Lib/json/tool.py
--- a/Lib/json/tool.py
+++ b/Lib/json/tool.py
@@ -18,19 +18,22 @@
         infile = sys.stdin
         outfile = sys.stdout
     elif len(sys.argv) == 2:
-        infile = open(sys.argv[1], 'rb')
+        infile = open(sys.argv[1], 'r')
         outfile = sys.stdout
     elif len(sys.argv) == 3:
-        infile = open(sys.argv[1], 'rb')
-        outfile = open(sys.argv[2], 'wb')
+        infile = open(sys.argv[1], 'r')
+        outfile = open(sys.argv[2], 'w')
     else:
         raise SystemExit(sys.argv[0] + " [infile [outfile]]")
-    try:
-        obj = json.load(infile)
-    except ValueError as e:
-        raise SystemExit(e)
-    json.dump(obj, outfile, sort_keys=True, indent=4)
-    outfile.write('\n')
+    with infile:
+        try:
+            obj = json.load(infile)
+        except ValueError as e:
+            raise SystemExit(e)
+    with outfile:
+        json.dump(obj, outfile, sort_keys=True,
+                  indent=4, separators=(',', ': '))
+        outfile.write('\n')
 
 
 if __name__ == '__main__':
diff -r bd8afb90ebf2 Lib/lib2to3/fixer_util.py
--- a/Lib/lib2to3/fixer_util.py
+++ b/Lib/lib2to3/fixer_util.py
@@ -165,7 +165,7 @@
 
 
 consuming_calls = set(["sorted", "list", "set", "any", "all", "tuple", "sum",
-                       "min", "max"])
+                       "min", "max", "enumerate"])
 
 def attr_chain(obj, attr):
     """Follow an attribute chain.
@@ -192,14 +192,14 @@
 p1 = """
 power<
     ( 'iter' | 'list' | 'tuple' | 'sorted' | 'set' | 'sum' |
-      'any' | 'all' | (any* trailer< '.' 'join' >) )
+      'any' | 'all' | 'enumerate' | (any* trailer< '.' 'join' >) )
     trailer< '(' node=any ')' >
     any*
 >
 """
 p2 = """
 power<
-    'sorted'
+    ( 'sorted' | 'enumerate' )
     trailer< '(' arglist<node=any any*> ')' >
     any*
 >
@@ -207,14 +207,14 @@
 pats_built = False
 def in_special_context(node):
     """ Returns true if node is in an environment where all that is required
-        of it is being itterable (ie, it doesn't matter if it returns a list
-        or an itterator).
+        of it is being iterable (ie, it doesn't matter if it returns a list
+        or an iterator).
         See test_map_nochange in test_fixers.py for some examples and tests.
         """
     global p0, p1, p2, pats_built
     if not pats_built:
+        p0 = patcomp.compile_pattern(p0)
         p1 = patcomp.compile_pattern(p1)
-        p0 = patcomp.compile_pattern(p0)
         p2 = patcomp.compile_pattern(p2)
         pats_built = True
     patterns = [p0, p1, p2]
@@ -274,9 +274,9 @@
     """Find the top level namespace."""
     # Scamper up to the top level namespace
     while node.type != syms.file_input:
-        assert node.parent, "Tree is insane! root found before "\
-                           "file_input node was found."
         node = node.parent
+        if not node:
+            raise ValueError("root found before file_input node was found.")
     return node
 
 def does_tree_import(package, name, node):
diff -r bd8afb90ebf2 Lib/lib2to3/refactor.py
--- a/Lib/lib2to3/refactor.py
+++ b/Lib/lib2to3/refactor.py
@@ -445,7 +445,7 @@
 
                         try:
                             find_root(node)
-                        except AssertionError:
+                        except ValueError:
                             # this node has been cut off from a
                             # previous transformation ; skip
                             continue
diff -r bd8afb90ebf2 Lib/lib2to3/tests/test_fixers.py
--- a/Lib/lib2to3/tests/test_fixers.py
+++ b/Lib/lib2to3/tests/test_fixers.py
@@ -2981,6 +2981,10 @@
         self.unchanged(a)
         a = """sorted(filter(f, 'abc'), key=blah)[0]"""
         self.unchanged(a)
+        a = """enumerate(filter(f, 'abc'))"""
+        self.unchanged(a)
+        a = """enumerate(filter(f, 'abc'), start=1)"""
+        self.unchanged(a)
         a = """for i in filter(f, 'abc'): pass"""
         self.unchanged(a)
         a = """[x for x in filter(f, 'abc')]"""
@@ -3089,6 +3093,10 @@
         self.unchanged(a)
         a = """sorted(map(f, 'abc'), key=blah)[0]"""
         self.unchanged(a)
+        a = """enumerate(map(f, 'abc'))"""
+        self.unchanged(a)
+        a = """enumerate(map(f, 'abc'), start=1)"""
+        self.unchanged(a)
         a = """for i in map(f, 'abc'): pass"""
         self.unchanged(a)
         a = """[x for x in map(f, 'abc')]"""
@@ -3152,6 +3160,10 @@
         self.unchanged(a)
         a = """sorted(zip(a, b), key=blah)[0]"""
         self.unchanged(a)
+        a = """enumerate(zip(a, b))"""
+        self.unchanged(a)
+        a = """enumerate(zip(a, b), start=1)"""
+        self.unchanged(a)
         a = """for i in zip(a, b): pass"""
         self.unchanged(a)
         a = """[x for x in zip(a, b)]"""
diff -r bd8afb90ebf2 Lib/logging/__init__.py
--- a/Lib/logging/__init__.py
+++ b/Lib/logging/__init__.py
@@ -1349,7 +1349,7 @@
         """
         sinfo = None
         if _srcfile:
-            #IronPython doesn't track Python frames, so findCaller throws an
+            #IronPython doesn't track Python frames, so findCaller raises an
             #exception on some versions of IronPython. We trap it here so that
             #IronPython can use logging.
             try:
diff -r bd8afb90ebf2 Lib/logging/handlers.py
--- a/Lib/logging/handlers.py
+++ b/Lib/logging/handlers.py
@@ -172,7 +172,6 @@
             if os.path.exists(dfn):
                 os.remove(dfn)
             self.rotate(self.baseFilename, dfn)
-        self.mode = 'w'
         self.stream = self._open()
 
     def shouldRollover(self, record):
@@ -381,7 +380,6 @@
         if self.backupCount > 0:
             for s in self.getFilesToDelete():
                 os.remove(s)
-        self.mode = 'w'
         self.stream = self._open()
         newRolloverAt = self.computeRollover(currentTime)
         while newRolloverAt <= currentTime:
@@ -794,18 +792,12 @@
         self.formatter = None
 
     def _connect_unixsocket(self, address):
-        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-        # syslog may require either DGRAM or STREAM sockets
+        self.socket = socket.socket(socket.AF_UNIX, self.socktype)
         try:
             self.socket.connect(address)
         except socket.error:
             self.socket.close()
-            self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
-            try:
-                self.socket.connect(address)
-            except socket.error:
-                self.socket.close()
-                raise
+            raise
 
     def encodePriority(self, facility, priority):
         """
diff -r bd8afb90ebf2 Lib/mailbox.py
--- a/Lib/mailbox.py
+++ b/Lib/mailbox.py
@@ -208,6 +208,9 @@
             raise ValueError("String input must be ASCII-only; "
                 "use bytes or a Message instead")
 
+    # Whether each message must end in a newline
+    _append_newline = False
+
     def _dump_message(self, message, target, mangle_from_=False):
         # This assumes the target file is open in binary mode.
         """Dump message contents to target file."""
@@ -219,6 +222,9 @@
             data = buffer.read()
             data = data.replace(b'\n', linesep)
             target.write(data)
+            if self._append_newline and not data.endswith(linesep):
+                # Make sure the message ends with a newline
+                target.write(linesep)
         elif isinstance(message, (str, bytes, io.StringIO)):
             if isinstance(message, io.StringIO):
                 warnings.warn("Use of StringIO input is deprecated, "
@@ -230,11 +236,15 @@
                 message = message.replace(b'\nFrom ', b'\n>From ')
             message = message.replace(b'\n', linesep)
             target.write(message)
+            if self._append_newline and not message.endswith(linesep):
+                # Make sure the message ends with a newline
+                target.write(linesep)
         elif hasattr(message, 'read'):
             if hasattr(message, 'buffer'):
                 warnings.warn("Use of text mode files is deprecated, "
                     "use a binary mode file instead", DeprecationWarning, 3)
                 message = message.buffer
+            lastline = None
             while True:
                 line = message.readline()
                 # Universal newline support.
@@ -248,6 +258,10 @@
                     line = b'>From ' + line[5:]
                 line = line.replace(b'\n', linesep)
                 target.write(line)
+                lastline = line
+            if self._append_newline and lastline and not lastline.endswith(linesep):
+                # Make sure the message ends with a newline
+                target.write(linesep)
         else:
             raise TypeError('Invalid message type: %s' % type(message))
 
@@ -833,30 +847,48 @@
 
     _mangle_from_ = True
 
+    # All messages must end in a newline character, and
+    # _post_message_hooks outputs an empty line between messages.
+    _append_newline = True
+
     def __init__(self, path, factory=None, create=True):
         """Initialize an mbox mailbox."""
         self._message_factory = mboxMessage
         _mboxMMDF.__init__(self, path, factory, create)
 
-    def _pre_message_hook(self, f):
-        """Called before writing each message to file f."""
-        if f.tell() != 0:
-            f.write(linesep)
+    def _post_message_hook(self, f):
+        """Called after writing each message to file f."""
+        f.write(linesep)
 
     def _generate_toc(self):
         """Generate key-to-(start, stop) table of contents."""
         starts, stops = [], []
+        last_was_empty = False
         self._file.seek(0)
         while True:
             line_pos = self._file.tell()
             line = self._file.readline()
             if line.startswith(b'From '):
                 if len(stops) < len(starts):
+                    if last_was_empty:
+                        stops.append(line_pos - len(linesep))
+                    else:
+                        # The last line before the "From " line wasn't
+                        # blank, but we consider it a start of a
+                        # message anyway.
+                        stops.append(line_pos)
+                starts.append(line_pos)
+                last_was_empty = False
+            elif not line:
+                if last_was_empty:
                     stops.append(line_pos - len(linesep))
-                starts.append(line_pos)
-            elif not line:
-                stops.append(line_pos)
+                else:
+                    stops.append(line_pos)
                 break
+            elif line == linesep:
+                last_was_empty = True
+            else:
+                last_was_empty = False
         self._toc = dict(enumerate(zip(starts, stops)))
         self._next_key = len(self._toc)
         self._file_length = self._file.tell()
diff -r bd8afb90ebf2 Lib/multiprocessing/forking.py
--- a/Lib/multiprocessing/forking.py
+++ b/Lib/multiprocessing/forking.py
@@ -233,6 +233,7 @@
                 self.returncode = None
                 self._handle = hp
                 self.sentinel = int(hp)
+                util.Finalize(self, _winapi.CloseHandle, (self.sentinel,))
 
                 # send information to child
                 Popen._tls.process_handle = int(hp)
diff -r bd8afb90ebf2 Lib/multiprocessing/pool.py
--- a/Lib/multiprocessing/pool.py
+++ b/Lib/multiprocessing/pool.py
@@ -225,7 +225,6 @@
         Apply `func` to each element in `iterable`, collecting the results
         in a list that is returned.
         '''
-        assert self._state == RUN
         return self._map_async(func, iterable, mapstar, chunksize).get()
 
     def starmap(self, func, iterable, chunksize=None):
@@ -234,7 +233,6 @@
         be iterables as well and will be unpacked as arguments. Hence
         `func` and (a, b) becomes func(a, b).
         '''
-        assert self._state == RUN
         return self._map_async(func, iterable, starmapstar, chunksize).get()
 
     def starmap_async(self, func, iterable, chunksize=None, callback=None,
@@ -242,7 +240,6 @@
         '''
         Asynchronous version of `starmap()` method.
         '''
-        assert self._state == RUN
         return self._map_async(func, iterable, starmapstar, chunksize,
                                callback, error_callback)
 
@@ -250,7 +247,8 @@
         '''
         Equivalent of `map()` -- can be MUCH slower than `Pool.map()`.
         '''
-        assert self._state == RUN
+        if self._state != RUN:
+            raise ValueError("Pool not running")
         if chunksize == 1:
             result = IMapIterator(self._cache)
             self._taskqueue.put((((result._job, i, func, (x,), {})
@@ -268,7 +266,8 @@
         '''
         Like `imap()` method but ordering of results is arbitrary.
         '''
-        assert self._state == RUN
+        if self._state != RUN:
+            raise ValueError("Pool not running")
         if chunksize == 1:
             result = IMapUnorderedIterator(self._cache)
             self._taskqueue.put((((result._job, i, func, (x,), {})
@@ -287,7 +286,8 @@
         '''
         Asynchronous version of `apply()` method.
         '''
-        assert self._state == RUN
+        if self._state != RUN:
+            raise ValueError("Pool not running")
         result = ApplyResult(self._cache, callback, error_callback)
         self._taskqueue.put(([(result._job, None, func, args, kwds)], None))
         return result
@@ -297,14 +297,16 @@
         '''
         Asynchronous version of `map()` method.
         '''
-        assert self._state == RUN
-        return self._map_async(func, iterable, mapstar, chunksize)
+        return self._map_async(func, iterable, mapstar, chunksize, callback,
+            error_callback)
 
     def _map_async(self, func, iterable, mapper, chunksize=None, callback=None,
             error_callback=None):
         '''
         Helper function to implement map, starmap and their async counterparts.
         '''
+        if self._state != RUN:
+            raise ValueError("Pool not running")
         if not hasattr(iterable, '__len__'):
             iterable = list(iterable)
 
diff -r bd8afb90ebf2 Lib/multiprocessing/util.py
--- a/Lib/multiprocessing/util.py
+++ b/Lib/multiprocessing/util.py
@@ -235,6 +235,12 @@
     Finalizers with highest priority are called first; finalizers with
     the same priority will be called in reverse order of creation.
     '''
+    if _finalizer_registry is None:
+        # This function may be called after this module's globals are
+        # destroyed.  See the _exit_function function in this module for more
+        # notes.
+        return
+
     if minpriority is None:
         f = lambda p : p[0][0] is not None
     else:
@@ -266,7 +272,13 @@
 
 _exiting = False
 
-def _exit_function():
+def _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,
+                   active_children=active_children,
+                   current_process=current_process):
+    # We hold on to references to functions in the arglist due to the
+    # situation described below, where this function is called after this
+    # module's globals are destroyed.
+
     global _exiting
 
     if not _exiting:
@@ -276,14 +288,28 @@
         debug('running all "atexit" finalizers with priority >= 0')
         _run_finalizers(0)
 
-        for p in active_children():
-            if p._daemonic:
-                info('calling terminate() for daemon %s', p.name)
-                p._popen.terminate()
+        if current_process() is not None:
+            # We check if the current process is None here because if
+            # it's None, any call to ``active_children()`` will raise
+            # an AttributeError (active_children winds up trying to
+            # get attributes from util._current_process).  One
+            # situation where this can happen is if someone has
+            # manipulated sys.modules, causing this module to be
+            # garbage collected.  The destructor for the module type
+            # then replaces all values in the module dict with None.
+            # For instance, after setuptools runs a test it replaces
+            # sys.modules with a copy created earlier.  See issues
+            # #9775 and #15881.  Also related: #4106, #9205, and
+            # #9207.
 
-        for p in active_children():
-            info('calling join() for process %s', p.name)
-            p.join()
+            for p in active_children():
+                if p._daemonic:
+                    info('calling terminate() for daemon %s', p.name)
+                    p._popen.terminate()
+
+            for p in active_children():
+                info('calling join() for process %s', p.name)
+                p.join()
 
         debug('running the remaining "atexit" finalizers')
         _run_finalizers()
diff -r bd8afb90ebf2 Lib/os.py
--- a/Lib/os.py
+++ b/Lib/os.py
@@ -985,7 +985,7 @@
         raise TypeError("invalid cmd type (%s, expected string)" % type(cmd))
     if mode not in ("r", "w"):
         raise ValueError("invalid mode %r" % mode)
-    if buffering == 0 or buffering == None:
+    if buffering == 0 or buffering is None:
         raise ValueError("popen() does not support unbuffered streams")
     import subprocess, io
     if mode == "r":
diff -r bd8afb90ebf2 Lib/pdb.py
--- a/Lib/pdb.py
+++ b/Lib/pdb.py
@@ -1031,8 +1031,15 @@
         Continue execution, only stop when a breakpoint is encountered.
         """
         if not self.nosigint:
-            self._previous_sigint_handler = \
-                signal.signal(signal.SIGINT, self.sigint_handler)
+            try:
+                self._previous_sigint_handler = \
+                    signal.signal(signal.SIGINT, self.sigint_handler)
+            except ValueError:
+                # ValueError happens when do_continue() is invoked from
+                # a non-main thread in which case we just continue without
+                # SIGINT set. Would printing a message here (once) make
+                # sense?
+                pass
         self.set_continue()
         return 1
     do_c = do_cont = do_continue
diff -r bd8afb90ebf2 Lib/pickle.py
--- a/Lib/pickle.py
+++ b/Lib/pickle.py
@@ -263,7 +263,7 @@
             if i < 256:
                 return BINPUT + bytes([i])
             else:
-                return LONG_BINPUT + pack("<i", i)
+                return LONG_BINPUT + pack("<I", i)
 
         return PUT + repr(i).encode("ascii") + b'\n'
 
@@ -273,7 +273,7 @@
             if i < 256:
                 return BINGET + bytes([i])
             else:
-                return LONG_BINGET + pack("<i", i)
+                return LONG_BINGET + pack("<I", i)
 
         return GET + repr(i).encode("ascii") + b'\n'
 
@@ -503,7 +503,7 @@
         if n < 256:
             self.write(SHORT_BINBYTES + bytes([n]) + bytes(obj))
         else:
-            self.write(BINBYTES + pack("<i", n) + bytes(obj))
+            self.write(BINBYTES + pack("<I", n) + bytes(obj))
         self.memoize(obj)
     dispatch[bytes] = save_bytes
 
@@ -511,7 +511,7 @@
         if self.bin:
             encoded = obj.encode('utf-8', 'surrogatepass')
             n = len(encoded)
-            self.write(BINUNICODE + pack("<i", n) + encoded)
+            self.write(BINUNICODE + pack("<I", n) + encoded)
         else:
             obj = obj.replace("\\", "\\u005c")
             obj = obj.replace("\n", "\\u000a")
@@ -931,6 +931,9 @@
 
     def load_long4(self):
         n = mloads(b'i' + self.read(4))
+        if n < 0:
+            # Corrupt or hostile pickle -- we never write one like this
+            raise UnpicklingError("LONG pickle has negative byte count");
         data = self.read(n)
         self.append(decode_long(data))
     dispatch[LONG4[0]] = load_long4
@@ -959,14 +962,19 @@
     dispatch[STRING[0]] = load_string
 
     def load_binstring(self):
+        # Deprecated BINSTRING uses signed 32-bit length
         len = mloads(b'i' + self.read(4))
+        if len < 0:
+            raise UnpicklingError("BINSTRING pickle has negative byte count");
         data = self.read(len)
         value = str(data, self.encoding, self.errors)
         self.append(value)
     dispatch[BINSTRING[0]] = load_binstring
 
-    def load_binbytes(self):
-        len = mloads(b'i' + self.read(4))
+    def load_binbytes(self, unpack=struct.unpack, maxsize=sys.maxsize):
+        len, = unpack('<I', self.read(4))
+        if len > maxsize:
+            raise UnpicklingError("BINBYTES exceeds system's maximum size of %d bytes" % maxsize);
         self.append(self.read(len))
     dispatch[BINBYTES[0]] = load_binbytes
 
@@ -974,8 +982,10 @@
         self.append(str(self.readline()[:-1], 'raw-unicode-escape'))
     dispatch[UNICODE[0]] = load_unicode
 
-    def load_binunicode(self):
-        len = mloads(b'i' + self.read(4))
+    def load_binunicode(self, unpack=struct.unpack, maxsize=sys.maxsize):
+        len, = unpack('<I', self.read(4))
+        if len > maxsize:
+            raise UnpicklingError("BINUNICODE exceeds system's maximum size of %d bytes" % maxsize);
         self.append(str(self.read(len), 'utf-8', 'surrogatepass'))
     dispatch[BINUNICODE[0]] = load_binunicode
 
@@ -1106,6 +1116,9 @@
             return
         key = _inverted_registry.get(code)
         if not key:
+            if code <= 0: # note that 0 is forbidden
+                # Corrupt or hostile pickle.
+                raise UnpicklingError("EXT specifies code <= 0");
             raise ValueError("unregistered extension code %d" % code)
         obj = self.find_class(*key)
         _extension_cache[code] = obj
@@ -1159,8 +1172,8 @@
         self.append(self.memo[i])
     dispatch[BINGET[0]] = load_binget
 
-    def load_long_binget(self):
-        i = mloads(b'i' + self.read(4))
+    def load_long_binget(self, unpack=struct.unpack):
+        i, = unpack('<I', self.read(4))
         self.append(self.memo[i])
     dispatch[LONG_BINGET[0]] = load_long_binget
 
@@ -1178,9 +1191,9 @@
         self.memo[i] = self.stack[-1]
     dispatch[BINPUT[0]] = load_binput
 
-    def load_long_binput(self):
-        i = mloads(b'i' + self.read(4))
-        if i < 0:
+    def load_long_binput(self, unpack=struct.unpack, maxsize=sys.maxsize):
+        i, = unpack('<I', self.read(4))
+        if i > maxsize:
             raise ValueError("negative LONG_BINPUT argument")
         self.memo[i] = self.stack[-1]
     dispatch[LONG_BINPUT[0]] = load_long_binput
diff -r bd8afb90ebf2 Lib/pkgutil.py
--- a/Lib/pkgutil.py
+++ b/Lib/pkgutil.py
@@ -504,8 +504,8 @@
         return importlib.find_loader(fullname, path)
     except (ImportError, AttributeError, TypeError, ValueError) as ex:
         # This hack fixes an impedance mismatch between pkgutil and
-        # importlib, where the latter throws other errors for cases where
-        # pkgutil previously threw ImportError
+        # importlib, where the latter raises other errors for cases where
+        # pkgutil previously raised ImportError
         msg = "Error while finding loader for {!r} ({}: {})"
         raise ImportError(msg.format(fullname, type(ex), ex)) from ex
 
diff -r bd8afb90ebf2 Lib/platform.py
--- a/Lib/platform.py
+++ b/Lib/platform.py
@@ -112,7 +112,7 @@
 __version__ = '1.0.7'
 
 import collections
-import sys, os, re
+import sys, os, re, subprocess
 
 ### Globals & Constants
 
@@ -595,8 +595,13 @@
                     release = '7'
                 else:
                     release = '2008ServerR2'
+            elif min == 2:
+                if product_type == VER_NT_WORKSTATION:
+                    release = '8'
+                else:
+                    release = '2012Server'
             else:
-                release = 'post2008Server'
+                release = 'post2012Server'
 
     else:
         if not release:
@@ -922,13 +927,15 @@
     if sys.platform in ('dos','win32','win16','os2'):
         # XXX Others too ?
         return default
-    target = _follow_symlinks(target).replace('"', '\\"')
+    target = _follow_symlinks(target)
     try:
-        f = os.popen('file -b "%s" 2> %s' % (target, DEV_NULL))
+        proc = subprocess.Popen(['file', target],
+                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
+
     except (AttributeError,os.error):
         return default
-    output = f.read().strip()
-    rc = f.close()
+    output = proc.communicate()[0].decode('latin-1')
+    rc = proc.wait()
     if not output or rc:
         return default
     else:
diff -r bd8afb90ebf2 Lib/pstats.py
--- a/Lib/pstats.py
+++ b/Lib/pstats.py
@@ -159,15 +159,19 @@
     # along with some printable description
     sort_arg_dict_default = {
               "calls"     : (((1,-1),              ), "call count"),
+              "ncalls"    : (((1,-1),              ), "call count"),
+              "cumtime"   : (((3,-1),              ), "cumulative time"),
               "cumulative": (((3,-1),              ), "cumulative time"),
               "file"      : (((4, 1),              ), "file name"),
+              "filename"  : (((4, 1),              ), "file name"),
               "line"      : (((5, 1),              ), "line number"),
               "module"    : (((4, 1),              ), "file name"),
               "name"      : (((6, 1),              ), "function name"),
               "nfl"       : (((6, 1),(4, 1),(5, 1),), "name/file/line"),
-              "pcalls"    : (((0,-1),              ), "call count"),
+              "pcalls"    : (((0,-1),              ), "primitive call count"),
               "stdname"   : (((7, 1),              ), "standard name"),
               "time"      : (((2,-1),              ), "internal time"),
+              "tottime"   : (((2,-1),              ), "internal time"),
               }
 
     def get_sort_arg_defs(self):
diff -r bd8afb90ebf2 Lib/pydoc.py
--- a/Lib/pydoc.py
+++ b/Lib/pydoc.py
@@ -2551,8 +2551,8 @@
             if opt == '-w':
                 writing = True
 
-        if start_server == True:
-            if port == None:
+        if start_server:
+            if port is None:
                 port = 0
             browse(port, open_browser=open_browser)
             return
diff -r bd8afb90ebf2 Lib/shutil.py
--- a/Lib/shutil.py
+++ b/Lib/shutil.py
@@ -375,19 +375,20 @@
     names = []
     try:
         names = os.listdir(topfd)
-    except os.error:
+    except OSError as err:
+        err.filename = path
         onerror(os.listdir, path, sys.exc_info())
     for name in names:
         fullname = os.path.join(path, name)
         try:
             orig_st = os.stat(name, dir_fd=topfd, follow_symlinks=False)
             mode = orig_st.st_mode
-        except os.error:
+        except OSError:
             mode = 0
         if stat.S_ISDIR(mode):
             try:
                 dirfd = os.open(name, os.O_RDONLY, dir_fd=topfd)
-            except os.error:
+            except OSError:
                 onerror(os.open, fullname, sys.exc_info())
             else:
                 try:
@@ -395,14 +396,23 @@
                         _rmtree_safe_fd(dirfd, fullname, onerror)
                         try:
                             os.rmdir(name, dir_fd=topfd)
-                        except os.error:
+                        except OSError:
                             onerror(os.rmdir, fullname, sys.exc_info())
+                    else:
+                        try:
+                            # This can only happen if someone replaces
+                            # a directory with a symlink after the call to
+                            # stat.S_ISDIR above.
+                            raise OSError("Cannot call rmtree on a symbolic "
+                                          "link")
+                        except OSError:
+                            onerror(os.path.islink, fullname, sys.exc_info())
                 finally:
                     os.close(dirfd)
         else:
             try:
                 os.unlink(name, dir_fd=topfd)
-            except os.error:
+            except OSError:
                 onerror(os.unlink, fullname, sys.exc_info())
 
 _use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=
@@ -444,16 +454,18 @@
             onerror(os.lstat, path, sys.exc_info())
             return
         try:
-            if (stat.S_ISDIR(orig_st.st_mode) and
-                os.path.samestat(orig_st, os.fstat(fd))):
+            if os.path.samestat(orig_st, os.fstat(fd)):
                 _rmtree_safe_fd(fd, path, onerror)
                 try:
                     os.rmdir(path)
                 except os.error:
                     onerror(os.rmdir, path, sys.exc_info())
             else:
-                raise NotADirectoryError(20,
-                                         "Not a directory: '{}'".format(path))
+                try:
+                    # symlinks to directories are forbidden, see bug #1669
+                    raise OSError("Cannot call rmtree on a symbolic link")
+                except OSError:
+                    onerror(os.path.islink, path, sys.exc_info())
         finally:
             os.close(fd)
     else:
diff -r bd8afb90ebf2 Lib/site.py
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -503,15 +503,13 @@
         executable = os.environ['__PYVENV_LAUNCHER__']
     else:
         executable = sys.executable
-    executable_dir, executable_name = os.path.split(executable)
-    site_prefix = os.path.dirname(executable_dir)
+    exe_dir, _ = os.path.split(os.path.abspath(executable))
+    site_prefix = os.path.dirname(exe_dir)
     sys._home = None
-    if sys.platform == 'win32':
-        executable_name = os.path.splitext(executable_name)[0]
     conf_basename = 'pyvenv.cfg'
     candidate_confs = [
         conffile for conffile in (
-            os.path.join(executable_dir, conf_basename),
+            os.path.join(exe_dir, conf_basename),
             os.path.join(site_prefix, conf_basename)
             )
         if os.path.isfile(conffile)
diff -r bd8afb90ebf2 Lib/smtplib.py
--- a/Lib/smtplib.py
+++ b/Lib/smtplib.py
@@ -920,13 +920,13 @@
             self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
             self.file = None
             self.sock.connect(host)
-        except socket.error as msg:
+        except socket.error:
             if self.debuglevel > 0:
                 print('connect fail:', host, file=stderr)
             if self.sock:
                 self.sock.close()
             self.sock = None
-            raise socket.error(msg)
+            raise
         (code, msg) = self.getreply()
         if self.debuglevel > 0:
             print('connect:', msg, file=stderr)
diff -r bd8afb90ebf2 Lib/socket.py
--- a/Lib/socket.py
+++ b/Lib/socket.py
@@ -324,12 +324,23 @@
     def readable(self):
         """True if the SocketIO is open for reading.
         """
-        return self._reading and not self.closed
+        if self.closed:
+            raise ValueError("I/O operation on closed socket.")
+        return self._reading
 
     def writable(self):
         """True if the SocketIO is open for writing.
         """
-        return self._writing and not self.closed
+        if self.closed:
+            raise ValueError("I/O operation on closed socket.")
+        return self._writing
+
+    def seekable(self):
+        """True if the SocketIO is open for seeking.
+        """
+        if self.closed:
+            raise ValueError("I/O operation on closed socket.")
+        return super().seekable()
 
     def fileno(self):
         """Return the file descriptor of the underlying socket.
diff -r bd8afb90ebf2 Lib/socketserver.py
--- a/Lib/socketserver.py
+++ b/Lib/socketserver.py
@@ -562,7 +562,7 @@
         self.collect_children()
 
     def service_actions(self):
-        """Collect the zombie child processes regularly in the ForkingMixin.
+        """Collect the zombie child processes regularly in the ForkingMixIn.
 
         service_actions is called in the BaseServer's serve_forver loop.
         """
diff -r bd8afb90ebf2 Lib/sre_parse.py
--- a/Lib/sre_parse.py
+++ b/Lib/sre_parse.py
@@ -580,6 +580,8 @@
                                 break
                             name = name + char
                         group = 1
+                        if not name:
+                            raise error("missing group name")
                         if not isname(name):
                             raise error("bad character in group name")
                     elif sourcematch("="):
@@ -592,6 +594,8 @@
                             if char == ")":
                                 break
                             name = name + char
+                        if not name:
+                            raise error("missing group name")
                         if not isname(name):
                             raise error("bad character in group name")
                         gid = state.groupdict.get(name)
@@ -644,6 +648,8 @@
                             break
                         condname = condname + char
                     group = 2
+                    if not condname:
+                        raise error("missing group name")
                     if isname(condname):
                         condgroup = state.groupdict.get(condname)
                         if condgroup is None:
@@ -775,7 +781,7 @@
                             break
                         name = name + char
                 if not name:
-                    raise error("bad group name")
+                    raise error("missing group name")
                 try:
                     index = int(name)
                     if index < 0:
diff -r bd8afb90ebf2 Lib/ssl.py
--- a/Lib/ssl.py
+++ b/Lib/ssl.py
@@ -553,16 +553,11 @@
         SSL channel, and the address of the remote client."""
 
         newsock, addr = socket.accept(self)
-        return (SSLSocket(sock=newsock,
-                          keyfile=self.keyfile, certfile=self.certfile,
-                          server_side=True,
-                          cert_reqs=self.cert_reqs,
-                          ssl_version=self.ssl_version,
-                          ca_certs=self.ca_certs,
-                          ciphers=self.ciphers,
-                          do_handshake_on_connect=
-                              self.do_handshake_on_connect),
-                addr)
+        newsock = self.context.wrap_socket(newsock,
+                    do_handshake_on_connect=self.do_handshake_on_connect,
+                    suppress_ragged_eofs=self.suppress_ragged_eofs,
+                    server_side=True)
+        return newsock, addr
 
     def get_channel_binding(self, cb_type="tls-unique"):
         """Get channel binding data for current connection.  Raise ValueError
diff -r bd8afb90ebf2 Lib/subprocess.py
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -817,13 +817,27 @@
                                 errread, errwrite,
                                 restore_signals, start_new_session)
         except:
-            # Cleanup if the child failed starting
-            for f in filter(None, [self.stdin, self.stdout, self.stderr]):
+            # Cleanup if the child failed starting.
+            for f in filter(None, (self.stdin, self.stdout, self.stderr)):
                 try:
                     f.close()
                 except EnvironmentError:
-                    # Ignore EBADF or other errors
+                    pass  # Ignore EBADF or other errors.
+
+            # Make sure the child pipes are closed as well.
+            to_close = []
+            if stdin == PIPE:
+                to_close.append(p2cread)
+            if stdout == PIPE:
+                to_close.append(c2pwrite)
+            if stderr == PIPE:
+                to_close.append(errwrite)
+            for fd in to_close:
+                try:
+                    os.close(fd)
+                except EnvironmentError:
                     pass
+
             raise
 
 
@@ -1327,6 +1341,7 @@
 
             if executable is None:
                 executable = args[0]
+            orig_executable = executable
 
             # For transferring possible exec failure from child to parent.
             # Data format: "exception name:hex errno:description"
@@ -1377,42 +1392,47 @@
 
                 # Wait for exec to fail or succeed; possibly raising an
                 # exception (limited in size)
-                data = bytearray()
+                errpipe_data = bytearray()
                 while True:
                     part = _eintr_retry_call(os.read, errpipe_read, 50000)
-                    data += part
-                    if not part or len(data) > 50000:
+                    errpipe_data += part
+                    if not part or len(errpipe_data) > 50000:
                         break
             finally:
                 # be sure the FD is closed no matter what
                 os.close(errpipe_read)
 
-            if data:
+            if errpipe_data:
                 try:
                     _eintr_retry_call(os.waitpid, self.pid, 0)
                 except OSError as e:
                     if e.errno != errno.ECHILD:
                         raise
                 try:
-                    exception_name, hex_errno, err_msg = data.split(b':', 2)
+                    exception_name, hex_errno, err_msg = (
+                            errpipe_data.split(b':', 2))
                 except ValueError:
-                    print('Bad exception data:', repr(data))
                     exception_name = b'RuntimeError'
                     hex_errno = b'0'
-                    err_msg = b'Unknown'
+                    err_msg = (b'Bad exception data from child: ' +
+                               repr(errpipe_data))
                 child_exception_type = getattr(
                         builtins, exception_name.decode('ascii'),
                         RuntimeError)
-                for fd in (p2cwrite, c2pread, errread):
-                    if fd != -1:
-                        os.close(fd)
                 err_msg = err_msg.decode(errors="surrogatepass")
                 if issubclass(child_exception_type, OSError) and hex_errno:
                     errno_num = int(hex_errno, 16)
+                    child_exec_never_called = (err_msg == "noexec")
+                    if child_exec_never_called:
+                        err_msg = ""
                     if errno_num != 0:
                         err_msg = os.strerror(errno_num)
                         if errno_num == errno.ENOENT:
-                            err_msg += ': ' + repr(args[0])
+                            if child_exec_never_called:
+                                # The error must be from chdir(cwd).
+                                err_msg += ': ' + repr(cwd)
+                            else:
+                                err_msg += ': ' + repr(orig_executable)
                     raise child_exception_type(errno_num, err_msg)
                 raise child_exception_type(err_msg)
 
@@ -1445,9 +1465,16 @@
                     pid, sts = _waitpid(self.pid, _WNOHANG)
                     if pid == self.pid:
                         self._handle_exitstatus(sts)
-                except _os_error:
+                except _os_error as e:
                     if _deadstate is not None:
                         self.returncode = _deadstate
+                    elif e.errno == errno.ECHILD:
+                        # This happens if SIGCLD is set to be ignored or
+                        # waiting for child processes has otherwise been
+                        # disabled for our process.  This child is dead, we
+                        # can't get the status.
+                        # http://bugs.python.org/issue15756
+                        self.returncode = 0
             return self.returncode
 
 
@@ -1494,9 +1521,13 @@
                         raise TimeoutExpired(self.args, timeout)
                     delay = min(delay * 2, remaining, .05)
                     time.sleep(delay)
-            elif self.returncode is None:
-                (pid, sts) = self._try_wait(0)
-                self._handle_exitstatus(sts)
+            else:
+                while self.returncode is None:
+                    (pid, sts) = self._try_wait(0)
+                    # Check the pid and loop as waitpid has been known to return
+                    # 0 even without WNOHANG in odd situations.  issue14396.
+                    if pid == self.pid:
+                        self._handle_exitstatus(sts)
             return self.returncode
 
 
diff -r bd8afb90ebf2 Lib/sysconfig.py
--- a/Lib/sysconfig.py
+++ b/Lib/sysconfig.py
@@ -390,13 +390,40 @@
     if _PYTHON_BUILD:
         vars['LDSHARED'] = vars['BLDSHARED']
 
-    destfile = os.path.join(os.path.dirname(__file__), '_sysconfigdata.py')
+    # There's a chicken-and-egg situation on OS X with regards to the
+    # _sysconfigdata module after the changes introduced by #15298:
+    # get_config_vars() is called by get_platform() as part of the
+    # `make pybuilddir.txt` target -- which is a precursor to the
+    # _sysconfigdata.py module being constructed.  Unfortunately,
+    # get_config_vars() eventually calls _init_posix(), which attempts
+    # to import _sysconfigdata, which we won't have built yet.  In order
+    # for _init_posix() to work, if we're on Darwin, just mock up the
+    # _sysconfigdata module manually and populate it with the build vars.
+    # This is more than sufficient for ensuring the subsequent call to
+    # get_platform() succeeds.
+    name = '_sysconfigdata'
+    if 'darwin' in sys.platform:
+        import imp
+        module = imp.new_module(name)
+        module.build_time_vars = vars
+        sys.modules[name] = module
+
+    pybuilddir = 'build/lib.%s-%s' % (get_platform(), sys.version[:3])
+    if hasattr(sys, "gettotalrefcount"):
+        pybuilddir += '-pydebug'
+    os.makedirs(pybuilddir, exist_ok=True)
+    destfile = os.path.join(pybuilddir, name + '.py')
+
     with open(destfile, 'w', encoding='utf8') as f:
         f.write('# system configuration generated and used by'
                 ' the sysconfig module\n')
         f.write('build_time_vars = ')
         pprint.pprint(vars, stream=f)
 
+    # Create file used for sys.path fixup -- see Modules/getpath.c
+    with open('pybuilddir.txt', 'w', encoding='ascii') as f:
+        f.write(pybuilddir)
+
 def _init_posix(vars):
     """Initialize the module as appropriate for POSIX systems."""
     # _sysconfigdata is generated at build time, see _generate_posix_vars()
diff -r bd8afb90ebf2 Lib/tabnanny.py
--- a/Lib/tabnanny.py
+++ b/Lib/tabnanny.py
@@ -188,21 +188,21 @@
         # count, il = self.norm
         # for i in range(len(count)):
         #    if count[i]:
-        #        il = il + (i/tabsize + 1)*tabsize * count[i]
+        #        il = il + (i//tabsize + 1)*tabsize * count[i]
         # return il
 
         # quicker:
-        # il = trailing + sum (i/ts + 1)*ts*count[i] =
-        # trailing + ts * sum (i/ts + 1)*count[i] =
-        # trailing + ts * sum i/ts*count[i] + count[i] =
-        # trailing + ts * [(sum i/ts*count[i]) + (sum count[i])] =
-        # trailing + ts * [(sum i/ts*count[i]) + num_tabs]
-        # and note that i/ts*count[i] is 0 when i < ts
+        # il = trailing + sum (i//ts + 1)*ts*count[i] =
+        # trailing + ts * sum (i//ts + 1)*count[i] =
+        # trailing + ts * sum i//ts*count[i] + count[i] =
+        # trailing + ts * [(sum i//ts*count[i]) + (sum count[i])] =
+        # trailing + ts * [(sum i//ts*count[i]) + num_tabs]
+        # and note that i//ts*count[i] is 0 when i < ts
 
         count, trailing = self.norm
         il = 0
         for i in range(tabsize, len(count)):
-            il = il + i/tabsize * count[i]
+            il = il + i//tabsize * count[i]
         return trailing + tabsize * (il + self.nt)
 
     # return true iff self.indent_level(t) == other.indent_level(t)
diff -r bd8afb90ebf2 Lib/tarfile.py
--- a/Lib/tarfile.py
+++ b/Lib/tarfile.py
@@ -1924,9 +1924,8 @@
 
         # Append the tar header and data to the archive.
         if tarinfo.isreg():
-            f = bltn_open(name, "rb")
-            self.addfile(tarinfo, f)
-            f.close()
+            with bltn_open(name, "rb") as f:
+                self.addfile(tarinfo, f)
 
         elif tarinfo.isdir():
             self.addfile(tarinfo)
@@ -2131,16 +2130,15 @@
         """
         source = self.fileobj
         source.seek(tarinfo.offset_data)
-        target = bltn_open(targetpath, "wb")
-        if tarinfo.sparse is not None:
-            for offset, size in tarinfo.sparse:
-                target.seek(offset)
-                copyfileobj(source, target, size)
-        else:
-            copyfileobj(source, target, tarinfo.size)
-        target.seek(tarinfo.size)
-        target.truncate()
-        target.close()
+        with bltn_open(targetpath, "wb") as target:
+            if tarinfo.sparse is not None:
+                for offset, size in tarinfo.sparse:
+                    target.seek(offset)
+                    copyfileobj(source, target, size)
+            else:
+                copyfileobj(source, target, tarinfo.size)
+            target.seek(tarinfo.size)
+            target.truncate()
 
     def makeunknown(self, tarinfo, targetpath):
         """Make a file from a TarInfo object with an unknown type
diff -r bd8afb90ebf2 Lib/tempfile.py
--- a/Lib/tempfile.py
+++ b/Lib/tempfile.py
@@ -621,7 +621,7 @@
 
     def __init__(self, suffix="", prefix=template, dir=None):
         self._closed = False
-        self.name = None # Handle mkdtemp throwing an exception
+        self.name = None # Handle mkdtemp raising an exception
         self.name = mkdtemp(suffix, prefix, dir)
 
     def __repr__(self):
diff -r bd8afb90ebf2 Lib/test/crashers/compiler_recursion.py
--- a/Lib/test/crashers/compiler_recursion.py
+++ /dev/null
@@ -1,13 +0,0 @@
-"""
-The compiler (>= 2.5) recurses happily until it blows the stack.
-
-Recorded on the tracker as http://bugs.python.org/issue11383
-"""
-
-# The variant below blows up in compiler_call, but there are assorted
-# other variations that blow up in other functions
-# e.g. '1*'*10**5+'1' will die in compiler_visit_expr
-
-# The exact limit to destroy the stack will vary by platform
-# but 10M should do the trick even with huge stack allocations
-compile('()'*10**7, '?', 'exec')
diff -r bd8afb90ebf2 Lib/test/crashers/recursion_limit_too_high.py
--- a/Lib/test/crashers/recursion_limit_too_high.py
+++ /dev/null
@@ -1,16 +0,0 @@
-# The following example may crash or not depending on the platform.
-# E.g. on 32-bit Intel Linux in a "standard" configuration it seems to
-# crash on Python 2.5 (but not 2.4 nor 2.3).  On Windows the import
-# eventually fails to find the module, possibly because we run out of
-# file handles.
-
-# The point of this example is to show that sys.setrecursionlimit() is a
-# hack, and not a robust solution.  This example simply exercises a path
-# where it takes many C-level recursions, consuming a lot of stack
-# space, for each Python-level recursion.  So 1000 times this amount of
-# stack space may be too much for standard platforms already.
-
-import sys
-if 'recursion_limit_too_high' in sys.modules:
-    del sys.modules['recursion_limit_too_high']
-import recursion_limit_too_high
diff -r bd8afb90ebf2 Lib/test/crashers/trace_at_recursion_limit.py
--- /dev/null
+++ b/Lib/test/crashers/trace_at_recursion_limit.py
@@ -0,0 +1,27 @@
+"""
+From http://bugs.python.org/issue6717
+
+A misbehaving trace hook can trigger a segfault by exceeding the recursion
+limit.
+"""
+import sys
+
+
+def x():
+    pass
+
+def g(*args):
+    if True: # change to True to crash interpreter
+        try:
+            x()
+        except:
+            pass
+    return g
+
+def f():
+    print(sys.getrecursionlimit())
+    f()
+
+sys.settrace(g)
+
+f()
diff -r bd8afb90ebf2 Lib/test/json_tests/test_dump.py
--- a/Lib/test/json_tests/test_dump.py
+++ b/Lib/test/json_tests/test_dump.py
@@ -20,6 +20,14 @@
                 {2: 3.0, 4.0: 5, False: 1, 6: True}, sort_keys=True),
                 '{"false": 1, "2": 3.0, "4.0": 5, "6": true}')
 
+    # Issue 16228: Crash on encoding resized list
+    def test_encode_mutated(self):
+        a = [object()] * 10
+        def crasher(obj):
+            del a[-1]
+        self.assertEqual(self.dumps(a, default=crasher),
+                 '[null, null, null, null, null]')
+
 
 class TestPyDump(TestDump, PyTest): pass
 
diff -r bd8afb90ebf2 Lib/test/json_tests/test_fail.py
--- a/Lib/test/json_tests/test_fail.py
+++ b/Lib/test/json_tests/test_fail.py
@@ -1,13 +1,13 @@
 from test.json_tests import PyTest, CTest
 
-# Fri Dec 30 18:57:26 2005
+# 2007-10-05
 JSONDOCS = [
     # http://json.org/JSON_checker/test/fail1.json
     '"A JSON payload should be an object or array, not a string."',
     # http://json.org/JSON_checker/test/fail2.json
     '["Unclosed array"',
     # http://json.org/JSON_checker/test/fail3.json
-    '{unquoted_key: "keys must be quoted}',
+    '{unquoted_key: "keys must be quoted"}',
     # http://json.org/JSON_checker/test/fail4.json
     '["extra comma",]',
     # http://json.org/JSON_checker/test/fail5.json
@@ -33,7 +33,7 @@
     # http://json.org/JSON_checker/test/fail15.json
     '["Illegal backslash escape: \\x15"]',
     # http://json.org/JSON_checker/test/fail16.json
-    '["Illegal backslash escape: \\\'"]',
+    '[\\naked]',
     # http://json.org/JSON_checker/test/fail17.json
     '["Illegal backslash escape: \\017"]',
     # http://json.org/JSON_checker/test/fail18.json
@@ -50,6 +50,24 @@
     '["Bad value", truth]',
     # http://json.org/JSON_checker/test/fail24.json
     "['single quote']",
+    # http://json.org/JSON_checker/test/fail25.json
+    '["\ttab\tcharacter\tin\tstring\t"]',
+    # http://json.org/JSON_checker/test/fail26.json
+    '["tab\\   character\\   in\\  string\\  "]',
+    # http://json.org/JSON_checker/test/fail27.json
+    '["line\nbreak"]',
+    # http://json.org/JSON_checker/test/fail28.json
+    '["line\\\nbreak"]',
+    # http://json.org/JSON_checker/test/fail29.json
+    '[0e]',
+    # http://json.org/JSON_checker/test/fail30.json
+    '[0e+]',
+    # http://json.org/JSON_checker/test/fail31.json
+    '[0e+-1]',
+    # http://json.org/JSON_checker/test/fail32.json
+    '{"Comma instead if closing brace": true,',
+    # http://json.org/JSON_checker/test/fail33.json
+    '["mismatch"}',
     # http://code.google.com/p/simplejson/issues/detail?id=3
     '["A\u001FZ control characters in string"]',
 ]
diff -r bd8afb90ebf2 Lib/test/json_tests/test_float.py
--- a/Lib/test/json_tests/test_float.py
+++ b/Lib/test/json_tests/test_float.py
@@ -13,6 +13,21 @@
             self.assertEqual(self.dumps(num), str(num))
             self.assertEqual(int(self.dumps(num)), num)
 
+    def test_out_of_range(self):
+        self.assertEqual(self.loads('[23456789012E666]'), [float('inf')])
+        self.assertEqual(self.loads('[-23456789012E666]'), [float('-inf')])
+
+    def test_allow_nan(self):
+        for val in (float('inf'), float('-inf'), float('nan')):
+            out = self.dumps([val])
+            if val == val:  # inf
+                self.assertEqual(self.loads(out), [val])
+            else:  # nan
+                res = self.loads(out)
+                self.assertEqual(len(res), 1)
+                self.assertNotEqual(res[0], res[0])
+            self.assertRaises(ValueError, self.dumps, [val], allow_nan=False)
+
 
 class TestPyFloat(TestFloat, PyTest): pass
 class TestCFloat(TestFloat, CTest): pass
diff -r bd8afb90ebf2 Lib/test/json_tests/test_pass1.py
--- a/Lib/test/json_tests/test_pass1.py
+++ b/Lib/test/json_tests/test_pass1.py
@@ -17,7 +17,7 @@
         "real": -9876.543210,
         "e": 0.123456789e-12,
         "E": 1.234567890E+34,
-        "":  23456789012E666,
+        "":  23456789012E66,
         "zero": 0,
         "one": 1,
         "space": " ",
@@ -28,6 +28,7 @@
         "alpha": "abcdefghijklmnopqrstuvwyz",
         "ALPHA": "ABCDEFGHIJKLMNOPQRSTUVWYZ",
         "digit": "0123456789",
+        "0123456789": "digit",
         "special": "`1~!@#$%^&*()_+-={':[,]}|;.</>?",
         "hex": "\u0123\u4567\u89AB\uCDEF\uabcd\uef4A",
         "true": true,
@@ -43,8 +44,7 @@
 
 ,
 
-4 , 5        ,          6           ,7        ],
-        "compact": [1,2,3,4,5,6,7],
+4 , 5        ,          6           ,7        ],"compact":[1,2,3,4,5,6,7],
         "jsontext": "{\"object with 1 member\":[\"array with 1 element\"]}",
         "quotes": "&#34; \u0022 %22 0x22 034 &#x22;",
         "\/\\\"\uCAFE\uBABE\uAB98\uFCDE\ubcda\uef4A\b\f\n\r\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?"
@@ -55,9 +55,11 @@
 99.44
 ,
 
-1066
-
-
+1066,
+1e1,
+0.1e1,
+1e-1,
+1e00,2e+00,2e-00
 ,"rosebud"]
 '''
 
@@ -67,12 +69,6 @@
         res = self.loads(JSON)
         out = self.dumps(res)
         self.assertEqual(res, self.loads(out))
-        try:
-            self.dumps(res, allow_nan=False)
-        except ValueError:
-            pass
-        else:
-            self.fail("23456789012E666 should be out of range")
 
 
 class TestPyPass1(TestPass1, PyTest): pass
diff -r bd8afb90ebf2 Lib/test/json_tests/test_tool.py
--- /dev/null
+++ b/Lib/test/json_tests/test_tool.py
@@ -0,0 +1,69 @@
+import os
+import sys
+import textwrap
+import unittest
+import subprocess
+from test import support
+from test.script_helper import assert_python_ok
+
+class TestTool(unittest.TestCase):
+    data = """
+
+        [["blorpie"],[ "whoops" ] , [
+                                 ],\t"d-shtaeou",\r"d-nthiouh",
+        "i-vhbjkhnth", {"nifty":87}, {"morefield" :\tfalse,"field"
+            :"yes"}  ]
+           """
+
+    expect = textwrap.dedent("""\
+    [
+        [
+            "blorpie"
+        ],
+        [
+            "whoops"
+        ],
+        [],
+        "d-shtaeou",
+        "d-nthiouh",
+        "i-vhbjkhnth",
+        {
+            "nifty": 87
+        },
+        {
+            "field": "yes",
+            "morefield": false
+        }
+    ]
+    """)
+
+    def test_stdin_stdout(self):
+        with subprocess.Popen(
+                (sys.executable, '-m', 'json.tool'),
+                stdin=subprocess.PIPE, stdout=subprocess.PIPE) as proc:
+            out, err = proc.communicate(self.data.encode())
+        self.assertEqual(out.splitlines(), self.expect.encode().splitlines())
+        self.assertEqual(err, None)
+
+    def _create_infile(self):
+        infile = support.TESTFN
+        with open(infile, "w") as fp:
+            self.addCleanup(os.remove, infile)
+            fp.write(self.data)
+        return infile
+
+    def test_infile_stdout(self):
+        infile = self._create_infile()
+        rc, out, err = assert_python_ok('-m', 'json.tool', infile)
+        self.assertEqual(out.splitlines(), self.expect.encode().splitlines())
+        self.assertEqual(err, b'')
+
+    def test_infile_outfile(self):
+        infile = self._create_infile()
+        outfile = support.TESTFN + '.out'
+        rc, out, err = assert_python_ok('-m', 'json.tool', infile, outfile)
+        self.addCleanup(os.remove, outfile)
+        with open(outfile, "r") as fp:
+            self.assertEqual(fp.read(), self.expect)
+        self.assertEqual(out, b'')
+        self.assertEqual(err, b'')
diff -r bd8afb90ebf2 Lib/test/multibytecodec_support.py
--- a/Lib/test/multibytecodec_support.py
+++ b/Lib/test/multibytecodec_support.py
@@ -108,12 +108,19 @@
         self.assertEqual(self.encode(sin,
                                     "test.xmlcharnamereplace")[0], sout)
 
+    def test_callback_returns_bytes(self):
+        def myreplace(exc):
+            return (b"1234", exc.end)
+        codecs.register_error("test.cjktest", myreplace)
+        enc = self.encode("abc" + self.unmappedunicode + "def", "test.cjktest")[0]
+        self.assertEqual(enc, b"abc1234def")
+
     def test_callback_wrong_objects(self):
         def myreplace(exc):
             return (ret, exc.end)
         codecs.register_error("test.cjktest", myreplace)
 
-        for ret in ([1, 2, 3], [], None, object(), b'string', b''):
+        for ret in ([1, 2, 3], [], None, object()):
             self.assertRaises(TypeError, self.encode, self.unmappedunicode,
                               'test.cjktest')
 
diff -r bd8afb90ebf2 Lib/test/regrtest.py
--- a/Lib/test/regrtest.py
+++ b/Lib/test/regrtest.py
@@ -556,10 +556,10 @@
             next_single_test = alltests[alltests.index(selected[0])+1]
         except IndexError:
             next_single_test = None
-    # Remove all the tests that precede start if it's set.
+    # Remove all the selected tests that precede start if it's set.
     if start:
         try:
-            del tests[:tests.index(start)]
+            del selected[:selected.index(start)]
         except ValueError:
             print("Couldn't find starting test (%s), using all tests" % start)
     if randomize:
diff -r bd8afb90ebf2 Lib/test/sample_doctest_no_docstrings.py
--- /dev/null
+++ b/Lib/test/sample_doctest_no_docstrings.py
@@ -0,0 +1,12 @@
+# This is a sample module used for testing doctest.
+#
+# This module is for testing how doctest handles a module with no
+# docstrings.
+
+
+class Foo(object):
+
+    # A class with no docstring.
+
+    def __init__(self):
+        pass
diff -r bd8afb90ebf2 Lib/test/sample_doctest_no_doctests.py
--- /dev/null
+++ b/Lib/test/sample_doctest_no_doctests.py
@@ -0,0 +1,15 @@
+"""This is a sample module used for testing doctest.
+
+This module is for testing how doctest handles a module with docstrings
+but no doctest examples.
+
+"""
+
+
+class Foo(object):
+    """A docstring with no doctest examples.
+
+    """
+
+    def __init__(self):
+        pass
diff -r bd8afb90ebf2 Lib/test/string_tests.py
--- a/Lib/test/string_tests.py
+++ b/Lib/test/string_tests.py
@@ -1206,6 +1206,9 @@
         self.checkraises(ValueError, '%%%df' % (2**64), '__mod__', (3.2))
         self.checkraises(ValueError, '%%.%df' % (2**64), '__mod__', (3.2))
 
+        class X(object): pass
+        self.checkraises(TypeError, 'abc', '__mod__', X())
+
     def test_floatformatting(self):
         # float formatting
         for prec in range(100):
diff -r bd8afb90ebf2 Lib/test/subprocessdata/sigchild_ignore.py
--- a/Lib/test/subprocessdata/sigchild_ignore.py
+++ b/Lib/test/subprocessdata/sigchild_ignore.py
@@ -1,6 +1,15 @@
-import signal, subprocess, sys
+import signal, subprocess, sys, time
 # On Linux this causes os.waitpid to fail with OSError as the OS has already
 # reaped our child process.  The wait() passing the OSError on to the caller
 # and causing us to exit with an error is what we are testing against.
 signal.signal(signal.SIGCHLD, signal.SIG_IGN)
 subprocess.Popen([sys.executable, '-c', 'print("albatross")']).wait()
+# Also ensure poll() handles an errno.ECHILD appropriately.
+p = subprocess.Popen([sys.executable, '-c', 'print("albatross")'])
+num_polls = 0
+while p.poll() is None:
+    # Waiting for the process to finish.
+    time.sleep(0.01)  # Avoid being a CPU busy loop.
+    num_polls += 1
+    if num_polls > 3000:
+        raise RuntimeError('poll should have returned 0 within 30 seconds')
diff -r bd8afb90ebf2 Lib/test/support.py
--- a/Lib/test/support.py
+++ b/Lib/test/support.py
@@ -603,6 +603,49 @@
 # module name.
 TESTFN = "{}_{}_tmp".format(TESTFN, os.getpid())
 
+# FS_NONASCII: non-ASCII character encodable by os.fsencode(),
+# or None if there is no such character.
+FS_NONASCII = None
+for character in (
+    # First try printable and common characters to have a readable filename.
+    # For each character, the encoding list are just example of encodings able
+    # to encode the character (the list is not exhaustive).
+
+    # U+00E6 (Latin Small Letter Ae): cp1252, iso-8859-1
+    '\u00E6',
+    # U+0130 (Latin Capital Letter I With Dot Above): cp1254, iso8859_3
+    '\u0130',
+    # U+0141 (Latin Capital Letter L With Stroke): cp1250, cp1257
+    '\u0141',
+    # U+03C6 (Greek Small Letter Phi): cp1253
+    '\u03C6',
+    # U+041A (Cyrillic Capital Letter Ka): cp1251
+    '\u041A',
+    # U+05D0 (Hebrew Letter Alef): Encodable to cp424
+    '\u05D0',
+    # U+060C (Arabic Comma): cp864, cp1006, iso8859_6, mac_arabic
+    '\u060C',
+    # U+062A (Arabic Letter Teh): cp720
+    '\u062A',
+    # U+0E01 (Thai Character Ko Kai): cp874
+    '\u0E01',
+
+    # Then try more "special" characters. "special" because they may be
+    # interpreted or displayed differently depending on the exact locale
+    # encoding and the font.
+
+    # U+00A0 (No-Break Space)
+    '\u00A0',
+    # U+20AC (Euro Sign)
+    '\u20AC',
+):
+    try:
+        os.fsdecode(os.fsencode(character))
+    except UnicodeError:
+        pass
+    else:
+        FS_NONASCII = character
+        break
 
 # TESTFN_UNICODE is a non-ascii filename
 TESTFN_UNICODE = TESTFN + "-\xe0\xf2\u0258\u0141\u011f"
@@ -647,6 +690,38 @@
         # the byte 0xff. Skip some unicode filename tests.
         pass
 
+# TESTFN_UNDECODABLE is a filename (bytes type) that should *not* be able to be
+# decoded from the filesystem encoding (in strict mode). It can be None if we
+# cannot generate such filename (ex: the latin1 encoding can decode any byte
+# sequence). On UNIX, TESTFN_UNDECODABLE can be decoded by os.fsdecode() thanks
+# to the surrogateescape error handler (PEP 383), but not from the filesystem
+# encoding in strict mode.
+TESTFN_UNDECODABLE = None
+for name in (
+    # b'\xff' is not decodable by os.fsdecode() with code page 932. Windows
+    # accepts it to create a file or a directory, or don't accept to enter to
+    # such directory (when the bytes name is used). So test b'\xe7' first: it is
+    # not decodable from cp932.
+    b'\xe7w\xf0',
+    # undecodable from ASCII, UTF-8
+    b'\xff',
+    # undecodable from iso8859-3, iso8859-6, iso8859-7, cp424, iso8859-8, cp856
+    # and cp857
+    b'\xae\xd5'
+    # undecodable from UTF-8 (UNIX and Mac OS X)
+    b'\xed\xb2\x80', b'\xed\xb4\x80',
+):
+    try:
+        name.decode(TESTFN_ENCODING)
+    except UnicodeDecodeError:
+        TESTFN_UNDECODABLE = os.fsencode(TESTFN) + name
+        break
+
+if FS_NONASCII:
+    TESTFN_NONASCII = TESTFN + '-' + FS_NONASCII
+else:
+    TESTFN_NONASCII = None
+
 # Save the initial cwd
 SAVEDCWD = os.getcwd()
 
@@ -680,7 +755,7 @@
     except OSError:
         if not quiet:
             raise
-        warnings.warn('tests may fail, unable to change the CWD to ' + name,
+        warnings.warn('tests may fail, unable to change the CWD to ' + path,
                       RuntimeWarning, stacklevel=3)
     try:
         yield os.getcwd()
@@ -1232,7 +1307,7 @@
             try:
                 return func(*args, **kwds)
             finally:
-                if orig_tz == None:
+                if orig_tz is None:
                     del os.environ['TZ']
                 else:
                     os.environ['TZ'] = orig_tz
diff -r bd8afb90ebf2 Lib/test/test_argparse.py
--- a/Lib/test/test_argparse.py
+++ b/Lib/test/test_argparse.py
@@ -1463,6 +1463,22 @@
         ('readonly', NS(x=None, spam=RFile('readonly'))),
     ]
 
+class TestFileTypeDefaults(TempDirMixin, ParserTestCase):
+    """Test that a file is not created unless the default is needed"""
+    def setUp(self):
+        super(TestFileTypeDefaults, self).setUp()
+        file = open(os.path.join(self.temp_dir, 'good'), 'w')
+        file.write('good')
+        file.close()
+
+    argument_signatures = [
+        Sig('-c', type=argparse.FileType('r'), default='no-file.txt'),
+    ]
+    # should provoke no such file error
+    failures = ['']
+    # should not provoke error because default file is created
+    successes = [('-c good', NS(c=RFile('good')))]
+
 
 class TestFileTypeRB(TempDirMixin, ParserTestCase):
     """Test the FileType option/argument type for reading files"""
@@ -4559,6 +4575,71 @@
         self.assertNotIn(msg, 'optional_positional')
 
 
+# ================================================
+# Check that the type function is called only once
+# ================================================
+
+class TestTypeFunctionCallOnlyOnce(TestCase):
+
+    def test_type_function_call_only_once(self):
+        def spam(string_to_convert):
+            self.assertEqual(string_to_convert, 'spam!')
+            return 'foo_converted'
+
+        parser = argparse.ArgumentParser()
+        parser.add_argument('--foo', type=spam, default='bar')
+        args = parser.parse_args('--foo spam!'.split())
+        self.assertEqual(NS(foo='foo_converted'), args)
+
+# ==================================================================
+# Check semantics regarding the default argument and type conversion
+# ==================================================================
+
+class TestTypeFunctionCalledOnDefault(TestCase):
+
+    def test_type_function_call_with_non_string_default(self):
+        def spam(int_to_convert):
+            self.assertEqual(int_to_convert, 0)
+            return 'foo_converted'
+
+        parser = argparse.ArgumentParser()
+        parser.add_argument('--foo', type=spam, default=0)
+        args = parser.parse_args([])
+        # foo should *not* be converted because its default is not a string.
+        self.assertEqual(NS(foo=0), args)
+
+    def test_type_function_call_with_string_default(self):
+        def spam(int_to_convert):
+            return 'foo_converted'
+
+        parser = argparse.ArgumentParser()
+        parser.add_argument('--foo', type=spam, default='0')
+        args = parser.parse_args([])
+        # foo is converted because its default is a string.
+        self.assertEqual(NS(foo='foo_converted'), args)
+
+    def test_no_double_type_conversion_of_default(self):
+        def extend(str_to_convert):
+            return str_to_convert + '*'
+
+        parser = argparse.ArgumentParser()
+        parser.add_argument('--test', type=extend, default='*')
+        args = parser.parse_args([])
+        # The test argument will be two stars, one coming from the default
+        # value and one coming from the type conversion being called exactly
+        # once.
+        self.assertEqual(NS(test='**'), args)
+
+    def test_issue_15906(self):
+        # Issue #15906: When action='append', type=str, default=[] are
+        # providing, the dest value was the string representation "[]" when it
+        # should have been an empty list.
+        parser = argparse.ArgumentParser()
+        parser.add_argument('--test', dest='test', type=str,
+                            default=[], action='append')
+        args = parser.parse_args([])
+        self.assertEqual(args.test, [])
+
 # ======================
 # parse_known_args tests
 # ======================
diff -r bd8afb90ebf2 Lib/test/test_ast.py
--- a/Lib/test/test_ast.py
+++ b/Lib/test/test_ast.py
@@ -399,6 +399,14 @@
             compile(m, "<test>", "exec")
         self.assertIn("string must be of type str", str(cm.exception))
 
+    def test_empty_yield_from(self):
+        # Issue 16546: yield from value is not optional.
+        empty_yield_from = ast.parse("def f():\n yield from g()")
+        empty_yield_from.body[0].body[0].value.value = None
+        with self.assertRaises(ValueError) as cm:
+            compile(empty_yield_from, "<test>", "exec")
+        self.assertIn("field value is required", str(cm.exception))
+
 
 class ASTHelpers_Test(unittest.TestCase):
 
@@ -407,6 +415,14 @@
         b = compile('foo(1 + 1)', '<unknown>', 'exec', ast.PyCF_ONLY_AST)
         self.assertEqual(ast.dump(a), ast.dump(b))
 
+    def test_parse_in_error(self):
+        try:
+            1/0
+        except Exception:
+            with self.assertRaises(SyntaxError) as e:
+                ast.literal_eval(r"'\U'")
+            self.assertIsNotNone(e.exception.__context__)
+
     def test_dump(self):
         node = ast.parse('spam(eggs, "and cheese")')
         self.assertEqual(ast.dump(node),
diff -r bd8afb90ebf2 Lib/test/test_bisect.py
--- a/Lib/test/test_bisect.py
+++ b/Lib/test/test_bisect.py
@@ -239,7 +239,7 @@
                 else:
                     f = self.module.insort_right
                 f(insorted, digit)
-        self.assertEqual(sorted(insorted), insorted)
+            self.assertEqual(sorted(insorted), insorted)
 
     def test_backcompatibility(self):
         self.assertEqual(self.module.insort, self.module.insort_right)
diff -r bd8afb90ebf2 Lib/test/test_buffer.py
--- a/Lib/test/test_buffer.py
+++ b/Lib/test/test_buffer.py
@@ -3999,14 +3999,32 @@
         m = memoryview(x)
         self.assertEqual(hash(m), hash(x))
 
+        # equality-hash invariant
+        x = ndarray(list(range(12)), shape=[12], format='B')
+        a = memoryview(x)
+
+        y = ndarray(list(range(12)), shape=[12], format='b')
+        b = memoryview(y)
+
+        self.assertEqual(a, b)
+        self.assertEqual(hash(a), hash(b))
+
         # non-byte formats
         nd = ndarray(list(range(12)), shape=[2,2,3], format='L')
         m = memoryview(nd)
-        self.assertEqual(hash(m), hash(nd.tobytes()))
+        self.assertRaises(ValueError, m.__hash__)
 
         nd = ndarray(list(range(-6, 6)), shape=[2,2,3], format='h')
         m = memoryview(nd)
-        self.assertEqual(hash(m), hash(nd.tobytes()))
+        self.assertRaises(ValueError, m.__hash__)
+
+        nd = ndarray(list(range(12)), shape=[2,2,3], format='= L')
+        m = memoryview(nd)
+        self.assertRaises(ValueError, m.__hash__)
+
+        nd = ndarray(list(range(-6, 6)), shape=[2,2,3], format='< h')
+        m = memoryview(nd)
+        self.assertRaises(ValueError, m.__hash__)
 
     def test_memoryview_release(self):
 
diff -r bd8afb90ebf2 Lib/test/test_builtin.py
--- a/Lib/test/test_builtin.py
+++ b/Lib/test/test_builtin.py
@@ -1286,6 +1286,7 @@
         self.assertRaises(TypeError, setattr, sys, 1, 'spam')
         self.assertRaises(TypeError, setattr)
 
+    # test_str(): see test_unicode.py and test_bytes.py for str() tests.
 
     def test_sum(self):
         self.assertEqual(sum([]), 0)
diff -r bd8afb90ebf2 Lib/test/test_bytes.py
--- a/Lib/test/test_bytes.py
+++ b/Lib/test/test_bytes.py
@@ -701,6 +701,12 @@
             def __bytes__(self):
                 return None
         self.assertRaises(TypeError, bytes, A())
+        class A:
+            def __bytes__(self):
+                return b'a'
+            def __index__(self):
+                return 42
+        self.assertEqual(bytes(A()), b'a')
 
     # Test PyBytes_FromFormat()
     def test_from_format(self):
@@ -871,6 +877,24 @@
         b[3:0] = [42, 42, 42]
         self.assertEqual(b, bytearray([0, 1, 2, 42, 42, 42, 3, 4, 5, 6, 7, 8, 9]))
 
+        b[3:] = b'foo'
+        self.assertEqual(b, bytearray([0, 1, 2, 102, 111, 111]))
+
+        b[:3] = memoryview(b'foo')
+        self.assertEqual(b, bytearray([102, 111, 111, 102, 111, 111]))
+
+        b[3:4] = []
+        self.assertEqual(b, bytearray([102, 111, 111, 111, 111]))
+
+        for elem in [5, -5, 0, int(10e20), 'str', 2.3,
+                     ['a', 'b'], [b'a', b'b'], [[]]]:
+            with self.assertRaises(TypeError):
+                b[3:4] = elem
+
+        for elem in [[254, 255, 256], [-256, 9000]]:
+            with self.assertRaises(ValueError):
+                b[3:4] = elem
+
     def test_extended_set_del_slice(self):
         indices = (0, None, 1, 3, 19, 300, 1<<333, -1, -2, -31, -300)
         for start in indices:
diff -r bd8afb90ebf2 Lib/test/test_bz2.py
--- a/Lib/test/test_bz2.py
+++ b/Lib/test/test_bz2.py
@@ -647,6 +647,7 @@
         bz2d = BZ2Decompressor()
         text = bz2d.decompress(self.DATA)
         self.assertRaises(EOFError, bz2d.decompress, b"anything")
+        self.assertRaises(EOFError, bz2d.decompress, b"")
 
     @bigmemtest(size=_4G + 100, memuse=3)
     def testDecompress4G(self, size):
diff -r bd8afb90ebf2 Lib/test/test_calendar.py
--- a/Lib/test/test_calendar.py
+++ b/Lib/test/test_calendar.py
@@ -6,6 +6,7 @@
 import time
 import locale
 import sys
+import datetime
 
 result_2004_01_text = """
     January 2004
@@ -464,6 +465,11 @@
         new_october = calendar.TextCalendar().formatmonthname(2010, 10, 10)
         self.assertEqual(old_october, new_october)
 
+    def test_itermonthdates(self):
+        # ensure itermonthdates doesn't overflow after datetime.MAXYEAR
+        # see #15421
+        list(calendar.Calendar().itermonthdates(datetime.MAXYEAR, 12))
+
 
 class MonthCalendarTestCase(unittest.TestCase):
     def setUp(self):
diff -r bd8afb90ebf2 Lib/test/test_capi.py
--- a/Lib/test/test_capi.py
+++ b/Lib/test/test_capi.py
@@ -316,6 +316,17 @@
                     c, i, when_skipped, when_not_skipped))
             self.assertIs(when_skipped, when_not_skipped, message)
 
+    def test_parse_tuple_and_keywords(self):
+        # parse_tuple_and_keywords error handling tests
+        self.assertRaises(TypeError, _testcapi.parse_tuple_and_keywords,
+                          (), {}, 42, [])
+        self.assertRaises(ValueError, _testcapi.parse_tuple_and_keywords,
+                          (), {}, b'', 42)
+        self.assertRaises(ValueError, _testcapi.parse_tuple_and_keywords,
+                          (), {}, b'', [''] * 42)
+        self.assertRaises(ValueError, _testcapi.parse_tuple_and_keywords,
+                          (), {}, b'', [42])
+
 def test_main():
     support.run_unittest(CAPITest, TestPendingCalls,
                          Test6012, EmbeddingTest, SkipitemTest)
diff -r bd8afb90ebf2 Lib/test/test_cgitb.py
--- a/Lib/test/test_cgitb.py
+++ b/Lib/test/test_cgitb.py
@@ -1,7 +1,7 @@
 from test.support import run_unittest
+from test.script_helper import assert_python_failure, temp_dir
 import unittest
 import sys
-import subprocess
 import cgitb
 
 class TestCgitb(unittest.TestCase):
@@ -36,16 +36,31 @@
             self.assertIn("ValueError", text)
             self.assertIn("Hello World", text)
 
-    def test_hook(self):
-        proc = subprocess.Popen([sys.executable, '-c',
-                                 ('import cgitb;'
-                                  'cgitb.enable();'
-                                  'raise ValueError("Hello World")')],
-                                stdout=subprocess.PIPE)
-        out = proc.stdout.read().decode(sys.getfilesystemencoding())
-        self.addCleanup(proc.stdout.close)
+    def test_syshook_no_logdir_default_format(self):
+        with temp_dir() as tracedir:
+            rc, out, err = assert_python_failure(
+                  '-c',
+                  ('import cgitb; cgitb.enable(logdir=%s); '
+                   'raise ValueError("Hello World")') % repr(tracedir))
+        out = out.decode(sys.getfilesystemencoding())
         self.assertIn("ValueError", out)
         self.assertIn("Hello World", out)
+        # By default we emit HTML markup.
+        self.assertIn('<p>', out)
+        self.assertIn('</p>', out)
+
+    def test_syshook_no_logdir_text_format(self):
+        # Issue 12890: we were emitting the <p> tag in text mode.
+        with temp_dir() as tracedir:
+            rc, out, err = assert_python_failure(
+                  '-c',
+                  ('import cgitb; cgitb.enable(format="text", logdir=%s); '
+                   'raise ValueError("Hello World")') % repr(tracedir))
+        out = out.decode(sys.getfilesystemencoding())
+        self.assertIn("ValueError", out)
+        self.assertIn("Hello World", out)
+        self.assertNotIn('<p>', out)
+        self.assertNotIn('</p>', out)
 
 
 def test_main():
diff -r bd8afb90ebf2 Lib/test/test_cmd_line.py
--- a/Lib/test/test_cmd_line.py
+++ b/Lib/test/test_cmd_line.py
@@ -7,7 +7,8 @@
 import sys
 import subprocess
 import tempfile
-from test.script_helper import spawn_python, kill_python, assert_python_ok, assert_python_failure
+from test.script_helper import (spawn_python, kill_python, assert_python_ok,
+    assert_python_failure)
 
 
 # XXX (ncoghlan): Move to script_helper and make consistent with run_python
@@ -93,15 +94,11 @@
         # All good if execution is successful
         assert_python_ok('-c', 'pass')
 
-    @unittest.skipIf(sys.getfilesystemencoding() == 'ascii',
-                     'need a filesystem encoding different than ASCII')
+    @unittest.skipUnless(test.support.FS_NONASCII, 'need support.FS_NONASCII')
     def test_non_ascii(self):
         # Test handling of non-ascii data
-        if test.support.verbose:
-            import locale
-            print('locale encoding = %s, filesystem encoding = %s'
-                  % (locale.getpreferredencoding(), sys.getfilesystemencoding()))
-        command = "assert(ord('\xe9') == 0xe9)"
+        command = ("assert(ord(%r) == %s)"
+                   % (test.support.FS_NONASCII, ord(test.support.FS_NONASCII)))
         assert_python_ok('-c', command)
 
     # On Windows, pass bytes to subprocess doesn't test how Python decodes the
@@ -358,6 +355,36 @@
         self.assertEqual(rc, 0)
         self.assertIn(b'random is 1', out)
 
+    def test_del___main__(self):
+        # Issue #15001: PyRun_SimpleFileExFlags() did crash because it kept a
+        # borrowed reference to the dict of __main__ module and later modify
+        # the dict whereas the module was destroyed
+        filename = test.support.TESTFN
+        self.addCleanup(test.support.unlink, filename)
+        with open(filename, "w") as script:
+            print("import sys", file=script)
+            print("del sys.modules['__main__']", file=script)
+        assert_python_ok(filename)
+
+    def test_unknown_options(self):
+        rc, out, err = assert_python_failure('-E', '-z')
+        self.assertIn(b'Unknown option: -z', err)
+        self.assertEqual(err.splitlines().count(b'Unknown option: -z'), 1)
+        self.assertEqual(b'', out)
+        # Add "without='-E'" to prevent _assert_python to append -E
+        # to env_vars and change the output of stderr
+        rc, out, err = assert_python_failure('-z', without='-E')
+        self.assertIn(b'Unknown option: -z', err)
+        self.assertEqual(err.splitlines().count(b'Unknown option: -z'), 1)
+        self.assertEqual(b'', out)
+        rc, out, err = assert_python_failure('-a', '-z', without='-E')
+        self.assertIn(b'Unknown option: -a', err)
+        # only the first unknown option is reported
+        self.assertNotIn(b'Unknown option: -z', err)
+        self.assertEqual(err.splitlines().count(b'Unknown option: -a'), 1)
+        self.assertEqual(b'', out)
+
+
 def test_main():
     test.support.run_unittest(CmdLineTest)
     test.support.reap_children()
diff -r bd8afb90ebf2 Lib/test/test_cmd_line_script.py
--- a/Lib/test/test_cmd_line_script.py
+++ b/Lib/test/test_cmd_line_script.py
@@ -363,6 +363,31 @@
             self.assertTrue(text[1].startswith('  File '))
             self.assertTrue(text[3].startswith('NameError'))
 
+    def test_non_ascii(self):
+        # Mac OS X denies the creation of a file with an invalid UTF-8 name.
+        # Windows allows to create a name with an arbitrary bytes name, but
+        # Python cannot a undecodable bytes argument to a subprocess.
+        #if (support.TESTFN_UNDECODABLE
+        #and sys.platform not in ('win32', 'darwin')):
+        #    name = os.fsdecode(support.TESTFN_UNDECODABLE)
+        #elif support.TESTFN_NONASCII:
+        if support.TESTFN_NONASCII:
+            name = support.TESTFN_NONASCII
+        else:
+            self.skipTest("need support.TESTFN_NONASCII")
+
+        # Issue #16218
+        source = 'print(ascii(__file__))\n'
+        script_name = _make_test_script(os.curdir, name, source)
+        self.addCleanup(support.unlink, script_name)
+        rc, stdout, stderr = assert_python_ok(script_name)
+        self.assertEqual(
+            ascii(script_name),
+            stdout.rstrip().decode('ascii'),
+            'stdout=%r stderr=%r' % (stdout, stderr))
+        self.assertEqual(0, rc)
+
+
 def test_main():
     support.run_unittest(CmdLineTest)
     support.reap_children()
diff -r bd8afb90ebf2 Lib/test/test_codecs.py
--- a/Lib/test/test_codecs.py
+++ b/Lib/test/test_codecs.py
@@ -666,6 +666,10 @@
         self.assertEqual(b"\xf0\x90\xbf\xbf\xed\xa0\x80".decode("utf-8", "surrogatepass"),
                          "\U00010fff\uD800")
         self.assertTrue(codecs.lookup_error("surrogatepass"))
+        with self.assertRaises(UnicodeDecodeError):
+            b"abc\xed\xa0".decode("utf-8", "surrogatepass")
+        with self.assertRaises(UnicodeDecodeError):
+            b"abc\xed\xa0z".decode("utf-8", "surrogatepass")
 
 @unittest.skipUnless(sys.platform == 'win32',
                      'cp65001 is a Windows-only codec')
@@ -1693,6 +1697,15 @@
         )
 
         self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict", "\U0010FFFFbc"),
+            ("\U0010FFFFbc", 3)
+        )
+
+        self.assertRaises(UnicodeDecodeError,
+            codecs.charmap_decode, b"\x00\x01\x02", "strict", "ab"
+        )
+
+        self.assertEqual(
             codecs.charmap_decode(b"\x00\x01\x02", "replace", "ab"),
             ("ab\ufffd", 3)
         )
@@ -1718,6 +1731,113 @@
             ("", len(allbytes))
         )
 
+    def test_decode_with_int2str_map(self):
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: 'a', 1: 'b', 2: 'c'}),
+            ("abc", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: 'Aa', 1: 'Bb', 2: 'Cc'}),
+            ("AaBbCc", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: '\U0010FFFF', 1: 'b', 2: 'c'}),
+            ("\U0010FFFFbc", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: 'a', 1: 'b', 2: ''}),
+            ("ab", 3)
+        )
+
+        self.assertRaises(UnicodeDecodeError,
+            codecs.charmap_decode, b"\x00\x01\x02", "strict",
+                                   {0: 'a', 1: 'b'}
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "replace",
+                                  {0: 'a', 1: 'b'}),
+            ("ab\ufffd", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "replace",
+                                  {0: 'a', 1: 'b', 2: None}),
+            ("ab\ufffd", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "ignore",
+                                  {0: 'a', 1: 'b'}),
+            ("ab", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "ignore",
+                                  {0: 'a', 1: 'b', 2: None}),
+            ("ab", 3)
+        )
+
+        allbytes = bytes(range(256))
+        self.assertEqual(
+            codecs.charmap_decode(allbytes, "ignore", {}),
+            ("", len(allbytes))
+        )
+
+    def test_decode_with_int2int_map(self):
+        a = ord('a')
+        b = ord('b')
+        c = ord('c')
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: a, 1: b, 2: c}),
+            ("abc", 3)
+        )
+
+        # Issue #15379
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: 0x10FFFF, 1: b, 2: c}),
+            ("\U0010FFFFbc", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "strict",
+                                  {0: sys.maxunicode, 1: b, 2: c}),
+            (chr(sys.maxunicode) + "bc", 3)
+        )
+
+        self.assertRaises(TypeError,
+            codecs.charmap_decode, b"\x00\x01\x02", "strict",
+                                   {0: sys.maxunicode + 1, 1: b, 2: c}
+        )
+
+        self.assertRaises(UnicodeDecodeError,
+            codecs.charmap_decode, b"\x00\x01\x02", "strict",
+                                   {0: a, 1: b},
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "replace",
+                                  {0: a, 1: b}),
+            ("ab\ufffd", 3)
+        )
+
+        self.assertEqual(
+            codecs.charmap_decode(b"\x00\x01\x02", "ignore",
+                                  {0: a, 1: b}),
+            ("ab", 3)
+        )
+
+
 class WithStmtTest(unittest.TestCase):
     def test_encodedfile(self):
         f = io.BytesIO(b"\xc3\xbc")
diff -r bd8afb90ebf2 Lib/test/test_codeop.py
--- a/Lib/test/test_codeop.py
+++ b/Lib/test/test_codeop.py
@@ -50,7 +50,7 @@
         '''succeed iff str is the start of an invalid piece of code'''
         try:
             compile_command(str,symbol=symbol)
-            self.fail("No exception thrown for invalid code")
+            self.fail("No exception raised for invalid code")
         except SyntaxError:
             self.assertTrue(is_syntax)
         except OverflowError:
diff -r bd8afb90ebf2 Lib/test/test_collections.py
--- a/Lib/test/test_collections.py
+++ b/Lib/test/test_collections.py
@@ -663,6 +663,39 @@
         s |= s
         self.assertEqual(s, full)
 
+    def test_issue16373(self):
+        # Recursion error comparing comparable and noncomparable
+        # Set instances
+        class MyComparableSet(Set):
+            def __contains__(self, x):
+                return False
+            def __len__(self):
+                return 0
+            def __iter__(self):
+                return iter([])
+        class MyNonComparableSet(Set):
+            def __contains__(self, x):
+                return False
+            def __len__(self):
+                return 0
+            def __iter__(self):
+                return iter([])
+            def __le__(self, x):
+                return NotImplemented
+            def __lt__(self, x):
+                return NotImplemented
+
+        cs = MyComparableSet()
+        ncs = MyNonComparableSet()
+        with self.assertRaises(TypeError):
+            ncs < cs
+        with self.assertRaises(TypeError):
+            ncs <= cs
+        with self.assertRaises(TypeError):
+            cs > ncs
+        with self.assertRaises(TypeError):
+            cs >= ncs
+
     def test_Mapping(self):
         for sample in [dict]:
             self.assertIsInstance(sample(), Mapping)
diff -r bd8afb90ebf2 Lib/test/test_compile.py
--- a/Lib/test/test_compile.py
+++ b/Lib/test/test_compile.py
@@ -474,6 +474,33 @@
         self.assertInvalidSingle('f()\nxy # blah\nblah()')
         self.assertInvalidSingle('x = 5 # comment\nx = 6\n')
 
+    @support.cpython_only
+    def test_compiler_recursion_limit(self):
+        # Expected limit is sys.getrecursionlimit() * the scaling factor
+        # in symtable.c (currently 3)
+        # We expect to fail *at* that limit, because we use up some of
+        # the stack depth limit in the test suite code
+        # So we check the expected limit and 75% of that
+        # XXX (ncoghlan): duplicating the scaling factor here is a little
+        # ugly. Perhaps it should be exposed somewhere...
+        fail_depth = sys.getrecursionlimit() * 3
+        success_depth = int(fail_depth * 0.75)
+
+        def check_limit(prefix, repeated):
+            expect_ok = prefix + repeated * success_depth
+            self.compile_single(expect_ok)
+            broken = prefix + repeated * fail_depth
+            details = "Compiling ({!r} + {!r} * {})".format(
+                         prefix, repeated, fail_depth)
+            with self.assertRaises(RuntimeError, msg=details):
+                self.compile_single(broken)
+
+        check_limit("a", "()")
+        check_limit("a", ".b")
+        check_limit("a", "[0]")
+        check_limit("a", "*a")
+
+
 def test_main():
     support.run_unittest(TestSpecifics)
 
diff -r bd8afb90ebf2 Lib/test/test_compileall.py
--- a/Lib/test/test_compileall.py
+++ b/Lib/test/test_compileall.py
@@ -134,15 +134,21 @@
 class CommandLineTests(unittest.TestCase):
     """Test compileall's CLI."""
 
+    def _get_run_args(self, args):
+        interp_args = ['-S']
+        if sys.flags.optimize:
+            interp_args.append({1 : '-O', 2 : '-OO'}[sys.flags.optimize])
+        return interp_args + ['-m', 'compileall'] + list(args)
+
     def assertRunOK(self, *args, **env_vars):
         rc, out, err = script_helper.assert_python_ok(
-                        '-S', '-m', 'compileall', *args, **env_vars)
+                         *self._get_run_args(args), **env_vars)
         self.assertEqual(b'', err)
         return out
 
     def assertRunNotOK(self, *args, **env_vars):
         rc, out, err = script_helper.assert_python_failure(
-                        '-S', '-m', 'compileall', *args, **env_vars)
+                        *self._get_run_args(args), **env_vars)
         return rc, out, err
 
     def assertCompiled(self, fn):
@@ -198,7 +204,9 @@
         self.assertRunOK('-b', '-q', self.pkgdir)
         # Verify the __pycache__ directory contents.
         self.assertFalse(os.path.exists(self.pkgdir_cachedir))
-        expected = sorted(['__init__.py', '__init__.pyc', 'bar.py', 'bar.pyc'])
+        opt = 'c' if __debug__ else 'o'
+        expected = sorted(['__init__.py', '__init__.py' + opt, 'bar.py',
+                           'bar.py' + opt])
         self.assertEqual(sorted(os.listdir(self.pkgdir)), expected)
 
     def test_multiple_runs(self):
@@ -326,7 +334,7 @@
         f2 = script_helper.make_script(self.pkgdir, 'f2', '')
         f3 = script_helper.make_script(self.pkgdir, 'f3', '')
         f4 = script_helper.make_script(self.pkgdir, 'f4', '')
-        p = script_helper.spawn_python('-m', 'compileall', '-i', '-')
+        p = script_helper.spawn_python(*(self._get_run_args(()) + ['-i', '-']))
         p.stdin.write((f3+os.linesep).encode('ascii'))
         script_helper.kill_python(p)
         self.assertNotCompiled(f1)
diff -r bd8afb90ebf2 Lib/test/test_csv.py
--- a/Lib/test/test_csv.py
+++ b/Lib/test/test_csv.py
@@ -197,6 +197,17 @@
             fileobj.seek(0)
             self.assertEqual(fileobj.read(), "a,b\r\nc,d\r\n")
 
+    @support.cpython_only
+    def test_writerows_legacy_strings(self):
+        import _testcapi
+
+        c = _testcapi.unicode_legacy_string('a')
+        with TemporaryFile("w+", newline='') as fileobj:
+            writer = csv.writer(fileobj)
+            writer.writerows([[c]])
+            fileobj.seek(0)
+            self.assertEqual(fileobj.read(), "a\r\n")
+
     def _read_test(self, input, expect, **kwargs):
         reader = csv.reader(input, **kwargs)
         result = list(reader)
@@ -225,6 +236,15 @@
         self.assertRaises(csv.Error, self._read_test, ['a,b\nc,d'], [])
         self.assertRaises(csv.Error, self._read_test, ['a,b\r\nc,d'], [])
 
+    def test_read_eof(self):
+        self._read_test(['a,"'], [['a', '']])
+        self._read_test(['"a'], [['a']])
+        self._read_test(['^'], [['\n']], escapechar='^')
+        self.assertRaises(csv.Error, self._read_test, ['a,"'], [], strict=True)
+        self.assertRaises(csv.Error, self._read_test, ['"a'], [], strict=True)
+        self.assertRaises(csv.Error, self._read_test,
+                          ['^'], [], escapechar='^', strict=True)
+
     def test_read_escape(self):
         self._read_test(['a,\\b,c'], [['a', 'b', 'c']], escapechar='\\')
         self._read_test(['a,b\\,c'], [['a', 'b,c']], escapechar='\\')
diff -r bd8afb90ebf2 Lib/test/test_decimal.py
--- a/Lib/test/test_decimal.py
+++ b/Lib/test/test_decimal.py
@@ -34,7 +34,8 @@
 import locale
 from test.support import (run_unittest, run_doctest, is_resource_enabled,
                           requires_IEEE_754)
-from test.support import check_warnings, import_fresh_module, TestFailed
+from test.support import (check_warnings, import_fresh_module, TestFailed,
+                          run_with_locale, cpython_only)
 import random
 import time
 import warnings
@@ -573,6 +574,15 @@
             # embedded NUL
             self.assertRaises(InvalidOperation, Decimal, "12\u00003")
 
+    @cpython_only
+    def test_from_legacy_strings(self):
+        import _testcapi
+        Decimal = self.decimal.Decimal
+        context = self.decimal.Context()
+
+        s = _testcapi.unicode_legacy_string('9.999999')
+        self.assertEqual(str(Decimal(s)), '9.999999')
+        self.assertEqual(str(context.create_decimal(s)), '9.999999')
 
     def test_explicit_from_tuples(self):
         Decimal = self.decimal.Decimal
@@ -1136,18 +1146,19 @@
         self.assertEqual(get_fmt(Decimal('-1.5'), dotsep_wide, '020n'),
                          '-0\u00b4000\u00b4000\u00b4000\u00b4001\u00bf5')
 
+    @run_with_locale('LC_ALL', 'ps_AF')
     def test_wide_char_separator_decimal_point(self):
         # locale with wide char separator and decimal point
+        import locale
         Decimal = self.decimal.Decimal
 
-        try:
-            locale.setlocale(locale.LC_ALL, 'ps_AF')
-        except locale.Error:
+        decimal_point = locale.localeconv()['decimal_point']
+        thousands_sep = locale.localeconv()['thousands_sep']
+        if decimal_point != '\u066b' or thousands_sep != '\u066c':
             return
 
         self.assertEqual(format(Decimal('100000000.123'), 'n'),
                          '100\u066c000\u066c000\u066b123')
-        locale.resetlocale()
 
 class CFormatTest(FormatTest):
     decimal = C
@@ -2027,7 +2038,7 @@
         Decimal = self.decimal.Decimal
 
         class MyDecimal(Decimal):
-            pass
+            y = None
 
         d1 = MyDecimal(1)
         d2 = MyDecimal(2)
@@ -2045,6 +2056,30 @@
         self.assertIs(type(d), MyDecimal)
         self.assertEqual(d, d1)
 
+        # Decimal(Decimal)
+        d = Decimal('1.0')
+        x = Decimal(d)
+        self.assertIs(type(x), Decimal)
+        self.assertEqual(x, d)
+
+        # MyDecimal(Decimal)
+        m = MyDecimal(d)
+        self.assertIs(type(m), MyDecimal)
+        self.assertEqual(m, d)
+        self.assertIs(m.y, None)
+
+        # Decimal(MyDecimal)
+        x = Decimal(m)
+        self.assertIs(type(x), Decimal)
+        self.assertEqual(x, d)
+
+        # MyDecimal(MyDecimal)
+        m.y = 9
+        x = MyDecimal(m)
+        self.assertIs(type(x), MyDecimal)
+        self.assertEqual(x, d)
+        self.assertIs(x.y, None)
+
     def test_implicit_context(self):
         Decimal = self.decimal.Decimal
         getcontext = self.decimal.getcontext
@@ -2054,6 +2089,248 @@
         self.assertEqual(str(Decimal(0).sqrt()),
                          str(c.sqrt(Decimal(0))))
 
+    def test_none_args(self):
+        Decimal = self.decimal.Decimal
+        Context = self.decimal.Context
+        localcontext = self.decimal.localcontext
+        InvalidOperation = self.decimal.InvalidOperation
+        DivisionByZero = self.decimal.DivisionByZero
+        Overflow = self.decimal.Overflow
+        Underflow = self.decimal.Underflow
+        Subnormal = self.decimal.Subnormal
+        Inexact = self.decimal.Inexact
+        Rounded = self.decimal.Rounded
+        Clamped = self.decimal.Clamped
+        ROUND_HALF_EVEN = self.decimal.ROUND_HALF_EVEN
+        ROUND_DOWN = self.decimal.ROUND_DOWN
+        ROUND_UP = self.decimal.ROUND_UP
+
+        with localcontext(Context()) as c:
+            c.prec = 7
+            c.Emax = 999
+            c.Emin = -999
+
+            x = Decimal("111")
+            y = Decimal("1e9999")
+            z = Decimal("1e-9999")
+
+            ##### Unary functions
+            c.clear_flags()
+            self.assertEqual(str(x.exp(context=None)), '1.609487E+48')
+            self.assertTrue(c.flags[Inexact])
+            self.assertTrue(c.flags[Rounded])
+            c.clear_flags()
+            self.assertRaises(Overflow, y.exp, context=None)
+            self.assertTrue(c.flags[Overflow])
+
+            self.assertIs(z.is_normal(context=None), False)
+            self.assertIs(z.is_subnormal(context=None), True)
+
+            c.clear_flags()
+            self.assertEqual(str(x.ln(context=None)), '4.709530')
+            self.assertTrue(c.flags[Inexact])
+            self.assertTrue(c.flags[Rounded])
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, Decimal(-1).ln, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            self.assertEqual(str(x.log10(context=None)), '2.045323')
+            self.assertTrue(c.flags[Inexact])
+            self.assertTrue(c.flags[Rounded])
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, Decimal(-1).log10, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            self.assertEqual(str(x.logb(context=None)), '2')
+            self.assertRaises(DivisionByZero, Decimal(0).logb, context=None)
+            self.assertTrue(c.flags[DivisionByZero])
+
+            c.clear_flags()
+            self.assertEqual(str(x.logical_invert(context=None)), '1111000')
+            self.assertRaises(InvalidOperation, y.logical_invert, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            self.assertEqual(str(y.next_minus(context=None)), '9.999999E+999')
+            self.assertRaises(InvalidOperation, Decimal('sNaN').next_minus, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            self.assertEqual(str(y.next_plus(context=None)), 'Infinity')
+            self.assertRaises(InvalidOperation, Decimal('sNaN').next_plus, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            self.assertEqual(str(z.normalize(context=None)), '0')
+            self.assertRaises(Overflow, y.normalize, context=None)
+            self.assertTrue(c.flags[Overflow])
+
+            self.assertEqual(str(z.number_class(context=None)), '+Subnormal')
+
+            c.clear_flags()
+            self.assertEqual(str(z.sqrt(context=None)), '0E-1005')
+            self.assertTrue(c.flags[Clamped])
+            self.assertTrue(c.flags[Inexact])
+            self.assertTrue(c.flags[Rounded])
+            self.assertTrue(c.flags[Subnormal])
+            self.assertTrue(c.flags[Underflow])
+            c.clear_flags()
+            self.assertRaises(Overflow, y.sqrt, context=None)
+            self.assertTrue(c.flags[Overflow])
+
+            c.capitals = 0
+            self.assertEqual(str(z.to_eng_string(context=None)), '1e-9999')
+            c.capitals = 1
+
+
+            ##### Binary functions
+            c.clear_flags()
+            ans = str(x.compare(Decimal('Nan891287828'), context=None))
+            self.assertEqual(ans, 'NaN1287828')
+            self.assertRaises(InvalidOperation, x.compare, Decimal('sNaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.compare_signal(8224, context=None))
+            self.assertEqual(ans, '-1')
+            self.assertRaises(InvalidOperation, x.compare_signal, Decimal('NaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.logical_and(101, context=None))
+            self.assertEqual(ans, '101')
+            self.assertRaises(InvalidOperation, x.logical_and, 123, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.logical_or(101, context=None))
+            self.assertEqual(ans, '111')
+            self.assertRaises(InvalidOperation, x.logical_or, 123, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.logical_xor(101, context=None))
+            self.assertEqual(ans, '10')
+            self.assertRaises(InvalidOperation, x.logical_xor, 123, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.max(101, context=None))
+            self.assertEqual(ans, '111')
+            self.assertRaises(InvalidOperation, x.max, Decimal('sNaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.max_mag(101, context=None))
+            self.assertEqual(ans, '111')
+            self.assertRaises(InvalidOperation, x.max_mag, Decimal('sNaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.min(101, context=None))
+            self.assertEqual(ans, '101')
+            self.assertRaises(InvalidOperation, x.min, Decimal('sNaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.min_mag(101, context=None))
+            self.assertEqual(ans, '101')
+            self.assertRaises(InvalidOperation, x.min_mag, Decimal('sNaN'), context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.remainder_near(101, context=None))
+            self.assertEqual(ans, '10')
+            self.assertRaises(InvalidOperation, y.remainder_near, 101, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.rotate(2, context=None))
+            self.assertEqual(ans, '11100')
+            self.assertRaises(InvalidOperation, x.rotate, 101, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.scaleb(7, context=None))
+            self.assertEqual(ans, '1.11E+9')
+            self.assertRaises(InvalidOperation, x.scaleb, 10000, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.clear_flags()
+            ans = str(x.shift(2, context=None))
+            self.assertEqual(ans, '11100')
+            self.assertRaises(InvalidOperation, x.shift, 10000, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+
+            ##### Ternary functions
+            c.clear_flags()
+            ans = str(x.fma(2, 3, context=None))
+            self.assertEqual(ans, '225')
+            self.assertRaises(Overflow, x.fma, Decimal('1e9999'), 3, context=None)
+            self.assertTrue(c.flags[Overflow])
+
+
+            ##### Special cases
+            c.rounding = ROUND_HALF_EVEN
+            ans = str(Decimal('1.5').to_integral(rounding=None, context=None))
+            self.assertEqual(ans, '2')
+            c.rounding = ROUND_DOWN
+            ans = str(Decimal('1.5').to_integral(rounding=None, context=None))
+            self.assertEqual(ans, '1')
+            ans = str(Decimal('1.5').to_integral(rounding=ROUND_UP, context=None))
+            self.assertEqual(ans, '2')
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, Decimal('sNaN').to_integral, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.rounding = ROUND_HALF_EVEN
+            ans = str(Decimal('1.5').to_integral_value(rounding=None, context=None))
+            self.assertEqual(ans, '2')
+            c.rounding = ROUND_DOWN
+            ans = str(Decimal('1.5').to_integral_value(rounding=None, context=None))
+            self.assertEqual(ans, '1')
+            ans = str(Decimal('1.5').to_integral_value(rounding=ROUND_UP, context=None))
+            self.assertEqual(ans, '2')
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, Decimal('sNaN').to_integral_value, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.rounding = ROUND_HALF_EVEN
+            ans = str(Decimal('1.5').to_integral_exact(rounding=None, context=None))
+            self.assertEqual(ans, '2')
+            c.rounding = ROUND_DOWN
+            ans = str(Decimal('1.5').to_integral_exact(rounding=None, context=None))
+            self.assertEqual(ans, '1')
+            ans = str(Decimal('1.5').to_integral_exact(rounding=ROUND_UP, context=None))
+            self.assertEqual(ans, '2')
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, Decimal('sNaN').to_integral_exact, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+            c.rounding = ROUND_UP
+            ans = str(Decimal('1.50001').quantize(exp=Decimal('1e-3'), rounding=None, context=None))
+            self.assertEqual(ans, '1.501')
+            c.rounding = ROUND_DOWN
+            ans = str(Decimal('1.50001').quantize(exp=Decimal('1e-3'), rounding=None, context=None))
+            self.assertEqual(ans, '1.500')
+            ans = str(Decimal('1.50001').quantize(exp=Decimal('1e-3'), rounding=ROUND_UP, context=None))
+            self.assertEqual(ans, '1.501')
+            c.clear_flags()
+            self.assertRaises(InvalidOperation, y.quantize, Decimal('1e-10'), rounding=ROUND_UP, context=None)
+            self.assertTrue(c.flags[InvalidOperation])
+
+        with localcontext(Context()) as context:
+            context.prec = 7
+            context.Emax = 999
+            context.Emin = -999
+            with localcontext(ctx=None) as c:
+                self.assertEqual(c.prec, 7)
+                self.assertEqual(c.Emax, 999)
+                self.assertEqual(c.Emin, -999)
+
     def test_conversions_from_int(self):
         # Check that methods taking a second Decimal argument will
         # always accept an integer in place of a Decimal.
@@ -2388,14 +2665,11 @@
             self.assertRaises(TypeError, D.from_float, 1.1, context=xc)
             self.assertRaises(TypeError, D(0).as_tuple, context=xc)
 
-            if (self.decimal == C):
-                self.assertRaises(TypeError, D(1).canonical, context=xc)
-                self.assertEqual(D("-1").copy_abs(context=xc), 1)
-                self.assertEqual(D("1").copy_negate(context=xc), -1)
-            else:
-                self.assertEqual(D(1).canonical(context=xc), 1)
-                self.assertRaises(TypeError, D("-1").copy_abs, context=xc)
-                self.assertRaises(TypeError, D("-1").copy_negate, context=xc)
+            self.assertEqual(D(1).canonical(), 1)
+            self.assertRaises(TypeError, D("-1").copy_abs, context=xc)
+            self.assertRaises(TypeError, D("-1").copy_negate, context=xc)
+            self.assertRaises(TypeError, D(1).canonical, context="x")
+            self.assertRaises(TypeError, D(1).canonical, xyz="x")
 
     def test_exception_hierarchy(self):
 
@@ -2444,6 +2718,27 @@
 
 class ContextAPItests(unittest.TestCase):
 
+    def test_none_args(self):
+        Context = self.decimal.Context
+        InvalidOperation = self.decimal.InvalidOperation
+        DivisionByZero = self.decimal.DivisionByZero
+        Overflow = self.decimal.Overflow
+        ROUND_HALF_EVEN = self.decimal.ROUND_HALF_EVEN
+
+        c1 = Context()
+        c2 = Context(prec=None, rounding=None, Emax=None, Emin=None,
+                     capitals=None, clamp=None, flags=None, traps=None)
+        for c in [c1, c2]:
+            self.assertEqual(c.prec, 28)
+            self.assertEqual(c.rounding, ROUND_HALF_EVEN)
+            self.assertEqual(c.Emax, 999999)
+            self.assertEqual(c.Emin, -999999)
+            self.assertEqual(c.capitals, 1)
+            self.assertEqual(c.clamp, 0)
+            assert_signals(self, c, 'flags', [])
+            assert_signals(self, c, 'traps', [InvalidOperation, DivisionByZero,
+                                              Overflow])
+
     def test_pickle(self):
 
         Context = self.decimal.Context
@@ -4558,6 +4853,9 @@
         # Invalid local context
         self.assertRaises(TypeError, exec, 'with localcontext("xyz"): pass',
                           locals())
+        self.assertRaises(TypeError, exec,
+                          'with localcontext(context=getcontext()): pass',
+                          locals())
 
         # setcontext
         saved_context = getcontext()
@@ -4791,6 +5089,50 @@
             c.prec = 2
             self.assertRaises(InvalidOperation, pow, Decimal(1000), 1, 501)
 
+    def test_va_args_exceptions(self):
+        Decimal = C.Decimal
+        Context = C.Context
+
+        x = Decimal("10001111111")
+
+        for attr in ['exp', 'is_normal', 'is_subnormal', 'ln', 'log10',
+                     'logb', 'logical_invert', 'next_minus', 'next_plus',
+                     'normalize', 'number_class', 'sqrt', 'to_eng_string']:
+            func = getattr(x, attr)
+            self.assertRaises(TypeError, func, context="x")
+            self.assertRaises(TypeError, func, "x", context=None)
+
+        for attr in ['compare', 'compare_signal', 'logical_and',
+                     'logical_or', 'max', 'max_mag', 'min', 'min_mag',
+                     'remainder_near', 'rotate', 'scaleb', 'shift']:
+            func = getattr(x, attr)
+            self.assertRaises(TypeError, func, context="x")
+            self.assertRaises(TypeError, func, "x", context=None)
+
+        self.assertRaises(TypeError, x.to_integral, rounding=None, context=[])
+        self.assertRaises(TypeError, x.to_integral, rounding={}, context=[])
+        self.assertRaises(TypeError, x.to_integral, [], [])
+
+        self.assertRaises(TypeError, x.to_integral_value, rounding=None, context=[])
+        self.assertRaises(TypeError, x.to_integral_value, rounding={}, context=[])
+        self.assertRaises(TypeError, x.to_integral_value, [], [])
+
+        self.assertRaises(TypeError, x.to_integral_exact, rounding=None, context=[])
+        self.assertRaises(TypeError, x.to_integral_exact, rounding={}, context=[])
+        self.assertRaises(TypeError, x.to_integral_exact, [], [])
+
+        self.assertRaises(TypeError, x.fma, 1, 2, context="x")
+        self.assertRaises(TypeError, x.fma, 1, 2, "x", context=None)
+
+        self.assertRaises(TypeError, x.quantize, 1, [], context=None)
+        self.assertRaises(TypeError, x.quantize, 1, [], rounding=None)
+        self.assertRaises(TypeError, x.quantize, 1, [], [])
+
+        c = Context()
+        self.assertRaises(TypeError, c.power, 1, 2, mod="x")
+        self.assertRaises(TypeError, c.power, 1, "x", mod=None)
+        self.assertRaises(TypeError, c.power, "x", 2, mod=None)
+
     @requires_extra_functionality
     def test_c_context_templates(self):
         self.assertEqual(
diff -r bd8afb90ebf2 Lib/test/test_descr.py
--- a/Lib/test/test_descr.py
+++ b/Lib/test/test_descr.py
@@ -4502,11 +4502,19 @@
         self.assertEqual(float.real.__qualname__, 'float.real')
         self.assertEqual(int.__add__.__qualname__, 'int.__add__')
 
+        class X:
+            pass
+        with self.assertRaises(TypeError):
+            del X.__qualname__
+
+        self.assertRaises(TypeError, type.__dict__['__qualname__'].__set__,
+                          str, 'Oink')
+
     def test_qualname_dict(self):
         ns = {'__qualname__': 'some.name'}
         tp = type('Foo', (), ns)
         self.assertEqual(tp.__qualname__, 'some.name')
-        self.assertEqual(tp.__dict__['__qualname__'], 'some.name')
+        self.assertNotIn('__qualname__', tp.__dict__)
         self.assertEqual(ns, {'__qualname__': 'some.name'})
 
         ns = {'__qualname__': 1}
@@ -4564,7 +4572,7 @@
         keys = list(it)
         keys.sort()
         self.assertEqual(keys, ['__dict__', '__doc__', '__module__',
-                                '__qualname__', '__weakref__', 'meth'])
+                                '__weakref__', 'meth'])
 
     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),
                         'trace function introduces __local__')
@@ -4573,7 +4581,7 @@
         it = self.C.__dict__.values()
         self.assertNotIsInstance(it, list)
         values = list(it)
-        self.assertEqual(len(values), 6)
+        self.assertEqual(len(values), 5)
 
     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),
                         'trace function introduces __local__')
@@ -4584,7 +4592,7 @@
         keys = [item[0] for item in it]
         keys.sort()
         self.assertEqual(keys, ['__dict__', '__doc__', '__module__',
-                                '__qualname__', '__weakref__', 'meth'])
+                                '__weakref__', 'meth'])
 
     def test_dict_type_with_metaclass(self):
         # Testing type of __dict__ when metaclass set...
diff -r bd8afb90ebf2 Lib/test/test_dict.py
--- a/Lib/test/test_dict.py
+++ b/Lib/test/test_dict.py
@@ -256,6 +256,14 @@
         d = dict(zip(range(6), range(6)))
         self.assertEqual(dict.fromkeys(d, 0), dict(zip(range(6), [0]*6)))
 
+        class baddict3(dict):
+            def __new__(cls):
+                return d
+        d = {i : i for i in range(10)}
+        res = d.copy()
+        res.update(a=None, b=None, c=None)
+        self.assertEqual(baddict3.fromkeys({"a", "b", "c"}), res)
+
     def test_copy(self):
         d = {1:1, 2:2, 3:3}
         self.assertEqual(d.copy(), {1:1, 2:2, 3:3})
diff -r bd8afb90ebf2 Lib/test/test_doctest.py
--- a/Lib/test/test_doctest.py
+++ b/Lib/test/test_doctest.py
@@ -1986,6 +1986,31 @@
          >>> suite.run(unittest.TestResult())
          <unittest.result.TestResult run=9 errors=0 failures=4>
 
+       The module need not contain any doctest examples:
+
+         >>> suite = doctest.DocTestSuite('test.sample_doctest_no_doctests')
+         >>> suite.run(unittest.TestResult())
+         <unittest.result.TestResult run=0 errors=0 failures=0>
+
+       However, if DocTestSuite finds no docstrings, it raises an error:
+
+         >>> try:
+         ...     doctest.DocTestSuite('test.sample_doctest_no_docstrings')
+         ... except ValueError as e:
+         ...     error = e
+
+         >>> print(error.args[1])
+         has no docstrings
+
+       You can prevent this error by passing a DocTestFinder instance with
+       the `exclude_empty` keyword argument set to False:
+
+         >>> finder = doctest.DocTestFinder(exclude_empty=False)
+         >>> suite = doctest.DocTestSuite('test.sample_doctest_no_docstrings',
+         ...                              test_finder=finder)
+         >>> suite.run(unittest.TestResult())
+         <unittest.result.TestResult run=0 errors=0 failures=0>
+
        We can use the current module:
 
          >>> suite = test.sample_doctest.test_suite()
diff -r bd8afb90ebf2 Lib/test/test_docxmlrpc.py
--- a/Lib/test/test_docxmlrpc.py
+++ b/Lib/test/test_docxmlrpc.py
@@ -100,7 +100,7 @@
         self.assertEqual(response.status, 200)
         self.assertEqual(response.getheader("Content-type"), "text/html")
 
-        # Server throws an exception if we don't start to read the data
+        # Server raises an exception if we don't start to read the data
         response.read()
 
     def test_invalid_get_response(self):
diff -r bd8afb90ebf2 Lib/test/test_email/test_utils.py
--- a/Lib/test/test_email/test_utils.py
+++ b/Lib/test/test_email/test_utils.py
@@ -91,7 +91,7 @@
     @test.support.run_with_tz('EST+05EDT,M3.2.0,M11.1.0')
     def test_localtime_epoch_utc_daylight_true(self):
         test.support.patch(self, time, 'daylight', True)
-        t0 = datetime.datetime(1970, 1, 1, tzinfo = datetime.timezone.utc)
+        t0 = datetime.datetime(1990, 1, 1, tzinfo = datetime.timezone.utc)
         t1 = utils.localtime(t0)
         t2 = t0 - datetime.timedelta(hours=5)
         t2 = t2.replace(tzinfo = datetime.timezone(datetime.timedelta(hours=-5)))
@@ -100,7 +100,7 @@
     @test.support.run_with_tz('EST+05EDT,M3.2.0,M11.1.0')
     def test_localtime_epoch_utc_daylight_false(self):
         test.support.patch(self, time, 'daylight', False)
-        t0 = datetime.datetime(1970, 1, 1, tzinfo = datetime.timezone.utc)
+        t0 = datetime.datetime(1990, 1, 1, tzinfo = datetime.timezone.utc)
         t1 = utils.localtime(t0)
         t2 = t0 - datetime.timedelta(hours=5)
         t2 = t2.replace(tzinfo = datetime.timezone(datetime.timedelta(hours=-5)))
@@ -108,14 +108,14 @@
 
     def test_localtime_epoch_notz_daylight_true(self):
         test.support.patch(self, time, 'daylight', True)
-        t0 = datetime.datetime(1970, 1, 1)
+        t0 = datetime.datetime(1990, 1, 1)
         t1 = utils.localtime(t0)
         t2 = utils.localtime(t0.replace(tzinfo=None))
         self.assertEqual(t1, t2)
 
     def test_localtime_epoch_notz_daylight_false(self):
         test.support.patch(self, time, 'daylight', False)
-        t0 = datetime.datetime(1970, 1, 1)
+        t0 = datetime.datetime(1990, 1, 1)
         t1 = utils.localtime(t0)
         t2 = utils.localtime(t0.replace(tzinfo=None))
         self.assertEqual(t1, t2)
diff -r bd8afb90ebf2 Lib/test/test_exceptions.py
--- a/Lib/test/test_exceptions.py
+++ b/Lib/test/test_exceptions.py
@@ -7,8 +7,9 @@
 import weakref
 import errno
 
-from test.support import (TESTFN, unlink, run_unittest, captured_output,
-                          gc_collect, cpython_only, no_tracing)
+from test.support import (TESTFN, captured_output, check_impl_detail,
+                          cpython_only, gc_collect, run_unittest, no_tracing,
+                          unlink)
 
 class NaiveException(Exception):
     def __init__(self, x):
@@ -551,6 +552,9 @@
             e.__context__ = None
             obj = None
             obj = wr()
+            # guarantee no ref cycles on CPython (don't gc_collect)
+            if check_impl_detail(cpython=False):
+                gc_collect()
             self.assertTrue(obj is None, "%s" % obj)
 
         # Some complicated construct
@@ -567,6 +571,8 @@
             except MyException:
                 pass
         obj = None
+        if check_impl_detail(cpython=False):
+            gc_collect()
         obj = wr()
         self.assertTrue(obj is None, "%s" % obj)
 
@@ -581,6 +587,8 @@
         with Context():
             inner_raising_func()
         obj = None
+        if check_impl_detail(cpython=False):
+            gc_collect()
         obj = wr()
         self.assertTrue(obj is None, "%s" % obj)
 
diff -r bd8afb90ebf2 Lib/test/test_fileio.py
--- a/Lib/test/test_fileio.py
+++ b/Lib/test/test_fileio.py
@@ -10,6 +10,7 @@
 from functools import wraps
 
 from test.support import TESTFN, check_warnings, run_unittest, make_bad_fd
+from collections import UserList
 
 from _io import FileIO as _FileIO
 
@@ -68,6 +69,27 @@
         n = self.f.readinto(a)
         self.assertEqual(array('b', [1, 2]), a[:n])
 
+    def testWritelinesList(self):
+        l = [b'123', b'456']
+        self.f.writelines(l)
+        self.f.close()
+        self.f = _FileIO(TESTFN, 'rb')
+        buf = self.f.read()
+        self.assertEqual(buf, b'123456')
+
+    def testWritelinesUserList(self):
+        l = UserList([b'123', b'456'])
+        self.f.writelines(l)
+        self.f.close()
+        self.f = _FileIO(TESTFN, 'rb')
+        buf = self.f.read()
+        self.assertEqual(buf, b'123456')
+
+    def testWritelinesError(self):
+        self.assertRaises(TypeError, self.f.writelines, [1, 2, 3])
+        self.assertRaises(TypeError, self.f.writelines, None)
+        self.assertRaises(TypeError, self.f.writelines, "abc")
+
     def test_none_args(self):
         self.f.write(b"hi\nbye\nabc")
         self.f.close()
diff -r bd8afb90ebf2 Lib/test/test_ftplib.py
--- a/Lib/test/test_ftplib.py
+++ b/Lib/test/test_ftplib.py
@@ -342,7 +342,7 @@
                 # http://www.mail-archive.com/openssl-users@openssl.org/msg60710.html
                 pass
             self._ssl_closing = False
-            if getattr(self, '_ccc', False) == False:
+            if getattr(self, '_ccc', False) is False:
                 super(SSLConnection, self).close()
             else:
                 pass
@@ -896,39 +896,40 @@
     def setUp(self):
         self.evt = threading.Event()
         self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
-        self.sock.settimeout(10)
+        self.sock.settimeout(20)
         self.port = support.bind_port(self.sock)
-        threading.Thread(target=self.server, args=(self.evt,self.sock)).start()
+        self.server_thread = threading.Thread(target=self.server)
+        self.server_thread.start()
         # Wait for the server to be ready.
         self.evt.wait()
         self.evt.clear()
+        self.old_port = ftplib.FTP.port
         ftplib.FTP.port = self.port
 
     def tearDown(self):
-        self.evt.wait()
-        self.sock.close()
+        ftplib.FTP.port = self.old_port
+        self.server_thread.join()
 
-    def server(self, evt, serv):
+    def server(self):
         # This method sets the evt 3 times:
         #  1) when the connection is ready to be accepted.
         #  2) when it is safe for the caller to close the connection
         #  3) when we have closed the socket
-        serv.listen(5)
+        self.sock.listen(5)
         # (1) Signal the caller that we are ready to accept the connection.
-        evt.set()
+        self.evt.set()
         try:
-            conn, addr = serv.accept()
+            conn, addr = self.sock.accept()
         except socket.timeout:
             pass
         else:
-            conn.send(b"1 Hola mundo\n")
+            conn.sendall(b"1 Hola mundo\n")
+            conn.shutdown(socket.SHUT_WR)
             # (2) Signal the caller that it is safe to close the socket.
-            evt.set()
+            self.evt.set()
             conn.close()
         finally:
-            serv.close()
-            # (3) Signal the caller that we are done.
-            evt.set()
+            self.sock.close()
 
     def testTimeoutDefault(self):
         # default -- use global socket timeout
diff -r bd8afb90ebf2 Lib/test/test_gdb.py
--- a/Lib/test/test_gdb.py
+++ b/Lib/test/test_gdb.py
@@ -26,42 +26,58 @@
     # This is what "no gdb" looks like.  There may, however, be other
     # errors that manifest this way too.
     raise unittest.SkipTest("Couldn't find gdb on the path")
-gdb_version_number = re.search(b"^GNU gdb [^\d]*(\d+)\.", gdb_version)
-if int(gdb_version_number.group(1)) < 7:
+gdb_version_number = re.search(b"^GNU gdb [^\d]*(\d+)\.(\d)", gdb_version)
+gdb_major_version = int(gdb_version_number.group(1))
+gdb_minor_version = int(gdb_version_number.group(2))
+if gdb_major_version < 7:
     raise unittest.SkipTest("gdb versions before 7.0 didn't support python embedding"
                             " Saw:\n" + gdb_version.decode('ascii', 'replace'))
 
 if not sysconfig.is_python_build():
     raise unittest.SkipTest("test_gdb only works on source builds at the moment.")
 
+# Location of custom hooks file in a repository checkout.
+checkout_hook_path = os.path.join(os.path.dirname(sys.executable),
+                                  'python-gdb.py')
+
+def run_gdb(*args, **env_vars):
+    """Runs gdb in --batch mode with the additional arguments given by *args.
+
+    Returns its (stdout, stderr) decoded from utf-8 using the replace handler.
+    """
+    if env_vars:
+        env = os.environ.copy()
+        env.update(env_vars)
+    else:
+        env = None
+    base_cmd = ('gdb', '--batch')
+    if (gdb_major_version, gdb_minor_version) >= (7, 4):
+        base_cmd += ('-iex', 'add-auto-load-safe-path ' + checkout_hook_path)
+    out, err = subprocess.Popen(base_cmd + args,
+        stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env,
+        ).communicate()
+    return out.decode('utf-8', 'replace'), err.decode('utf-8', 'replace')
+
 # Verify that "gdb" was built with the embedded python support enabled:
-cmd = "--eval-command=python import sys; print sys.version_info"
-p = subprocess.Popen(["gdb", "--batch", cmd],
-                     stdout=subprocess.PIPE)
-gdbpy_version, _ = p.communicate()
-if gdbpy_version == b'':
+gdbpy_version, _ = run_gdb("--eval-command=python import sys; print sys.version_info")
+if not gdbpy_version:
     raise unittest.SkipTest("gdb not built with embedded python support")
 
-# Verify that "gdb" can load our custom hooks
-p = subprocess.Popen(["gdb", "--batch", cmd,
-                      "--args", sys.executable],
-                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-__, gdbpy_errors = p.communicate()
-if b"auto-loading has been declined" in gdbpy_errors:
-    msg = "gdb security settings prevent use of custom hooks: %s"
-    raise unittest.SkipTest(msg % gdbpy_errors)
+# Verify that "gdb" can load our custom hooks. In theory this should never fail.
+cmd = ['--args', sys.executable]
+_, gdbpy_errors = run_gdb('--args', sys.executable)
+if "auto-loading has been declined" in gdbpy_errors:
+    msg = "gdb security settings prevent use of custom hooks: "
+    raise unittest.SkipTest(msg + gdbpy_errors.rstrip())
 
 def gdb_has_frame_select():
     # Does this build of gdb have gdb.Frame.select ?
-    cmd = "--eval-command=python print(dir(gdb.Frame))"
-    p = subprocess.Popen(["gdb", "--batch", cmd],
-                         stdout=subprocess.PIPE)
-    stdout, _ = p.communicate()
-    m = re.match(br'.*\[(.*)\].*', stdout)
+    stdout, _ = run_gdb("--eval-command=python print(dir(gdb.Frame))")
+    m = re.match(r'.*\[(.*)\].*', stdout)
     if not m:
         raise unittest.SkipTest("Unable to parse output from gdb.Frame.select test")
-    gdb_frame_dir = m.group(1).split(b', ')
-    return b"'select'" in gdb_frame_dir
+    gdb_frame_dir = m.group(1).split(', ')
+    return "'select'" in gdb_frame_dir
 
 HAS_PYUP_PYDOWN = gdb_has_frame_select()
 
@@ -71,21 +87,6 @@
 
     """Test that the debugger can debug Python."""
 
-    def run_gdb(self, *args, **env_vars):
-        """Runs gdb with the command line given by *args.
-
-        Returns its stdout, stderr
-        """
-        if env_vars:
-            env = os.environ.copy()
-            env.update(env_vars)
-        else:
-            env = None
-        out, err = subprocess.Popen(
-            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env,
-            ).communicate()
-        return out.decode('utf-8', 'replace'), err.decode('utf-8', 'replace')
-
     def get_stack_trace(self, source=None, script=None,
                         breakpoint=BREAKPOINT_FN,
                         cmds_after_breakpoint=None,
@@ -142,7 +143,7 @@
         # print ' '.join(args)
 
         # Use "args" to invoke gdb, capturing stdout, stderr:
-        out, err = self.run_gdb(*args, PYTHONHASHSEED='0')
+        out, err = run_gdb(*args, PYTHONHASHSEED='0')
 
         # Ignore some noise on stderr due to the pending breakpoint:
         err = err.replace('Function "%s" not defined.\n' % breakpoint, '')
@@ -154,6 +155,16 @@
         err = err.replace("warning: Cannot initialize thread debugging"
                           " library: Debugger service failed\n",
                           '')
+        err = err.replace('warning: Could not load shared library symbols for '
+                          'linux-vdso.so.1.\n'
+                          'Do you need "set solib-search-path" or '
+                          '"set sysroot"?\n',
+                          '')
+        err = err.replace('warning: Could not load shared library symbols for '
+                          'linux-gate.so.1.\n'
+                          'Do you need "set solib-search-path" or '
+                          '"set sysroot"?\n',
+                          '')
 
         # Ensure no unexpected error messages:
         self.assertEqual(err, '')
diff -r bd8afb90ebf2 Lib/test/test_glob.py
--- a/Lib/test/test_glob.py
+++ b/Lib/test/test_glob.py
@@ -4,6 +4,8 @@
 import glob
 import os
 import shutil
+import sys
+
 
 class GlobTests(unittest.TestCase):
 
@@ -18,9 +20,11 @@
         create_empty_file(filename)
 
     def setUp(self):
-        self.tempdir = TESTFN+"_dir"
+        self.tempdir = TESTFN + "_dir"
         self.mktemp('a', 'D')
         self.mktemp('aab', 'F')
+        self.mktemp('.aa', 'G')
+        self.mktemp('.bb', 'H')
         self.mktemp('aaa', 'zzzF')
         self.mktemp('ZZZ')
         self.mktemp('a', 'bcd', 'EF')
@@ -66,6 +70,8 @@
         eq = self.assertSequencesEqual_noorder
         eq(self.glob('a*'), map(self.norm, ['a', 'aab', 'aaa']))
         eq(self.glob('*a'), map(self.norm, ['a', 'aaa']))
+        eq(self.glob('.*'), map(self.norm, ['.aa', '.bb']))
+        eq(self.glob('?aa'), map(self.norm, ['aaa']))
         eq(self.glob('aa?'), map(self.norm, ['aaa', 'aab']))
         eq(self.glob('aa[ab]'), map(self.norm, ['aaa', 'aab']))
         eq(self.glob('*q'), [])
@@ -91,12 +97,35 @@
                                                    os.path.join('aab', 'F')]))
 
     def test_glob_directory_with_trailing_slash(self):
-        # We are verifying that when there is wildcard pattern which
-        # ends with os.sep doesn't blow up.
-        res = glob.glob(self.tempdir + '*' + os.sep)
-        self.assertEqual(len(res), 1)
+        # Patterns ending with a slash shouldn't match non-dirs
+        res = glob.glob(os.path.join(self.tempdir, 'Z*Z') + os.sep)
+        self.assertEqual(res, [])
+        res = glob.glob(os.path.join(self.tempdir, 'ZZZ') + os.sep)
+        self.assertEqual(res, [])
+        # When there is wildcard pattern which ends with os.sep, glob()
+        # doesn't blow up.
+        res = glob.glob(os.path.join(self.tempdir, 'aa*') + os.sep)
+        self.assertEqual(len(res), 2)
         # either of these results are reasonable
-        self.assertIn(res[0], [self.tempdir, self.tempdir + os.sep])
+        self.assertIn(set(res), [
+                      {self.norm('aaa'), self.norm('aab')},
+                      {self.norm('aaa') + os.sep, self.norm('aab') + os.sep},
+                      ])
+
+    def test_glob_bytes_directory_with_trailing_slash(self):
+        # Same as test_glob_directory_with_trailing_slash, but with a
+        # bytes argument.
+        res = glob.glob(os.fsencode(os.path.join(self.tempdir, 'Z*Z') + os.sep))
+        self.assertEqual(res, [])
+        res = glob.glob(os.fsencode(os.path.join(self.tempdir, 'ZZZ') + os.sep))
+        self.assertEqual(res, [])
+        res = glob.glob(os.fsencode(os.path.join(self.tempdir, 'aa*') + os.sep))
+        self.assertEqual(len(res), 2)
+        # either of these results are reasonable
+        self.assertIn({os.fsdecode(x) for x in res}, [
+                      {self.norm('aaa'), self.norm('aab')},
+                      {self.norm('aaa') + os.sep, self.norm('aab') + os.sep},
+                      ])
 
     @skip_unless_symlink
     def test_glob_broken_symlinks(self):
@@ -105,6 +134,18 @@
         eq(self.glob('sym1'), [self.norm('sym1')])
         eq(self.glob('sym2'), [self.norm('sym2')])
 
+    @unittest.skipUnless(sys.platform == "win32", "Win32 specific test")
+    def test_glob_magic_in_drive(self):
+        eq = self.assertSequencesEqual_noorder
+        eq(glob.glob('*:'), [])
+        eq(glob.glob(b'*:'), [])
+        eq(glob.glob('?:'), [])
+        eq(glob.glob(b'?:'), [])
+        eq(glob.glob('\\\\?\\c:\\'), ['\\\\?\\c:\\'])
+        eq(glob.glob(b'\\\\?\\c:\\'), [b'\\\\?\\c:\\'])
+        eq(glob.glob('\\\\*\\*\\'), [])
+        eq(glob.glob(b'\\\\*\\*\\'), [])
+
 
 def test_main():
     run_unittest(GlobTests)
diff -r bd8afb90ebf2 Lib/test/test_hash.py
--- a/Lib/test/test_hash.py
+++ b/Lib/test/test_hash.py
@@ -45,6 +45,16 @@
         self.same_hash(int(1.23e300), float(1.23e300))
         self.same_hash(float(0.5), complex(0.5, 0.0))
 
+    def test_unaligned_buffers(self):
+        # The hash function for bytes-like objects shouldn't have
+        # alignment-dependent results (example in issue #16427).
+        b = b"123456789abcdefghijklmnopqrstuvwxyz" * 128
+        for i in range(16):
+            for j in range(16):
+                aligned = b[i:128+j]
+                unaligned = memoryview(b)[i:128+j]
+                self.assertEqual(hash(aligned), hash(unaligned))
+
 
 _default_hash = object.__hash__
 class DefaultHash(object): pass
diff -r bd8afb90ebf2 Lib/test/test_httplib.py
--- a/Lib/test/test_httplib.py
+++ b/Lib/test/test_httplib.py
@@ -175,7 +175,7 @@
         self.assertEqual(repr(exc), '''BadStatusLine("\'\'",)''')
 
     def test_partial_reads(self):
-        # if we have a lenght, the system knows when to close itself
+        # if we have a length, the system knows when to close itself
         # same behaviour than when we read the whole thing with read()
         body = "HTTP/1.1 200 Ok\r\nContent-Length: 4\r\n\r\nText"
         sock = FakeSocket(body)
@@ -187,7 +187,7 @@
         self.assertTrue(resp.isclosed())
 
     def test_partial_readintos(self):
-        # if we have a lenght, the system knows when to close itself
+        # if we have a length, the system knows when to close itself
         # same behaviour than when we read the whole thing with read()
         body = "HTTP/1.1 200 Ok\r\nContent-Length: 4\r\n\r\nText"
         sock = FakeSocket(body)
@@ -203,6 +203,38 @@
         self.assertEqual(bytes(b), b'xt')
         self.assertTrue(resp.isclosed())
 
+    def test_partial_reads_no_content_length(self):
+        # when no length is present, the socket should be gracefully closed when
+        # all data was read
+        body = "HTTP/1.1 200 Ok\r\n\r\nText"
+        sock = FakeSocket(body)
+        resp = client.HTTPResponse(sock)
+        resp.begin()
+        self.assertEqual(resp.read(2), b'Te')
+        self.assertFalse(resp.isclosed())
+        self.assertEqual(resp.read(2), b'xt')
+        self.assertEqual(resp.read(1), b'')
+        self.assertTrue(resp.isclosed())
+
+    def test_partial_readintos_no_content_length(self):
+        # when no length is present, the socket should be gracefully closed when
+        # all data was read
+        body = "HTTP/1.1 200 Ok\r\n\r\nText"
+        sock = FakeSocket(body)
+        resp = client.HTTPResponse(sock)
+        resp.begin()
+        b = bytearray(2)
+        n = resp.readinto(b)
+        self.assertEqual(n, 2)
+        self.assertEqual(bytes(b), b'Te')
+        self.assertFalse(resp.isclosed())
+        n = resp.readinto(b)
+        self.assertEqual(n, 2)
+        self.assertEqual(bytes(b), b'xt')
+        n = resp.readinto(b)
+        self.assertEqual(n, 0)
+        self.assertTrue(resp.isclosed())
+
     def test_host_port(self):
         # Check invalid host_port
 
diff -r bd8afb90ebf2 Lib/test/test_httpservers.py
--- a/Lib/test/test_httpservers.py
+++ b/Lib/test/test_httpservers.py
@@ -62,6 +62,7 @@
 
     def tearDown(self):
         self.thread.stop()
+        self.thread = None
         os.environ.__exit__()
         support.threading_cleanup(*self._threads)
 
diff -r bd8afb90ebf2 Lib/test/test_imaplib.py
--- a/Lib/test/test_imaplib.py
+++ b/Lib/test/test_imaplib.py
@@ -115,7 +115,7 @@
                         return
                     line += part
                 except IOError:
-                    # ..but SSLSockets throw exceptions.
+                    # ..but SSLSockets raise exceptions.
                     return
                 if line.endswith(b'\r\n'):
                     break
diff -r bd8afb90ebf2 Lib/test/test_import.py
--- a/Lib/test/test_import.py
+++ b/Lib/test/test_import.py
@@ -14,6 +14,7 @@
 import textwrap
 import errno
 import shutil
+import contextlib
 
 import test.support
 from test.support import (
@@ -33,6 +34,24 @@
     rmtree('__pycache__')
 
 
+@contextlib.contextmanager
+def _ready_to_import(name=None, source=""):
+    # sets up a temporary directory and removes it
+    # creates the module file
+    # temporarily clears the module from sys.modules (if any)
+    name = name or "spam"
+    with script_helper.temp_dir() as tempdir:
+        path = script_helper.make_script(tempdir, name, source)
+        old_module = sys.modules.pop(name, None)
+        try:
+            sys.path.insert(0, tempdir)
+            yield name, path
+            sys.path.remove(tempdir)
+        finally:
+            if old_module is not None:
+                sys.modules[name] = old_module
+
+
 class ImportTests(unittest.TestCase):
 
     def setUp(self):
@@ -101,54 +120,6 @@
         finally:
             del sys.path[0]
 
-    @unittest.skipUnless(os.name == 'posix',
-                         "test meaningful only on posix systems")
-    def test_creation_mode(self):
-        mask = 0o022
-        with temp_umask(mask):
-            sys.path.insert(0, os.curdir)
-            try:
-                fname = TESTFN + os.extsep + "py"
-                create_empty_file(fname)
-                fn = imp.cache_from_source(fname)
-                unlink(fn)
-                importlib.invalidate_caches()
-                __import__(TESTFN)
-                if not os.path.exists(fn):
-                    self.fail("__import__ did not result in creation of "
-                              "either a .pyc or .pyo file")
-                s = os.stat(fn)
-                # Check that the umask is respected, and the executable bits
-                # aren't set.
-                self.assertEqual(oct(stat.S_IMODE(s.st_mode)), oct(0o666 & ~mask))
-            finally:
-                del sys.path[0]
-                remove_files(TESTFN)
-                unload(TESTFN)
-
-    @unittest.skipUnless(os.name == 'posix',
-                         "test meaningful only on posix systems")
-    def test_cached_mode_issue_2051(self):
-        mode = 0o600
-        source = TESTFN + ".py"
-        with script_helper.temp_dir() as tempdir:
-            path = script_helper.make_script(tempdir, TESTFN,
-                                             "key='top secret'")
-            os.chmod(path, mode)
-            compiled = imp.cache_from_source(path)
-            sys.path.insert(0, tempdir)
-            try:
-                __import__(TESTFN)
-            finally:
-                sys.path.remove(tempdir)
-
-            if not os.path.exists(compiled):
-                self.fail("__import__ did not result in creation of "
-                          "either a .pyc or .pyo file")
-            stat_info = os.stat(compiled)
-
-        self.assertEqual(oct(stat.S_IMODE(stat_info.st_mode)), oct(mode))
-
     def test_bug7732(self):
         source = TESTFN + '.py'
         os.mkdir(source)
@@ -345,6 +316,92 @@
             self.fail("fromlist must allow bogus names")
 
 
+class FilePermissionTests(unittest.TestCase):
+    # tests for file mode on cached .pyc/.pyo files
+
+    @unittest.skipUnless(os.name == 'posix',
+                         "test meaningful only on posix systems")
+    def test_creation_mode(self):
+        mask = 0o022
+        with temp_umask(mask), _ready_to_import() as (name, path):
+            cached_path = imp.cache_from_source(path)
+            module = __import__(name)
+            if not os.path.exists(cached_path):
+                self.fail("__import__ did not result in creation of "
+                          "either a .pyc or .pyo file")
+            stat_info = os.stat(cached_path)
+
+        # Check that the umask is respected, and the executable bits
+        # aren't set.
+        self.assertEqual(oct(stat.S_IMODE(stat_info.st_mode)),
+                         oct(0o666 & ~mask))
+
+    @unittest.skipUnless(os.name == 'posix',
+                         "test meaningful only on posix systems")
+    def test_cached_mode_issue_2051(self):
+        # permissions of .pyc should match those of .py, regardless of mask
+        mode = 0o600
+        with temp_umask(0o022), _ready_to_import() as (name, path):
+            cached_path = imp.cache_from_source(path)
+            os.chmod(path, mode)
+            __import__(name)
+            if not os.path.exists(cached_path):
+                self.fail("__import__ did not result in creation of "
+                          "either a .pyc or .pyo file")
+            stat_info = os.stat(cached_path)
+
+        self.assertEqual(oct(stat.S_IMODE(stat_info.st_mode)), oct(mode))
+
+    @unittest.skipUnless(os.name == 'posix',
+                         "test meaningful only on posix systems")
+    def test_cached_readonly(self):
+        mode = 0o400
+        with temp_umask(0o022), _ready_to_import() as (name, path):
+            cached_path = imp.cache_from_source(path)
+            os.chmod(path, mode)
+            __import__(name)
+            if not os.path.exists(cached_path):
+                self.fail("__import__ did not result in creation of "
+                          "either a .pyc or .pyo file")
+            stat_info = os.stat(cached_path)
+
+        expected = mode | 0o200 # Account for fix for issue #6074
+        self.assertEqual(oct(stat.S_IMODE(stat_info.st_mode)), oct(expected))
+
+    def test_pyc_always_writable(self):
+        # Initially read-only .pyc files on Windows used to cause problems
+        # with later updates, see issue #6074 for details
+        with _ready_to_import() as (name, path):
+            # Write a Python file, make it read-only and import it
+            with open(path, 'w') as f:
+                f.write("x = 'original'\n")
+            # Tweak the mtime of the source to ensure pyc gets updated later
+            s = os.stat(path)
+            os.utime(path, (s.st_atime, s.st_mtime-100000000))
+            os.chmod(path, 0o400)
+            m = __import__(name)
+            self.assertEqual(m.x, 'original')
+            # Change the file and then reimport it
+            os.chmod(path, 0o600)
+            with open(path, 'w') as f:
+                f.write("x = 'rewritten'\n")
+            unload(name)
+            importlib.invalidate_caches()
+            m = __import__(name)
+            self.assertEqual(m.x, 'rewritten')
+            # Now delete the source file and check the pyc was rewritten
+            unlink(path)
+            unload(name)
+            importlib.invalidate_caches()
+            if __debug__:
+                bytecode_only = path + "c"
+            else:
+                bytecode_only = path + "o"
+            os.rename(imp.cache_from_source(path), bytecode_only)
+            m = __import__(name)
+            self.assertEqual(m.x, 'rewritten')
+
+
 class PycRewritingTests(unittest.TestCase):
     # Test that the `co_filename` attribute on code objects always points
     # to the right file, even when various things happen (e.g. both the .py
@@ -591,7 +648,7 @@
         self.assertTrue(os.path.exists('__pycache__'))
         self.assertTrue(os.path.exists(os.path.join(
             '__pycache__', '{}.{}.py{}'.format(
-            TESTFN, self.tag, __debug__ and 'c' or 'o'))))
+            TESTFN, self.tag, 'c' if __debug__ else 'o'))))
 
     @unittest.skipUnless(os.name == 'posix',
                          "test meaningful only on posix systems")
@@ -945,7 +1002,7 @@
 
 
 def test_main(verbose=None):
-    run_unittest(ImportTests, PycacheTests,
+    run_unittest(ImportTests, PycacheTests, FilePermissionTests,
                  PycRewritingTests, PathsTests, RelativeImportTests,
                  OverridingImportBuiltinTests,
                  ImportlibBootstrapTests,
diff -r bd8afb90ebf2 Lib/test/test_importlib/import_/test_fromlist.py
--- a/Lib/test/test_importlib/import_/test_fromlist.py
+++ b/Lib/test/test_importlib/import_/test_fromlist.py
@@ -52,7 +52,7 @@
                 module = import_util.import_('module', fromlist=['attr'])
                 self.assertEqual(module.__name__, 'module')
 
-    def test_unexistent_object(self):
+    def test_nonexistent_object(self):
         # [bad object]
         with util.mock_modules('module') as importer:
             with util.import_state(meta_path=[importer]):
@@ -69,6 +69,19 @@
                 self.assertTrue(hasattr(module, 'module'))
                 self.assertEqual(module.module.__name__, 'pkg.module')
 
+    def test_module_from_package_triggers_ImportError(self):
+        # If a submodule causes an ImportError because it tries to import
+        # a module which doesn't exist, that should let the ImportError
+        # propagate.
+        def module_code():
+            import i_do_not_exist
+        with util.mock_modules('pkg.__init__', 'pkg.mod',
+                               module_code={'pkg.mod': module_code}) as importer:
+            with util.import_state(meta_path=[importer]):
+                with self.assertRaises(ImportError) as exc:
+                    import_util.import_('pkg', fromlist=['mod'])
+                self.assertEquals('i_do_not_exist', exc.exception.name)
+
     def test_empty_string(self):
         with util.mock_modules('pkg.__init__', 'pkg.mod') as importer:
             with util.import_state(meta_path=[importer]):
diff -r bd8afb90ebf2 Lib/test/test_importlib/import_/test_path.py
--- a/Lib/test/test_importlib/import_/test_path.py
+++ b/Lib/test/test_importlib/import_/test_path.py
@@ -1,15 +1,14 @@
 from importlib import _bootstrap
 from importlib import machinery
+from importlib import import_module
 from .. import util
 from . import util as import_util
-import imp
 import os
 import sys
-import tempfile
-from test import support
-from types import MethodType
+from types import ModuleType
 import unittest
 import warnings
+import zipimport
 
 
 class FinderTests(unittest.TestCase):
@@ -89,6 +88,29 @@
             self.assertIs(loader, importer)
             self.assertIn(os.curdir, sys.path_importer_cache)
 
+    def test_None_on_sys_path(self):
+        # Putting None in sys.path[0] caused an import regression from Python
+        # 3.2: http://bugs.python.org/issue16514
+        new_path = sys.path[:]
+        new_path.insert(0, None)
+        new_path_importer_cache = sys.path_importer_cache.copy()
+        new_path_importer_cache.pop(None, None)
+        new_path_hooks = [zipimport.zipimporter,
+                          _bootstrap.FileFinder.path_hook(
+                              *_bootstrap._get_supported_file_loaders())]
+        missing = object()
+        email = sys.modules.pop('email', missing)
+        try:
+            with util.import_state(meta_path=sys.meta_path[:],
+                                   path=new_path,
+                                   path_importer_cache=new_path_importer_cache,
+                                   path_hooks=new_path_hooks):
+                module = import_module('email')
+                self.assertIsInstance(module, ModuleType)
+        finally:
+            if email is not missing:
+                sys.modules['email'] = email
+
 
 def test_main():
     from test.support import run_unittest
diff -r bd8afb90ebf2 Lib/test/test_importlib/test_locks.py
--- a/Lib/test/test_importlib/test_locks.py
+++ b/Lib/test/test_importlib/test_locks.py
@@ -1,4 +1,5 @@
 from importlib import _bootstrap
+import sys
 import time
 import unittest
 import weakref
@@ -41,6 +42,17 @@
 @unittest.skipUnless(threading, "threads needed for this test")
 class DeadlockAvoidanceTests(unittest.TestCase):
 
+    def setUp(self):
+        try:
+            self.old_switchinterval = sys.getswitchinterval()
+            sys.setswitchinterval(0.000001)
+        except AttributeError:
+            self.old_switchinterval = None
+
+    def tearDown(self):
+        if self.old_switchinterval is not None:
+            sys.setswitchinterval(self.old_switchinterval)
+
     def run_deadlock_avoidance_test(self, create_deadlock):
         NLOCKS = 10
         locks = [LockType(str(i)) for i in range(NLOCKS)]
@@ -75,10 +87,12 @@
 
     def test_deadlock(self):
         results = self.run_deadlock_avoidance_test(True)
-        # One of the threads detected a potential deadlock on its second
-        # acquire() call.
-        self.assertEqual(results.count((True, False)), 1)
-        self.assertEqual(results.count((True, True)), len(results) - 1)
+        # At least one of the threads detected a potential deadlock on its
+        # second acquire() call.  It may be several of them, because the
+        # deadlock avoidance mechanism is conservative.
+        nb_deadlocks = results.count((True, False))
+        self.assertGreaterEqual(nb_deadlocks, 1)
+        self.assertEqual(results.count((True, True)), len(results) - nb_deadlocks)
 
     def test_no_deadlock(self):
         results = self.run_deadlock_avoidance_test(False)
diff -r bd8afb90ebf2 Lib/test/test_int.py
--- a/Lib/test/test_int.py
+++ b/Lib/test/test_int.py
@@ -305,6 +305,18 @@
                     self.fail("Failed to raise TypeError with %s" %
                               ((base, trunc_result_base),))
 
+                # Regression test for bugs.python.org/issue16060.
+                class BadInt(trunc_result_base):
+                    def __int__(self):
+                        return 42.0
+
+                class TruncReturnsBadInt(base):
+                    def __trunc__(self):
+                        return BadInt()
+
+                with self.assertRaises(TypeError):
+                    int(TruncReturnsBadInt())
+
     def test_error_message(self):
         testlist = ('\xbd', '123\xbd', '  123 456  ')
         for s in testlist:
diff -r bd8afb90ebf2 Lib/test/test_io.py
--- a/Lib/test/test_io.py
+++ b/Lib/test/test_io.py
@@ -32,7 +32,7 @@
 import unittest
 import warnings
 import weakref
-from collections import deque
+from collections import deque, UserList
 from itertools import cycle, count
 from test import support
 
@@ -1193,6 +1193,29 @@
         bufio.flush()
         self.assertEqual(b"abc", writer._write_stack[0])
 
+    def test_writelines(self):
+        l = [b'ab', b'cd', b'ef']
+        writer = self.MockRawIO()
+        bufio = self.tp(writer, 8)
+        bufio.writelines(l)
+        bufio.flush()
+        self.assertEqual(b''.join(writer._write_stack), b'abcdef')
+
+    def test_writelines_userlist(self):
+        l = UserList([b'ab', b'cd', b'ef'])
+        writer = self.MockRawIO()
+        bufio = self.tp(writer, 8)
+        bufio.writelines(l)
+        bufio.flush()
+        self.assertEqual(b''.join(writer._write_stack), b'abcdef')
+
+    def test_writelines_error(self):
+        writer = self.MockRawIO()
+        bufio = self.tp(writer, 8)
+        self.assertRaises(TypeError, bufio.writelines, [1, 2, 3])
+        self.assertRaises(TypeError, bufio.writelines, None)
+        self.assertRaises(TypeError, bufio.writelines, 'abc')
+
     def test_destructor(self):
         writer = self.MockRawIO()
         bufio = self.tp(writer, 8)
@@ -2296,6 +2319,28 @@
             reads += c
         self.assertEqual(reads, "A"*127+"\nB")
 
+    def test_writelines(self):
+        l = ['ab', 'cd', 'ef']
+        buf = self.BytesIO()
+        txt = self.TextIOWrapper(buf)
+        txt.writelines(l)
+        txt.flush()
+        self.assertEqual(buf.getvalue(), b'abcdef')
+
+    def test_writelines_userlist(self):
+        l = UserList(['ab', 'cd', 'ef'])
+        buf = self.BytesIO()
+        txt = self.TextIOWrapper(buf)
+        txt.writelines(l)
+        txt.flush()
+        self.assertEqual(buf.getvalue(), b'abcdef')
+
+    def test_writelines_error(self):
+        txt = self.TextIOWrapper(self.BytesIO())
+        self.assertRaises(TypeError, txt.writelines, [1, 2, 3])
+        self.assertRaises(TypeError, txt.writelines, None)
+        self.assertRaises(TypeError, txt.writelines, b'abc')
+
     def test_issue1395_1(self):
         txt = self.TextIOWrapper(self.BytesIO(self.testdata), encoding="ascii")
 
@@ -2887,6 +2932,11 @@
         with self.open(support.TESTFN, 'rb') as f:
             self.assertEqual(b"spam", f.read())
 
+    def test_open_allargs(self):
+        # there used to be a buffer overflow in the parser for rawmode
+        self.assertRaises(ValueError, self.open, support.TESTFN, 'rwax+')
+
+
 class CMiscIOTest(MiscIOTest):
     io = io
 
diff -r bd8afb90ebf2 Lib/test/test_iter.py
--- a/Lib/test/test_iter.py
+++ b/Lib/test/test_iter.py
@@ -903,6 +903,21 @@
         except TypeError:
             pass
 
+    def test_extending_list_with_iterator_does_not_segfault(self):
+        # The code to extend a list with an iterator has a fair
+        # amount of nontrivial logic in terms of guessing how
+        # much memory to allocate in advance, "stealing" refs,
+        # and then shrinking at the end.  This is a basic smoke
+        # test for that scenario.
+        def gen():
+            for i in range(500):
+                yield i
+        lst = [0] * 500
+        for i in range(240):
+            lst.pop(0)
+        lst.extend(gen())
+        self.assertEqual(len(lst), 760)
+
 
 def test_main():
     run_unittest(TestCase)
diff -r bd8afb90ebf2 Lib/test/test_mailbox.py
--- a/Lib/test/test_mailbox.py
+++ b/Lib/test/test_mailbox.py
@@ -53,7 +53,7 @@
     maxDiff = None
 
     _factory = None     # Overridden by subclasses to reuse tests
-    _template = 'From: foo\n\n%s'
+    _template = 'From: foo\n\n%s\n'
 
     def setUp(self):
         self._path = support.TESTFN
@@ -232,7 +232,7 @@
         key0 = self._box.add(self._template % 0)
         msg = self._box.get(key0)
         self.assertEqual(msg['from'], 'foo')
-        self.assertEqual(msg.get_payload(), '0')
+        self.assertEqual(msg.get_payload(), '0\n')
         self.assertIs(self._box.get('foo'), None)
         self.assertIs(self._box.get('foo', False), False)
         self._box.close()
@@ -240,14 +240,14 @@
         key1 = self._box.add(self._template % 1)
         msg = self._box.get(key1)
         self.assertEqual(msg['from'], 'foo')
-        self.assertEqual(msg.get_payload(), '1')
+        self.assertEqual(msg.get_payload(), '1\n')
 
     def test_getitem(self):
         # Retrieve message using __getitem__()
         key0 = self._box.add(self._template % 0)
         msg = self._box[key0]
         self.assertEqual(msg['from'], 'foo')
-        self.assertEqual(msg.get_payload(), '0')
+        self.assertEqual(msg.get_payload(), '0\n')
         self.assertRaises(KeyError, lambda: self._box['foo'])
         self._box.discard(key0)
         self.assertRaises(KeyError, lambda: self._box[key0])
@@ -259,7 +259,7 @@
         msg0 = self._box.get_message(key0)
         self.assertIsInstance(msg0, mailbox.Message)
         self.assertEqual(msg0['from'], 'foo')
-        self.assertEqual(msg0.get_payload(), '0')
+        self.assertEqual(msg0.get_payload(), '0\n')
         self._check_sample(self._box.get_message(key1))
 
     def test_get_bytes(self):
@@ -432,15 +432,15 @@
         self.assertIn(key0, self._box)
         key1 = self._box.add(self._template % 1)
         self.assertIn(key1, self._box)
-        self.assertEqual(self._box.pop(key0).get_payload(), '0')
+        self.assertEqual(self._box.pop(key0).get_payload(), '0\n')
         self.assertNotIn(key0, self._box)
         self.assertIn(key1, self._box)
         key2 = self._box.add(self._template % 2)
         self.assertIn(key2, self._box)
-        self.assertEqual(self._box.pop(key2).get_payload(), '2')
+        self.assertEqual(self._box.pop(key2).get_payload(), '2\n')
         self.assertNotIn(key2, self._box)
         self.assertIn(key1, self._box)
-        self.assertEqual(self._box.pop(key1).get_payload(), '1')
+        self.assertEqual(self._box.pop(key1).get_payload(), '1\n')
         self.assertNotIn(key1, self._box)
         self.assertEqual(len(self._box), 0)
 
@@ -635,7 +635,7 @@
         msg_returned = self._box.get_message(key)
         self.assertEqual(msg_returned.get_subdir(), 'new')
         self.assertEqual(msg_returned.get_flags(), '')
-        self.assertEqual(msg_returned.get_payload(), '1')
+        self.assertEqual(msg_returned.get_payload(), '1\n')
         msg2 = mailbox.MaildirMessage(self._template % 2)
         msg2.set_info('2,S')
         self._box[key] = msg2
@@ -643,7 +643,7 @@
         msg_returned = self._box.get_message(key)
         self.assertEqual(msg_returned.get_subdir(), 'new')
         self.assertEqual(msg_returned.get_flags(), 'S')
-        self.assertEqual(msg_returned.get_payload(), '3')
+        self.assertEqual(msg_returned.get_payload(), '3\n')
 
     def test_consistent_factory(self):
         # Add a message.
@@ -763,13 +763,13 @@
             self.assertIsNot(match, None, "Invalid file name: '%s'" % tail)
             groups = match.groups()
             if previous_groups is not None:
-                self.assertTrue(int(groups[0] >= previous_groups[0]),
+                self.assertGreaterEqual(int(groups[0]), int(previous_groups[0]),
                              "Non-monotonic seconds: '%s' before '%s'" %
                              (previous_groups[0], groups[0]))
-                self.assertTrue(int(groups[1] >= previous_groups[1]) or
-                             groups[0] != groups[1],
-                             "Non-monotonic milliseconds: '%s' before '%s'" %
-                             (previous_groups[1], groups[1]))
+                if int(groups[0]) == int(previous_groups[0]):
+                    self.assertGreaterEqual(int(groups[1]), int(previous_groups[1]),
+                                "Non-monotonic milliseconds: '%s' before '%s'" %
+                                (previous_groups[1], groups[1]))
                 self.assertEqual(int(groups[2]), pid,
                              "Process ID mismatch: '%s' should be '%s'" %
                              (groups[2], pid))
@@ -996,20 +996,20 @@
 
     def test_add_from_string(self):
         # Add a string starting with 'From ' to the mailbox
-        key = self._box.add('From foo@bar blah\nFrom: foo\n\n0')
+        key = self._box.add('From foo@bar blah\nFrom: foo\n\n0\n')
         self.assertEqual(self._box[key].get_from(), 'foo@bar blah')
-        self.assertEqual(self._box[key].get_payload(), '0')
+        self.assertEqual(self._box[key].get_payload(), '0\n')
 
     def test_add_from_bytes(self):
         # Add a byte string starting with 'From ' to the mailbox
-        key = self._box.add(b'From foo@bar blah\nFrom: foo\n\n0')
+        key = self._box.add(b'From foo@bar blah\nFrom: foo\n\n0\n')
         self.assertEqual(self._box[key].get_from(), 'foo@bar blah')
-        self.assertEqual(self._box[key].get_payload(), '0')
+        self.assertEqual(self._box[key].get_payload(), '0\n')
 
     def test_add_mbox_or_mmdf_message(self):
         # Add an mboxMessage or MMDFMessage
         for class_ in (mailbox.mboxMessage, mailbox.MMDFMessage):
-            msg = class_('From foo@bar blah\nFrom: foo\n\n0')
+            msg = class_('From foo@bar blah\nFrom: foo\n\n0\n')
             key = self._box.add(msg)
 
     def test_open_close_open(self):
@@ -1116,6 +1116,29 @@
             perms = st.st_mode
             self.assertFalse((perms & 0o111)) # Execute bits should all be off.
 
+    def test_terminating_newline(self):
+        message = email.message.Message()
+        message['From'] = 'john@example.com'
+        message.set_payload('No newline at the end')
+        i = self._box.add(message)
+
+        # A newline should have been appended to the payload
+        message = self._box.get(i)
+        self.assertEqual(message.get_payload(), 'No newline at the end\n')
+
+    def test_message_separator(self):
+        # Check there's always a single blank line after each message
+        self._box.add('From: foo\n\n0')  # No newline at the end
+        with open(self._path) as f:
+            data = f.read()
+            self.assertEqual(data[-3:], '0\n\n')
+
+        self._box.add('From: foo\n\n0\n')  # Newline at the end
+        with open(self._path) as f:
+            data = f.read()
+            self.assertEqual(data[-3:], '0\n\n')
+
+
 class TestMMDF(_TestMboxMMDF, unittest.TestCase):
 
     _factory = lambda self, path, factory=None: mailbox.MMDF(path, factory)
diff -r bd8afb90ebf2 Lib/test/test_memoryio.py
--- a/Lib/test/test_memoryio.py
+++ b/Lib/test/test_memoryio.py
@@ -318,9 +318,9 @@
         self.assertEqual(memio.isatty(), False)
         self.assertEqual(memio.closed, False)
         memio.close()
-        self.assertEqual(memio.writable(), True)
-        self.assertEqual(memio.readable(), True)
-        self.assertEqual(memio.seekable(), True)
+        self.assertRaises(ValueError, memio.writable)
+        self.assertRaises(ValueError, memio.readable)
+        self.assertRaises(ValueError, memio.seekable)
         self.assertRaises(ValueError, memio.isatty)
         self.assertEqual(memio.closed, True)
 
@@ -665,7 +665,6 @@
         check(io.BytesIO(b'a'), basesize + 1 + 1 )
         check(io.BytesIO(b'a' * 1000), basesize + 1000 + 1 )
 
-
 class CStringIOTest(PyStringIOTest):
     ioclass = io.StringIO
     UnsupportedOperation = io.UnsupportedOperation
diff -r bd8afb90ebf2 Lib/test/test_minidom.py
--- a/Lib/test/test_minidom.py
+++ b/Lib/test/test_minidom.py
@@ -1073,7 +1073,7 @@
             '<?xml version="1.0" encoding="utf-16"?>'
             '<foo>\u20ac</foo>'.encode('utf-16'))
 
-        # Verify that character decoding errors throw exceptions instead
+        # Verify that character decoding errors raise exceptions instead
         # of crashing
         self.assertRaises(UnicodeDecodeError, parseString,
                 b'<fran\xe7ais>Comment \xe7a va ? Tr\xe8s bien ?</fran\xe7ais>')
diff -r bd8afb90ebf2 Lib/test/test_mmap.py
--- a/Lib/test/test_mmap.py
+++ b/Lib/test/test_mmap.py
@@ -488,6 +488,15 @@
         f.flush ()
         return mmap.mmap (f.fileno(), 0)
 
+    def test_empty_file (self):
+        f = open (TESTFN, 'w+b')
+        f.close()
+        with open(TESTFN, "rb") as f :
+            self.assertRaisesRegex(ValueError,
+                                   "cannot mmap an empty file",
+                                   mmap.mmap, f.fileno(), 0,
+                                   access=mmap.ACCESS_READ)
+
     def test_offset (self):
         f = open (TESTFN, 'w+b')
 
diff -r bd8afb90ebf2 Lib/test/test_multiprocessing.py
--- a/Lib/test/test_multiprocessing.py
+++ b/Lib/test/test_multiprocessing.py
@@ -1642,6 +1642,23 @@
         self.assertEqual(self.pool.starmap_async(mul, tuples).get(),
                          list(itertools.starmap(mul, tuples)))
 
+    def test_map_async(self):
+        self.assertEqual(self.pool.map_async(sqr, list(range(10))).get(),
+                         list(map(sqr, list(range(10)))))
+
+    def test_map_async_callbacks(self):
+        call_args = self.manager.list() if self.TYPE == 'manager' else []
+        self.pool.map_async(int, ['1'],
+                            callback=call_args.append,
+                            error_callback=call_args.append).wait()
+        self.assertEqual(1, len(call_args))
+        self.assertEqual([1], call_args[0])
+        self.pool.map_async(int, ['a'],
+                            callback=call_args.append,
+                            error_callback=call_args.append).wait()
+        self.assertEqual(2, len(call_args))
+        self.assertIsInstance(call_args[1], ValueError)
+
     def test_map_chunksize(self):
         try:
             self.pool.map_async(sqr, [], chunksize=1).get(timeout=TIMEOUT1)
@@ -1727,7 +1744,8 @@
             with multiprocessing.Pool(2) as p:
                 r = p.map_async(sqr, L)
                 self.assertEqual(r.get(), expected)
-            self.assertRaises(AssertionError, p.map_async, sqr, L)
+            print(p._state)
+            self.assertRaises(ValueError, p.map_async, sqr, L)
 
 def raising():
     raise KeyError("key")
diff -r bd8afb90ebf2 Lib/test/test_os.py
--- a/Lib/test/test_os.py
+++ b/Lib/test/test_os.py
@@ -202,33 +202,33 @@
 
         try:
             result[200]
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except IndexError:
             pass
 
         # Make sure that assignment fails
         try:
             result.st_mode = 1
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except AttributeError:
             pass
 
         try:
             result.st_rdev = 1
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except (AttributeError, TypeError):
             pass
 
         try:
             result.parrot = 1
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except AttributeError:
             pass
 
         # Use the stat_result constructor with a too-short tuple.
         try:
             result2 = os.stat_result((10,))
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except TypeError:
             pass
 
@@ -273,20 +273,20 @@
         # Make sure that assignment really fails
         try:
             result.f_bfree = 1
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except AttributeError:
             pass
 
         try:
             result.parrot = 1
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except AttributeError:
             pass
 
         # Use the constructor with a too-short tuple.
         try:
             result2 = os.statvfs_result((10,))
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except TypeError:
             pass
 
@@ -514,23 +514,23 @@
         return os.environ
 
     # Bug 1110478
+    @unittest.skipUnless(os.path.exists('/bin/sh'), 'requires /bin/sh')
     def test_update2(self):
         os.environ.clear()
-        if os.path.exists("/bin/sh"):
-            os.environ.update(HELLO="World")
-            with os.popen("/bin/sh -c 'echo $HELLO'") as popen:
-                value = popen.read().strip()
-                self.assertEqual(value, "World")
+        os.environ.update(HELLO="World")
+        with os.popen("/bin/sh -c 'echo $HELLO'") as popen:
+            value = popen.read().strip()
+            self.assertEqual(value, "World")
 
+    @unittest.skipUnless(os.path.exists('/bin/sh'), 'requires /bin/sh')
     def test_os_popen_iter(self):
-        if os.path.exists("/bin/sh"):
-            with os.popen(
-                "/bin/sh -c 'echo \"line1\nline2\nline3\"'") as popen:
-                it = iter(popen)
-                self.assertEqual(next(it), "line1\n")
-                self.assertEqual(next(it), "line2\n")
-                self.assertEqual(next(it), "line3\n")
-                self.assertRaises(StopIteration, next, it)
+        with os.popen(
+            "/bin/sh -c 'echo \"line1\nline2\nline3\"'") as popen:
+            it = iter(popen)
+            self.assertEqual(next(it), "line1\n")
+            self.assertEqual(next(it), "line2\n")
+            self.assertEqual(next(it), "line3\n")
+            self.assertRaises(StopIteration, next, it)
 
     # Verify environ keys and values from the OS are of the
     # correct str type.
@@ -1243,6 +1243,8 @@
         def setUp(self):
             if support.TESTFN_UNENCODABLE:
                 self.dir = support.TESTFN_UNENCODABLE
+            elif support.TESTFN_NONASCII:
+                self.dir = support.TESTFN_NONASCII
             else:
                 self.dir = support.TESTFN
             self.bdir = os.fsencode(self.dir)
@@ -1257,6 +1259,8 @@
             add_filename(support.TESTFN_UNICODE)
             if support.TESTFN_UNENCODABLE:
                 add_filename(support.TESTFN_UNENCODABLE)
+            if support.TESTFN_NONASCII:
+                add_filename(support.TESTFN_NONASCII)
             if not bytesfn:
                 self.skipTest("couldn't create any non-ascii filename")
 
diff -r bd8afb90ebf2 Lib/test/test_pdb.py
--- a/Lib/test/test_pdb.py
+++ b/Lib/test/test_pdb.py
@@ -667,6 +667,36 @@
             any('main.py(5)foo()->None' in l for l in stdout.splitlines()),
             'Fail to step into the caller after a return')
 
+    def test_issue13210(self):
+        # invoking "continue" on a non-main thread triggered an exception
+        # inside signal.signal
+
+        # raises SkipTest if python was built without threads
+        support.import_module('threading')
+
+        with open(support.TESTFN, 'wb') as f:
+            f.write(textwrap.dedent("""
+                import threading
+                import pdb
+
+                def start_pdb():
+                    pdb.Pdb().set_trace()
+                    x = 1
+                    y = 1
+
+                t = threading.Thread(target=start_pdb)
+                t.start()""").encode('ascii'))
+        cmd = [sys.executable, '-u', support.TESTFN]
+        proc = subprocess.Popen(cmd,
+            stdout=subprocess.PIPE,
+            stdin=subprocess.PIPE,
+            stderr=subprocess.STDOUT,
+            )
+        self.addCleanup(proc.stdout.close)
+        stdout, stderr = proc.communicate(b'cont\n')
+        self.assertNotIn('Error', stdout.decode(),
+                         "Got an error running test script under PDB")
+
     def tearDown(self):
         support.unlink(support.TESTFN)
 
diff -r bd8afb90ebf2 Lib/test/test_peepholer.py
--- a/Lib/test/test_peepholer.py
+++ b/Lib/test/test_peepholer.py
@@ -213,6 +213,9 @@
         asm = dis_single('"\u0061\uffff"[1]')
         self.assertIn("('\\uffff')", asm)
         self.assertNotIn('BINARY_SUBSCR', asm)
+        asm = dis_single('"\U00012345abcdef"[3]')
+        self.assertIn("('c')", asm)
+        self.assertNotIn('BINARY_SUBSCR', asm)
 
         # invalid code doesn't get optimized
         # out of range
diff -r bd8afb90ebf2 Lib/test/test_posix.py
--- a/Lib/test/test_posix.py
+++ b/Lib/test/test_posix.py
@@ -647,17 +647,10 @@
     @unittest.skipUnless(hasattr(pwd, 'getpwuid'), "test needs pwd.getpwuid()")
     @unittest.skipUnless(hasattr(os, 'getuid'), "test needs os.getuid()")
     def test_getgrouplist(self):
-        with os.popen('id -G') as idg:
-            groups = idg.read().strip()
-            ret = idg.close()
+        user = pwd.getpwuid(os.getuid())[0]
+        group = pwd.getpwuid(os.getuid())[3]
+        self.assertIn(group, posix.getgrouplist(user, group))
 
-        if ret != None or not groups:
-            raise unittest.SkipTest("need working 'id -G'")
-
-        self.assertEqual(
-            set([int(x) for x in groups.split()]),
-            set(posix.getgrouplist(pwd.getpwuid(os.getuid())[0],
-                pwd.getpwuid(os.getuid())[3])))
 
     @unittest.skipUnless(hasattr(os, 'getegid'), "test needs os.getegid()")
     def test_getgroups(self):
@@ -665,7 +658,7 @@
             groups = idg.read().strip()
             ret = idg.close()
 
-        if ret != None or not groups:
+        if ret is not None or not groups:
             raise unittest.SkipTest("need working 'id -G'")
 
         # 'id -G' and 'os.getgroups()' should return the same
@@ -831,7 +824,7 @@
             posix.rename(support.TESTFN + 'ren', support.TESTFN)
             raise
         else:
-            posix.stat(support.TESTFN) # should not throw exception
+            posix.stat(support.TESTFN) # should not raise exception
         finally:
             posix.close(f)
 
@@ -849,7 +842,7 @@
     def test_unlink_dir_fd(self):
         f = posix.open(posix.getcwd(), posix.O_RDONLY)
         support.create_empty_file(support.TESTFN + 'del')
-        posix.stat(support.TESTFN + 'del') # should not throw exception
+        posix.stat(support.TESTFN + 'del') # should not raise exception
         try:
             posix.unlink(support.TESTFN + 'del', dir_fd=f)
         except:
diff -r bd8afb90ebf2 Lib/test/test_pty.py
--- a/Lib/test/test_pty.py
+++ b/Lib/test/test_pty.py
@@ -152,7 +152,7 @@
             # platform-dependent amount of data is written to its fd.  On
             # Linux 2.6, it's 4000 bytes and the child won't block, but on OS
             # X even the small writes in the child above will block it.  Also
-            # on Linux, the read() will throw an OSError (input/output error)
+            # on Linux, the read() will raise an OSError (input/output error)
             # when it tries to read past the end of the buffer but the child's
             # already exited, so catch and discard those exceptions.  It's not
             # worth checking for EIO.
diff -r bd8afb90ebf2 Lib/test/test_pyexpat.py
--- a/Lib/test/test_pyexpat.py
+++ b/Lib/test/test_pyexpat.py
@@ -641,6 +641,16 @@
         parser.Parse("<?xml version='1.0'?><element/>")
         self.assertEqual(handler_call_args, [(None, None)])
 
+        # test UseForeignDTD() is equal to UseForeignDTD(True)
+        handler_call_args[:] = []
+
+        parser = expat.ParserCreate()
+        parser.UseForeignDTD()
+        parser.SetParamEntityParsing(expat.XML_PARAM_ENTITY_PARSING_ALWAYS)
+        parser.ExternalEntityRefHandler = resolve_entity
+        parser.Parse("<?xml version='1.0'?><element/>")
+        self.assertEqual(handler_call_args, [(None, None)])
+
     def test_ignore_use_foreign_dtd(self):
         """
         If UseForeignDTD is passed True and a document with an external
diff -r bd8afb90ebf2 Lib/test/test_range.py
--- a/Lib/test/test_range.py
+++ b/Lib/test/test_range.py
@@ -312,6 +312,15 @@
 
         self.assertRaises(TypeError, range, IN())
 
+        # Test use of user-defined classes in slice indices.
+        self.assertEqual(list(range(10)[:I(5)]), list(range(5)))
+
+        with self.assertRaises(RuntimeError):
+            range(0, 10)[:IX()]
+
+        with self.assertRaises(TypeError):
+            range(0, 10)[:IN()]
+
     def test_count(self):
         self.assertEqual(range(3).count(-1), 0)
         self.assertEqual(range(3).count(0), 1)
diff -r bd8afb90ebf2 Lib/test/test_re.py
--- a/Lib/test/test_re.py
+++ b/Lib/test/test_re.py
@@ -1,4 +1,4 @@
-from test.support import verbose, run_unittest, gc_collect
+from test.support import verbose, run_unittest, gc_collect, bigmemtest, _2G
 import io
 import re
 from re import Scanner
@@ -161,11 +161,31 @@
         self.assertEqual(re.sub('x*', '-', 'abxd'), '-a-b-d-')
         self.assertEqual(re.sub('x+', '-', 'abxd'), 'ab-d')
 
+    def test_symbolic_groups(self):
+        re.compile('(?P<a>x)(?P=a)(?(a)y)')
+        re.compile('(?P<a1>x)(?P=a1)(?(a1)y)')
+        self.assertRaises(re.error, re.compile, '(?P<a>)(?P<a>)')
+        self.assertRaises(re.error, re.compile, '(?Px)')
+        self.assertRaises(re.error, re.compile, '(?P=)')
+        self.assertRaises(re.error, re.compile, '(?P=1)')
+        self.assertRaises(re.error, re.compile, '(?P=a)')
+        self.assertRaises(re.error, re.compile, '(?P=a1)')
+        self.assertRaises(re.error, re.compile, '(?P=a.)')
+        self.assertRaises(re.error, re.compile, '(?P<)')
+        self.assertRaises(re.error, re.compile, '(?P<>)')
+        self.assertRaises(re.error, re.compile, '(?P<1>)')
+        self.assertRaises(re.error, re.compile, '(?P<a.>)')
+        self.assertRaises(re.error, re.compile, '(?())')
+        self.assertRaises(re.error, re.compile, '(?(a))')
+        self.assertRaises(re.error, re.compile, '(?(1a))')
+        self.assertRaises(re.error, re.compile, '(?(a.))')
+
     def test_symbolic_refs(self):
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<a', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<a a>', 'xx')
+        self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<>', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<1a1>', 'xx')
         self.assertRaises(IndexError, re.sub, '(?P<a>x)', '\g<ab>', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)|(?P<b>y)', '\g<b>', 'xx')
@@ -399,6 +419,12 @@
         self.assertEqual(re.match("([\u2222\u2223])",
                                   "\u2222", re.UNICODE).group(1), "\u2222")
 
+    def test_big_codesize(self):
+        # Issue #1160
+        r = re.compile('|'.join(('%d'%x for x in range(10000))))
+        self.assertIsNotNone(r.match('1000'))
+        self.assertIsNotNone(r.match('9999'))
+
     def test_anyall(self):
         self.assertEqual(re.match("a.b", "a\nb", re.DOTALL).group(0),
                          "a\nb")
@@ -923,6 +949,26 @@
         # Test behaviour when not given a string or pattern as parameter
         self.assertRaises(TypeError, re.compile, 0)
 
+    @bigmemtest(size=_2G, memuse=1)
+    def test_large_search(self, size):
+        # Issue #10182: indices were 32-bit-truncated.
+        s = 'a' * size
+        m = re.search('$', s)
+        self.assertIsNotNone(m)
+        self.assertEqual(m.start(), size)
+        self.assertEqual(m.end(), size)
+
+    # The huge memuse is because of re.sub() using a list and a join()
+    # to create the replacement result.
+    @bigmemtest(size=_2G, memuse=16 + 2)
+    def test_large_subn(self, size):
+        # Issue #10182: indices were 32-bit-truncated.
+        s = 'a' * size
+        r, n = re.subn('', '', s)
+        self.assertEqual(r, s)
+        self.assertEqual(n, size + 1)
+
+
 def run_re_tests():
     from test.re_tests import tests, SUCCEED, FAIL, SYNTAX_ERROR
     if verbose:
diff -r bd8afb90ebf2 Lib/test/test_runpy.py
--- a/Lib/test/test_runpy.py
+++ b/Lib/test/test_runpy.py
@@ -565,10 +565,10 @@
             with open(filename, 'w', encoding='latin1') as f:
                 f.write("""
 #coding:latin1
-"non-ASCII: h\xe9"
+s = "non-ASCII: h\xe9"
 """)
             result = run_path(filename)
-            self.assertEqual(result['__doc__'], "non-ASCII: h\xe9")
+            self.assertEqual(result['s'], "non-ASCII: h\xe9")
 
 
 def test_main():
diff -r bd8afb90ebf2 Lib/test/test_sax.py
--- a/Lib/test/test_sax.py
+++ b/Lib/test/test_sax.py
@@ -389,7 +389,7 @@
     def test_5027_1(self):
         # The xml prefix (as in xml:lang below) is reserved and bound by
         # definition to http://www.w3.org/XML/1998/namespace.  XMLGenerator had
-        # a bug whereby a KeyError is thrown because this namespace is missing
+        # a bug whereby a KeyError is raised because this namespace is missing
         # from a dictionary.
         #
         # This test demonstrates the bug by parsing a document.
@@ -415,7 +415,7 @@
     def test_5027_2(self):
         # The xml prefix (as in xml:lang below) is reserved and bound by
         # definition to http://www.w3.org/XML/1998/namespace.  XMLGenerator had
-        # a bug whereby a KeyError is thrown because this namespace is missing
+        # a bug whereby a KeyError is raised because this namespace is missing
         # from a dictionary.
         #
         # This test demonstrates the bug by direct manipulation of the
diff -r bd8afb90ebf2 Lib/test/test_select.py
--- a/Lib/test/test_select.py
+++ b/Lib/test/test_select.py
@@ -65,6 +65,16 @@
             self.fail('Unexpected return values from select():', rfd, wfd, xfd)
         p.close()
 
+    # Issue 16230: Crash on select resized list
+    def test_select_mutated(self):
+        a = []
+        class F:
+            def fileno(self):
+                del a[-1]
+                return sys.__stdout__.fileno()
+        a[:] = [F()] * 10
+        self.assertEqual(select.select([], a, []), ([], a[:5], []))
+
 def test_main():
     support.run_unittest(SelectTestCase)
     support.reap_children()
diff -r bd8afb90ebf2 Lib/test/test_shutil.py
--- a/Lib/test/test_shutil.py
+++ b/Lib/test/test_shutil.py
@@ -126,6 +126,15 @@
         os.symlink(dir_, link)
         self.assertRaises(OSError, shutil.rmtree, link)
         self.assertTrue(os.path.exists(dir_))
+        self.assertTrue(os.path.lexists(link))
+        errors = []
+        def onerror(*args):
+            errors.append(args)
+        shutil.rmtree(link, onerror=onerror)
+        self.assertEqual(len(errors), 1)
+        self.assertIs(errors[0][0], os.path.islink)
+        self.assertEqual(errors[0][1], link)
+        self.assertIsInstance(errors[0][2][1], OSError)
 
     @support.skip_unless_symlink
     def test_rmtree_works_on_symlinks(self):
@@ -152,7 +161,38 @@
     def test_rmtree_errors(self):
         # filename is guaranteed not to exist
         filename = tempfile.mktemp()
-        self.assertRaises(OSError, shutil.rmtree, filename)
+        self.assertRaises(FileNotFoundError, shutil.rmtree, filename)
+        # test that ignore_errors option is honored
+        shutil.rmtree(filename, ignore_errors=True)
+
+        # existing file
+        tmpdir = self.mkdtemp()
+        write_file((tmpdir, "tstfile"), "")
+        filename = os.path.join(tmpdir, "tstfile")
+        with self.assertRaises(NotADirectoryError) as cm:
+            shutil.rmtree(filename)
+        # The reason for this rather odd construct is that Windows sprinkles
+        # a \*.* at the end of file names. But only sometimes on some buildbots
+        possible_args = [filename, os.path.join(filename, '*.*')]
+        self.assertIn(cm.exception.filename, possible_args)
+        self.assertTrue(os.path.exists(filename))
+        # test that ignore_errors option is honored
+        shutil.rmtree(filename, ignore_errors=True)
+        self.assertTrue(os.path.exists(filename))
+        errors = []
+        def onerror(*args):
+            errors.append(args)
+        shutil.rmtree(filename, onerror=onerror)
+        self.assertEqual(len(errors), 2)
+        self.assertIs(errors[0][0], os.listdir)
+        self.assertEqual(errors[0][1], filename)
+        self.assertIsInstance(errors[0][2][1], NotADirectoryError)
+        self.assertIn(errors[0][2][1].filename, possible_args)
+        self.assertIs(errors[1][0], os.rmdir)
+        self.assertEqual(errors[1][1], filename)
+        self.assertIsInstance(errors[1][2][1], NotADirectoryError)
+        self.assertIn(errors[1][2][1].filename, possible_args)
+
 
     # See bug #1071513 for why we don't run this on cygwin
     # and bug #1076467 for why we don't run this as root.
diff -r bd8afb90ebf2 Lib/test/test_signal.py
--- a/Lib/test/test_signal.py
+++ b/Lib/test/test_signal.py
@@ -107,7 +107,7 @@
             # This wait should be interrupted by the signal's exception.
             self.wait(child)
             time.sleep(1)  # Give the signal time to be delivered.
-            self.fail('HandlerBCalled exception not thrown')
+            self.fail('HandlerBCalled exception not raised')
         except HandlerBCalled:
             self.assertTrue(self.b_called)
             self.assertFalse(self.a_called)
@@ -143,7 +143,7 @@
         # test-running process from all the signals. It then
         # communicates with that child process over a pipe and
         # re-raises information about any exceptions the child
-        # throws. The real work happens in self.run_test().
+        # raises. The real work happens in self.run_test().
         os_done_r, os_done_w = os.pipe()
         with closing(os.fdopen(os_done_r, 'rb')) as done_r, \
              closing(os.fdopen(os_done_w, 'wb')) as done_w:
diff -r bd8afb90ebf2 Lib/test/test_socket.py
--- a/Lib/test/test_socket.py
+++ b/Lib/test/test_socket.py
@@ -1245,6 +1245,17 @@
             fp.close()
             self.assertEqual(repr(fp), "<_io.BufferedReader name=-1>")
 
+    def test_unusable_closed_socketio(self):
+        with socket.socket() as sock:
+            fp = sock.makefile("rb", buffering=0)
+            self.assertTrue(fp.readable())
+            self.assertFalse(fp.writable())
+            self.assertFalse(fp.seekable())
+            fp.close()
+            self.assertRaises(ValueError, fp.readable)
+            self.assertRaises(ValueError, fp.writable)
+            self.assertRaises(ValueError, fp.seekable)
+
     def test_pickle(self):
         sock = socket.socket()
         with sock:
@@ -3280,14 +3291,28 @@
 @unittest.skipUnless(thread, 'Threading required for this test.')
 class RecvmsgSCTPStreamTest(RecvmsgTests, RecvmsgGenericStreamTests,
                             SendrecvmsgSCTPStreamTestBase):
-    pass
+
+    def testRecvmsgEOF(self):
+        try:
+            super(RecvmsgSCTPStreamTest, self).testRecvmsgEOF()
+        except OSError as e:
+            if e.errno != errno.ENOTCONN:
+                raise
+            self.skipTest("sporadic ENOTCONN (kernel issue?) - see issue #13876")
 
 @requireAttrs(socket.socket, "recvmsg_into")
 @requireSocket("AF_INET", "SOCK_STREAM", "IPPROTO_SCTP")
 @unittest.skipUnless(thread, 'Threading required for this test.')
 class RecvmsgIntoSCTPStreamTest(RecvmsgIntoTests, RecvmsgGenericStreamTests,
                                 SendrecvmsgSCTPStreamTestBase):
-    pass
+
+    def testRecvmsgEOF(self):
+        try:
+            super(RecvmsgIntoSCTPStreamTest, self).testRecvmsgEOF()
+        except OSError as e:
+            if e.errno != errno.ENOTCONN:
+                raise
+            self.skipTest("sporadic ENOTCONN (kernel issue?) - see issue #13876")
 
 
 class SendrecvmsgUnixStreamTestBase(SendrecvmsgConnectedBase,
@@ -4098,7 +4123,26 @@
         port = support.find_unused_port()
         with self.assertRaises(socket.error) as cm:
             socket.create_connection((HOST, port))
-        self.assertEqual(cm.exception.errno, errno.ECONNREFUSED)
+
+        # Issue #16257: create_connection() calls getaddrinfo() against
+        # 'localhost'.  This may result in an IPV6 addr being returned
+        # as well as an IPV4 one:
+        #   >>> socket.getaddrinfo('localhost', port, 0, SOCK_STREAM)
+        #   >>> [(2,  2, 0, '', ('127.0.0.1', 41230)),
+        #        (26, 2, 0, '', ('::1', 41230, 0, 0))]
+        #
+        # create_connection() enumerates through all the addresses returned
+        # and if it doesn't successfully bind to any of them, it propagates
+        # the last exception it encountered.
+        #
+        # On Solaris, ENETUNREACH is returned in this circumstance instead
+        # of ECONNREFUSED.  So, if that errno exists, add it to our list of
+        # expected errnos.
+        expected_errnos = [ errno.ECONNREFUSED, ]
+        if hasattr(errno, 'ENETUNREACH'):
+            expected_errnos.append(errno.ENETUNREACH)
+
+        self.assertIn(cm.exception.errno, expected_errnos)
 
     def test_create_connection_timeout(self):
         # Issue #9792: create_connection() should not recast timeout errors
diff -r bd8afb90ebf2 Lib/test/test_socketserver.py
--- a/Lib/test/test_socketserver.py
+++ b/Lib/test/test_socketserver.py
@@ -58,7 +58,7 @@
 def simple_subprocess(testcase):
     pid = os.fork()
     if pid == 0:
-        # Don't throw an exception; it would be caught by the test harness.
+        # Don't raise an exception; it would be caught by the test harness.
         os._exit(72)
     yield None
     pid2, status = os.waitpid(pid, 0)
diff -r bd8afb90ebf2 Lib/test/test_ssl.py
--- a/Lib/test/test_ssl.py
+++ b/Lib/test/test_ssl.py
@@ -125,12 +125,8 @@
         else:
             self.assertRaises(ssl.SSLError, ssl.RAND_bytes, 16)
 
-        try:
-            ssl.RAND_egd(1)
-        except TypeError:
-            pass
-        else:
-            print("didn't raise TypeError")
+        self.assertRaises(TypeError, ssl.RAND_egd, 1)
+        self.assertRaises(TypeError, ssl.RAND_egd, 'foo', 1)
         ssl.RAND_add("this is a random string", 75.0)
 
     def test_parse_cert(self):
@@ -1800,6 +1796,42 @@
                 t.join()
                 server.close()
 
+        def test_server_accept(self):
+            # Issue #16357: accept() on a SSLSocket created through
+            # SSLContext.wrap_socket().
+            context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
+            context.verify_mode = ssl.CERT_REQUIRED
+            context.load_verify_locations(CERTFILE)
+            context.load_cert_chain(CERTFILE)
+            server = socket.socket(socket.AF_INET)
+            host = "127.0.0.1"
+            port = support.bind_port(server)
+            server = context.wrap_socket(server, server_side=True)
+
+            evt = threading.Event()
+            remote = None
+            peer = None
+            def serve():
+                nonlocal remote, peer
+                server.listen(5)
+                # Block on the accept and wait on the connection to close.
+                evt.set()
+                remote, peer = server.accept()
+                remote.recv(1)
+
+            t = threading.Thread(target=serve)
+            t.start()
+            # Client wait until server setup and perform a connect.
+            evt.wait()
+            client = context.wrap_socket(socket.socket())
+            client.connect((host, port))
+            client_addr = client.getsockname()
+            client.close()
+            t.join()
+            # Sanity checks.
+            self.assertIsInstance(remote, ssl.SSLSocket)
+            self.assertEqual(peer, client_addr)
+
         def test_default_ciphers(self):
             context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
             try:
diff -r bd8afb90ebf2 Lib/test/test_startfile.py
--- a/Lib/test/test_startfile.py
+++ b/Lib/test/test_startfile.py
@@ -10,8 +10,8 @@
 import unittest
 from test import support
 import os
+import sys
 from os import path
-from time import sleep
 
 startfile = support.get_attribute(os, 'startfile')
 
@@ -21,13 +21,12 @@
         self.assertRaises(OSError, startfile, "nonexisting.vbs")
 
     def test_empty(self):
-        empty = path.join(path.dirname(__file__), "empty.vbs")
-        startfile(empty)
-        startfile(empty, "open")
-        # Give the child process some time to exit before we finish.
-        # Otherwise the cleanup code will not be able to delete the cwd,
-        # because it is still in use.
-        sleep(0.1)
+        # Switch to an existing, but safe, working directory to let the
+        # cleanup code do its thing without permission errors.
+        with support.temp_cwd(path=path.dirname(sys.executable)):
+            empty = path.join(path.dirname(__file__), "empty.vbs")
+            startfile(empty)
+            startfile(empty, "open")
 
 def test_main():
     support.run_unittest(TestCase)
diff -r bd8afb90ebf2 Lib/test/test_subprocess.py
--- a/Lib/test/test_subprocess.py
+++ b/Lib/test/test_subprocess.py
@@ -1,4 +1,5 @@
 import unittest
+from test import script_helper
 from test import support
 import subprocess
 import sys
@@ -67,6 +68,18 @@
         self.assertEqual(actual, expected, msg)
 
 
+class PopenTestException(Exception):
+    pass
+
+
+class PopenExecuteChildRaises(subprocess.Popen):
+    """Popen subclass for testing cleanup of subprocess.PIPE filehandles when
+    _execute_child fails.
+    """
+    def _execute_child(self, *args, **kwargs):
+        raise PopenTestException("Forced Exception for Test")
+
+
 class ProcessTestCase(BaseTestCase):
 
     def test_call_seq(self):
@@ -191,15 +204,137 @@
         p.wait()
         self.assertEqual(p.stderr, None)
 
+    def _assert_python(self, pre_args, **kwargs):
+        # We include sys.exit() to prevent the test runner from hanging
+        # whenever python is found.
+        args = pre_args + ["import sys; sys.exit(47)"]
+        p = subprocess.Popen(args, **kwargs)
+        p.wait()
+        self.assertEqual(47, p.returncode)
+
+    def test_executable(self):
+        # Check that the executable argument works.
+        #
+        # On Unix (non-Mac and non-Windows), Python looks at args[0] to
+        # determine where its standard library is, so we need the directory
+        # of args[0] to be valid for the Popen() call to Python to succeed.
+        # See also issue #16170 and issue #7774.
+        doesnotexist = os.path.join(os.path.dirname(sys.executable),
+                                    "doesnotexist")
+        self._assert_python([doesnotexist, "-c"], executable=sys.executable)
+
+    def test_executable_takes_precedence(self):
+        # Check that the executable argument takes precedence over args[0].
+        #
+        # Verify first that the call succeeds without the executable arg.
+        pre_args = [sys.executable, "-c"]
+        self._assert_python(pre_args)
+        self.assertRaises(FileNotFoundError, self._assert_python, pre_args,
+                          executable="doesnotexist")
+
+    @unittest.skipIf(mswindows, "executable argument replaces shell")
+    def test_executable_replaces_shell(self):
+        # Check that the executable argument replaces the default shell
+        # when shell=True.
+        self._assert_python([], executable=sys.executable, shell=True)
+
+    # For use in the test_cwd* tests below.
+    def _normalize_cwd(self, cwd):
+        # Normalize an expected cwd (for Tru64 support).
+        # We can't use os.path.realpath since it doesn't expand Tru64 {memb}
+        # strings.  See bug #1063571.
+        original_cwd = os.getcwd()
+        os.chdir(cwd)
+        cwd = os.getcwd()
+        os.chdir(original_cwd)
+        return cwd
+
+    # For use in the test_cwd* tests below.
+    def _split_python_path(self):
+        # Return normalized (python_dir, python_base).
+        python_path = os.path.realpath(sys.executable)
+        return os.path.split(python_path)
+
+    # For use in the test_cwd* tests below.
+    def _assert_cwd(self, expected_cwd, python_arg, **kwargs):
+        # Invoke Python via Popen, and assert that (1) the call succeeds,
+        # and that (2) the current working directory of the child process
+        # matches *expected_cwd*.
+        p = subprocess.Popen([python_arg, "-c",
+                              "import os, sys; "
+                              "sys.stdout.write(os.getcwd()); "
+                              "sys.exit(47)"],
+                              stdout=subprocess.PIPE,
+                              **kwargs)
+        self.addCleanup(p.stdout.close)
+        p.wait()
+        self.assertEqual(47, p.returncode)
+        normcase = os.path.normcase
+        self.assertEqual(normcase(expected_cwd),
+                         normcase(p.stdout.read().decode("utf-8")))
+
+    def test_cwd(self):
+        # Check that cwd changes the cwd for the child process.
+        temp_dir = tempfile.gettempdir()
+        temp_dir = self._normalize_cwd(temp_dir)
+        self._assert_cwd(temp_dir, sys.executable, cwd=temp_dir)
+
+    @unittest.skipIf(mswindows, "pending resolution of issue #15533")
+    def test_cwd_with_relative_arg(self):
+        # Check that Popen looks for args[0] relative to cwd if args[0]
+        # is relative.
+        python_dir, python_base = self._split_python_path()
+        rel_python = os.path.join(os.curdir, python_base)
+        with support.temp_cwd() as wrong_dir:
+            # Before calling with the correct cwd, confirm that the call fails
+            # without cwd and with the wrong cwd.
+            self.assertRaises(FileNotFoundError, subprocess.Popen,
+                              [rel_python])
+            self.assertRaises(FileNotFoundError, subprocess.Popen,
+                              [rel_python], cwd=wrong_dir)
+            python_dir = self._normalize_cwd(python_dir)
+            self._assert_cwd(python_dir, rel_python, cwd=python_dir)
+
+    @unittest.skipIf(mswindows, "pending resolution of issue #15533")
+    def test_cwd_with_relative_executable(self):
+        # Check that Popen looks for executable relative to cwd if executable
+        # is relative (and that executable takes precedence over args[0]).
+        python_dir, python_base = self._split_python_path()
+        rel_python = os.path.join(os.curdir, python_base)
+        doesntexist = "somethingyoudonthave"
+        with support.temp_cwd() as wrong_dir:
+            # Before calling with the correct cwd, confirm that the call fails
+            # without cwd and with the wrong cwd.
+            self.assertRaises(FileNotFoundError, subprocess.Popen,
+                              [doesntexist], executable=rel_python)
+            self.assertRaises(FileNotFoundError, subprocess.Popen,
+                              [doesntexist], executable=rel_python,
+                              cwd=wrong_dir)
+            python_dir = self._normalize_cwd(python_dir)
+            self._assert_cwd(python_dir, doesntexist, executable=rel_python,
+                             cwd=python_dir)
+
+    def test_cwd_with_absolute_arg(self):
+        # Check that Popen can find the executable when the cwd is wrong
+        # if args[0] is an absolute path.
+        python_dir, python_base = self._split_python_path()
+        abs_python = os.path.join(python_dir, python_base)
+        rel_python = os.path.join(os.curdir, python_base)
+        with script_helper.temp_dir() as wrong_dir:
+            # Before calling with an absolute path, confirm that using a
+            # relative path fails.
+            self.assertRaises(FileNotFoundError, subprocess.Popen,
+                              [rel_python], cwd=wrong_dir)
+            wrong_dir = self._normalize_cwd(wrong_dir)
+            self._assert_cwd(wrong_dir, abs_python, cwd=wrong_dir)
+
     @unittest.skipIf(sys.base_prefix != sys.prefix,
                      'Test is not venv-compatible')
     def test_executable_with_cwd(self):
-        python_dir = os.path.dirname(os.path.realpath(sys.executable))
-        p = subprocess.Popen(["somethingyoudonthave", "-c",
-                              "import sys; sys.exit(47)"],
-                             executable=sys.executable, cwd=python_dir)
-        p.wait()
-        self.assertEqual(p.returncode, 47)
+        python_dir, python_base = self._split_python_path()
+        python_dir = self._normalize_cwd(python_dir)
+        self._assert_cwd(python_dir, "somethingyoudonthave",
+                         executable=sys.executable, cwd=python_dir)
 
     @unittest.skipIf(sys.base_prefix != sys.prefix,
                      'Test is not venv-compatible')
@@ -208,11 +343,7 @@
     def test_executable_without_cwd(self):
         # For a normal installation, it should work without 'cwd'
         # argument.  For test runs in the build directory, see #7774.
-        p = subprocess.Popen(["somethingyoudonthave", "-c",
-                              "import sys; sys.exit(47)"],
-                             executable=sys.executable)
-        p.wait()
-        self.assertEqual(p.returncode, 47)
+        self._assert_cwd('', "somethingyoudonthave", executable=sys.executable)
 
     def test_stdin_pipe(self):
         # stdin redirection
@@ -369,24 +500,6 @@
         p.wait()
         self.assertEqual(p.stdin, None)
 
-    def test_cwd(self):
-        tmpdir = tempfile.gettempdir()
-        # We cannot use os.path.realpath to canonicalize the path,
-        # since it doesn't expand Tru64 {memb} strings. See bug 1063571.
-        cwd = os.getcwd()
-        os.chdir(tmpdir)
-        tmpdir = os.getcwd()
-        os.chdir(cwd)
-        p = subprocess.Popen([sys.executable, "-c",
-                              'import sys,os;'
-                              'sys.stdout.write(os.getcwd())'],
-                             stdout=subprocess.PIPE,
-                             cwd=tmpdir)
-        self.addCleanup(p.stdout.close)
-        normcase = os.path.normcase
-        self.assertEqual(normcase(p.stdout.read().decode("utf-8")),
-                         normcase(tmpdir))
-
     def test_env(self):
         newenv = os.environ.copy()
         newenv["FRUIT"] = "orange"
@@ -894,6 +1007,27 @@
                 process.communicate()
 
 
+    # This test is Linux-ish specific for simplicity to at least have
+    # some coverage.  It is not a platform specific bug.
+    @unittest.skipUnless(os.path.isdir('/proc/%d/fd' % os.getpid()),
+                         "Linux specific")
+    def test_failed_child_execute_fd_leak(self):
+        """Test for the fork() failure fd leak reported in issue16327."""
+        fd_directory = '/proc/%d/fd' % os.getpid()
+        fds_before_popen = os.listdir(fd_directory)
+        with self.assertRaises(PopenTestException):
+            PopenExecuteChildRaises(
+                    [sys.executable, '-c', 'pass'], stdin=subprocess.PIPE,
+                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+
+        # NOTE: This test doesn't verify that the real _execute_child
+        # does not close the file descriptors itself on the way out
+        # during an exception.  Code inspection has confirmed that.
+
+        fds_after_exception = os.listdir(fd_directory)
+        self.assertEqual(fds_before_popen, fds_after_exception)
+
+
 # context manager
 class _SuppressCoreFiles(object):
     """Try to prevent core files from being created."""
@@ -937,24 +1071,30 @@
 @unittest.skipIf(mswindows, "POSIX specific tests")
 class POSIXProcessTestCase(BaseTestCase):
 
-    def test_exceptions(self):
-        nonexistent_dir = "/_this/pa.th/does/not/exist"
+    def setUp(self):
+        super().setUp()
+        self._nonexistent_dir = "/_this/pa.th/does/not/exist"
+
+    def _get_chdir_exception(self):
         try:
-            os.chdir(nonexistent_dir)
+            os.chdir(self._nonexistent_dir)
         except OSError as e:
             # This avoids hard coding the errno value or the OS perror()
             # string and instead capture the exception that we want to see
             # below for comparison.
             desired_exception = e
-            desired_exception.strerror += ': ' + repr(sys.executable)
+            desired_exception.strerror += ': ' + repr(self._nonexistent_dir)
         else:
             self.fail("chdir to nonexistant directory %s succeeded." %
-                      nonexistent_dir)
+                      self._nonexistent_dir)
+        return desired_exception
 
-        # Error in the child re-raised in the parent.
+    def test_exception_cwd(self):
+        """Test error in the child raised in the parent for a bad cwd."""
+        desired_exception = self._get_chdir_exception()
         try:
             p = subprocess.Popen([sys.executable, "-c", ""],
-                                 cwd=nonexistent_dir)
+                                 cwd=self._nonexistent_dir)
         except OSError as e:
             # Test that the child process chdir failure actually makes
             # it up to the parent process as the correct exception.
@@ -963,6 +1103,33 @@
         else:
             self.fail("Expected OSError: %s" % desired_exception)
 
+    def test_exception_bad_executable(self):
+        """Test error in the child raised in the parent for a bad executable."""
+        desired_exception = self._get_chdir_exception()
+        try:
+            p = subprocess.Popen([sys.executable, "-c", ""],
+                                 executable=self._nonexistent_dir)
+        except OSError as e:
+            # Test that the child process exec failure actually makes
+            # it up to the parent process as the correct exception.
+            self.assertEqual(desired_exception.errno, e.errno)
+            self.assertEqual(desired_exception.strerror, e.strerror)
+        else:
+            self.fail("Expected OSError: %s" % desired_exception)
+
+    def test_exception_bad_args_0(self):
+        """Test error in the child raised in the parent for a bad args[0]."""
+        desired_exception = self._get_chdir_exception()
+        try:
+            p = subprocess.Popen([self._nonexistent_dir, "-c", ""])
+        except OSError as e:
+            # Test that the child process exec failure actually makes
+            # it up to the parent process as the correct exception.
+            self.assertEqual(desired_exception.errno, e.errno)
+            self.assertEqual(desired_exception.strerror, e.strerror)
+        else:
+            self.fail("Expected OSError: %s" % desired_exception)
+
     def test_restore_signals(self):
         # Code coverage for both values of restore_signals to make sure it
         # at least does not blow up.
@@ -1022,6 +1189,43 @@
             self.fail("Exception raised by preexec_fn did not make it "
                       "to the parent process.")
 
+    class _TestExecuteChildPopen(subprocess.Popen):
+        """Used to test behavior at the end of _execute_child."""
+        def __init__(self, testcase, *args, **kwargs):
+            self._testcase = testcase
+            subprocess.Popen.__init__(self, *args, **kwargs)
+
+        def _execute_child(self, *args, **kwargs):
+            try:
+                subprocess.Popen._execute_child(self, *args, **kwargs)
+            finally:
+                # Open a bunch of file descriptors and verify that
+                # none of them are the same as the ones the Popen
+                # instance is using for stdin/stdout/stderr.
+                devzero_fds = [os.open("/dev/zero", os.O_RDONLY)
+                               for _ in range(8)]
+                try:
+                    for fd in devzero_fds:
+                        self._testcase.assertNotIn(
+                                fd, (self.stdin.fileno(), self.stdout.fileno(),
+                                     self.stderr.fileno()),
+                                msg="At least one fd was closed early.")
+                finally:
+                    map(os.close, devzero_fds)
+
+    @unittest.skipIf(not os.path.exists("/dev/zero"), "/dev/zero required.")
+    def test_preexec_errpipe_does_not_double_close_pipes(self):
+        """Issue16140: Don't double close pipes on preexec error."""
+
+        def raise_it():
+            raise RuntimeError("force the _execute_child() errpipe_data path.")
+
+        with self.assertRaises(RuntimeError):
+            self._TestExecuteChildPopen(
+                        self, [sys.executable, "-c", "pass"],
+                        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
+                        stderr=subprocess.PIPE, preexec_fn=raise_it)
+
     def test_preexec_gc_module_failure(self):
         # This tests the code that disables garbage collection if the child
         # process will execute any Python.
diff -r bd8afb90ebf2 Lib/test/test_super.py
--- a/Lib/test/test_super.py
+++ b/Lib/test/test_super.py
@@ -115,6 +115,21 @@
                 return __class__
         self.assertIs(X.f(), X)
 
+    def test_obscure_super_errors(self):
+        def f():
+            super()
+        self.assertRaises(RuntimeError, f)
+        def f(x):
+            del x
+            super()
+        self.assertRaises(RuntimeError, f, None)
+        class X:
+            def f(x):
+                nonlocal __class__
+                del __class__
+                super()
+        self.assertRaises(RuntimeError, X().f)
+
 
 def test_main():
     support.run_unittest(TestSuper)
diff -r bd8afb90ebf2 Lib/test/test_support.py
--- a/Lib/test/test_support.py
+++ b/Lib/test/test_support.py
@@ -95,6 +95,15 @@
         self.assertFalse(os.path.exists(TESTFN))
         self.assertTrue(os.path.basename(os.getcwd()), here)
 
+    def test_temp_cwd__chdir_warning(self):
+        """Check the warning message when os.chdir() fails."""
+        path = TESTFN + '_does_not_exist'
+        with support.check_warnings() as recorder:
+            with support.temp_cwd(path=path, quiet=True):
+                pass
+            messages = [str(w.message) for w in recorder.warnings]
+        self.assertEqual(messages, ['tests may fail, unable to change the CWD to ' + path])
+
     def test_sortdict(self):
         self.assertEqual(support.sortdict({3:3, 2:2, 1:1}), "{1: 1, 2: 2, 3: 3}")
 
diff -r bd8afb90ebf2 Lib/test/test_sys.py
--- a/Lib/test/test_sys.py
+++ b/Lib/test/test_sys.py
@@ -897,7 +897,7 @@
         except TypeError:
             tb = sys.exc_info()[2]
             # traceback
-            if tb != None:
+            if tb is not None:
                 check(tb, size('2P2i'))
         # symtable entry
         # XXX
diff -r bd8afb90ebf2 Lib/test/test_sys_settrace.py
--- a/Lib/test/test_sys_settrace.py
+++ b/Lib/test/test_sys_settrace.py
@@ -422,7 +422,7 @@
                 except ValueError:
                     pass
                 else:
-                    self.fail("exception not thrown!")
+                    self.fail("exception not raised!")
         except RuntimeError:
             self.fail("recursion counter not reset")
 
diff -r bd8afb90ebf2 Lib/test/test_textwrap.py
--- a/Lib/test/test_textwrap.py
+++ b/Lib/test/test_textwrap.py
@@ -22,7 +22,7 @@
             result = []
             for i in range(len(textin)):
                 result.append("  %d: %r" % (i, textin[i]))
-            result = '\n'.join(result)
+            result = "\n".join(result) if result else "  no lines"
         elif isinstance(textin, str):
             result = "  %s\n" % repr(textin)
         return result
@@ -66,6 +66,15 @@
                          "I'm glad to hear it!"])
         self.check_wrap(text, 80, [text])
 
+    def test_empty_string(self):
+        # Check that wrapping the empty string returns an empty list.
+        self.check_wrap("", 6, [])
+        self.check_wrap("", 6, [], drop_whitespace=False)
+
+    def test_empty_string_with_initial_indent(self):
+        # Check that the empty string is not indented.
+        self.check_wrap("", 6, [], initial_indent="++")
+        self.check_wrap("", 6, [], initial_indent="++", drop_whitespace=False)
 
     def test_whitespace(self):
         # Whitespace munging and end-of-sentence detection
@@ -331,7 +340,32 @@
                          ["blah", " ", "(ding", " ", "dong),",
                           " ", "wubba"])
 
-    def test_initial_whitespace(self):
+    def test_drop_whitespace_false(self):
+        # Check that drop_whitespace=False preserves whitespace.
+        # SF patch #1581073
+        text = " This is a    sentence with     much whitespace."
+        self.check_wrap(text, 10,
+                        [" This is a", "    ", "sentence ",
+                         "with     ", "much white", "space."],
+                        drop_whitespace=False)
+
+    def test_drop_whitespace_false_whitespace_only(self):
+        # Check that drop_whitespace=False preserves a whitespace-only string.
+        self.check_wrap("   ", 6, ["   "], drop_whitespace=False)
+
+    def test_drop_whitespace_false_whitespace_only_with_indent(self):
+        # Check that a whitespace-only string gets indented (when
+        # drop_whitespace is False).
+        self.check_wrap("   ", 6, ["     "], drop_whitespace=False,
+                        initial_indent="  ")
+
+    def test_drop_whitespace_whitespace_only(self):
+        # Check drop_whitespace on a whitespace-only string.
+        self.check_wrap("  ", 6, [])
+
+    def test_drop_whitespace_leading_whitespace(self):
+        # Check that drop_whitespace does not drop leading whitespace (if
+        # followed by non-whitespace).
         # SF bug #622849 reported inconsistent handling of leading
         # whitespace; let's test that a bit, shall we?
         text = " This is a sentence with leading whitespace."
@@ -340,13 +374,27 @@
         self.check_wrap(text, 30,
                         [" This is a sentence with", "leading whitespace."])
 
-    def test_no_drop_whitespace(self):
-        # SF patch #1581073
-        text = " This is a    sentence with     much whitespace."
-        self.check_wrap(text, 10,
-                        [" This is a", "    ", "sentence ",
-                         "with     ", "much white", "space."],
+    def test_drop_whitespace_whitespace_line(self):
+        # Check that drop_whitespace skips the whole line if a non-leading
+        # line consists only of whitespace.
+        text = "abcd    efgh"
+        # Include the result for drop_whitespace=False for comparison.
+        self.check_wrap(text, 6, ["abcd", "    ", "efgh"],
                         drop_whitespace=False)
+        self.check_wrap(text, 6, ["abcd", "efgh"])
+
+    def test_drop_whitespace_whitespace_only_with_indent(self):
+        # Check that initial_indent is not applied to a whitespace-only
+        # string.  This checks a special case of the fact that dropping
+        # whitespace occurs before indenting.
+        self.check_wrap("  ", 6, [], initial_indent="++")
+
+    def test_drop_whitespace_whitespace_indent(self):
+        # Check that drop_whitespace does not drop whitespace indents.
+        # This checks a special case of the fact that dropping whitespace
+        # occurs before indenting.
+        self.check_wrap("abcd efgh", 6, ["  abcd", "  efgh"],
+                        initial_indent="  ", subsequent_indent="  ")
 
     def test_split(self):
         # Ensure that the standard _split() method works as advertised
diff -r bd8afb90ebf2 Lib/test/test_threaded_import.py
--- a/Lib/test/test_threaded_import.py
+++ b/Lib/test/test_threaded_import.py
@@ -7,6 +7,7 @@
 
 import os
 import imp
+import importlib
 import sys
 import time
 import shutil
@@ -68,10 +69,11 @@
         # Simulate some thread-unsafe behaviour. If calls to find_module()
         # are properly serialized, `x` will end up the same as `numcalls`.
         # Otherwise not.
+        assert imp.lock_held()
         with self.lock:
             self.numcalls += 1
         x = self.x
-        time.sleep(0.1)
+        time.sleep(0.01)
         self.x = x + 1
 
 class FlushingFinder:
@@ -116,7 +118,7 @@
                 t = threading.Thread(target=task,
                                      args=(N, done, done_tasks, errors,))
                 t.start()
-            done.wait(60)
+            self.assertTrue(done.wait(60))
             self.assertFalse(errors)
             if verbose:
                 print("OK.")
@@ -189,6 +191,7 @@
                 f.write(contents.encode('utf-8'))
             self.addCleanup(forget, name)
 
+        importlib.invalidate_caches()
         results = []
         def import_ab():
             import A
@@ -219,6 +222,7 @@
             f.write(code.encode('utf-8'))
         self.addCleanup(unlink, filename)
         self.addCleanup(forget, TESTFN)
+        importlib.invalidate_caches()
         __import__(TESTFN)
 
 
@@ -227,7 +231,7 @@
     old_switchinterval = None
     try:
         old_switchinterval = sys.getswitchinterval()
-        sys.setswitchinterval(0.00000001)
+        sys.setswitchinterval(1e-5)
     except AttributeError:
         pass
     try:
diff -r bd8afb90ebf2 Lib/test/test_time.py
--- a/Lib/test/test_time.py
+++ b/Lib/test/test_time.py
@@ -175,7 +175,7 @@
 
     def test_strptime(self):
         # Should be able to go round-trip from strftime to strptime without
-        # throwing an exception.
+        # raising an exception.
         tt = time.gmtime(self.t)
         for directive in ('a', 'A', 'b', 'B', 'c', 'd', 'H', 'I',
                           'j', 'm', 'M', 'p', 'S',
diff -r bd8afb90ebf2 Lib/test/test_timeit.py
--- a/Lib/test/test_timeit.py
+++ b/Lib/test/test_timeit.py
@@ -250,6 +250,7 @@
         s = self.run_main(seconds_per_increment=60.0, switches=['-r-5'])
         self.assertEqual(s, "10 loops, best of 1: 60 sec per loop\n")
 
+    @unittest.skipIf(sys.flags.optimize >= 2, "need __doc__")
     def test_main_help(self):
         s = self.run_main(switches=['-h'])
         # Note: It's not clear that the trailing space was intended as part of
diff -r bd8afb90ebf2 Lib/test/test_tokenize.py
--- a/Lib/test/test_tokenize.py
+++ b/Lib/test/test_tokenize.py
@@ -1109,6 +1109,10 @@
                                   token.NAME, token.AMPER, token.NUMBER,
                                   token.RPAR)
 
+    def test_pathological_trailing_whitespace(self):
+        # See http://bugs.python.org/issue16152
+        self.assertExactTypeEqual('@          ', token.AT)
+
 __test__ = {"doctests" : doctests, 'decistmt': decistmt}
 
 def test_main():
diff -r bd8afb90ebf2 Lib/test/test_types.py
--- a/Lib/test/test_types.py
+++ b/Lib/test/test_types.py
@@ -791,7 +791,7 @@
         self.assertEqual(C.y, 1)
         self.assertEqual(C.z, 2)
 
-    def test_new_class_exec_body(self):
+    def test_new_class_metaclass_keywords(self):
         #Test that keywords are passed to the metaclass:
         def meta_func(name, bases, ns, **kw):
             return name, bases, ns, kw
@@ -1135,6 +1135,15 @@
         with self.assertRaises(TypeError):
             ns['spam']
 
+    def test_subclass(self):
+        class Spam(types.SimpleNamespace):
+            pass
+
+        spam = Spam(ham=8, eggs=9)
+
+        self.assertIs(type(spam), Spam)
+        self.assertEqual(vars(spam), {'ham': 8, 'eggs': 9})
+
 
 def test_main():
     run_unittest(TypesTests, MappingProxyTests, ClassCreationTests,
diff -r bd8afb90ebf2 Lib/test/test_unicode.py
--- a/Lib/test/test_unicode.py
+++ b/Lib/test/test_unicode.py
@@ -981,6 +981,21 @@
         self.assertRaises(ValueError, '{}'.format_map, 'a')
         self.assertRaises(ValueError, '{a} {}'.format_map, {"a" : 2, "b" : 1})
 
+    def test_format_huge_precision(self):
+        format_string = ".{}f".format(sys.maxsize + 1)
+        with self.assertRaises(ValueError):
+            result = format(2.34, format_string)
+
+    def test_format_huge_width(self):
+        format_string = "{}f".format(sys.maxsize + 1)
+        with self.assertRaises(ValueError):
+            result = format(2.34, format_string)
+
+    def test_format_huge_item_number(self):
+        format_string = "{{{}:.6f}}".format(sys.maxsize + 1)
+        with self.assertRaises(ValueError):
+            result = format_string.format(2.34)
+
     def test_format_auto_numbering(self):
         class C:
             def __init__(self, x=100):
@@ -1069,6 +1084,18 @@
         self.assertEqual('%.1s' % "a\xe9\u20ac", 'a')
         self.assertEqual('%.2s' % "a\xe9\u20ac", 'a\xe9')
 
+    @support.cpython_only
+    def test_formatting_huge_precision(self):
+        from _testcapi import INT_MAX
+        format_string = "%.{}f".format(INT_MAX + 1)
+        with self.assertRaises(ValueError):
+            result = format_string % 2.34
+
+    def test_formatting_huge_width(self):
+        format_string = "%{}f".format(sys.maxsize + 1)
+        with self.assertRaises(ValueError):
+            result = format_string % 2.34
+
     def test_startswith_endswith_errors(self):
         for meth in ('foo'.startswith, 'foo'.endswith):
             with self.assertRaises(TypeError) as cm:
@@ -1155,6 +1182,26 @@
 
         self.assertRaises(TypeError, str, 42, 42, 42)
 
+    def test_constructor_keyword_args(self):
+        """Pass various keyword argument combinations to the constructor."""
+        # The object argument can be passed as a keyword.
+        self.assertEqual(str(object='foo'), 'foo')
+        self.assertEqual(str(object=b'foo', encoding='utf-8'), 'foo')
+        # The errors argument without encoding triggers "decode" mode.
+        self.assertEqual(str(b'foo', errors='strict'), 'foo')  # not "b'foo'"
+        self.assertEqual(str(object=b'foo', errors='strict'), 'foo')
+
+    def test_constructor_defaults(self):
+        """Check the constructor argument defaults."""
+        # The object argument defaults to '' or b''.
+        self.assertEqual(str(), '')
+        self.assertEqual(str(errors='strict'), '')
+        utf8_cent = '¢'.encode('utf-8')
+        # The encoding argument defaults to utf-8.
+        self.assertEqual(str(utf8_cent, errors='strict'), '¢')
+        # The errors argument defaults to strict.
+        self.assertRaises(UnicodeDecodeError, str, utf8_cent, encoding='ascii')
+
     def test_codecs_utf7(self):
         utfTests = [
             ('A\u2262\u0391.', b'A+ImIDkQ.'),             # RFC2152 example
@@ -1322,7 +1369,7 @@
             # with start byte of a 2-byte sequence
             (b'\xc2', FFFD), # only the start byte
             (b'\xc2\xc2', FFFD*2), # 2 start bytes
-            (b'\xc2\xc2\xc2', FFFD*3), # 2 start bytes
+            (b'\xc2\xc2\xc2', FFFD*3), # 3 start bytes
             (b'\xc2\x41', FFFD+'A'), # invalid continuation byte
             # with start byte of a 3-byte sequence
             (b'\xe1', FFFD), # only the start byte
@@ -1392,6 +1439,226 @@
             self.assertEqual(seq.decode('utf-8', 'ignore'),
                              res.replace('\uFFFD', ''))
 
+    def to_bytestring(self, seq):
+        return bytes(int(c, 16) for c in seq.split())
+
+    def assertCorrectUTF8Decoding(self, seq, res, err):
+        """
+        Check that an invalid UTF-8 sequence raises an UnicodeDecodeError when
+        'strict' is used, returns res when 'replace' is used, and that doesn't
+        return anything when 'ignore' is used.
+        """
+        with self.assertRaises(UnicodeDecodeError) as cm:
+            seq.decode('utf-8')
+        exc = cm.exception
+
+        self.assertIn(err, str(exc))
+        self.assertEqual(seq.decode('utf-8', 'replace'), res)
+        self.assertEqual((b'aaaa' + seq + b'bbbb').decode('utf-8', 'replace'),
+                         'aaaa' + res + 'bbbb')
+        res = res.replace('\ufffd', '')
+        self.assertEqual(seq.decode('utf-8', 'ignore'), res)
+        self.assertEqual((b'aaaa' + seq + b'bbbb').decode('utf-8', 'ignore'),
+                          'aaaa' + res + 'bbbb')
+
+    def test_invalid_start_byte(self):
+        """
+        Test that an 'invalid start byte' error is raised when the first byte
+        is not in the ASCII range or is not a valid start byte of a 2-, 3-, or
+        4-bytes sequence. The invalid start byte is replaced with a single
+        U+FFFD when errors='replace'.
+        E.g. <80> is a continuation byte and can appear only after a start byte.
+        """
+        FFFD = '\ufffd'
+        for byte in b'\x80\xA0\x9F\xBF\xC0\xC1\xF5\xFF':
+            self.assertCorrectUTF8Decoding(bytes([byte]), '\ufffd',
+                                           'invalid start byte')
+
+    def test_unexpected_end_of_data(self):
+        """
+        Test that an 'unexpected end of data' error is raised when the string
+        ends after a start byte of a 2-, 3-, or 4-bytes sequence without having
+        enough continuation bytes.  The incomplete sequence is replaced with a
+        single U+FFFD when errors='replace'.
+        E.g. in the sequence <F3 80 80>, F3 is the start byte of a 4-bytes
+        sequence, but it's followed by only 2 valid continuation bytes and the
+        last continuation bytes is missing.
+        Note: the continuation bytes must be all valid, if one of them is
+        invalid another error will be raised.
+        """
+        sequences = [
+            'C2', 'DF',
+            'E0 A0', 'E0 BF', 'E1 80', 'E1 BF', 'EC 80', 'EC BF',
+            'ED 80', 'ED 9F', 'EE 80', 'EE BF', 'EF 80', 'EF BF',
+            'F0 90', 'F0 BF', 'F0 90 80', 'F0 90 BF', 'F0 BF 80', 'F0 BF BF',
+            'F1 80', 'F1 BF', 'F1 80 80', 'F1 80 BF', 'F1 BF 80', 'F1 BF BF',
+            'F3 80', 'F3 BF', 'F3 80 80', 'F3 80 BF', 'F3 BF 80', 'F3 BF BF',
+            'F4 80', 'F4 8F', 'F4 80 80', 'F4 80 BF', 'F4 8F 80', 'F4 8F BF'
+        ]
+        FFFD = '\ufffd'
+        for seq in sequences:
+            self.assertCorrectUTF8Decoding(self.to_bytestring(seq), '\ufffd',
+                                           'unexpected end of data')
+
+    def test_invalid_cb_for_2bytes_seq(self):
+        """
+        Test that an 'invalid continuation byte' error is raised when the
+        continuation byte of a 2-bytes sequence is invalid.  The start byte
+        is replaced by a single U+FFFD and the second byte is handled
+        separately when errors='replace'.
+        E.g. in the sequence <C2 41>, C2 is the start byte of a 2-bytes
+        sequence, but 41 is not a valid continuation byte because it's the
+        ASCII letter 'A'.
+        """
+        FFFD = '\ufffd'
+        FFFDx2 = FFFD * 2
+        sequences = [
+            ('C2 00', FFFD+'\x00'), ('C2 7F', FFFD+'\x7f'),
+            ('C2 C0', FFFDx2), ('C2 FF', FFFDx2),
+            ('DF 00', FFFD+'\x00'), ('DF 7F', FFFD+'\x7f'),
+            ('DF C0', FFFDx2), ('DF FF', FFFDx2),
+        ]
+        for seq, res in sequences:
+            self.assertCorrectUTF8Decoding(self.to_bytestring(seq), res,
+                                           'invalid continuation byte')
+
+    def test_invalid_cb_for_3bytes_seq(self):
+        """
+        Test that an 'invalid continuation byte' error is raised when the
+        continuation byte(s) of a 3-bytes sequence are invalid.  When
+        errors='replace', if the first continuation byte is valid, the first
+        two bytes (start byte + 1st cb) are replaced by a single U+FFFD and the
+        third byte is handled separately, otherwise only the start byte is
+        replaced with a U+FFFD and the other continuation bytes are handled
+        separately.
+        E.g. in the sequence <E1 80 41>, E1 is the start byte of a 3-bytes
+        sequence, 80 is a valid continuation byte, but 41 is not a valid cb
+        because it's the ASCII letter 'A'.
+        Note: when the start byte is E0 or ED, the valid ranges for the first
+        continuation byte are limited to A0..BF and 80..9F respectively.
+        Python 2 used to consider all the bytes in range 80..BF valid when the
+        start byte was ED.  This is fixed in Python 3.
+        """
+        FFFD = '\ufffd'
+        FFFDx2 = FFFD * 2
+        sequences = [
+            ('E0 00', FFFD+'\x00'), ('E0 7F', FFFD+'\x7f'), ('E0 80', FFFDx2),
+            ('E0 9F', FFFDx2), ('E0 C0', FFFDx2), ('E0 FF', FFFDx2),
+            ('E0 A0 00', FFFD+'\x00'), ('E0 A0 7F', FFFD+'\x7f'),
+            ('E0 A0 C0', FFFDx2), ('E0 A0 FF', FFFDx2),
+            ('E0 BF 00', FFFD+'\x00'), ('E0 BF 7F', FFFD+'\x7f'),
+            ('E0 BF C0', FFFDx2), ('E0 BF FF', FFFDx2), ('E1 00', FFFD+'\x00'),
+            ('E1 7F', FFFD+'\x7f'), ('E1 C0', FFFDx2), ('E1 FF', FFFDx2),
+            ('E1 80 00', FFFD+'\x00'), ('E1 80 7F', FFFD+'\x7f'),
+            ('E1 80 C0', FFFDx2), ('E1 80 FF', FFFDx2),
+            ('E1 BF 00', FFFD+'\x00'), ('E1 BF 7F', FFFD+'\x7f'),
+            ('E1 BF C0', FFFDx2), ('E1 BF FF', FFFDx2), ('EC 00', FFFD+'\x00'),
+            ('EC 7F', FFFD+'\x7f'), ('EC C0', FFFDx2), ('EC FF', FFFDx2),
+            ('EC 80 00', FFFD+'\x00'), ('EC 80 7F', FFFD+'\x7f'),
+            ('EC 80 C0', FFFDx2), ('EC 80 FF', FFFDx2),
+            ('EC BF 00', FFFD+'\x00'), ('EC BF 7F', FFFD+'\x7f'),
+            ('EC BF C0', FFFDx2), ('EC BF FF', FFFDx2), ('ED 00', FFFD+'\x00'),
+            ('ED 7F', FFFD+'\x7f'),
+            ('ED A0', FFFDx2), ('ED BF', FFFDx2), # see note ^
+            ('ED C0', FFFDx2), ('ED FF', FFFDx2), ('ED 80 00', FFFD+'\x00'),
+            ('ED 80 7F', FFFD+'\x7f'), ('ED 80 C0', FFFDx2),
+            ('ED 80 FF', FFFDx2), ('ED 9F 00', FFFD+'\x00'),
+            ('ED 9F 7F', FFFD+'\x7f'), ('ED 9F C0', FFFDx2),
+            ('ED 9F FF', FFFDx2), ('EE 00', FFFD+'\x00'),
+            ('EE 7F', FFFD+'\x7f'), ('EE C0', FFFDx2), ('EE FF', FFFDx2),
+            ('EE 80 00', FFFD+'\x00'), ('EE 80 7F', FFFD+'\x7f'),
+            ('EE 80 C0', FFFDx2), ('EE 80 FF', FFFDx2),
+            ('EE BF 00', FFFD+'\x00'), ('EE BF 7F', FFFD+'\x7f'),
+            ('EE BF C0', FFFDx2), ('EE BF FF', FFFDx2), ('EF 00', FFFD+'\x00'),
+            ('EF 7F', FFFD+'\x7f'), ('EF C0', FFFDx2), ('EF FF', FFFDx2),
+            ('EF 80 00', FFFD+'\x00'), ('EF 80 7F', FFFD+'\x7f'),
+            ('EF 80 C0', FFFDx2), ('EF 80 FF', FFFDx2),
+            ('EF BF 00', FFFD+'\x00'), ('EF BF 7F', FFFD+'\x7f'),
+            ('EF BF C0', FFFDx2), ('EF BF FF', FFFDx2),
+        ]
+        for seq, res in sequences:
+            self.assertCorrectUTF8Decoding(self.to_bytestring(seq), res,
+                                           'invalid continuation byte')
+
+    def test_invalid_cb_for_4bytes_seq(self):
+        """
+        Test that an 'invalid continuation byte' error is raised when the
+        continuation byte(s) of a 4-bytes sequence are invalid.  When
+        errors='replace',the start byte and all the following valid
+        continuation bytes are replaced with a single U+FFFD, and all the bytes
+        starting from the first invalid continuation bytes (included) are
+        handled separately.
+        E.g. in the sequence <E1 80 41>, E1 is the start byte of a 3-bytes
+        sequence, 80 is a valid continuation byte, but 41 is not a valid cb
+        because it's the ASCII letter 'A'.
+        Note: when the start byte is E0 or ED, the valid ranges for the first
+        continuation byte are limited to A0..BF and 80..9F respectively.
+        However, when the start byte is ED, Python 2 considers all the bytes
+        in range 80..BF valid.  This is fixed in Python 3.
+        """
+        FFFD = '\ufffd'
+        FFFDx2 = FFFD * 2
+        sequences = [
+            ('F0 00', FFFD+'\x00'), ('F0 7F', FFFD+'\x7f'), ('F0 80', FFFDx2),
+            ('F0 8F', FFFDx2), ('F0 C0', FFFDx2), ('F0 FF', FFFDx2),
+            ('F0 90 00', FFFD+'\x00'), ('F0 90 7F', FFFD+'\x7f'),
+            ('F0 90 C0', FFFDx2), ('F0 90 FF', FFFDx2),
+            ('F0 BF 00', FFFD+'\x00'), ('F0 BF 7F', FFFD+'\x7f'),
+            ('F0 BF C0', FFFDx2), ('F0 BF FF', FFFDx2),
+            ('F0 90 80 00', FFFD+'\x00'), ('F0 90 80 7F', FFFD+'\x7f'),
+            ('F0 90 80 C0', FFFDx2), ('F0 90 80 FF', FFFDx2),
+            ('F0 90 BF 00', FFFD+'\x00'), ('F0 90 BF 7F', FFFD+'\x7f'),
+            ('F0 90 BF C0', FFFDx2), ('F0 90 BF FF', FFFDx2),
+            ('F0 BF 80 00', FFFD+'\x00'), ('F0 BF 80 7F', FFFD+'\x7f'),
+            ('F0 BF 80 C0', FFFDx2), ('F0 BF 80 FF', FFFDx2),
+            ('F0 BF BF 00', FFFD+'\x00'), ('F0 BF BF 7F', FFFD+'\x7f'),
+            ('F0 BF BF C0', FFFDx2), ('F0 BF BF FF', FFFDx2),
+            ('F1 00', FFFD+'\x00'), ('F1 7F', FFFD+'\x7f'), ('F1 C0', FFFDx2),
+            ('F1 FF', FFFDx2), ('F1 80 00', FFFD+'\x00'),
+            ('F1 80 7F', FFFD+'\x7f'), ('F1 80 C0', FFFDx2),
+            ('F1 80 FF', FFFDx2), ('F1 BF 00', FFFD+'\x00'),
+            ('F1 BF 7F', FFFD+'\x7f'), ('F1 BF C0', FFFDx2),
+            ('F1 BF FF', FFFDx2), ('F1 80 80 00', FFFD+'\x00'),
+            ('F1 80 80 7F', FFFD+'\x7f'), ('F1 80 80 C0', FFFDx2),
+            ('F1 80 80 FF', FFFDx2), ('F1 80 BF 00', FFFD+'\x00'),
+            ('F1 80 BF 7F', FFFD+'\x7f'), ('F1 80 BF C0', FFFDx2),
+            ('F1 80 BF FF', FFFDx2), ('F1 BF 80 00', FFFD+'\x00'),
+            ('F1 BF 80 7F', FFFD+'\x7f'), ('F1 BF 80 C0', FFFDx2),
+            ('F1 BF 80 FF', FFFDx2), ('F1 BF BF 00', FFFD+'\x00'),
+            ('F1 BF BF 7F', FFFD+'\x7f'), ('F1 BF BF C0', FFFDx2),
+            ('F1 BF BF FF', FFFDx2), ('F3 00', FFFD+'\x00'),
+            ('F3 7F', FFFD+'\x7f'), ('F3 C0', FFFDx2), ('F3 FF', FFFDx2),
+            ('F3 80 00', FFFD+'\x00'), ('F3 80 7F', FFFD+'\x7f'),
+            ('F3 80 C0', FFFDx2), ('F3 80 FF', FFFDx2),
+            ('F3 BF 00', FFFD+'\x00'), ('F3 BF 7F', FFFD+'\x7f'),
+            ('F3 BF C0', FFFDx2), ('F3 BF FF', FFFDx2),
+            ('F3 80 80 00', FFFD+'\x00'), ('F3 80 80 7F', FFFD+'\x7f'),
+            ('F3 80 80 C0', FFFDx2), ('F3 80 80 FF', FFFDx2),
+            ('F3 80 BF 00', FFFD+'\x00'), ('F3 80 BF 7F', FFFD+'\x7f'),
+            ('F3 80 BF C0', FFFDx2), ('F3 80 BF FF', FFFDx2),
+            ('F3 BF 80 00', FFFD+'\x00'), ('F3 BF 80 7F', FFFD+'\x7f'),
+            ('F3 BF 80 C0', FFFDx2), ('F3 BF 80 FF', FFFDx2),
+            ('F3 BF BF 00', FFFD+'\x00'), ('F3 BF BF 7F', FFFD+'\x7f'),
+            ('F3 BF BF C0', FFFDx2), ('F3 BF BF FF', FFFDx2),
+            ('F4 00', FFFD+'\x00'), ('F4 7F', FFFD+'\x7f'), ('F4 90', FFFDx2),
+            ('F4 BF', FFFDx2), ('F4 C0', FFFDx2), ('F4 FF', FFFDx2),
+            ('F4 80 00', FFFD+'\x00'), ('F4 80 7F', FFFD+'\x7f'),
+            ('F4 80 C0', FFFDx2), ('F4 80 FF', FFFDx2),
+            ('F4 8F 00', FFFD+'\x00'), ('F4 8F 7F', FFFD+'\x7f'),
+            ('F4 8F C0', FFFDx2), ('F4 8F FF', FFFDx2),
+            ('F4 80 80 00', FFFD+'\x00'), ('F4 80 80 7F', FFFD+'\x7f'),
+            ('F4 80 80 C0', FFFDx2), ('F4 80 80 FF', FFFDx2),
+            ('F4 80 BF 00', FFFD+'\x00'), ('F4 80 BF 7F', FFFD+'\x7f'),
+            ('F4 80 BF C0', FFFDx2), ('F4 80 BF FF', FFFDx2),
+            ('F4 8F 80 00', FFFD+'\x00'), ('F4 8F 80 7F', FFFD+'\x7f'),
+            ('F4 8F 80 C0', FFFDx2), ('F4 8F 80 FF', FFFDx2),
+            ('F4 8F BF 00', FFFD+'\x00'), ('F4 8F BF 7F', FFFD+'\x7f'),
+            ('F4 8F BF C0', FFFDx2), ('F4 8F BF FF', FFFDx2)
+        ]
+        for seq, res in sequences:
+            self.assertCorrectUTF8Decoding(self.to_bytestring(seq), res,
+                                           'invalid continuation byte')
+
     def test_codecs_idna(self):
         # Test whether trailing dot is preserved
         self.assertEqual("www.python.org.".encode("idna"), b"www.python.org.")
diff -r bd8afb90ebf2 Lib/test/test_urllib.py
--- a/Lib/test/test_urllib.py
+++ b/Lib/test/test_urllib.py
@@ -268,6 +268,39 @@
         finally:
             self.unfakehttp()
 
+    def test_missing_localfile(self):
+        # Test for #10836
+        # 3.3 - URLError is not captured, explicit IOError is raised.
+        with self.assertRaises(IOError):
+            urlopen('file://localhost/a/file/which/doesnot/exists.py')
+
+    def test_file_notexists(self):
+        fd, tmp_file = tempfile.mkstemp()
+        tmp_fileurl = 'file://localhost/' + tmp_file.replace(os.path.sep, '/')
+        try:
+            self.assertTrue(os.path.exists(tmp_file))
+            with urlopen(tmp_fileurl) as fobj:
+                self.assertTrue(fobj)
+        finally:
+            os.close(fd)
+            os.unlink(tmp_file)
+        self.assertFalse(os.path.exists(tmp_file))
+        # 3.3 - IOError instead of URLError
+        with self.assertRaises(IOError):
+            urlopen(tmp_fileurl)
+
+    def test_ftp_nohost(self):
+        test_ftp_url = 'ftp:///path'
+        # 3.3 - IOError instead of URLError
+        with self.assertRaises(IOError):
+            urlopen(test_ftp_url)
+
+    def test_ftp_nonexisting(self):
+        # 3.3 - IOError instead of URLError
+        with self.assertRaises(IOError):
+            urlopen('ftp://localhost/a/file/which/doesnot/exists.py')
+
+
     def test_userpass_inurl(self):
         self.fakehttp(b"HTTP/1.0 200 OK\r\n\r\nHello!")
         try:
@@ -300,7 +333,7 @@
 
     def test_URLopener_deprecation(self):
         with support.check_warnings(('',DeprecationWarning)):
-            warn = urllib.request.URLopener()
+            urllib.request.URLopener()
 
 class urlretrieve_FileTests(unittest.TestCase):
     """Test urllib.urlretrieve() on local files"""
@@ -422,8 +455,8 @@
         urllib.request.urlretrieve(self.constructLocalFileUrl(srcFileName),
             support.TESTFN, hooktester)
         self.assertEqual(len(report), 2)
-        self.assertEqual(report[0][1], 0)
-        self.assertEqual(report[1][1], 5)
+        self.assertEqual(report[0][2], 5)
+        self.assertEqual(report[1][2], 5)
 
     def test_reporthook_8193_bytes(self):
         # Test on 8193 byte file. Should call reporthook only 3 times (once
@@ -436,9 +469,10 @@
         urllib.request.urlretrieve(self.constructLocalFileUrl(srcFileName),
             support.TESTFN, hooktester)
         self.assertEqual(len(report), 3)
-        self.assertEqual(report[0][1], 0)
+        self.assertEqual(report[0][2], 8193)
+        self.assertEqual(report[0][1], 8192)
         self.assertEqual(report[1][1], 8192)
-        self.assertEqual(report[2][1], 1)
+        self.assertEqual(report[2][1], 8192)
 
 
 class urlretrieve_HttpTests(unittest.TestCase, FakeHTTPMixin):
diff -r bd8afb90ebf2 Lib/test/test_urllib2.py
--- a/Lib/test/test_urllib2.py
+++ b/Lib/test/test_urllib2.py
@@ -1288,7 +1288,7 @@
                               )
 
     def test_basic_and_digest_auth_handlers(self):
-        # HTTPDigestAuthHandler threw an exception if it couldn't handle a 40*
+        # HTTPDigestAuthHandler raised an exception if it couldn't handle a 40*
         # response (http://python.org/sf/1479302), where it should instead
         # return None to allow another handler (especially
         # HTTPBasicAuthHandler) to handle the response.
diff -r bd8afb90ebf2 Lib/test/test_urllib2net.py
--- a/Lib/test/test_urllib2net.py
+++ b/Lib/test/test_urllib2net.py
@@ -157,12 +157,12 @@
 ##             self._test_urls(urls, self._extra_handlers()+[bauth, dauth])
 
     def test_urlwithfrag(self):
-        urlwith_frag = "http://docs.python.org/glossary.html#glossary"
+        urlwith_frag = "http://docs.python.org/2/glossary.html#glossary"
         with support.transient_internet(urlwith_frag):
             req = urllib.request.Request(urlwith_frag)
             res = urllib.request.urlopen(req)
             self.assertEqual(res.geturl(),
-                    "http://docs.python.org/glossary.html#glossary")
+                    "http://docs.python.org/2/glossary.html#glossary")
 
     def test_custom_headers(self):
         url = "http://www.example.com"
diff -r bd8afb90ebf2 Lib/test/test_urllibnet.py
--- a/Lib/test/test_urllibnet.py
+++ b/Lib/test/test_urllibnet.py
@@ -137,10 +137,10 @@
     """Tests urllib.request.urlretrieve using the network."""
 
     @contextlib.contextmanager
-    def urlretrieve(self, *args):
+    def urlretrieve(self, *args, **kwargs):
         resource = args[0]
         with support.transient_internet(resource):
-            file_location, info = urllib.request.urlretrieve(*args)
+            file_location, info = urllib.request.urlretrieve(*args, **kwargs)
             try:
                 yield file_location, info
             finally:
@@ -170,9 +170,10 @@
             self.assertIsInstance(info, email.message.Message,
                                   "info is not an instance of email.message.Message")
 
+    logo = "http://www.python.org/community/logos/python-logo-master-v3-TM.png"
+
     def test_data_header(self):
-        logo = "http://www.python.org/community/logos/python-logo-master-v3-TM.png"
-        with self.urlretrieve(logo) as (file_location, fileheaders):
+        with self.urlretrieve(self.logo) as (file_location, fileheaders):
             datevalue = fileheaders.get('Date')
             dateformat = '%a, %d %b %Y %H:%M:%S GMT'
             try:
@@ -180,6 +181,31 @@
             except ValueError:
                 self.fail('Date value not in %r format', dateformat)
 
+    def test_reporthook(self):
+        records = []
+        def recording_reporthook(blocks, block_size, total_size):
+            records.append((blocks, block_size, total_size))
+
+        with self.urlretrieve(self.logo, reporthook=recording_reporthook) as (
+                file_location, fileheaders):
+            expected_size = int(fileheaders['Content-Length'])
+
+        records_repr = repr(records)  # For use in error messages.
+        self.assertGreater(len(records), 1, msg="There should always be two "
+                           "calls; the first one before the transfer starts.")
+        self.assertEqual(records[0][0], 0)
+        self.assertGreater(records[0][1], 0,
+                           msg="block size can't be 0 in %s" % records_repr)
+        self.assertEqual(records[0][2], expected_size)
+        self.assertEqual(records[-1][2], expected_size)
+
+        block_sizes = {block_size for _, block_size, _ in records}
+        self.assertEqual({records[0][1]}, block_sizes,
+                         msg="block sizes in %s must be equal" % records_repr)
+        self.assertGreaterEqual(records[-1][0]*records[0][1], expected_size,
+                                msg="number of blocks * block size must be"
+                                " >= total size in %s" % records_repr)
+
 
 def test_main():
     support.requires('network')
diff -r bd8afb90ebf2 Lib/test/test_uu.py
--- a/Lib/test/test_uu.py
+++ b/Lib/test/test_uu.py
@@ -80,7 +80,7 @@
         out = io.BytesIO()
         try:
             uu.decode(inp, out)
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except uu.Error as e:
             self.assertEqual(str(e), "Truncated input file")
 
@@ -89,7 +89,7 @@
         out = io.BytesIO()
         try:
             uu.decode(inp, out)
-            self.fail("No exception thrown")
+            self.fail("No exception raised")
         except uu.Error as e:
             self.assertEqual(str(e), "No valid begin line found in input file")
 
diff -r bd8afb90ebf2 Lib/test/test_weakref.py
--- a/Lib/test/test_weakref.py
+++ b/Lib/test/test_weakref.py
@@ -32,6 +32,27 @@
     return C().method
 
 
+class Object:
+    def __init__(self, arg):
+        self.arg = arg
+    def __repr__(self):
+        return "<Object %r>" % self.arg
+    def __eq__(self, other):
+        if isinstance(other, Object):
+            return self.arg == other.arg
+        return NotImplemented
+    def __lt__(self, other):
+        if isinstance(other, Object):
+            return self.arg < other.arg
+        return NotImplemented
+    def __hash__(self):
+        return hash(self.arg)
+
+class RefCycle:
+    def __init__(self):
+        self.cycle = self
+
+
 class TestBase(unittest.TestCase):
 
     def setUp(self):
@@ -692,6 +713,90 @@
         self.assertEqual(a(), None)
         self.assertEqual(l, [a])
 
+    def test_equality(self):
+        # Alive weakrefs defer equality testing to their underlying object.
+        x = Object(1)
+        y = Object(1)
+        z = Object(2)
+        a = weakref.ref(x)
+        b = weakref.ref(y)
+        c = weakref.ref(z)
+        d = weakref.ref(x)
+        # Note how we directly test the operators here, to stress both
+        # __eq__ and __ne__.
+        self.assertTrue(a == b)
+        self.assertFalse(a != b)
+        self.assertFalse(a == c)
+        self.assertTrue(a != c)
+        self.assertTrue(a == d)
+        self.assertFalse(a != d)
+        del x, y, z
+        gc.collect()
+        for r in a, b, c:
+            # Sanity check
+            self.assertIs(r(), None)
+        # Dead weakrefs compare by identity: whether `a` and `d` are the
+        # same weakref object is an implementation detail, since they pointed
+        # to the same original object and didn't have a callback.
+        # (see issue #16453).
+        self.assertFalse(a == b)
+        self.assertTrue(a != b)
+        self.assertFalse(a == c)
+        self.assertTrue(a != c)
+        self.assertEqual(a == d, a is d)
+        self.assertEqual(a != d, a is not d)
+
+    def test_ordering(self):
+        # weakrefs cannot be ordered, even if the underlying objects can.
+        ops = [operator.lt, operator.gt, operator.le, operator.ge]
+        x = Object(1)
+        y = Object(1)
+        a = weakref.ref(x)
+        b = weakref.ref(y)
+        for op in ops:
+            self.assertRaises(TypeError, op, a, b)
+        # Same when dead.
+        del x, y
+        gc.collect()
+        for op in ops:
+            self.assertRaises(TypeError, op, a, b)
+
+    def test_hashing(self):
+        # Alive weakrefs hash the same as the underlying object
+        x = Object(42)
+        y = Object(42)
+        a = weakref.ref(x)
+        b = weakref.ref(y)
+        self.assertEqual(hash(a), hash(42))
+        del x, y
+        gc.collect()
+        # Dead weakrefs:
+        # - retain their hash is they were hashed when alive;
+        # - otherwise, cannot be hashed.
+        self.assertEqual(hash(a), hash(42))
+        self.assertRaises(TypeError, hash, b)
+
+    def test_trashcan_16602(self):
+        # Issue #16602: when a weakref's target was part of a long
+        # deallocation chain, the trashcan mechanism could delay clearing
+        # of the weakref and make the target object visible from outside
+        # code even though its refcount had dropped to 0.  A crash ensued.
+        class C:
+            def __init__(self, parent):
+                if not parent:
+                    return
+                wself = weakref.ref(self)
+                def cb(wparent):
+                    o = wself()
+                self.wparent = weakref.ref(parent, cb)
+
+        d = weakref.WeakKeyDictionary()
+        root = c = C(None)
+        for n in range(100):
+            d[c] = c = C(c)
+        del root
+        gc.collect()
+
 
 class SubclassableWeakrefTestCase(TestBase):
 
@@ -796,27 +901,6 @@
         self.assertEqual(self.cbcalled, 0)
 
 
-class Object:
-    def __init__(self, arg):
-        self.arg = arg
-    def __repr__(self):
-        return "<Object %r>" % self.arg
-    def __eq__(self, other):
-        if isinstance(other, Object):
-            return self.arg == other.arg
-        return NotImplemented
-    def __lt__(self, other):
-        if isinstance(other, Object):
-            return self.arg < other.arg
-        return NotImplemented
-    def __hash__(self):
-        return hash(self.arg)
-
-class RefCycle:
-    def __init__(self):
-        self.cycle = self
-
-
 class MappingTestCase(TestBase):
 
     COUNT = 10
diff -r bd8afb90ebf2 Lib/test/test_webbrowser.py
--- /dev/null
+++ b/Lib/test/test_webbrowser.py
@@ -0,0 +1,192 @@
+import webbrowser
+import unittest
+import subprocess
+from unittest import mock
+from test import support
+
+
+URL = 'http://www.example.com'
+CMD_NAME = 'test'
+
+
+class PopenMock(mock.MagicMock):
+
+    def poll(self):
+        return 0
+
+    def wait(self, seconds=None):
+        return 0
+
+
+class CommandTestMixin:
+
+    def _test(self, meth, *, args=[URL], kw={}, options, arguments):
+        """Given a web browser instance method name along with arguments and
+        keywords for same (which defaults to the single argument URL), creates
+        a browser instance from the class pointed to by self.browser, calls the
+        indicated instance method with the indicated arguments, and compares
+        the resulting options and arguments passed to Popen by the browser
+        instance against the 'options' and 'args' lists.  Options are compared
+        in a position independent fashion, and the arguments are compared in
+        sequence order to whatever is left over after removing the options.
+
+        """
+        popen = PopenMock()
+        support.patch(self, subprocess, 'Popen', popen)
+        browser = self.browser_class(name=CMD_NAME)
+        getattr(browser, meth)(*args, **kw)
+        popen_args = subprocess.Popen.call_args[0][0]
+        self.assertEqual(popen_args[0], CMD_NAME)
+        popen_args.pop(0)
+        for option in options:
+            self.assertIn(option, popen_args)
+            popen_args.pop(popen_args.index(option))
+        self.assertEqual(popen_args, arguments)
+
+
+class GenericBrowserCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.GenericBrowser
+
+    def test_open(self):
+        self._test('open',
+                   options=[],
+                   arguments=[URL])
+
+
+class BackgroundBrowserCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.BackgroundBrowser
+
+    def test_open(self):
+        self._test('open',
+                   options=[],
+                   arguments=[URL])
+
+
+class ChromeCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.Chrome
+
+    def test_open(self):
+        self._test('open',
+                   options=[],
+                   arguments=[URL])
+
+    def test_open_with_autoraise_false(self):
+        self._test('open', kw=dict(autoraise=False),
+                   options=[],
+                   arguments=[URL])
+
+    def test_open_new(self):
+        self._test('open_new',
+                   options=['--new-window'],
+                   arguments=[URL])
+
+    def test_open_new_tab(self):
+        self._test('open_new_tab',
+                   options=[],
+                   arguments=[URL])
+
+
+class MozillaCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.Mozilla
+
+    def test_open(self):
+        self._test('open',
+                   options=['-raise', '-remote'],
+                   arguments=['openURL({})'.format(URL)])
+
+    def test_open_with_autoraise_false(self):
+        self._test('open', kw=dict(autoraise=False),
+                   options=['-noraise', '-remote'],
+                   arguments=['openURL({})'.format(URL)])
+
+    def test_open_new(self):
+        self._test('open_new',
+                   options=['-raise', '-remote'],
+                   arguments=['openURL({},new-window)'.format(URL)])
+
+    def test_open_new_tab(self):
+        self._test('open_new_tab',
+                   options=['-raise', '-remote'],
+                   arguments=['openURL({},new-tab)'.format(URL)])
+
+
+class GaleonCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.Galeon
+
+    def test_open(self):
+        self._test('open',
+                   options=['-n'],
+                   arguments=[URL])
+
+    def test_open_with_autoraise_false(self):
+        self._test('open', kw=dict(autoraise=False),
+                   options=['-noraise', '-n'],
+                   arguments=[URL])
+
+    def test_open_new(self):
+        self._test('open_new',
+                   options=['-w'],
+                   arguments=[URL])
+
+    def test_open_new_tab(self):
+        self._test('open_new_tab',
+                   options=['-w'],
+                   arguments=[URL])
+
+
+class OperaCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.Opera
+
+    def test_open(self):
+        self._test('open',
+                   options=['-remote'],
+                   arguments=['openURL({})'.format(URL)])
+
+    def test_open_with_autoraise_false(self):
+        self._test('open', kw=dict(autoraise=False),
+                   options=['-remote', '-noraise'],
+                   arguments=['openURL({})'.format(URL)])
+
+    def test_open_new(self):
+        self._test('open_new',
+                   options=['-remote'],
+                   arguments=['openURL({},new-window)'.format(URL)])
+
+    def test_open_new(self):
+        self._test('open_new_tab',
+                   options=['-remote'],
+                   arguments=['openURL({},new-page)'.format(URL)])
+
+
+class ELinksCommandTest(CommandTestMixin, unittest.TestCase):
+
+    browser_class = webbrowser.Elinks
+
+    def test_open(self):
+        self._test('open', options=['-remote'],
+                           arguments=['openURL({})'.format(URL)])
+
+    def test_open_with_autoraise_false(self):
+        self._test('open',
+                   options=['-remote'],
+                   arguments=['openURL({})'.format(URL)])
+
+    def test_open_new(self):
+        self._test('open_new',
+                   options=['-remote'],
+                   arguments=['openURL({},new-window)'.format(URL)])
+
+    def test_open_new_tab(self):
+        self._test('open_new_tab',
+                   options=['-remote'],
+                   arguments=['openURL({},new-tab)'.format(URL)])
+
+
+if __name__=='__main__':
+    unittest.main()
diff -r bd8afb90ebf2 Lib/test/test_winreg.py
--- a/Lib/test/test_winreg.py
+++ b/Lib/test/test_winreg.py
@@ -245,7 +245,7 @@
 
     def test_changing_value(self):
         # Issue2810: A race condition in 2.6 and 3.1 may cause
-        # EnumValue or QueryValue to throw "WindowsError: More data is
+        # EnumValue or QueryValue to raise "WindowsError: More data is
         # available"
         done = False
 
@@ -277,7 +277,7 @@
 
     def test_long_key(self):
         # Issue2810, in 2.6 and 3.1 when the key name was exactly 256
-        # characters, EnumKey threw "WindowsError: More data is
+        # characters, EnumKey raised "WindowsError: More data is
         # available"
         name = 'x'*256
         try:
@@ -291,7 +291,7 @@
 
     def test_dynamic_key(self):
         # Issue2810, when the value is dynamically generated, these
-        # throw "WindowsError: More data is available" in 2.6 and 3.1
+        # raise "WindowsError: More data is available" in 2.6 and 3.1
         try:
             EnumValue(HKEY_PERFORMANCE_DATA, 0)
         except OSError as e:
diff -r bd8afb90ebf2 Lib/test/test_winsound.py
--- a/Lib/test/test_winsound.py
+++ b/Lib/test/test_winsound.py
@@ -16,16 +16,12 @@
     try:
         # Ask the mixer API for the number of devices it knows about.
         # When there are no devices, PlaySound will fail.
-        if ctypes.windll.winmm.mixerGetNumDevs() is 0:
+        if ctypes.windll.winmm.mixerGetNumDevs() == 0:
             return False
 
         key = winreg.OpenKeyEx(winreg.HKEY_CURRENT_USER,
                 "AppEvents\Schemes\Apps\.Default\{0}\.Default".format(sound))
-        value = winreg.EnumValue(key, 0)[1]
-        if value is not "":
-            return True
-        else:
-            return False
+        return winreg.EnumValue(key, 0)[1] != ""
     except WindowsError:
         return False
 
diff -r bd8afb90ebf2 Lib/test/test_wsgiref.py
--- a/Lib/test/test_wsgiref.py
+++ b/Lib/test/test_wsgiref.py
@@ -41,9 +41,6 @@
         pass
 
 
-
-
-
 def hello_app(environ,start_response):
     start_response("200 OK", [
         ('Content-Type','text/plain'),
@@ -65,28 +62,6 @@
 
     return out.getvalue(), err.getvalue()
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 def compare_generic_iter(make_it,match):
     """Utility to compare a generic 2.1/2.2+ iterator with an iterable
 
@@ -124,10 +99,6 @@
             raise AssertionError("Too many items from .__next__()", it)
 
 
-
-
-
-
 class IntegrationTests(TestCase):
 
     def check_hello(self, out, has_length=True):
@@ -201,8 +172,6 @@
                 out)
 
 
-
-
 class UtilityTests(TestCase):
 
     def checkShift(self,sn_in,pi_in,part,sn_out,pi_out):
@@ -241,11 +210,6 @@
         util.setup_testing_defaults(kw)
         self.assertEqual(util.request_uri(kw,query),uri)
 
-
-
-
-
-
     def checkFW(self,text,size,match):
 
         def make_it(text=text,size=size):
@@ -264,7 +228,6 @@
         it.close()
         self.assertTrue(it.filelike.closed)
 
-
     def testSimpleShifts(self):
         self.checkShift('','/', '', '/', '')
         self.checkShift('','/x', 'x', '/x', '')
@@ -272,7 +235,6 @@
         self.checkShift('/a','/x/y', 'x', '/a/x', '/y')
         self.checkShift('/a','/x/',  'x', '/a/x', '/')
 
-
     def testNormalizedShifts(self):
         self.checkShift('/a/b', '/../y', '..', '/a', '/y')
         self.checkShift('', '/../y', '..', '', '/y')
@@ -286,7 +248,6 @@
         self.checkShift('/a/b', '/x//', 'x', '/a/b/x', '/')
         self.checkShift('/a/b', '/.', None, '/a/b', '')
 
-
     def testDefaults(self):
         for key, value in [
             ('SERVER_NAME','127.0.0.1'),
@@ -306,7 +267,6 @@
         ]:
             self.checkDefault(key,value)
 
-
     def testCrossDefaults(self):
         self.checkCrossDefault('HTTP_HOST',"foo.bar",SERVER_NAME="foo.bar")
         self.checkCrossDefault('wsgi.url_scheme',"https",HTTPS="on")
@@ -316,7 +276,6 @@
         self.checkCrossDefault('SERVER_PORT',"80",HTTPS="foo")
         self.checkCrossDefault('SERVER_PORT',"443",HTTPS="on")
 
-
     def testGuessScheme(self):
         self.assertEqual(util.guess_scheme({}), "http")
         self.assertEqual(util.guess_scheme({'HTTPS':"foo"}), "http")
@@ -324,10 +283,6 @@
         self.assertEqual(util.guess_scheme({'HTTPS':"yes"}), "https")
         self.assertEqual(util.guess_scheme({'HTTPS':"1"}), "https")
 
-
-
-
-
     def testAppURIs(self):
         self.checkAppURI("http://127.0.0.1/")
         self.checkAppURI("http://127.0.0.1/spam", SCRIPT_NAME="/spam")
@@ -452,15 +407,6 @@
         raise   # for testing, we want to see what's happening
 
 
-
-
-
-
-
-
-
-
-
 class HandlerTests(TestCase):
 
     def checkEnvironAttrs(self, handler):
@@ -501,7 +447,6 @@
         h=TestHandler(); h.setup_environ()
         self.assertEqual(h.environ['wsgi.url_scheme'],'http')
 
-
     def testAbstractMethods(self):
         h = BaseHandler()
         for name in [
@@ -510,7 +455,6 @@
             self.assertRaises(NotImplementedError, getattr(h,name))
         self.assertRaises(NotImplementedError, h._write, "test")
 
-
     def testContentLength(self):
         # Demo one reason iteration is better than write()...  ;)
 
@@ -602,7 +546,6 @@
             "\r\n".encode("iso-8859-1")+MSG))
         self.assertIn("AssertionError", h.stderr.getvalue())
 
-
     def testHeaderFormats(self):
 
         def non_error_app(e,s):
@@ -662,40 +605,27 @@
             b"data",
             h.stdout.getvalue())
 
-# This epilogue is needed for compatibility with the Python 2.5 regrtest module
+    def testCloseOnError(self):
+        side_effects = {'close_called': False}
+        MSG = b"Some output has been sent"
+        def error_app(e,s):
+            s("200 OK",[])(MSG)
+            class CrashyIterable(object):
+                def __iter__(self):
+                    while True:
+                        yield b'blah'
+                        raise AssertionError("This should be caught by handler")
+                def close(self):
+                    side_effects['close_called'] = True
+            return CrashyIterable()
+
+        h = ErrorHandler()
+        h.run(error_app)
+        self.assertEqual(side_effects['close_called'], True)
+
 
 def test_main():
     support.run_unittest(__name__)
 
 if __name__ == "__main__":
     test_main()
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-# the above lines intentionally left blank
diff -r bd8afb90ebf2 Lib/test/test_xml_etree.py
--- a/Lib/test/test_xml_etree.py
+++ b/Lib/test/test_xml_etree.py
@@ -1809,6 +1809,18 @@
         mye = MyElement('joe')
         self.assertEqual(mye.newmethod(), 'joe')
 
+    def test_html_empty_elems_serialization(self):
+        # issue 15970
+        # from http://www.w3.org/TR/html401/index/elements.html
+        for element in ['AREA', 'BASE', 'BASEFONT', 'BR', 'COL', 'FRAME', 'HR',
+                        'IMG', 'INPUT', 'ISINDEX', 'LINK', 'META', 'PARAM']:
+            for elem in [element, element.lower()]:
+                expected = '<%s>' % elem
+                serialized = serialize(ET.XML('<%s />' % elem), method='html')
+                self.assertEqual(serialized, expected)
+                serialized = serialize(ET.XML('<%s></%s>' % (elem,elem)),
+                                       method='html')
+                self.assertEqual(serialized, expected)
 
 class ElementIterTest(unittest.TestCase):
     def _ilist(self, elem, tag=None):
@@ -1881,10 +1893,23 @@
     sample1 = ('<!DOCTYPE html PUBLIC'
         ' "-//W3C//DTD XHTML 1.0 Transitional//EN"'
         ' "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'
-        '<html>text</html>')
+        '<html>text<div>subtext</div>tail</html>')
 
     sample2 = '''<toplevel>sometext</toplevel>'''
 
+    def _check_sample1_element(self, e):
+        self.assertEqual(e.tag, 'html')
+        self.assertEqual(e.text, 'text')
+        self.assertEqual(e.tail, None)
+        self.assertEqual(e.attrib, {})
+        children = list(e)
+        self.assertEqual(len(children), 1)
+        child = children[0]
+        self.assertEqual(child.tag, 'div')
+        self.assertEqual(child.text, 'subtext')
+        self.assertEqual(child.tail, 'tail')
+        self.assertEqual(child.attrib, {})
+
     def test_dummy_builder(self):
         class BaseDummyBuilder:
             def close(self):
@@ -1917,7 +1942,7 @@
         parser.feed(self.sample1)
 
         e = parser.close()
-        self.assertEqual(e.tag, 'html')
+        self._check_sample1_element(e)
 
     def test_element_factory(self):
         lst = []
@@ -1933,6 +1958,33 @@
 
         self.assertEqual(lst, ['toplevel'])
 
+    def _check_element_factory_class(self, cls):
+        tb = ET.TreeBuilder(element_factory=cls)
+
+        parser = ET.XMLParser(target=tb)
+        parser.feed(self.sample1)
+        e = parser.close()
+        self.assertIsInstance(e, cls)
+        self._check_sample1_element(e)
+
+    def test_element_factory_subclass(self):
+        class MyElement(ET.Element):
+            pass
+        self._check_element_factory_class(MyElement)
+
+    def test_element_factory_pure_python_subclass(self):
+        # Mimick SimpleTAL's behaviour (issue #16089): both versions of
+        # TreeBuilder should be able to cope with a subclass of the
+        # pure Python Element class.
+        base = ET._Element
+        # Not from a C extension
+        self.assertEqual(base.__module__, 'xml.etree.ElementTree')
+        # Force some multiple inheritance with a C class to make things
+        # more interesting.
+        class MyElement(base, ValueError):
+            pass
+        self._check_element_factory_class(MyElement)
+
     def test_doctype(self):
         class DoctypeParser:
             _doctype = None
diff -r bd8afb90ebf2 Lib/test/test_zipfile.py
--- a/Lib/test/test_zipfile.py
+++ b/Lib/test/test_zipfile.py
@@ -1024,7 +1024,7 @@
         with zipfile.ZipFile(data, mode="w") as zipf:
             zipf.writestr("foo.txt", "O, for a Muse of Fire!")
 
-        # This is correct; calling .read on a closed ZipFile should throw
+        # This is correct; calling .read on a closed ZipFile should raise
         # a RuntimeError, and so should calling .testzip.  An earlier
         # version of .testzip would swallow this exception (and any other)
         # and report that the first file in the archive was corrupt.
diff -r bd8afb90ebf2 Lib/test/test_zipimport_support.py
--- a/Lib/test/test_zipimport_support.py
+++ b/Lib/test/test_zipimport_support.py
@@ -29,7 +29,8 @@
 #  test_cmd_line_script (covers the zipimport support in runpy)
 
 # Retrieve some helpers from other test cases
-from test import test_doctest, sample_doctest
+from test import (test_doctest, sample_doctest, sample_doctest_no_doctests,
+                  sample_doctest_no_docstrings)
 
 
 def _run_object_doctest(obj, module):
@@ -105,16 +106,26 @@
                                     "test_zipped_doctest")
         test_src = test_src.replace("test.sample_doctest",
                                     "sample_zipped_doctest")
-        sample_src = inspect.getsource(sample_doctest)
-        sample_src = sample_src.replace("test.test_doctest",
-                                        "test_zipped_doctest")
+        # The sample doctest files rewritten to include in the zipped version.
+        sample_sources = {}
+        for mod in [sample_doctest, sample_doctest_no_doctests,
+                    sample_doctest_no_docstrings]:
+            src = inspect.getsource(mod)
+            src = src.replace("test.test_doctest", "test_zipped_doctest")
+            # Rewrite the module name so that, for example,
+            # "test.sample_doctest" becomes "sample_zipped_doctest".
+            mod_name = mod.__name__.split(".")[-1]
+            mod_name = mod_name.replace("sample_", "sample_zipped_")
+            sample_sources[mod_name] = src
+
         with temp_dir() as d:
             script_name = make_script(d, 'test_zipped_doctest',
                                             test_src)
             zip_name, run_name = make_zip_script(d, 'test_zip',
                                                 script_name)
             z = zipfile.ZipFile(zip_name, 'a')
-            z.writestr("sample_zipped_doctest.py", sample_src)
+            for mod_name, src in sample_sources.items():
+                z.writestr(mod_name + ".py", src)
             z.close()
             if verbose:
                 zip_file = zipfile.ZipFile(zip_name, 'r')
diff -r bd8afb90ebf2 Lib/test/test_zlib.py
--- a/Lib/test/test_zlib.py
+++ b/Lib/test/test_zlib.py
@@ -487,6 +487,44 @@
         dco.flush()
         self.assertFalse(dco.eof)
 
+    def test_decompress_unused_data(self):
+        # Repeated calls to decompress() after EOF should accumulate data in
+        # dco.unused_data, instead of just storing the arg to the last call.
+        source = b'abcdefghijklmnopqrstuvwxyz'
+        remainder = b'0123456789'
+        y = zlib.compress(source)
+        x = y + remainder
+        for maxlen in 0, 1000:
+            for step in 1, 2, len(y), len(x):
+                dco = zlib.decompressobj()
+                data = b''
+                for i in range(0, len(x), step):
+                    if i < len(y):
+                        self.assertEqual(dco.unused_data, b'')
+                    if maxlen == 0:
+                        data += dco.decompress(x[i : i + step])
+                        self.assertEqual(dco.unconsumed_tail, b'')
+                    else:
+                        data += dco.decompress(
+                                dco.unconsumed_tail + x[i : i + step], maxlen)
+                data += dco.flush()
+                self.assertTrue(dco.eof)
+                self.assertEqual(data, source)
+                self.assertEqual(dco.unconsumed_tail, b'')
+                self.assertEqual(dco.unused_data, remainder)
+
+    def test_flush_with_freed_input(self):
+        # Issue #16411: decompressor accesses input to last decompress() call
+        # in flush(), even if this object has been freed in the meanwhile.
+        input1 = b'abcdefghijklmnopqrstuvwxyz'
+        input2 = b'QWERTYUIOPASDFGHJKLZXCVBNM'
+        data = zlib.compress(input1)
+        dco = zlib.decompressobj()
+        dco.decompress(data, 1)
+        del data
+        data = zlib.compress(input2)
+        self.assertEqual(dco.flush(), input1[1:])
+
     if hasattr(zlib.compressobj(), "copy"):
         def test_compresscopy(self):
             # Test copying a compression object
diff -r bd8afb90ebf2 Lib/tkinter/__init__.py
--- a/Lib/tkinter/__init__.py
+++ b/Lib/tkinter/__init__.py
@@ -148,8 +148,12 @@
     """Internal function."""
     pass
 
-def _exit(code='0'):
-    """Internal function. Calling it will throw the exception SystemExit."""
+def _exit(code=0):
+    """Internal function. Calling it will raise the exception SystemExit."""
+    try:
+        code = int(code)
+    except ValueError:
+        pass
     raise SystemExit(code)
 
 _varnum = 0
@@ -1440,8 +1444,8 @@
             if self.subst:
                 args = self.subst(*args)
             return self.func(*args)
-        except SystemExit as msg:
-            raise SystemExit(msg)
+        except SystemExit:
+            raise
         except:
             self.widget._report_exception()
 
@@ -1756,7 +1760,9 @@
         self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
         if useTk:
             self._loadtk()
-        self.readprofile(baseName, className)
+        if not sys.flags.ignore_environment:
+            # Issue #16248: Honor the -E flag to avoid code injection.
+            self.readprofile(baseName, className)
     def loadtk(self):
         if not self._tkloaded:
             self.tk.loadtk()
diff -r bd8afb90ebf2 Lib/tokenize.py
--- a/Lib/tokenize.py
+++ b/Lib/tokenize.py
@@ -162,7 +162,7 @@
                 group("'", r'\\\r?\n'),
                 StringPrefix + r'"[^\n"\\]*(?:\\.[^\n"\\]*)*' +
                 group('"', r'\\\r?\n'))
-PseudoExtras = group(r'\\\r?\n', Comment, Triple)
+PseudoExtras = group(r'\\\r?\n|\Z', Comment, Triple)
 PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)
 
 def _compile(expr):
@@ -555,6 +555,8 @@
             if pseudomatch:                                # scan for tokens
                 start, end = pseudomatch.span(1)
                 spos, epos, pos = (lnum, start), (lnum, end), end
+                if start == end:
+                    continue
                 token, initial = line[start:end], line[start]
 
                 if (initial in numchars or                  # ordinary number
diff -r bd8afb90ebf2 Lib/unittest/__main__.py
--- a/Lib/unittest/__main__.py
+++ b/Lib/unittest/__main__.py
@@ -2,7 +2,14 @@
 
 import sys
 if sys.argv[0].endswith("__main__.py"):
-    sys.argv[0] = "python -m unittest"
+    import os.path
+    # We change sys.argv[0] to make help message more useful
+    # use executable without path, unquoted
+    # (it's just a hint anyway)
+    # (if you have spaces in your executable you get what you deserve!)
+    executable = os.path.basename(sys.executable)
+    sys.argv[0] = executable + " -m unittest"
+    del os
 
 __unittest = True
 
diff -r bd8afb90ebf2 Lib/unittest/case.py
--- a/Lib/unittest/case.py
+++ b/Lib/unittest/case.py
@@ -542,10 +542,10 @@
             return  '%s : %s' % (safe_repr(standardMsg), safe_repr(msg))
 
     def assertRaises(self, excClass, callableObj=None, *args, **kwargs):
-        """Fail unless an exception of class excClass is thrown
+        """Fail unless an exception of class excClass is raised
            by callableObj when invoked with arguments args and keyword
            arguments kwargs. If a different type of exception is
-           thrown, it will not be caught, and the test case will be
+           raised, it will not be caught, and the test case will be
            deemed to have suffered an error, exactly as for an
            unexpected exception.
 
@@ -642,7 +642,7 @@
         assertion_func(first, second, msg=msg)
 
     def assertNotEqual(self, first, second, msg=None):
-        """Fail if the two objects are equal as determined by the '=='
+        """Fail if the two objects are equal as determined by the '!='
            operator.
         """
         if not first != second:
@@ -736,7 +736,7 @@
             msg: Optional message to use on failure instead of a list of
                     differences.
         """
-        if seq_type != None:
+        if seq_type is not None:
             seq_type_name = seq_type.__name__
             if not isinstance(seq1, seq_type):
                 raise self.failureException('First sequence is not a %s: %s'
diff -r bd8afb90ebf2 Lib/unittest/mock.py
--- a/Lib/unittest/mock.py
+++ b/Lib/unittest/mock.py
@@ -731,8 +731,8 @@
         arguments."""
         self = _mock_self
         if not self.call_count == 1:
-            msg = ("Expected to be called once. Called %s times." %
-                   self.call_count)
+            msg = ("Expected '%s' to be called once. Called %s times." %
+                   (self._mock_name or 'mock', self.call_count))
             raise AssertionError(msg)
         return self.assert_called_with(*args, **kwargs)
 
diff -r bd8afb90ebf2 Lib/unittest/runner.py
--- a/Lib/unittest/runner.py
+++ b/Lib/unittest/runner.py
@@ -35,7 +35,7 @@
     separator2 = '-' * 70
 
     def __init__(self, stream, descriptions, verbosity):
-        super(TextTestResult, self).__init__()
+        super(TextTestResult, self).__init__(stream, descriptions, verbosity)
         self.stream = stream
         self.showAll = verbosity > 1
         self.dots = verbosity == 1
diff -r bd8afb90ebf2 Lib/unittest/test/test_runner.py
--- a/Lib/unittest/test/test_runner.py
+++ b/Lib/unittest/test/test_runner.py
@@ -149,6 +149,19 @@
         self.assertEqual(runner.resultclass, unittest.TextTestResult)
 
 
+    def test_multiple_inheritance(self):
+        class AResult(unittest.TestResult):
+            def __init__(self, stream, descriptions, verbosity):
+                super(AResult, self).__init__(stream, descriptions, verbosity)
+
+        class ATextResult(unittest.TextTestResult, AResult):
+            pass
+
+        # This used to raise an exception due to TextTestResult not passing
+        # on arguments in its __init__ super call
+        ATextResult(None, None, 1)
+
+
     def testBufferAndFailfast(self):
         class Test(unittest.TestCase):
             def testFoo(self):
diff -r bd8afb90ebf2 Lib/unittest/test/testmock/testmock.py
--- a/Lib/unittest/test/testmock/testmock.py
+++ b/Lib/unittest/test/testmock/testmock.py
@@ -463,6 +463,13 @@
                                 mock.assert_called_with)
 
 
+    def test_assert_called_once_with_message(self):
+        mock = Mock(name='geoffrey')
+        self.assertRaisesRegex(AssertionError,
+                     r"Expected 'geoffrey' to be called once\.",
+                     mock.assert_called_once_with)
+
+
     def test__name__(self):
         mock = Mock()
         self.assertRaises(AttributeError, lambda: mock.__name__)
diff -r bd8afb90ebf2 Lib/urllib/request.py
--- a/Lib/urllib/request.py
+++ b/Lib/urllib/request.py
@@ -208,7 +208,7 @@
                 size = int(headers["Content-Length"])
 
             if reporthook:
-                reporthook(blocknum, 0, size)
+                reporthook(blocknum, bs, size)
 
             while True:
                 block = fp.read(bs)
@@ -218,7 +218,7 @@
                 tfp.write(block)
                 blocknum += 1
                 if reporthook:
-                    reporthook(blocknum, len(block), size)
+                    reporthook(blocknum, bs, size)
 
     if size >= 0 and read < size:
         raise ContentTooShortError(
@@ -1413,9 +1413,9 @@
                 else:
                     origurl = 'file://' + filename
                 return addinfourl(open(localfile, 'rb'), headers, origurl)
-        except OSError as msg:
+        except OSError as exp:
             # users shouldn't expect OSErrors coming from urlopen()
-            raise URLError(msg)
+            raise URLError(exp)
         raise URLError('file not on local host')
 
 def _safe_gethostbyname(host):
@@ -1474,8 +1474,8 @@
                 headers += "Content-length: %d\n" % retrlen
             headers = email.message_from_string(headers)
             return addinfourl(fp, headers, req.full_url)
-        except ftplib.all_errors as msg:
-            exc = URLError('ftp error: %s' % msg)
+        except ftplib.all_errors as exp:
+            exc = URLError('ftp error: %r' % exp)
             raise exc.with_traceback(sys.exc_info()[2])
 
     def connect_ftp(self, user, passwd, host, port, dirs, timeout):
@@ -1870,7 +1870,7 @@
     def open_file(self, url):
         """Use local file or FTP depending on form of URL."""
         if not isinstance(url, str):
-            raise URLError('file error', 'proxy support for file protocol currently not implemented')
+            raise URLError('file error: proxy support for file protocol currently not implemented')
         if url[:2] == '//' and url[2:3] != '/' and url[2:12].lower() != 'localhost/':
             raise ValueError("file:// scheme is supported only on localhost")
         else:
@@ -1885,7 +1885,7 @@
         try:
             stats = os.stat(localname)
         except OSError as e:
-            raise URLError(e.errno, e.strerror, e.filename)
+            raise URLError(e.strerror, e.filename)
         size = stats.st_size
         modified = email.utils.formatdate(stats.st_mtime, usegmt=True)
         mtype = mimetypes.guess_type(url)[0]
@@ -1899,22 +1899,22 @@
             return addinfourl(open(localname, 'rb'), headers, urlfile)
         host, port = splitport(host)
         if (not port
-           and socket.gethostbyname(host) in (localhost() + thishost())):
+           and socket.gethostbyname(host) in ((localhost(),) + thishost())):
             urlfile = file
             if file[:1] == '/':
                 urlfile = 'file://' + file
             elif file[:2] == './':
                 raise ValueError("local file url may start with / or file:. Unknown url of type: %s" % url)
             return addinfourl(open(localname, 'rb'), headers, urlfile)
-        raise URLError('local file error', 'not on local host')
+        raise URLError('local file error: not on local host')
 
     def open_ftp(self, url):
         """Use FTP protocol."""
         if not isinstance(url, str):
-            raise URLError('ftp error', 'proxy support for ftp protocol currently not implemented')
+            raise URLError('ftp error: proxy support for ftp protocol currently not implemented')
         import mimetypes
         host, path = splithost(url)
-        if not host: raise URLError('ftp error', 'no host given')
+        if not host: raise URLError('ftp error: no host given')
         host, port = splitport(host)
         user, host = splituser(host)
         if user: user, passwd = splitpasswd(user)
@@ -1963,13 +1963,13 @@
                 headers += "Content-Length: %d\n" % retrlen
             headers = email.message_from_string(headers)
             return addinfourl(fp, headers, "ftp:" + url)
-        except ftperrors() as msg:
-            raise URLError('ftp error', msg).with_traceback(sys.exc_info()[2])
+        except ftperrors() as exp:
+            raise URLError('ftp error %r' % exp).with_traceback(sys.exc_info()[2])
 
     def open_data(self, url, data=None):
         """Use "data" URL."""
         if not isinstance(url, str):
-            raise URLError('data error', 'proxy support for data protocol currently not implemented')
+            raise URLError('data error: proxy support for data protocol currently not implemented')
         # ignore POSTed data
         #
         # syntax of data URLs:
@@ -2298,7 +2298,7 @@
                 conn, retrlen = self.ftp.ntransfercmd(cmd)
             except ftplib.error_perm as reason:
                 if str(reason)[:3] != '550':
-                    raise URLError('ftp error', reason).with_traceback(
+                    raise URLError('ftp error: %d' % reason).with_traceback(
                         sys.exc_info()[2])
         if not conn:
             # Set transfer mode to ASCII!
@@ -2310,7 +2310,7 @@
                     try:
                         self.ftp.cwd(file)
                     except ftplib.error_perm as reason:
-                        raise URLError('ftp error', reason) from reason
+                        raise URLError('ftp error: %d' % reason) from reason
                 finally:
                     self.ftp.cwd(pwd)
                 cmd = 'LIST ' + file
@@ -2326,13 +2326,7 @@
         return (ftpobj, retrlen)
 
     def endtransfer(self):
-        if not self.busy:
-            return
         self.busy = 0
-        try:
-            self.ftp.voidresp()
-        except ftperrors():
-            pass
 
     def close(self):
         self.keepalive = False
diff -r bd8afb90ebf2 Lib/venv/__init__.py
--- a/Lib/venv/__init__.py
+++ b/Lib/venv/__init__.py
@@ -54,9 +54,11 @@
     behaviour when called upon to create a virtual environment.
 
     By default, the builder makes the system (global) site-packages dir
-    available to the created environment.
+    *un*available to the created environment.
 
-    By default, the creation process uses symlinks wherever possible.
+    If invoked using the Python -m option, the default is to use copying
+    on Windows platforms but symlinks elsewhere. If instantiated some
+    other way, the default is to *not* use symlinks.
 
     :param system_site_packages: If True, the system (global) site-packages
                                  dir is available to created environments.
@@ -305,19 +307,26 @@
                     mode = 'wb'
                 else:
                     mode = 'w'
-                    data = data.decode('utf-8')
-                    data = self.replace_variables(data, context)
-                with open(dstfile, mode) as f:
-                    f.write(data)
-                shutil.copymode(srcfile, dstfile)
+                    try:
+                        data = data.decode('utf-8')
+                        data = self.replace_variables(data, context)
+                    except UnicodeDecodeError as e:
+                        data = None
+                        logger.warning('unable to copy script %r, '
+                                       'may be binary: %s', srcfile, e)
+                if data is not None:
+                    with open(dstfile, mode) as f:
+                        f.write(data)
+                    shutil.copymode(srcfile, dstfile)
 
 
 def create(env_dir, system_site_packages=False, clear=False, symlinks=False):
     """
     Create a virtual environment in a directory.
 
-    By default, makes the system (global) site-packages dir available to
-    the created environment.
+    By default, makes the system (global) site-packages dir *un*available to
+    the created environment, and uses copying rather than symlinking for files
+    obtained from the source Python installation.
 
     :param env_dir: The target directory to create an environment in.
     :param system_site_packages: If True, the system (global) site-packages
diff -r bd8afb90ebf2 Lib/wave.py
--- a/Lib/wave.py
+++ b/Lib/wave.py
@@ -261,9 +261,9 @@
     #
 
     def _read_fmt_chunk(self, chunk):
-        wFormatTag, self._nchannels, self._framerate, dwAvgBytesPerSec, wBlockAlign = struct.unpack_from('<hhllh', chunk.read(14))
+        wFormatTag, self._nchannels, self._framerate, dwAvgBytesPerSec, wBlockAlign = struct.unpack_from('<HHLLH', chunk.read(14))
         if wFormatTag == WAVE_FORMAT_PCM:
-            sampwidth = struct.unpack_from('<h', chunk.read(2))[0]
+            sampwidth = struct.unpack_from('<H', chunk.read(2))[0]
             self._sampwidth = (sampwidth + 7) // 8
         else:
             raise Error('unknown format: %r' % (wFormatTag,))
@@ -466,14 +466,14 @@
             self._nframes = initlength // (self._nchannels * self._sampwidth)
         self._datalength = self._nframes * self._nchannels * self._sampwidth
         self._form_length_pos = self._file.tell()
-        self._file.write(struct.pack('<l4s4slhhllhh4s',
+        self._file.write(struct.pack('<L4s4sLHHLLHH4s',
             36 + self._datalength, b'WAVE', b'fmt ', 16,
             WAVE_FORMAT_PCM, self._nchannels, self._framerate,
             self._nchannels * self._framerate * self._sampwidth,
             self._nchannels * self._sampwidth,
             self._sampwidth * 8, b'data'))
         self._data_length_pos = self._file.tell()
-        self._file.write(struct.pack('<l', self._datalength))
+        self._file.write(struct.pack('<L', self._datalength))
         self._headerwritten = True
 
     def _patchheader(self):
@@ -482,9 +482,9 @@
             return
         curpos = self._file.tell()
         self._file.seek(self._form_length_pos, 0)
-        self._file.write(struct.pack('<l', 36 + self._datawritten))
+        self._file.write(struct.pack('<L', 36 + self._datawritten))
         self._file.seek(self._data_length_pos, 0)
-        self._file.write(struct.pack('<l', self._datawritten))
+        self._file.write(struct.pack('<L', self._datawritten))
         self._file.seek(curpos, 0)
         self._datalength = self._datawritten
 
diff -r bd8afb90ebf2 Lib/webbrowser.py
--- a/Lib/webbrowser.py
+++ b/Lib/webbrowser.py
@@ -206,12 +206,18 @@
     """Parent class for all Unix browsers with remote functionality."""
 
     raise_opts = None
+    background = False
+    redirect_stdout = True
+    # In remote_args, %s will be replaced with the requested URL.  %action will
+    # be replaced depending on the value of 'new' passed to open.
+    # remote_action is used for new=0 (open).  If newwin is not None, it is
+    # used for new=1 (open_new).  If newtab is not None, it is used for
+    # new=3 (open_new_tab).  After both substitutions are made, any empty
+    # strings in the transformed remote_args list will be removed.
     remote_args = ['%action', '%s']
     remote_action = None
     remote_action_newwin = None
     remote_action_newtab = None
-    background = False
-    redirect_stdout = True
 
     def _invoke(self, args, remote, autoraise):
         raise_opt = []
@@ -224,7 +230,7 @@
         cmdline = [self.name] + raise_opt + args
 
         if remote or self.background:
-            inout = io.open(os.devnull, "r+")
+            inout = subprocess.DEVNULL
         else:
             # for TTY browsers, we need stdin/out
             inout = None
@@ -264,6 +270,7 @@
 
         args = [arg.replace("%s", url).replace("%action", action)
                 for arg in self.remote_args]
+        args = [arg for arg in args if arg]
         success = self._invoke(args, True, autoraise)
         if not success:
             # remote invocation failed, try straight way
@@ -347,7 +354,7 @@
         else:
             action = "openURL"
 
-        devnull = io.open(os.devnull, "r+")
+        devnull = subprocess.DEVNULL
         # if possible, put browser in separate process group, so
         # keyboard interrupts don't affect browser as well as Python
         setsid = getattr(os, 'setsid', None)
diff -r bd8afb90ebf2 Lib/wsgiref/handlers.py
--- a/Lib/wsgiref/handlers.py
+++ b/Lib/wsgiref/handlers.py
@@ -174,11 +174,13 @@
         in the event loop to iterate over the data, and to call
         'self.close()' once the response is finished.
         """
-        if not self.result_is_file() or not self.sendfile():
-            for data in self.result:
-                self.write(data)
-            self.finish_content()
-        self.close()
+        try:
+            if not self.result_is_file() or not self.sendfile():
+                for data in self.result:
+                    self.write(data)
+                self.finish_content()
+        finally:
+            self.close()
 
 
     def get_scheme(self):
diff -r bd8afb90ebf2 Lib/wsgiref/validate.py
--- a/Lib/wsgiref/validate.py
+++ b/Lib/wsgiref/validate.py
@@ -139,9 +139,9 @@
     When applied between a WSGI server and a WSGI application, this
     middleware will check for WSGI compliancy on a number of levels.
     This middleware does not modify the request or response in any
-    way, but will throw an AssertionError if anything seems off
+    way, but will raise an AssertionError if anything seems off
     (except for a failure to close the application iterator, which
-    will be printed to stderr -- there's no way to throw an exception
+    will be printed to stderr -- there's no way to raise an exception
     at that point).
     """
 
diff -r bd8afb90ebf2 Lib/xdrlib.py
--- a/Lib/xdrlib.py
+++ b/Lib/xdrlib.py
@@ -13,7 +13,7 @@
 class Error(Exception):
     """Exception class for this module. Use:
 
-    except xdrlib.Error, var:
+    except xdrlib.Error as var:
         # var has the Error instance for the exception
 
     Public ivars:
diff -r bd8afb90ebf2 Lib/xml/etree/ElementTree.py
--- a/Lib/xml/etree/ElementTree.py
+++ b/Lib/xml/etree/ElementTree.py
@@ -303,7 +303,9 @@
         self._children.insert(index, element)
 
     def _assert_is_element(self, e):
-        if not isinstance(e, Element):
+        # Need to refer to the actual Python implementation, not the
+        # shadowing C implementation.
+        if not isinstance(e, _Element):
             raise TypeError('expected an Element, not %s' % type(e).__name__)
 
     ##
@@ -995,7 +997,7 @@
         write(_escape_cdata(elem.tail))
 
 HTML_EMPTY = ("area", "base", "basefont", "br", "col", "frame", "hr",
-              "img", "input", "isindex", "link", "meta" "param")
+              "img", "input", "isindex", "link", "meta", "param")
 
 try:
     HTML_EMPTY = set(HTML_EMPTY)
diff -r bd8afb90ebf2 Lib/xml/sax/_exceptions.py
--- a/Lib/xml/sax/_exceptions.py
+++ b/Lib/xml/sax/_exceptions.py
@@ -12,7 +12,7 @@
     the application: you can subclass it to provide additional
     functionality, or to add localization. Note that although you will
     receive a SAXException as the argument to the handlers in the
-    ErrorHandler interface, you are not actually required to throw
+    ErrorHandler interface, you are not actually required to raise
     the exception; instead, you can simply read the information in
     it."""
 
@@ -50,7 +50,7 @@
     the original XML document. Note that although the application will
     receive a SAXParseException as the argument to the handlers in the
     ErrorHandler interface, the application is not actually required
-    to throw the exception; instead, it can simply read the
+    to raise the exception; instead, it can simply read the
     information in it and take a different action.
 
     Since this exception is a subclass of SAXException, it inherits
@@ -62,7 +62,7 @@
         self._locator = locator
 
         # We need to cache this stuff at construction time.
-        # If this exception is thrown, the objects through which we must
+        # If this exception is raised, the objects through which we must
         # traverse to get this information may be deleted by the time
         # it gets caught.
         self._systemId = self._locator.getSystemId()
diff -r bd8afb90ebf2 Lib/xml/sax/xmlreader.py
--- a/Lib/xml/sax/xmlreader.py
+++ b/Lib/xml/sax/xmlreader.py
@@ -68,7 +68,7 @@
 
         SAX parsers are not required to provide localization for errors
         and warnings; if they cannot support the requested locale,
-        however, they must throw a SAX exception. Applications may
+        however, they must raise a SAX exception. Applications may
         request a locale change in the middle of a parse."""
         raise SAXNotSupportedException("Locale support not implemented")
 
diff -r bd8afb90ebf2 Lib/xmlrpc/client.py
--- a/Lib/xmlrpc/client.py
+++ b/Lib/xmlrpc/client.py
@@ -811,7 +811,7 @@
 
 class MultiCallIterator:
     """Iterates over the results of a multicall. Exceptions are
-    thrown in response to xmlrpc faults."""
+    raised in response to xmlrpc faults."""
 
     def __init__(self, results):
         self.results = results
diff -r bd8afb90ebf2 Lib/zipfile.py
--- a/Lib/zipfile.py
+++ b/Lib/zipfile.py
@@ -906,30 +906,34 @@
             self.fp = file
             self.filename = getattr(file, 'name', None)
 
-        if key == 'r':
-            self._GetContents()
-        elif key == 'w':
-            # set the modified flag so central directory gets written
-            # even if no files are added to the archive
-            self._didModify = True
-        elif key == 'a':
-            try:
-                # See if file is a zip file
+        try:
+            if key == 'r':
                 self._RealGetContents()
-                # seek to start of directory and overwrite
-                self.fp.seek(self.start_dir, 0)
-            except BadZipFile:
-                # file is not a zip file, just append
-                self.fp.seek(0, 2)
-
+            elif key == 'w':
                 # set the modified flag so central directory gets written
                 # even if no files are added to the archive
                 self._didModify = True
-        else:
+            elif key == 'a':
+                try:
+                    # See if file is a zip file
+                    self._RealGetContents()
+                    # seek to start of directory and overwrite
+                    self.fp.seek(self.start_dir, 0)
+                except BadZipFile:
+                    # file is not a zip file, just append
+                    self.fp.seek(0, 2)
+
+                    # set the modified flag so central directory gets written
+                    # even if no files are added to the archive
+                    self._didModify = True
+            else:
+                raise RuntimeError('Mode must be "r", "w" or "a"')
+        except:
+            fp = self.fp
+            self.fp = None
             if not self._filePassed:
-                self.fp.close()
-                self.fp = None
-            raise RuntimeError('Mode must be "r", "w" or "a"')
+                fp.close()
+            raise
 
     def __enter__(self):
         return self
@@ -937,17 +941,6 @@
     def __exit__(self, type, value, traceback):
         self.close()
 
-    def _GetContents(self):
-        """Read the directory, making sure we close the file if the format
-        is bad."""
-        try:
-            self._RealGetContents()
-        except BadZipFile:
-            if not self._filePassed:
-                self.fp.close()
-                self.fp = None
-            raise
-
     def _RealGetContents(self):
         """Read in the table of contents for the ZIP file."""
         fp = self.fp
@@ -1049,9 +1042,9 @@
             try:
                 # Read by chunks, to avoid an OverflowError or a
                 # MemoryError with very large embedded files.
-                f = self.open(zinfo.filename, "r")
-                while f.read(chunk_size):     # Check CRC-32
-                    pass
+                with self.open(zinfo.filename, "r") as f:
+                    while f.read(chunk_size):     # Check CRC-32
+                        pass
             except BadZipFile:
                 return zinfo.filename
 
@@ -1113,84 +1106,78 @@
         else:
             zef_file = io.open(self.filename, 'rb')
 
-        # Make sure we have an info object
-        if isinstance(name, ZipInfo):
-            # 'name' is already an info object
-            zinfo = name
-        else:
-            # Get info object for name
-            try:
+        try:
+            # Make sure we have an info object
+            if isinstance(name, ZipInfo):
+                # 'name' is already an info object
+                zinfo = name
+            else:
+                # Get info object for name
                 zinfo = self.getinfo(name)
-            except KeyError:
-                if not self._filePassed:
-                    zef_file.close()
-                raise
-        zef_file.seek(zinfo.header_offset, 0)
+            zef_file.seek(zinfo.header_offset, 0)
 
-        # Skip the file header:
-        fheader = zef_file.read(sizeFileHeader)
-        if fheader[0:4] != stringFileHeader:
-            raise BadZipFile("Bad magic number for file header")
+            # Skip the file header:
+            fheader = zef_file.read(sizeFileHeader)
+            if fheader[0:4] != stringFileHeader:
+                raise BadZipFile("Bad magic number for file header")
 
-        fheader = struct.unpack(structFileHeader, fheader)
-        fname = zef_file.read(fheader[_FH_FILENAME_LENGTH])
-        if fheader[_FH_EXTRA_FIELD_LENGTH]:
-            zef_file.read(fheader[_FH_EXTRA_FIELD_LENGTH])
+            fheader = struct.unpack(structFileHeader, fheader)
+            fname = zef_file.read(fheader[_FH_FILENAME_LENGTH])
+            if fheader[_FH_EXTRA_FIELD_LENGTH]:
+                zef_file.read(fheader[_FH_EXTRA_FIELD_LENGTH])
 
-        if zinfo.flag_bits & 0x20:
-            # Zip 2.7: compressed patched data
-            raise NotImplementedError("compressed patched data (flag bit 5)")
+            if zinfo.flag_bits & 0x20:
+                # Zip 2.7: compressed patched data
+                raise NotImplementedError("compressed patched data (flag bit 5)")
 
-        if zinfo.flag_bits & 0x40:
-            # strong encryption
-            raise NotImplementedError("strong encryption (flag bit 6)")
+            if zinfo.flag_bits & 0x40:
+                # strong encryption
+                raise NotImplementedError("strong encryption (flag bit 6)")
 
-        if zinfo.flag_bits & 0x800:
-            # UTF-8 filename
-            fname_str = fname.decode("utf-8")
-        else:
-            fname_str = fname.decode("cp437")
+            if zinfo.flag_bits & 0x800:
+                # UTF-8 filename
+                fname_str = fname.decode("utf-8")
+            else:
+                fname_str = fname.decode("cp437")
 
-        if fname_str != zinfo.orig_filename:
+            if fname_str != zinfo.orig_filename:
+                raise BadZipFile(
+                    'File name in directory %r and header %r differ.'
+                    % (zinfo.orig_filename, fname))
+
+            # check for encrypted flag & handle password
+            is_encrypted = zinfo.flag_bits & 0x1
+            zd = None
+            if is_encrypted:
+                if not pwd:
+                    pwd = self.pwd
+                if not pwd:
+                    raise RuntimeError("File %s is encrypted, password "
+                                       "required for extraction" % name)
+
+                zd = _ZipDecrypter(pwd)
+                # The first 12 bytes in the cypher stream is an encryption header
+                #  used to strengthen the algorithm. The first 11 bytes are
+                #  completely random, while the 12th contains the MSB of the CRC,
+                #  or the MSB of the file time depending on the header type
+                #  and is used to check the correctness of the password.
+                header = zef_file.read(12)
+                h = list(map(zd, header[0:12]))
+                if zinfo.flag_bits & 0x8:
+                    # compare against the file type from extended local headers
+                    check_byte = (zinfo._raw_time >> 8) & 0xff
+                else:
+                    # compare against the CRC otherwise
+                    check_byte = (zinfo.CRC >> 24) & 0xff
+                if h[11] != check_byte:
+                    raise RuntimeError("Bad password for file", name)
+
+            return ZipExtFile(zef_file, mode, zinfo, zd,
+                              close_fileobj=not self._filePassed)
+        except:
             if not self._filePassed:
                 zef_file.close()
-            raise BadZipFile(
-                  'File name in directory %r and header %r differ.'
-                  % (zinfo.orig_filename, fname))
-
-        # check for encrypted flag & handle password
-        is_encrypted = zinfo.flag_bits & 0x1
-        zd = None
-        if is_encrypted:
-            if not pwd:
-                pwd = self.pwd
-            if not pwd:
-                if not self._filePassed:
-                    zef_file.close()
-                raise RuntimeError("File %s is encrypted, "
-                                   "password required for extraction" % name)
-
-            zd = _ZipDecrypter(pwd)
-            # The first 12 bytes in the cypher stream is an encryption header
-            #  used to strengthen the algorithm. The first 11 bytes are
-            #  completely random, while the 12th contains the MSB of the CRC,
-            #  or the MSB of the file time depending on the header type
-            #  and is used to check the correctness of the password.
-            header = zef_file.read(12)
-            h = list(map(zd, header[0:12]))
-            if zinfo.flag_bits & 0x8:
-                # compare against the file type from extended local headers
-                check_byte = (zinfo._raw_time >> 8) & 0xff
-            else:
-                # compare against the CRC otherwise
-                check_byte = (zinfo.CRC >> 24) & 0xff
-            if h[11] != check_byte:
-                if not self._filePassed:
-                    zef_file.close()
-                raise RuntimeError("Bad password for file", name)
-
-        return ZipExtFile(zef_file, mode, zinfo, zd,
-                          close_fileobj=not self._filePassed)
+            raise
 
     def extract(self, member, path=None, pwd=None):
         """Extract a member from the archive to the current working directory,
@@ -1247,11 +1234,9 @@
                 os.mkdir(targetpath)
             return targetpath
 
-        source = self.open(member, pwd=pwd)
-        target = open(targetpath, "wb")
-        shutil.copyfileobj(source, target)
-        source.close()
-        target.close()
+        with self.open(member, pwd=pwd) as source, \
+             open(targetpath, "wb") as target:
+            shutil.copyfileobj(source, target)
 
         return targetpath
 
@@ -1412,105 +1397,107 @@
         if self.fp is None:
             return
 
-        if self.mode in ("w", "a") and self._didModify: # write ending records
-            count = 0
-            pos1 = self.fp.tell()
-            for zinfo in self.filelist:         # write central directory
-                count = count + 1
-                dt = zinfo.date_time
-                dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2]
-                dostime = dt[3] << 11 | dt[4] << 5 | (dt[5] // 2)
-                extra = []
-                if zinfo.file_size > ZIP64_LIMIT \
-                        or zinfo.compress_size > ZIP64_LIMIT:
-                    extra.append(zinfo.file_size)
-                    extra.append(zinfo.compress_size)
-                    file_size = 0xffffffff
-                    compress_size = 0xffffffff
-                else:
-                    file_size = zinfo.file_size
-                    compress_size = zinfo.compress_size
+        try:
+            if self.mode in ("w", "a") and self._didModify: # write ending records
+                count = 0
+                pos1 = self.fp.tell()
+                for zinfo in self.filelist:         # write central directory
+                    count = count + 1
+                    dt = zinfo.date_time
+                    dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2]
+                    dostime = dt[3] << 11 | dt[4] << 5 | (dt[5] // 2)
+                    extra = []
+                    if zinfo.file_size > ZIP64_LIMIT \
+                            or zinfo.compress_size > ZIP64_LIMIT:
+                        extra.append(zinfo.file_size)
+                        extra.append(zinfo.compress_size)
+                        file_size = 0xffffffff
+                        compress_size = 0xffffffff
+                    else:
+                        file_size = zinfo.file_size
+                        compress_size = zinfo.compress_size
 
-                if zinfo.header_offset > ZIP64_LIMIT:
-                    extra.append(zinfo.header_offset)
-                    header_offset = 0xffffffff
-                else:
-                    header_offset = zinfo.header_offset
+                    if zinfo.header_offset > ZIP64_LIMIT:
+                        extra.append(zinfo.header_offset)
+                        header_offset = 0xffffffff
+                    else:
+                        header_offset = zinfo.header_offset
 
-                extra_data = zinfo.extra
-                min_version = 0
-                if extra:
-                    # Append a ZIP64 field to the extra's
-                    extra_data = struct.pack(
-                            '<HH' + 'Q'*len(extra),
-                            1, 8*len(extra), *extra) + extra_data
+                    extra_data = zinfo.extra
+                    min_version = 0
+                    if extra:
+                        # Append a ZIP64 field to the extra's
+                        extra_data = struct.pack(
+                                '<HH' + 'Q'*len(extra),
+                                1, 8*len(extra), *extra) + extra_data
 
-                    min_version = ZIP64_VERSION
+                        min_version = ZIP64_VERSION
 
-                if zinfo.compress_type == ZIP_BZIP2:
-                    min_version = max(BZIP2_VERSION, min_version)
-                elif zinfo.compress_type == ZIP_LZMA:
-                    min_version = max(LZMA_VERSION, min_version)
+                    if zinfo.compress_type == ZIP_BZIP2:
+                        min_version = max(BZIP2_VERSION, min_version)
+                    elif zinfo.compress_type == ZIP_LZMA:
+                        min_version = max(LZMA_VERSION, min_version)
 
-                extract_version = max(min_version, zinfo.extract_version)
-                create_version = max(min_version, zinfo.create_version)
-                try:
-                    filename, flag_bits = zinfo._encodeFilenameFlags()
-                    centdir = struct.pack(structCentralDir,
-                        stringCentralDir, create_version,
-                        zinfo.create_system, extract_version, zinfo.reserved,
-                        flag_bits, zinfo.compress_type, dostime, dosdate,
-                        zinfo.CRC, compress_size, file_size,
-                        len(filename), len(extra_data), len(zinfo.comment),
-                        0, zinfo.internal_attr, zinfo.external_attr,
-                        header_offset)
-                except DeprecationWarning:
-                    print((structCentralDir, stringCentralDir, create_version,
-                        zinfo.create_system, extract_version, zinfo.reserved,
-                        zinfo.flag_bits, zinfo.compress_type, dostime, dosdate,
-                        zinfo.CRC, compress_size, file_size,
-                        len(zinfo.filename), len(extra_data), len(zinfo.comment),
-                        0, zinfo.internal_attr, zinfo.external_attr,
-                        header_offset), file=sys.stderr)
-                    raise
-                self.fp.write(centdir)
-                self.fp.write(filename)
-                self.fp.write(extra_data)
-                self.fp.write(zinfo.comment)
+                    extract_version = max(min_version, zinfo.extract_version)
+                    create_version = max(min_version, zinfo.create_version)
+                    try:
+                        filename, flag_bits = zinfo._encodeFilenameFlags()
+                        centdir = struct.pack(structCentralDir,
+                            stringCentralDir, create_version,
+                            zinfo.create_system, extract_version, zinfo.reserved,
+                            flag_bits, zinfo.compress_type, dostime, dosdate,
+                            zinfo.CRC, compress_size, file_size,
+                            len(filename), len(extra_data), len(zinfo.comment),
+                            0, zinfo.internal_attr, zinfo.external_attr,
+                            header_offset)
+                    except DeprecationWarning:
+                        print((structCentralDir, stringCentralDir, create_version,
+                            zinfo.create_system, extract_version, zinfo.reserved,
+                            zinfo.flag_bits, zinfo.compress_type, dostime, dosdate,
+                            zinfo.CRC, compress_size, file_size,
+                            len(zinfo.filename), len(extra_data), len(zinfo.comment),
+                            0, zinfo.internal_attr, zinfo.external_attr,
+                            header_offset), file=sys.stderr)
+                        raise
+                    self.fp.write(centdir)
+                    self.fp.write(filename)
+                    self.fp.write(extra_data)
+                    self.fp.write(zinfo.comment)
 
-            pos2 = self.fp.tell()
-            # Write end-of-zip-archive record
-            centDirCount = count
-            centDirSize = pos2 - pos1
-            centDirOffset = pos1
-            if (centDirCount >= ZIP_FILECOUNT_LIMIT or
-                centDirOffset > ZIP64_LIMIT or
-                centDirSize > ZIP64_LIMIT):
-                # Need to write the ZIP64 end-of-archive records
-                zip64endrec = struct.pack(
-                        structEndArchive64, stringEndArchive64,
-                        44, 45, 45, 0, 0, centDirCount, centDirCount,
-                        centDirSize, centDirOffset)
-                self.fp.write(zip64endrec)
+                pos2 = self.fp.tell()
+                # Write end-of-zip-archive record
+                centDirCount = count
+                centDirSize = pos2 - pos1
+                centDirOffset = pos1
+                if (centDirCount >= ZIP_FILECOUNT_LIMIT or
+                    centDirOffset > ZIP64_LIMIT or
+                    centDirSize > ZIP64_LIMIT):
+                    # Need to write the ZIP64 end-of-archive records
+                    zip64endrec = struct.pack(
+                            structEndArchive64, stringEndArchive64,
+                            44, 45, 45, 0, 0, centDirCount, centDirCount,
+                            centDirSize, centDirOffset)
+                    self.fp.write(zip64endrec)
 
-                zip64locrec = struct.pack(
-                        structEndArchive64Locator,
-                        stringEndArchive64Locator, 0, pos2, 1)
-                self.fp.write(zip64locrec)
-                centDirCount = min(centDirCount, 0xFFFF)
-                centDirSize = min(centDirSize, 0xFFFFFFFF)
-                centDirOffset = min(centDirOffset, 0xFFFFFFFF)
+                    zip64locrec = struct.pack(
+                            structEndArchive64Locator,
+                            stringEndArchive64Locator, 0, pos2, 1)
+                    self.fp.write(zip64locrec)
+                    centDirCount = min(centDirCount, 0xFFFF)
+                    centDirSize = min(centDirSize, 0xFFFFFFFF)
+                    centDirOffset = min(centDirOffset, 0xFFFFFFFF)
 
-            endrec = struct.pack(structEndArchive, stringEndArchive,
-                                 0, 0, centDirCount, centDirCount,
-                                 centDirSize, centDirOffset, len(self._comment))
-            self.fp.write(endrec)
-            self.fp.write(self._comment)
-            self.fp.flush()
-
-        if not self._filePassed:
-            self.fp.close()
-        self.fp = None
+                endrec = struct.pack(structEndArchive, stringEndArchive,
+                                    0, 0, centDirCount, centDirCount,
+                                    centDirSize, centDirOffset, len(self._comment))
+                self.fp.write(endrec)
+                self.fp.write(self._comment)
+                self.fp.flush()
+        finally:
+            fp = self.fp
+            self.fp = None
+            if not self._filePassed:
+                fp.close()
 
 
 class PyZipFile(ZipFile):
@@ -1677,16 +1664,15 @@
         if len(args) != 2:
             print(USAGE)
             sys.exit(1)
-        zf = ZipFile(args[1], 'r')
-        zf.printdir()
-        zf.close()
+        with ZipFile(args[1], 'r') as zf:
+            zf.printdir()
 
     elif args[0] == '-t':
         if len(args) != 2:
             print(USAGE)
             sys.exit(1)
-        zf = ZipFile(args[1], 'r')
-        badfile = zf.testzip()
+        with ZipFile(args[1], 'r') as zf:
+            badfile = zf.testzip()
         if badfile:
             print("The following enclosed file is corrupted: {!r}".format(badfile))
         print("Done testing")
@@ -1696,20 +1682,19 @@
             print(USAGE)
             sys.exit(1)
 
-        zf = ZipFile(args[1], 'r')
-        out = args[2]
-        for path in zf.namelist():
-            if path.startswith('./'):
-                tgt = os.path.join(out, path[2:])
-            else:
-                tgt = os.path.join(out, path)
+        with ZipFile(args[1], 'r') as zf:
+            out = args[2]
+            for path in zf.namelist():
+                if path.startswith('./'):
+                    tgt = os.path.join(out, path[2:])
+                else:
+                    tgt = os.path.join(out, path)
 
-            tgtdir = os.path.dirname(tgt)
-            if not os.path.exists(tgtdir):
-                os.makedirs(tgtdir)
-            with open(tgt, 'wb') as fp:
-                fp.write(zf.read(path))
-        zf.close()
+                tgtdir = os.path.dirname(tgt)
+                if not os.path.exists(tgtdir):
+                    os.makedirs(tgtdir)
+                with open(tgt, 'wb') as fp:
+                    fp.write(zf.read(path))
 
     elif args[0] == '-c':
         if len(args) < 3:
@@ -1725,11 +1710,9 @@
                             os.path.join(path, nm), os.path.join(zippath, nm))
             # else: ignore
 
-        zf = ZipFile(args[1], 'w', allowZip64=True)
-        for src in args[2:]:
-            addToZip(zf, src, os.path.basename(src))
-
-        zf.close()
+        with ZipFile(args[1], 'w', allowZip64=True) as zf:
+            for src in args[2:]:
+                addToZip(zf, src, os.path.basename(src))
 
 if __name__ == "__main__":
     main()
diff -r bd8afb90ebf2 Makefile.pre.in
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -27,6 +27,9 @@
 VERSION=	@VERSION@
 srcdir=		@srcdir@
 VPATH=		@srcdir@
+abs_srcdir=	@abs_srcdir@
+abs_builddir=	@abs_builddir@
+
 
 CC=		@CC@
 CXX=		@CXX@
@@ -66,6 +69,7 @@
 # Compiler options
 OPT=		@OPT@
 BASECFLAGS=	@BASECFLAGS@
+BASECPPFLAGS=	@BASECPPFLAGS@
 CONFIGURE_CFLAGS=	@CFLAGS@
 CONFIGURE_CPPFLAGS=	@CPPFLAGS@
 CONFIGURE_LDFLAGS=	@LDFLAGS@
@@ -76,7 +80,7 @@
 # Both CPPFLAGS and LDFLAGS need to contain the shell's value for setup.py to
 # be able to build extension modules using the directories specified in the
 # environment variables
-PY_CPPFLAGS=	-I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS) $(CPPFLAGS)
+PY_CPPFLAGS=	$(BASECPPFLAGS) -I. -IInclude -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS) $(CPPFLAGS)
 PY_LDFLAGS=	$(CONFIGURE_LDFLAGS) $(LDFLAGS)
 NO_AS_NEEDED=	@NO_AS_NEEDED@
 LDLAST=		@LDLAST@
@@ -229,8 +233,8 @@
 
 ##########################################################################
 # Grammar
-GRAMMAR_H=	$(srcdir)/Include/graminit.h
-GRAMMAR_C=	$(srcdir)/Python/graminit.c
+GRAMMAR_H=	Include/graminit.h
+GRAMMAR_C=	Python/graminit.c
 GRAMMAR_INPUT=	$(srcdir)/Grammar/Grammar
 
 
@@ -296,21 +300,21 @@
 
 ##########################################################################
 # AST
-AST_H_DIR=	$(srcdir)/Include
+AST_H_DIR=	Include
 AST_H=		$(AST_H_DIR)/Python-ast.h
-AST_C_DIR=	$(srcdir)/Python
+AST_C_DIR=	Python
 AST_C=		$(AST_C_DIR)/Python-ast.c
 AST_ASDL=	$(srcdir)/Parser/Python.asdl
 
 ASDLGEN_FILES=	$(srcdir)/Parser/asdl.py $(srcdir)/Parser/asdl_c.py
 # XXX Note that a build now requires Python exist before the build starts
-ASDLGEN=	@DISABLE_ASDLGEN@ $(srcdir)/Parser/asdl_c.py
+ASDLGEN=	@ASDLGEN@ $(srcdir)/Parser/asdl_c.py
 
 ##########################################################################
 # Python
 
 OPCODETARGETS_H= \
-		$(srcdir)/Python/opcode_targets.h
+		Python/opcode_targets.h
 
 OPCODETARGETGEN= \
 		$(srcdir)/Python/makeopcodetargets.py
@@ -410,8 +414,6 @@
 		Objects/unicodectype.o \
 		Objects/weakrefobject.o
 
-SYSCONFIGDATA=$(srcdir)/Lib/_sysconfigdata.py
-
 ##########################################################################
 # objects that get linked into the Python library
 LIBRARY_OBJS_OMIT_FROZEN=	\
@@ -432,7 +434,7 @@
 
 # Default target
 all:		build_all
-build_all:	$(BUILDPYTHON) $(SYSCONFIGDATA) oldsharedmods sharedmods gdbhooks Modules/_testembed
+build_all:	$(BUILDPYTHON) oldsharedmods sharedmods gdbhooks Modules/_testembed
 
 # Compile a binary with gcc profile guided optimization.
 profile-opt:
@@ -466,16 +468,24 @@
 $(BUILDPYTHON):	Modules/python.o $(LIBRARY) $(LDLIBRARY) $(PY3LIBRARY)
 	$(LINKCC) $(PY_LDFLAGS) $(LINKFORSHARED) -o $@ Modules/python.o $(BLDLIBRARY) $(LIBS) $(MODLIBS) $(SYSLIBS) $(LDLAST)
 
-platform: $(BUILDPYTHON) $(SYSCONFIGDATA)
+platform: $(BUILDPYTHON) pybuilddir.txt
 	$(RUNSHARED) $(PYTHON_FOR_BUILD) -c 'import sys ; from sysconfig import get_platform ; print(get_platform()+"-"+sys.version[0:3])' >platform
 
-# Generate the sysconfig build-time data
-$(SYSCONFIGDATA): $(BUILDPYTHON)
+# Create build directory and generate the sysconfig build-time data there.
+# pybuilddir.txt contains the name of the build dir and is used for
+# sys.path fixup -- see Modules/getpath.c.
+pybuilddir.txt: $(BUILDPYTHON)
 	$(RUNSHARED) $(PYTHON_FOR_BUILD) -S -m sysconfig --generate-posix-vars
 
 # Build the shared modules
-sharedmods: $(BUILDPYTHON) $(SYSCONFIGDATA)
-	case $$MAKEFLAGS in *s*) quiet=-q; esac; \
+# Under GNU make, MAKEFLAGS are sorted and normalized; the 's' for
+# -s, --silent or --quiet is always the first char.
+# Under BSD make, MAKEFLAGS might be " -s -v x=y".
+sharedmods: $(BUILDPYTHON) pybuilddir.txt
+	@case "$$MAKEFLAGS" in \
+	    *\ -s*|s*) quiet="-q";; \
+	    *) quiet="";; \
+	esac; \
 	$(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' \
 		$(PYTHON_FOR_BUILD) $(srcdir)/setup.py $$quiet build
 
@@ -660,9 +670,11 @@
 Parser/pgenmain.o:	$(srcdir)/Include/parsetok.h
 
 $(AST_H): $(AST_ASDL) $(ASDLGEN_FILES)
+	$(MKDIR_P) $(AST_H_DIR)
 	$(ASDLGEN) -h $(AST_H_DIR) $(AST_ASDL)
 
 $(AST_C): $(AST_H) $(AST_ASDL) $(ASDLGEN_FILES)
+	$(MKDIR_P) $(AST_C_DIR)
 	$(ASDLGEN) -c $(AST_C_DIR) $(AST_ASDL)
 
 Python/compile.o Python/symtable.o Python/ast.o: $(GRAMMAR_H) $(AST_H)
@@ -718,11 +730,11 @@
 Python/formatter_unicode.o: $(srcdir)/Python/formatter_unicode.c \
 				$(BYTESTR_DEPS)
 
-Python/frozen.o: $(srcdir)/Python/importlib.h
+Python/frozen.o: Python/importlib.h
 
-Objects/typeobject.o: $(srcdir)/Objects/typeslots.inc
-$(srcdir)/Objects/typeslots.inc: $(srcdir)/Include/typeslots.h $(srcdir)/Objects/typeslots.py
-	$(PYTHON) $(srcdir)/Objects/typeslots.py < $(srcdir)/Include/typeslots.h > $(srcdir)/Objects/typeslots.inc
+Objects/typeobject.o: Objects/typeslots.inc
+Objects/typeslots.inc: $(srcdir)/Include/typeslots.h $(srcdir)/Objects/typeslots.py
+	$(PYTHON) $(srcdir)/Objects/typeslots.py < $(srcdir)/Include/typeslots.h > Objects/typeslots.inc
 
 ############################################################################
 # Header files
@@ -1036,7 +1048,7 @@
 		else	true; \
 		fi; \
 	done
-	@for i in $(srcdir)/Lib/*.py ; \
+	@for i in $(srcdir)/Lib/*.py `cat pybuilddir.txt`/_sysconfigdata.py; \
 	do \
 		if test -x $$i; then \
 			$(INSTALL_SCRIPT) $$i $(DESTDIR)$(LIBDEST); \
@@ -1196,6 +1208,8 @@
 		--install-scripts=$(BINDIR) \
 		--install-platlib=$(DESTSHARED) \
 		--root=$(DESTDIR)/
+	-rm $(DESTDIR)$(DESTSHARED)/_sysconfigdata.py
+	-rm -r $(DESTDIR)$(DESTSHARED)/__pycache__
 
 # Here are a couple of targets for MacOSX again, to install a full
 # framework-based Python. frameworkinstall installs everything, the
@@ -1341,9 +1355,10 @@
 	find . -name '*.s[ol]' -exec rm -f {} ';'
 	find . -name '*.so.[0-9]*.[0-9]*' -exec rm -f {} ';'
 	find build -name 'fficonfig.h' -exec rm -f {} ';' || true
-	find build -name 'fficonfig.py' -exec rm -f {} ';' || true
+	find build -name '*.py' -exec rm -f {} ';' || true
+	find build -name '*.py[co]' -exec rm -f {} ';' || true
+	-rm -f pybuilddir.txt
 	-rm -f Lib/lib2to3/*Grammar*.pickle
-	-rm -f $(SYSCONFIGDATA)
 	-rm -f Modules/_testembed Modules/_freeze_importlib
 
 profile-removal:
@@ -1367,7 +1382,6 @@
 		Modules/Setup Modules/Setup.local Modules/Setup.config \
 		Modules/ld_so_aix Modules/python.exp Misc/python.pc
 	-rm -f python*-gdb.py
-	-rm -f pybuilddir.txt
 	find $(srcdir) '(' -name '*.fdc' -o -name '*~' \
 			   -o -name '[@,#]*' -o -name '*.old' \
 			   -o -name '*.orig' -o -name '*.rej' \
diff -r bd8afb90ebf2 Misc/ACKS
--- a/Misc/ACKS
+++ b/Misc/ACKS
@@ -11,6 +11,8 @@
 PS: In the standard Python distribution, this file is encoded in UTF-8
 and the list is in rough alphabetical order by last names.
 
+Aahz
+Michael Abbott
 Rajiv Abraham
 David Abrahams
 Marc Abramowitz
@@ -22,20 +24,25 @@
 Nir Aides
 Yaniv Aknin
 Jyrki Alakuijala
+Steve Alexander
+Fred Allen
 Ray Allen
 Billy G. Allie
 Kevin Altis
 Joe Amenta
+A. Amoroso
 Mark Anacker
 Shashwat Anand
 Anders Andersen
 John Anderson
+Pehr Anderson
 Erik Andersén
 Oliver Andrich
 Ross Andrus
 Juancarlo Añez
 Jérémy Anger
 Jon Anglin
+Heidi Annexstad
 Éric Araujo
 Alicia Arlen
 Jason Asbahr
@@ -44,6 +51,7 @@
 Aymeric Augustin
 John Aycock
 Donovan Baarda
+Arne Babenhauserheide
 Attila Babo
 Marcin Bachry
 Alfonso Baciero
@@ -52,8 +60,10 @@
 Greg Ball
 Luigi Ballabio
 Jeff Balogh
+Manuel Balsera
 Matt Bandy
 Michael J. Barber
+Daniel Barclay
 Nicolas Bareil
 Chris Barker
 Anton Barkovsky
@@ -64,8 +74,10 @@
 Cesar Eduardo Barros
 Des Barry
 Ulf Bartelt
+Don Bashford
 Pior Bastida
 Nick Bastin
+Ned Batchelder
 Jeff Bauer
 Michael R Bax
 Anthony Baxter
@@ -83,12 +95,15 @@
 Thomas Bellman
 Alexander “Саша” Belopolsky
 Eli Bendersky
+David Benjamin
 Andrew Bennetts
 Andy Bensky
+Bennett Benson
 Ezra Berch
 Michel Van den Bergh
 Julian Berman
 Brice Berna
+Olivier Bernard
 Eric Beser
 Steven Bethard
 Stephen Bevan
@@ -100,6 +115,7 @@
 Philippe Biondi
 Stuart Bishop
 Roy Bixler
+Jonathan Black
 Renaud Blanch
 Mike Bland
 Martin Bless
@@ -109,6 +125,7 @@
 Finn Bock
 Paul Boddie
 Matthew Boedicker
+Robin Boerdijk
 David Bolen
 Gawain Bolton
 Forest Bond
@@ -120,7 +137,9 @@
 Eric Bouck
 Thierry Bousch
 Sebastian Boving
+Michal Bozon
 Jeff Bradberry
+Aaron Brancotti
 Monty Brandenberg
 Georg Brandl
 Christopher Brannon
@@ -130,6 +149,7 @@
 Dave Brennan
 Tom Bridgman
 Anthony Briggs
+Keith Briggs
 Tobias Brink
 Richard Brodie
 Michael Broghton
@@ -140,6 +160,7 @@
 Oleg Broytmann
 Dave Brueck
 Francisco Martín Brugué
+Ian Bruntlett
 Floris Bruynooghe
 Stan Bubrouski
 Erik de Bueger
@@ -165,8 +186,10 @@
 Lorenzo M. Catucci
 Donn Cave
 Charles Cazabon
+Jesús Cea Avión
 Per Cederqvist
 Matej Cepl
+Carl Cerecke
 Octavian Cerna
 Pascal Chambon
 John Chandler
@@ -186,8 +209,10 @@
 Anders Chrigström
 Tom Christiansen
 Vadim Chugunov
+Mauro Cicognini
 David Cinege
 Craig Citro
+Gilles Civario
 Chris Clark
 Mike Clarkson
 Andrew Clegg
@@ -217,13 +242,16 @@
 Scott Cotton
 Greg Couch
 David Cournapeau
+Julien Courteau
 Steve Cousins
 Alex Coventry
 Matthew Dixon Cowles
 Ryan Coyner
 Christopher A. Craig
+Jeremy Craven
 Laura Creighton
 Simon Cross
+Felipe Cruz
 Drew Csillag
 Joaquin Cuenca Abela
 John Cugini
@@ -249,6 +277,7 @@
 Konrad Delong
 Erik Demaine
 John Dennis
+L. Peter Deutsch
 Roger Dev
 Philippe Devalkeneer
 Raghuram Devarakonda
@@ -265,6 +294,7 @@
 Josip Djolonga
 Jaromir Dolecek
 Ismail Donmez
+Robert Donohue
 Marcos Donolo
 Dima Dorfman
 Yves Dorfsman
@@ -274,6 +304,7 @@
 Derk Drukker
 John DuBois
 Paul Dubois
+Jacques Ducasse
 Graham Dumpleton
 Quinn Dunkan
 Robin Dunn
@@ -282,6 +313,7 @@
 Andy Dustman
 Gary Duzan
 Eugene Dvurechenski
+Josip Dzolonga
 Maxim Dzumanenko
 Walter Dörwald
 Hans Eckardt
@@ -327,19 +359,23 @@
 Sebastian Fernandez
 Florian Festi
 John Feuerstein
+Carl Feynman
 Vincent Fiack
 Tomer Filiba
 Jeffrey Finkelstein
 Russell Finn
+Dan Finnie
 Nils Fischbeck
 Frederik Fix
 Matt Fleming
 Hernán Martínez Foffani
+Arnaud Fontaine
 Michael Foord
 Amaury Forgeot d'Arc
 Doug Fort
 John Fouhy
 Andrew Francis
+Stefan Franke
 Martin Franklin
 Bruce Frederiksen
 Robin Friedrich
@@ -360,6 +396,7 @@
 Lele Gaifax
 Santiago Gala
 Yitzchak Gale
+Matthew Gallagher
 Quentin Gallet-Gilles
 Riccardo Attilio Galli
 Raymund Galvin
@@ -376,25 +413,32 @@
 Gabriel Genellina
 Christos Georgiou
 Ben Gertzfield
+Nadim Ghaznavi
 Dinu Gherman
 Jonathan Giddy
 Johannes Gijsbers
 Michael Gilfix
 Yannick Gingras
+Matt Giuca
 Michael Goderbauer
 Christoph Gohlke
 Tim Golden
 Guilherme Gonçalves
 Tiago Gonçalves
 Chris Gonnerman
+Shelley Gooch
 David Goodger
 Hans de Graaff
+Nathaniel Gray
 Eddy De Greef
+Grant Griffin
+Andrea Griffini
 Duncan Grisby
 Fabian Groffen
 Eric Groo
 Dag Gruneau
 Filip Gruszczyński
+Thomas Guettler
 Michael Guravage
 Lars Gustäbel
 Thomas Güttler
@@ -410,7 +454,9 @@
 Jesse Hallio
 Jun Hamano
 Alexandre Hamelin
+Anders Hammarquist
 Mark Hammond
+Harald Hanche-Olsen
 Manus Hand
 Milton L. Hankins
 Stephen Hansen
@@ -420,8 +466,11 @@
 Jason Harper
 Brian Harring
 Jonathan Hartley
+Travis B. Hartwell
 Larry Hastings
+Tim Hatch
 Shane Hathaway
+Janko Hauser
 Rycharde Hawkes
 Ben Hayden
 Jochen Hayek
@@ -451,10 +500,13 @@
 Joerg-Cyril Hoehle
 Gregor Hoffleit
 Chris Hoffman
+Stefan Hoffmeister
 Albert Hofkamp
 Tomas Hoger
 Jonathan Hogg
+Steve Holden
 Akintayo Holder
+Thomas Holenstein
 Gerrit Holl
 Shane Holloway
 Rune Holm
@@ -494,6 +546,7 @@
 Tony Ingraldi
 John Interrante
 Bob Ippolito
+Roger Irwin
 Atsuo Ishimoto
 Adam Jackson
 Ben Jackson
@@ -511,12 +564,16 @@
 Julien Jehannet
 Drew Jenkins
 Flemming Kjær Jensen
+Philip H. Jensen
+Philip Jenvey
 MunSic Jeong
 Chris Jerdonek
 Jim Jewett
+Pedro Diaz Jimenez
 Orjan Johansen
 Fredrik Johansson
 Gregory K. Johnson
+Kent Johnson
 Simon Johnston
 Matt Joiner
 Thomas Jollans
@@ -541,6 +598,7 @@
 Peter van Kampen
 Rafe Kaplan
 Jacob Kaplan-Moss
+Janne Karila
 Per Øyvind Karlsen
 Lou Kates
 Hiroaki Kawai
@@ -549,16 +607,19 @@
 Dan Kenigsberg
 Randall Kern
 Robert Kern
+Jim Kerr
 Magnus Kessler
 Lawrence Kesteloot
 Vivek Khera
 Mads Kiilerich
 Jason Killen
+Jan Kim
 Taek Joo Kim
 W. Trevor King
 Paul Kippes
 Steve Kirsch
 Sebastian Kirsche
+Kamil Kisiel
 Akira Kitada
 Ron Klatchko
 Reid Kleckner
@@ -574,15 +635,19 @@
 Greg Kochanski
 Damon Kohler
 Marko Kohtala
+Guido Kollerie
 Jacek Konieczny
 Марк Коренберг
 Arkady Koplyarov
+Peter A. Koren
 Vlad Korolev
 Joseph Koshy
+Daniel Kozan
 Jerzy Kozera
 Maksim Kozyarchuk
 Stefan Krah
 Bob Kras
+Sebastian Kreft
 Holger Krekel
 Michael Kremer
 Fabian Kreutz
@@ -591,11 +656,15 @@
 Hannu Krosing
 Andrej Krpic
 Ivan Krstić
+Steven Kryskalla
 Andrew Kuchling
+Dave Kuhlman
 Jon Kuhn
 Vladimir Kushnir
+Erno Kuusela
 Ross Lagerwall
 Cameron Laird
+Thomas Lamb
 Jean-Baptiste "Jiba" Lamy
 Ronan Lamy
 Torsten Landschoff
@@ -619,6 +688,8 @@
 Thomas Lee
 Tennessee Leeuwenburg
 Luc Lefebvre
+Pierre Paul Lefebvre
+Glyph Lefkowitz
 Vincent Legoll
 Kip Lehman
 Joerg Lehmann
@@ -626,7 +697,7 @@
 Petri Lehtinen
 Luke Kenneth Casson Leighton
 Tshepang Lekhonkhobe
-Marc-Andre Lemburg
+Marc-André Lemburg
 John Lenton
 Christopher Tur Lesniewski-Laas
 Alain Leufroy
@@ -638,12 +709,16 @@
 Ross Light
 Shawn Ligocki
 Martin Ligr
+Gediminas Liktaras
 Grant Limberg
 Christopher Lindblad
+Ulf A. Lindgren
 Björn Lindqvist
 Per Lindqvist
 Eric Lindvall
 Gregor Lingl
+Everett Lipman
+Mirko Liss
 Nick Lockwood
 Stephanie Lockwood
 Hugo Lopes Tavares
@@ -661,6 +736,8 @@
 Mikael Lyngvig
 Martin von Löwis
 Guillermo López-Anglada
+Jeff MacDonald
+John Machin
 Andrew I MacIntyre
 Tim MacKenzie
 Nick Maclaren
@@ -671,20 +748,25 @@
 Ken Manheimer
 Vladimir Marangozov
 Colin Marc
+Vincent Marchetti
 David Marek
 Doug Marien
 Sven Marnach
 Alex Martelli
 Anthony Martin
 Owen Martin
+Westley Martínez
 Sébastien Martini
 Sidney San Martín
 Roger Masse
 Nick Mathewson
 Simon Mathieu
+Laura Matson
 Graham Matthews
 Dieter Maurer
+Daniel May
 Arnaud Mazin
+Rebecca McCreary
 Kirk McDonald
 Chris McDonough
 Greg McFarlane
@@ -694,11 +776,13 @@
 Gordon McMillan
 Andrew McNamara
 Caolan McNamara
+Jeff McNeil
 Craig McPheeters
 Lambert Meertens
 Bill van Melle
 Lucas Prado Melo
 Ezio Melotti
+Doug Mennella
 Brian Merrell
 Luke Mewburn
 Carl Meyer
@@ -711,6 +795,7 @@
 Stan Mihai
 Stefan Mihaila
 Aristotelis Mikropoulos
+Paolo Milani
 Chad Miller
 Damien Miller
 Jason V. Miller
@@ -727,9 +812,11 @@
 Skip Montanaro
 Peter Moody
 Paul Moore
+Ross Moore
 Derek Morr
 James A Morrison
 Derek McTavish Mounce
+Alessandro Moura
 Pablo Mouzo
 Mher Movsisyan
 Ruslan Mstoi
@@ -740,6 +827,8 @@
 Neil Muller
 Louis Munro
 R. David Murray
+Matti Mäki
+Dale Nagata
 John Nagle
 Takahiro Nakayama
 Travers Naran
@@ -751,6 +840,7 @@
 Chad Netzer
 Max Neunhöffer
 George Neville-Neil
+Hieu Nguyen
 Johannes Nicolai
 Samuel Nicolary
 Jonathan Niehof
@@ -771,13 +861,16 @@
 John O'Connor
 Kevin O'Connor
 Tim O'Malley
+Zooko O'Whielacronx
 James Oakley
 Jon Oberheide
 Pascal Oberndoerfer
 Jeffrey Ollie
 Adam Olsen
 Grant Olson
+Koray Oner
 Piet van Oostrum
+Tomas Oppelstrup
 Jason Orendorff
 Douglas Orr
 Michele Orrù
@@ -787,6 +880,8 @@
 Michael Otteneder
 R. M. Oudkerk
 Russel Owen
+Joonas Paalasmaa
+Shriphani Palakodety
 Ondrej Palkovsky
 Mike Pall
 Todd R. Palmer
@@ -796,8 +891,11 @@
 Peter Parente
 Alexandre Parenteau
 Dan Parisien
+William Park
 Harri Pasanen
 Gaël Pasgrimaud
+Berker Peksag
+Bo Peng
 Joe Peterson
 Randy Pausch
 Samuele Pedroni
@@ -816,6 +914,7 @@
 Joe Peterson
 Chris Petrilli
 Bjorn Pettersen
+Justin D. Pettit
 Ronny Pfannschmidt
 Geoff Philbrick
 Gavrie Philipson
@@ -838,6 +937,7 @@
 Iustin Pop
 Claudiu Popa
 John Popplewell
+Guillaume Pratte
 Amrit Prem
 Paul Prescod
 Donovan Preston
@@ -856,12 +956,12 @@
 Antti Rasinen
 Sridhar Ratnakumar
 Ysj Ray
-Eric Raymond
+Eric S. Raymond
 Edward K. Ream
 Chris Rebert
 Marc Recht
 John Redford
-Terry Reedy
+Terry J. Reedy
 Gareth Rees
 Steve Reeves
 Lennart Regebro
@@ -883,6 +983,7 @@
 Nicholas Riley
 Jean-Claude Rimbault
 Vlad Riscutia
+Wes Rishel
 Juan M. Bello Rivas
 Davide Rizzo
 Anthony Roach
@@ -903,23 +1004,28 @@
 Erik Rose
 Jim Roskind
 Brian Rosner
+Guido van Rossum
 Just van Rossum
 Hugo van Rossum
 Saskia van Rossum
 Donald Wallace Rouse II
 Liam Routt
+Todd Rovito
 Craig Rowland
 Clinton Roy
 Paul Rubin
 Sam Ruby
 Demur Rumed
 Audun S. Runde
+Eran Rundstein
 Rauli Ruohonen
 Jeff Rush
 Sam Rushing
 Mark Russell
 Rusty Russell
 Nick Russo
+Chris Ryland
+Constantina S.
 Patrick Sabin
 Sébastien Sablé
 Suman Saha
@@ -932,6 +1038,8 @@
 Ilya Sandler
 Mark Sapiro
 Ty Sarna
+Hugh Sasse
+Bob Savage
 Ben Sayer
 sbt
 Marco Scataglini
@@ -947,6 +1055,7 @@
 Michael Schneider
 Peter Schneider-Kamp
 Arvin Schnell
+Scott Schram
 Robin Schreiber
 Chad J. Schroeder
 Sam Schulenburg
@@ -961,13 +1070,17 @@
 Fred Sells
 Jiwon Seo
 Iñigo Serna
+Joakim Sernbrant
 Roger D. Serwy
 Jerry Seutter
+Pete Sevander
 Denis Severson
 Ian Seyer
 Ha Shao
 Mark Shannon
 Richard Shapiro
+Justin Sheehy
+Charlie Shepherd
 Bruce Sherwood
 Alexander Shigin
 Pete Shinners
@@ -975,20 +1088,27 @@
 John W. Shipman
 Joel Shprentz
 Itamar Shtull-Trauring
+Yue Shuaijie
 Eric Siegerman
 Paul Sijben
+SilentGhost
 Tim Silk
+Michael Simcich
+Ionel Simionescu
 Kirill Simonov
 Nathan Paul Simons
 Adam Simpkins
 Janne Sinkkonen
+Ng Pheng Siong
 George Sipe
 J. Sipprell
 Kragen Sitaker
+Michael Sloan
 Christopher Smith
 Eric V. Smith
 Gregory P. Smith
 Mark Smith
+Roy Smith
 Rafal Smotrzyk
 Eric Snow
 Dirk Soede
@@ -997,14 +1117,17 @@
 Edoardo Spadolini
 Clay Spence
 Stefan Sperling
+Nicholas Spies
 Per Spilling
 Joshua Spoerri
 Noah Spurrier
 Nathan Srebro
 RajGopal Srinivasan
+Tage Stabell-Kulo
 Quentin Stafford-Fraser
 Frank Stajano
 Joel Stanley
+Anthony Starks
 Oliver Steele
 Greg Stein
 Baruch Sterin
@@ -1024,6 +1147,8 @@
 Pal Subbiah
 Nathan Sullivan
 Mark Summerfield
+Reuben Sumner
+Marek Šuppa
 Hisao Suzuki
 Kalle Svensson
 Andrew Svetlov
@@ -1054,11 +1179,13 @@
 Oren Tirosh
 Jason Tishler
 Christian Tismer
+Jim Tittsler
 Frank J. Tobin
 Bennett Todd
 R Lindsay Todd
 Eugene Toder
 Erik Tollerud
+Stephen Tonkin
 Matias Torchinsky
 Sandro Tosi
 Richard Townsend
@@ -1068,8 +1195,10 @@
 Matthias Troffaes
 John Tromp
 Jason Trowbridge
+Brent Tubbs
 Anthony Tuininga
 Erno Tukia
+David Turner
 Stephen Turner
 Theodore Turocy
 Bill Tutt
@@ -1080,6 +1209,7 @@
 Daniel Urban
 Michael Urman
 Hector Urtubia
+Ville Vainio
 Andi Vajda
 Case Van Horsen
 Kyle VanderBeek
@@ -1101,6 +1231,7 @@
 Pauli Virtanen
 Frank Visser
 Johannes Vogel
+Martijn Vries
 Sjoerd de Vries
 Niki W. Waibel
 Wojtek Walczak
@@ -1118,8 +1249,10 @@
 Aaron Watters
 Henrik Weber
 Corran Webster
+Glyn Webster
 Stefan Wehr
 Zack Weinberg
+Bob Weiner
 Edward Welbourne
 Cliff Wells
 Rickard Westman
@@ -1132,14 +1265,17 @@
 Gerry Wiener
 Frank Wierzbicki
 Bryce "Zooko" Wilcox-O'Hearn
+Timothy Wild
 Jakub Wilk
 Gerald S. Williams
 Jason Williams
 John Williams
 Sue Williams
+Steven Willis
 Frank Willison
 Greg V. Wilson
 J Derek Wilson
+Paul Winkler
 Jody Winston
 Collin Winter
 Dik Winter
@@ -1155,6 +1291,7 @@
 Dan Wolfe
 Richard Wolff
 Adam Woodbeck
+Steven Work
 Gordon Worley
 Darren Worrall
 Thomas Wouters
@@ -1168,6 +1305,7 @@
 EungJun Yi
 Bob Yodlowski
 Danny Yoo
+Rory Yorke
 George Yoshida
 Masazumi Yoshikawa
 Arnaud Ysmal
@@ -1179,6 +1317,7 @@
 Siebren van der Zee
 Yuxiao Zeng
 Uwe Zessin
+Cheng Zhang
 Kai Zhu
 Tarek Ziadé
 Peter Åstrand
diff -r bd8afb90ebf2 Misc/HISTORY
--- a/Misc/HISTORY
+++ b/Misc/HISTORY
@@ -10,6 +10,5403 @@
 ======================================================================
 
 
+What's New in Python 3.2?
+=========================
+
+*Release date: 20-Feb-2011*
+
+Core and Builtins
+-----------------
+
+- Issue #11249: Fix potential crashes when using the limited API.
+
+Build
+-----
+
+- Issue #11222: Fix non-framework shared library build on Mac OS X.
+
+- Issue #11184: Fix large-file support on AIX.
+
+- Issue #941346: Fix broken shared library build on AIX.
+
+Documentation
+-------------
+
+- Issue #10709: Add updated AIX notes in Misc/README.AIX.
+
+
+What's New in Python 3.2 Release Candidate 3?
+=============================================
+
+*Release date: 13-Feb-2011*
+
+Core and Builtins
+-----------------
+
+- Issue #11134: Add missing fields to typeslots.h.
+
+- Issue #11135: Remove redundant doc field from PyType_Spec.
+
+- Issue #11067: Add PyType_GetFlags, to support PyUnicode_Check in the limited
+  ABI.
+
+- Issue #11118: Fix bogus export of None in python3.dll.
+
+Library
+-------
+
+- Issue #11116: any error during addition of a message to a mailbox now causes a
+  rollback, instead of leaving the mailbox partially modified.
+
+- Issue #11132: Fix passing of "optimize" parameter when recursing in
+  compileall.compile_dir().
+
+- Issue #11110: Fix a potential decref of a NULL in sqlite3.
+
+- Issue #8275: Fix passing of callback arguments with ctypes under Win64.  Patch
+  by Stan Mihai.
+
+Build
+-----
+
+- Issue #11079: The /Applications/Python x.x folder created by the Mac OS X
+  installers now includes a link to the installed documentation and no longer
+  includes an Extras directory.  The Tools directory is now installed in the
+  framework under share/doc.
+
+- Issue #11121: Fix building with --enable-shared.
+
+Tests
+-----
+
+- Issue #10971: test_zipimport_support is once again compatible with the refleak
+  hunter feature of test.regrtest.
+
+
+What's New in Python 3.2 Release Candidate 2?
+=============================================
+
+*Release date: 30-Jan-2011*
+
+Core and Builtins
+-----------------
+
+- Issue #10451: memoryview objects could allow to mutate a readable buffer.
+  Initial patch by Ross Lagerwall.
+
+Library
+-------
+
+- Issue #9124: mailbox now accepts binary input and reads and writes mailbox
+  files in binary mode, using the email package's binary support to parse
+  arbitrary email messages.  StringIO and text file input is deprecated,
+  and string input fails early if non-ASCII characters are used, where
+  previously it would fail when the email was processed in a later step.
+
+- Issue #10845: Mitigate the incompatibility between the multiprocessing
+  module on Windows and the use of package, zipfile or directory execution
+  by special casing main modules that actually *are* called __main__.py.
+
+- Issue #11045: Protect logging call against None argument.
+
+- Issue #11052: Correct IDLE menu accelerators on Mac OS X for Save
+  commands.
+
+- Issue #11053: Fix IDLE "Syntax Error" windows to behave as in 2.x,
+  preventing a confusing hung appearance on OS X with the windows
+  obscured.
+
+- Issue #10940: Workaround an IDLE hang on Mac OS X 10.6 when using the
+  menu accelerators for Open Module, Go to Line, and New Indent Width.
+  The accelerators still work but no longer appear in the menu items.
+
+- Issue #10989: Fix a crash on SSLContext.load_verify_locations(None, True).
+
+- Issue #11020: Command-line pyclbr was broken because of missing 2-to-3
+  conversion.
+
+- Issue #11019: Fixed BytesGenerator so that it correctly handles a Message
+  with a None body.
+
+- Issue #11014: Make 'filter' argument in tarfile.Tarfile.add() into a
+  keyword-only argument.  The preceding positional argument was deprecated,
+  so it made no sense to add filter as a positional argument.
+
+- Issue #11004: Repaired edge case in deque.count().
+
+- Issue #10974: IDLE no longer crashes if its recent files list includes files
+  with non-ASCII characters in their path names.
+
+- Have hashlib.algorithms_available and hashlib.algorithms_guaranteed both
+  return sets instead of one returning a tuple and the other a frozenset.
+
+- Issue #10987: Fix the recursion limit handling in the _pickle module.
+
+- Issue #10983: Fix several bugs making tunnel requests in http.client.
+
+- Issue #10955: zipimport uses ASCII encoding instead of cp437 to decode
+  filenames, at bootstrap, if the codec registry is not ready yet. It is still
+  possible to have non-ASCII filenames using the Unicode flag (UTF-8 encoding)
+  for all file entries in the ZIP file.
+
+- Issue #10949: Improved robustness of rotating file handlers.
+
+- Issue #10955: Fix a potential crash when trying to mmap() a file past its
+  length.  Initial patch by Ross Lagerwall.
+
+- Issue #10898: Allow compiling the posix module when the C library defines
+  a symbol named FSTAT.
+
+- Issue #10980: the HTTP server now encodes headers with iso-8859-1 (latin1)
+  encoding.  This is the preferred encoding of PEP 3333 and the base encoding
+  of HTTP 1.1.
+
+- To match the behaviour of HTTP server, the HTTP client library now also
+  encodes headers with iso-8859-1 (latin1) encoding.  It was already doing
+  that for incoming headers which makes this behaviour now consistent in
+  both incoming and outgoing direction.
+
+- Issue #9509: argparse now properly handles IOErrors raised by
+  argparse.FileType.
+
+- Issue #10961: The new pydoc server now better handles exceptions raised
+  during request handling.
+
+- Issue #10680: Fix mutually exclusive arguments for argument groups in
+  argparse.
+
+Build
+-----
+
+- Issue #11054: Allow Mac OS X installer builds to again work on 10.5 with
+  the system-provided Python.
+
+
+What's New in Python 3.2 Release Candidate 1
+============================================
+
+*Release date: 16-Jan-2011*
+
+Core and Builtins
+-----------------
+
+- Issue #10889: range indexing and slicing now works correctly on ranges with
+  a length that exceeds sys.maxsize.
+
+- Issue #10892: Don't segfault when trying to delete __abstractmethods__ from a
+  class.
+
+- Issue #8020: Avoid a crash where the small objects allocator would read
+  non-Python managed memory while it is being modified by another thread.  Patch
+  by Matt Bandy.
+
+- Issue #10841: On Windows, set the binary mode on stdin, stdout, stderr and all
+  io.FileIO objects (to not translate newlines, \r\n <=> \n).  The Python parser
+  translates newlines (\r\n => \n).
+
+- Remove buffer API from stable ABI for now, see #10181.
+
+- Issue #8651: PyArg_Parse*() functions raise an OverflowError if the file
+  doesn't have PY_SSIZE_T_CLEAN define and the size doesn't fit in an int
+  (length bigger than 2^31-1 bytes).
+
+- Issue #9015, #9611: FileIO.readinto(), FileIO.write(), os.write() and
+  stdprinter.write() clamp the length to INT_MAX on Windows.
+
+- Issue #8278: On Windows and with a NTFS filesystem, os.stat() and os.utime()
+  can now handle dates after 2038.
+
+- Issue #10780: PyErr_SetFromWindowsErrWithFilename() and
+  PyErr_SetExcFromWindowsErrWithFilename() decode the filename from the
+  filesystem encoding instead of UTF-8.
+
+- Issue #10779: PyErr_WarnExplicit() decodes the filename from the filesystem
+  encoding instead of UTF-8.
+
+- Add sys.flags attribute for the new -q command-line option.
+
+- Issue #11506: Trying to assign to a bytes literal should result in a
+  SyntaxError.
+
+Library
+-------
+
+- Issue #10916: mmap should not segfault when a file is mapped using 0 as length
+  and a non-zero offset, and an attempt to read past the end of file is made
+  (IndexError is raised instead).  Patch by Ross Lagerwall.
+
+- Issue #10154, #10090: change the normalization of UTF-8 to "UTF-8" instead
+  of "UTF8" in the locale module as the latter is not supported MacOSX and OpenBSD.
+
+- Issue #10907: Warn OS X 10.6 IDLE users to use ActiveState Tcl/Tk 8.5, rather
+  than the currently problematic Apple-supplied one, when running with the
+  64-/32-bit installer variant.
+
+- Issue #4953: cgi.FieldStorage and cgi.parse() parse the request as bytes, not
+  as unicode, and accept binary files. Add encoding and errors attributes to
+  cgi.FieldStorage. Patch written by Pierre Quentel (with many inputs by Glenn
+  Linderman).
+
+- Add encoding and errors arguments to urllib.parse_qs() and urllib.parse_qsl().
+
+- Issue #10899: No function type annotations in the standard library.  Removed
+  function type annotations from _pyio.py.
+
+- Issue #10875: Update Regular Expression HOWTO; patch by 'SilentGhost'.
+
+- Issue #10872: The repr() of TextIOWrapper objects now includes the mode
+  if available.
+
+- Issue #10869: Fixed bug where ast.increment_lineno modified the root node
+  twice.
+
+- Issue #5871: email.header.Header.encode now raises an error if any
+  continuation line in the formatted value has no leading white space and looks
+  like a header.  Since Generator uses Header to format all headers, this check
+  is made for all headers in any serialized message at serialization time.  This
+  provides protection against header injection attacks.
+
+- Issue #10859: Make ``contextlib.GeneratorContextManager`` officially
+  private by renaming it to ``_GeneratorContextManager``.
+
+- Issue #10042: Fixed the total_ordering decorator to handle cross-type
+  comparisons that could lead to infinite recursion.
+
+- Issue #10686: the email package now :rfc:`2047`\ -encodes headers with
+  non-ASCII bytes (parsed by a BytesParser) when doing conversion to 7bit-clean
+  presentation, instead of replacing them with ?s.
+
+- email.header.Header was incorrectly encoding folding whitespace when
+  rfc2047-encoding header values with embedded newlines, leaving them without
+  folding whitespace.  It now uses the continuation_ws, as it does for
+  continuation lines that it creates itself.
+
+- Issue #1777412, #10827: Changed the rules for 2-digit years. The
+  time.asctime(), time.ctime() and time.strftime() functions will now format
+  any year when ``time.accept2dyear`` is False and will accept years >= 1000
+  otherwise. ``time.mktime`` and ``time.strftime`` now accept full range
+  supported by the OS. With Visual Studio or on Solaris, the year is limited to
+  the range [1; 9999]. Conversion of 2-digit years to 4-digit is deprecated.
+
+- Issue #7858: Raise an error properly when os.utime() fails under Windows
+  on an existing file.
+
+- Issue #3839: wsgiref should not override a Content-Length header set by
+  the application.  Initial patch by Clovis Fabricio.
+
+- Issue #10492: bdb.Bdb.run() only traces the execution of the code, not the
+  compilation (if the input is a string).
+
+- Issue #7995: When calling accept() on a socket with a timeout, the returned
+  socket is now always blocking, regardless of the operating system.
+
+- Issue #10756: atexit normalizes the exception before displaying it. Patch by
+  Andreas Stührk.
+
+- Issue #10790: email.header.Header.append's charset logic now works correctly
+  for charsets whose output codec is different from its input codec.
+
+- Issue #10819: SocketIO.name property returns -1 when its closed, instead of
+  raising a ValueError, to fix repr().
+
+- Issue #8650: zlib.compress() and zlib.decompress() raise an OverflowError if
+  the input buffer length doesn't fit into an unsigned int (length bigger than
+  2^32-1 bytes).
+
+- Issue #6643: Reinitialize locks held within the threading module after fork to
+  avoid a potential rare deadlock or crash on some platforms.
+
+- Issue #10806, issue #9905: Fix subprocess pipes when some of the standard file
+  descriptors (0, 1, 2) are closed in the parent process.  Initial patch by Ross
+  Lagerwall.
+
+- `unittest.TestCase` can be instantiated without a method name; for simpler
+  exploration from the interactive interpreter.
+
+- Issue #10798: Reject supporting concurrent.futures if the system has too
+  few POSIX semaphores.
+
+- Issue #10807: Remove base64, bz2, hex, quopri, rot13, uu and zlib codecs from
+  the codec aliases. They are still accessible via codecs.lookup().
+
+- Issue #10801: In zipfile, support different encodings for the header and the
+  filenames.
+
+- Issue #6285: IDLE no longer crashes on missing help file; patch by Scott
+  David Daniels.
+
+- Fix collections.OrderedDict.setdefault() so that it works in subclasses that
+  define __missing__().
+
+- Issue #10786: unittest.TextTestRunner default stream no longer bound at import
+  time. `sys.stderr` now looked up at instantiation time.  Fix contributed by
+  Mark Roddy.
+
+- Issue #10753: Characters ';', '=' and ',' in the PATH_INFO environment variable
+  won't be quoted when the URI is constructed by the wsgiref.util's request_uri
+  method. According to RFC 3986, these characters can be a part of params in
+  PATH component of URI and need not be quoted.
+
+- Issue #10738: Fix webbrowser.Opera.raise_opts.
+
+- Issue #9824: SimpleCookie now encodes , and ; in values to cater to how
+  browsers actually parse cookies.
+
+- Issue #9333: os.symlink now available regardless of user privileges.  The
+  function now raises OSError on Windows >=6.0 when the user is unable to create
+  symbolic links. XP and 2003 still raise NotImplementedError.
+
+- Issue #10783: struct.pack() no longer implicitly encodes unicode to UTF-8.
+
+- Issue #10730: Add SVG mime types to mimetypes module.
+
+- Issue #10768: Make the Tkinter ScrolledText widget work again.
+
+- Issue #10777: Fix "dictionary changed size during iteration" bug in
+  ElementTree register_namespace().
+
+- Issue #10626: test_logging now preserves logger disabled states.
+
+- Issue #10774: test_logging now removes temp files created during tests.
+
+- Issue #5258/#10642: if site.py encounters a .pth file that generates an error,
+  it now prints the filename, line number, and traceback to stderr and skips
+  the rest of that individual file, instead of stopping processing entirely.
+
+- Issue #10763: subprocess.communicate() closes stdout and stderr if both are
+  pipes (bug specific to Windows).
+
+- Issue #1693546: fix email.message RFC 2231 parameter encoding to be in better
+  compliance (no "s around encoded values).
+
+- Improved the diff message in the unittest module's assertCountEqual().
+
+- Issue #1155362: email.utils.parsedate_tz now handles a missing space before
+  the '-' of a timezone field as well as before a '+'.
+
+- Issue #4871: The zipfile module now gives a more useful error message if
+  an attempt is made to use a string to specify the archive password.
+
+- Issue #10750: The ``raw`` attribute of buffered IO objects is now read-only.
+
+- Deprecated assertDictContainsSubset() in the unittest module.
+
+C-API
+-----
+
+- PyObject_CallMethod now passes along any underlying AttributeError from
+  PyObject_GetAttr, instead of replacing it with something less informative
+
+- Issue #10913: Deprecate misleading functions PyEval_AcquireLock() and
+  PyEval_ReleaseLock().  The thread-state aware APIs should be used instead.
+
+- Issue #10333: Remove ancient GC API, which has been deprecated since Python
+  2.2.
+
+Build
+-----
+
+- Issue #10843: Update third-party library versions used in OS X 32-bit
+  installer builds: bzip2 1.0.6, readline 6.1.2, SQLite 3.7.4 (with FTS3/FTS4
+  and RTREE enabled), and ncursesw 5.5 (wide-char support enabled).
+
+- Issue #10820: Fix OS X framework installs to support version-specific
+  scripts (#10679).
+
+- Issue #7716: Under Solaris, don't assume existence of /usr/xpg4/bin/grep in
+  the configure script but use $GREP instead.  Patch by Fabian Groffen.
+
+- Issue #10475: Don't hardcode compilers for LDSHARED/LDCXXSHARED on NetBSD
+  and DragonFly BSD.  Patch by Nicolas Joly.
+
+- Issue #10679: The "idle", "pydoc" and "2to3" scripts are now installed with
+  a version-specific suffix on "make altinstall".
+
+- Issue #10655: Fix the build on PowerPC on Linux with GCC when building with
+  timestamp profiling (--with-tsc): the preprocessor test for the PowerPC
+  support now looks for "__powerpc__" as well as "__ppc__": the latter seems to
+  only be present on OS X; the former is the correct one for Linux with GCC.
+
+- Issue #1099: Fix the build on MacOSX when building a framework with pydebug
+  using GCC 4.0.
+
+Tools/Demos
+-----------
+
+- Issue #10843: Install the Tools directory on OS X in the applications Extras
+  (/Applications/Python 3.n/Extras/) where the Demo directory had previous been
+  installed.
+
+- Issue #7962: The Demo directory is gone.  Most of the old and unmaintained
+  demos have been removed, others integrated in documentation or a new
+  Tools/demo subdirectory.
+
+- Issue #10502: Addition of the unittestgui tool. Originally by Steve Purcell.
+  Updated for test discovery by Mark Roddy and Python 3 compatibility by Brian
+  Curtin.
+
+Tests
+-----
+
+- Issue #11910: Fix test_heapq to skip the C tests when _heapq is missing.
+
+- Fix test_startfile to wait for child process to terminate before finishing.
+
+- Issue #10822: Fix test_posix:test_getgroups failure under Solaris.  Patch
+  by Ross Lagerwall.
+
+- Make the --coverage flag work for test.regrtest.
+
+- Issue #1677694: Refactor and improve test_timeout.  Original patch by
+  Björn Lindqvist.
+
+- Issue #5485: Add tests for the UseForeignDTD method of expat parser objects.
+  Patch by Jean-Paul Calderone and Sandro Tosi.
+
+- Issue #6293: Have regrtest.py echo back sys.flags.  This is done by default in
+  whole runs and enabled selectively using ``--header`` when running an explicit
+  list of tests.  Original patch by Collin Winter.
+
+
+What's New in Python 3.2 Beta 2?
+================================
+
+*Release date: 19-Dec-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #8844: Regular and recursive lock acquisitions can now be interrupted
+  by signals on platforms using pthreads.  Patch by Reid Kleckner.
+
+- Issue #4236: PyModule_Create2 now checks the import machinery directly
+  rather than the Py_IsInitialized flag, avoiding a Fatal Python
+  error in certain circumstances when an import is done in __del__.
+
+- Issue #5587: add a repr to dict_proxy objects.  Patch by David Stanek and
+  Daniel Urban.
+
+Library
+-------
+
+- Issue #3243:  Support iterable bodies in httplib. Patch Contributions by
+  Xuanji Li and Chris AtLee.
+
+- Issue #10611: SystemExit exception will no longer kill a unittest run.
+
+- Issue #9857: It is now possible to skip a test in a setUp, tearDown or clean
+  up function.
+
+- Issue #10573: use actual/expected consistently in unittest methods.
+  The order of the args of assertCountEqual is also changed.
+
+- Issue #9286: email.utils.parseaddr no longer concatenates blank-separated
+  words in the local part of email addresses, thereby preserving the input.
+
+- Issue #6791: Limit header line length (to 65535 bytes) in http.client
+  and http.server, to avoid denial of services from the other party.
+
+- Issue #10404: Use ctl-button-1 on OSX for the context menu in Idle.
+
+- Issue #9907: Fix tab handling on OSX when using editline by calling
+  rl_initialize first, then setting our custom defaults, then reading .editrc.
+
+- Issue #4188: Avoid creating dummy thread objects when logging operations
+  from the threading module (with the internal verbose flag activated).
+
+- Issue #10711: Remove HTTP 0.9 support from http.client.  The ``strict``
+  parameter to HTTPConnection and friends is deprecated.
+
+- Issue #9721: Fix the behavior of urljoin when the relative url starts with a
+  ';' character. Patch by Wes Chow.
+
+- Issue #10714: Limit length of incoming request in http.server to 65536 bytes
+  for security reasons.  Initial patch by Ross Lagerwall.
+
+- Issue #9558: Fix distutils.command.build_ext with VS 8.0.
+
+- Issue #10667: Fast path for collections.Counter().
+
+- Issue #10695: passing the port as a string value to telnetlib no longer
+  causes debug mode to fail.
+
+- Issue #1078919: add_header now automatically RFC2231 encodes parameters
+  that contain non-ascii values.
+
+- Issue #10188 (partial resolution): tempfile.TemporaryDirectory emits
+  a warning on sys.stderr rather than throwing a misleading exception
+  if cleanup fails due to nulling out of modules during shutdown.
+  Also avoids an AttributeError when mkdtemp call fails and issues
+  a ResourceWarning on implicit cleanup via __del__.
+
+- Issue #10107: Warn about unsaved files in IDLE on OSX.
+
+- Issue #7213: subprocess.Popen's default for close_fds has been changed.
+  It is now True in most cases other than on Windows when input, output or
+  error handles are provided.
+
+- Issue #6559: subprocess.Popen has a new pass_fds parameter (actually
+  added in 3.2beta1) to allow specifying a specific list of file descriptors
+  to keep open in the child process.
+
+- Issue #1731717: Fixed the problem where subprocess.wait() could cause an
+  OSError exception when The OS had been told to ignore SIGCLD in our process
+  or otherwise not wait for exiting child processes.
+
+Tests
+-----
+
+- Issue #775964: test_grp now skips YP/NIS entries instead of failing when
+  encountering them.
+
+Tools/Demos
+-----------
+
+- Issue #6075: IDLE on Mac OS X now works with both Carbon AquaTk and
+  Cocoa AquaTk.
+
+- Issue #10710: ``Misc/setuid-prog.c`` is removed from the source tree.
+
+- Issue #10706: Remove outdated script runtests.sh.  Either ``make test``
+  or ``python -m test`` should be used instead.
+
+Build
+-----
+
+- The Windows build now uses Tcl/Tk 8.5.9 and sqlite3 3.7.4.
+
+- Issue #9234: argparse supports alias names for subparsers.
+
+
+What's New in Python 3.2 Beta 1?
+================================
+
+*Release date: 05-Dec-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #10630: Return dict views from the dict proxy keys()/values()/items()
+  methods.
+
+- Issue #10596: Fix float.__mod__ to have the same behaviour as float.__divmod__
+  with respect to signed zeros.  -4.0 % 4.0 should be 0.0, not -0.0.
+
+- Issue #1772833: Add the -q command-line option to suppress copyright and
+  version output in interactive mode.
+
+- Provide an *optimize* parameter in the built-in compile() function.
+
+- Fixed several corner case issues on Windows in os.stat/os.lstat related to
+  reparse points.
+
+- PEP 384 (Defining a Stable ABI) is implemented.
+
+- Issue #2690: Range objects support negative indices and slicing.
+
+- Issue #9915: Speed up sorting with a key.
+
+- Issue #8685: Speed up set difference ``a - b`` when source set ``a`` is much
+  larger than operand ``b``.  Patch by Andrew Bennetts.
+
+- Issue #10518: Bring back the callable() builtin.
+
+- Issue #7094: Added alternate formatting (specified by '#') to ``__format__``
+  method of float, complex, and Decimal. This allows more precise control over
+  when decimal points are displayed.
+
+- Issue #10474: range.count() should return integers.
+
+- Issue #1574217: isinstance now catches only AttributeError, rather than
+  masking all errors.
+
+Library
+-------
+
+- logging: added "handler of last resort". See http://bit.ly/last-resort-handler
+
+- test.support: Added TestHandler and Matcher classes for better support of
+  assertions about logging.
+
+- Issue #4391: Use proper plural forms in argparse.
+
+- Issue #10601: sys.displayhook uses 'backslashreplace' error handler on
+  UnicodeEncodeError.
+
+- Add the "display" and "undisplay" pdb commands.
+
+- Issue #7245: Add a SIGINT handler in pdb that allows to break a program again
+  after a "continue" command.
+
+- Add the "interact" pdb command.
+
+- Issue #7905: Actually respect the keyencoding parameter to shelve.Shelf.
+
+- Issue #1569291: Speed up array.repeat().
+
+- Provide an interface to set the optimization level of compilation in
+  py_compile, compileall and zipfile.PyZipFile.
+
+- Issue #7904: Changes to urllib.parse.urlsplit to handle schemes as defined by
+  RFC3986. Anything before :// is considered a scheme and is followed by an
+  authority (or netloc) and by '/' led path, which is optional.
+
+- Issue #6045: dbm.gnu databases now support get() and setdefault() methods.
+
+- Issue #10620: `python -m unittest` can accept file paths instead of module
+  names for running specific tests.
+
+- Issue #9424: Deprecate the `unittest.TestCase` methods `assertEquals`,
+  `assertNotEquals`, `assertAlmostEquals`, `assertNotAlmostEquals` and `assert_`
+  and replace them with the correct methods in the Python test suite.
+
+- Issue #10272: The ssl module now raises socket.timeout instead of a generic
+  SSLError on socket timeouts.
+
+- Issue #10528: Allow translators to reorder placeholders in localizable
+  messages from argparse.
+
+- Issue #10497: Fix incorrect use of gettext in argparse.
+
+- Issue #10478: Reentrant calls inside buffered IO objects (for example by
+  way of a signal handler) now raise a RuntimeError instead of freezing the
+  current process.
+
+- logging: Added getLogRecordFactory/setLogRecordFactory with docs and tests.
+
+- Issue #10549: Fix pydoc traceback when text-documenting certain classes.
+
+- Issue #2001: New HTML server with enhanced Web page features.  Patch by Ron
+  Adam.
+
+- Issue #10360: In WeakSet, do not raise TypeErrors when testing for membership
+  of non-weakrefable objects.
+
+- Issue #940286: pydoc.Helper.help() ignores input/output init parameters.
+
+- Issue #1745035: Add a command size and data size limit to smtpd.py, to prevent
+  DoS attacks.  Patch by Savio Sena.
+
+- Issue #4925: Add filename to error message when executable can't be found in
+  subprocess.
+
+- Issue #10391: Don't dereference invalid memory in error messages in the ast
+  module.
+
+- Issue #10027: st_nlink was not being set on Windows calls to os.stat or
+  os.lstat. Patch by Hirokazu Yamamoto.
+
+- Issue #9333: Expose os.symlink only when the SeCreateSymbolicLinkPrivilege is
+  held by the user's account, i.e., when the function can actually be used.
+
+- Issue #8879: Add os.link support for Windows.
+
+- Issue #7911: ``unittest.TestCase.longMessage`` defaults to True for improved
+  failure messages by default. Patch by Mark Roddy.
+
+- Issue #1486713: HTMLParser now has an optional tolerant mode where it tries to
+  guess at the correct parsing of invalid html.
+
+- Issue #10554: Add context manager support to subprocess.Popen objects.
+
+- Issue #8989: email.utils.make_msgid now has a domain parameter that can
+  override the domain name used in the generated msgid.
+
+- Issue #9299: Add exist_ok parameter to os.makedirs to suppress the 'File
+  exists' exception when a target directory already exists with the specified
+  mode. Patch by Ray Allen.
+
+- Issue #9573: os.fork() now works correctly when triggered as a side effect of
+  a module import.
+
+- Issue #10464: netrc now correctly handles lines with embedded '#' characters.
+
+- Added itertools.accumulate().
+
+- Issue #4113: Added custom ``__repr__`` method to ``functools.partial``.
+  Original patch by Daniel Urban.
+
+- Issue #10273: Rename `assertRegexpMatches` and `assertRaisesRegexp` to
+  `assertRegex` and `assertRaisesRegex`.
+
+- Issue #10535: Enable silenced warnings in unittest by default.
+
+- Issue #9873: The URL parsing functions in urllib.parse now accept ASCII byte
+  sequences as input in addition to character strings.
+
+- Issue #10586: The statistics API for the new functools.lru_cache has been
+  changed to a single cache_info() method returning a named tuple.
+
+- Issue #10323: itertools.islice() now consumes the minimum number of inputs
+  before stopping.  Formerly, the final state of the underlying iterator was
+  undefined.
+
+- Issue #10565: The collections.Iterator ABC now checks for both __iter__ and
+  __next__.
+
+- Issue #10242: Fixed implementation of unittest.ItemsEqual and gave it a new
+  more informative name, unittest.CountEqual.
+
+- Issue #10561: In pdb, clear the breakpoints by the breakpoint number.
+
+- Issue #2986: difflib.SequenceMatcher gets a new parameter, autojunk, which can
+  be set to False to turn off the previously undocumented 'popularity'
+  heuristic. Patch by Terry Reedy and Eli Bendersky.
+
+- Issue #10534: in difflib, expose bjunk and bpopular sets; deprecate
+  undocumented and now redundant isbjunk and isbpopular methods.
+
+- Issue #9846: zipfile is now correctly closing underlying file objects.
+
+- Issue #10459: Update CJK character names to Unicode 6.0.
+
+- Issue #4493: urllib.request adds '/' in front of path components which does not
+  start with '/. Common behavior exhibited by browsers and other clients.
+
+- Issue #6378: idle.bat now runs with the appropriate Python version rather than
+  the system default. Patch by Sridhar Ratnakumar.
+
+- Issue #10470: 'python -m unittest' will now run test discovery by default,
+  when no extra arguments have been provided.
+
+- Issue #3709: BaseHTTPRequestHandler will buffer the headers and write to
+  output stream only when end_headers is invoked. This is a speedup and an
+  internal optimization.  Patch by Andrew Shaaf.
+
+- Issue #10220: Added inspect.getgeneratorstate. Initial patch by Rodolpho
+  Eckhardt.
+
+- Issue #10453: compileall now uses argparse instead of getopt, and thus
+  provides clean output when called with '-h'.
+
+- Issue #8078: Add constants for higher baud rates in the termios module.  Patch
+  by Rodolpho Eckhardt.
+
+- Issue #10407: Fix two NameErrors in distutils.
+
+- Issue #10371: Deprecated undocumented functions in the trace module.
+
+- Issue #10467: Fix BytesIO.readinto() after seeking into a position after the
+  end of the file.
+
+- configparser: 100% test coverage.
+
+- Issue #10499: configparser supports pluggable interpolation handlers. The
+  default classic interpolation handler is called BasicInterpolation. Another
+  interpolation handler added (ExtendedInterpolation) which supports the syntax
+  used by zc.buildout (e.g. interpolation between sections).
+
+- configparser: the SafeConfigParser class has been renamed to ConfigParser.
+  The legacy ConfigParser class has been removed but its interpolation mechanism
+  is still available as LegacyInterpolation.
+
+- configparser: Usage of RawConfigParser is now discouraged for new projects
+  in favor of ConfigParser(interpolation=None).
+
+- Issue #1682942: configparser supports alternative option/value delimiters.
+
+- Issue #5412: configparser supports mapping protocol access.
+
+- Issue #9411: configparser supports specifying encoding for read operations.
+
+- Issue #9421: configparser's getint(), getfloat() and getboolean() methods
+  accept vars and default arguments just like get() does.
+
+- Issue #9452: configparser supports reading from strings and dictionaries
+  (thanks to the mapping protocol API, the latter can be used to copy data
+  between parsers).
+
+- configparser: accepted INI file structure is now customizable, including
+  comment prefixes, name of the DEFAULT section, empty lines in multiline
+  values, and indentation.
+
+- Issue #10326: unittest.TestCase instances can be pickled.
+
+- Issue #9926: Wrapped TestSuite subclass does not get __call__ executed.
+
+- Issue #9920: Skip tests for cmath.atan and cmath.atanh applied to complex
+  zeros on systems where the log1p function fails to respect the sign of zero.
+  This fixes a test failure on AIX.
+
+- Issue #9732: Addition of getattr_static to the inspect module.
+
+- Issue #10446: Module documentation generated by pydoc now links to a
+  version-specific online reference manual.
+
+- Make the 'No module named' exception message from importlib consistent.
+
+- Issue #10443: Add the SSLContext.set_default_verify_paths() method.
+
+- Issue #10440: Support RUSAGE_THREAD as a constant in the resource module.
+  Patch by Robert Collins.
+
+- Issue #10429: IMAP.starttls() stored the capabilities as bytes objects, rather
+  than strings.
+
+C-API
+-----
+
+- Issue #10557: Added a new API function, PyUnicode_TransformDecimalToASCII(),
+  which transforms non-ASCII decimal digits in a Unicode string to their ASCII
+  equivalents.
+
+- Issue #9518: Extend the PyModuleDef_HEAD_INIT macro to explicitly
+  zero-initialize all fields, fixing compiler warnings seen when building
+  extension modules with gcc with "-Wmissing-field-initializers" (implied by
+  "-W").
+
+- Issue #10255: Fix reference leak in Py_InitializeEx().  Patch by Neil
+  Schemenauer.
+
+- structseq.h is now included in Python.h.
+
+- Loosen PyArg_ValidateKeywordArguments to allow dict subclasses.
+
+Tests
+-----
+
+- regrtest.py once again ensures the test directory is removed from sys.path
+  when it is invoked directly as the __main__ module.
+
+- `python -m test` can be used to run the test suite as well as `python -m
+  test.regrtest`.
+
+- Do not fail test_socket when the IP address of the local hostname cannot be
+  looked up.
+
+- Issue #8886: Use context managers throughout test_zipfile. Patch by Eric
+  Carstensen.
+
+Build
+-----
+
+- Issue #10325: Fix two issues in the fallback definitions for PY_ULLONG_MAX and
+  PY_LLONG_MAX that made them unsuitable for use in preprocessor conditionals.
+
+Documentation
+-------------
+
+- Issue #10299: List the built-in functions in a table in functions.rst.
+
+
+What's New in Python 3.2 Alpha 4?
+=================================
+
+*Release date: 13-Nov-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #10372: Import the warnings module only after the IO library is
+  initialized, so as to avoid bootstrap issues with the '-W' option.
+
+- Issue #10293: Remove obsolete field in the PyMemoryView structure, unused
+  undocumented value PyBUF_SHADOW, and strangely-looking code in
+  PyMemoryView_GetContiguous.
+
+- Issue #6081: Add str.format_map(), similar to ``str.format(**mapping)``.
+
+- If FileIO.__init__ fails, close the file descriptor.
+
+- Issue #10221: dict.pop(k) now has a key error message that includes the
+  missing key (same message d[k] returns for missing keys).
+
+- Issue #5437: A preallocated MemoryError instance should not keep traceback
+  data (including local variables caught in the stack trace) alive infinitely.
+
+- Issue #10186: Fix the SyntaxError caret when the offset is equal to the length
+  of the offending line.
+
+- Issue #10089: Add support for arbitrary -X options on the command line.  They
+  can be retrieved through a new attribute ``sys._xoptions``.
+
+- Issue #4388: On Mac OS X, decode command line arguments from UTF-8, instead of
+  the locale encoding.  If the LANG (and LC_ALL and LC_CTYPE) environment
+  variable is not set, the locale encoding is ISO-8859-1, whereas most programs
+  (including Python) expect UTF-8.  Python already uses UTF-8 for the filesystem
+  encoding and to encode command line arguments on this OS.
+
+- Issue #9713, #10114: Parser functions (e.g. PyParser_ASTFromFile) expect
+  filenames encoded to the filesystem encoding with the surrogateescape error
+  handler (to support undecodable bytes), instead of UTF-8 in strict mode.
+
+- Issue #9997: Don't let the name "top" have special significance in scope
+  resolution.
+
+- Issue #9862: Compensate for broken PIPE_BUF in AIX by hard coding its value as
+  the default 512 when compiling on AIX.
+
+- Use locale encoding instead of UTF-8 to encode and decode filenames if
+  Py_FileSystemDefaultEncoding is not set.
+
+- Issue #10095: fp_setreadl() doesn't reopen the file, instead reuse the file
+  descriptor.
+
+- Issue #9418: Moved private string methods ``_formatter_parser`` and
+  ``_formatter_field_name_split`` into a new ``_string`` module.
+
+- Issue #9992: Remove PYTHONFSENCODING environment variable.
+
+Library
+-------
+
+- Issue #12943: python -m tokenize support has been added to tokenize.
+
+- Issue #10465: fix broken delegating of attributes by gzip._PaddedFile.
+
+- Issue #10356: Decimal.__hash__(-1) should return -2.
+
+- Issue #1553375: logging: Added stack_info kwarg to display stack information.
+
+- Issue #5111: IPv6 Host in the Header is wrapped inside [ ]. Patch by Chandru.
+
+- Fix Fraction.__hash__ so that Fraction.__hash__(-1) is -2.  (See also issue
+  #10356.)
+
+- Issue #4471: Add the IMAP.starttls() method to enable encryption on standard
+  IMAP4 connections.  Original patch by Lorenzo M. Catucci.
+
+- Issue #1466065: Add 'validate' option to base64.b64decode to raise an error if
+  there are non-base64 alphabet characters in the input.
+
+- Issue #10386: Add __all__ to token module; this simplifies importing in
+  tokenize module and prevents leaking of private names through ``import *``.
+
+- Issue #4471: Properly shutdown socket in IMAP.shutdown().  Patch by Lorenzo
+  M. Catucci.
+
+- Fix IMAP.login() to work properly.
+
+- Issue #9244: multiprocessing pool worker processes could terminate
+  unexpectedly if the return value of a task could not be pickled.  Only the
+  ``repr`` of such errors are now sent back, wrapped in an
+  ``MaybeEncodingError`` exception.
+
+- Issue #9244: The ``apply_async()`` and ``map_async()`` methods of
+  ``multiprocessing.Pool`` now accepts a ``error_callback`` argument.  This can
+  be a callback with the signature ``callback(exc)``, which will be called if
+  the target raises an exception.
+
+- Issue #10022: The dictionary returned by the ``getpeercert()`` method of SSL
+  sockets now has additional items such as ``issuer`` and ``notBefore``.
+
+- ``usenetrc`` is now false by default for NNTP objects.
+
+- Issue #1926: Add support for NNTP over SSL on port 563, as well as STARTTLS.
+  Patch by Andrew Vant.
+
+- Issue #10335: Add tokenize.open(), detect the file encoding using
+  tokenize.detect_encoding() and open it in read only mode.
+
+- Issue #10321: Add support for binary data to smtplib.SMTP.sendmail, and a new
+  method send_message to send an email.message.Message object.
+
+- Issue #6011: sysconfig and distutils.sysconfig use the surrogateescape error
+  handler to parse the Makefile file.  Avoid a UnicodeDecodeError if the source
+  code directory name contains a non-ASCII character and the locale encoding is
+  ASCII.
+
+- Issue #10329: The trace module writes reports using the input Python script
+  encoding, instead of the locale encoding.  Patch written by Alexander
+  Belopolsky.
+
+- Issue #10126: Fix distutils' test_build when Python was built with
+  --enable-shared.
+
+- Issue #9281: Prevent race condition with mkdir in distutils.  Patch by
+  Arfrever.
+
+- Issue #10229: Fix caching error in gettext.
+
+- Issue #10252: Close file objects in a timely manner in distutils code and
+  tests.  Patch by Brian Brazil, completed by Éric Araujo.
+
+- Issue #10180: Pickling file objects is now explicitly forbidden, since
+  unpickling them produced nonsensical results.
+
+- Issue #10311: The signal module now restores errno before returning from its
+  low-level signal handler.  Patch by Hallvard B Furuseth.
+
+- Issue #10282: Add a ``nntp_implementation`` attribute to NNTP objects.
+
+- Issue #10283: Add a ``group_pattern`` argument to NNTP.list().
+
+- Issue #10155: Add IISCGIHandler to wsgiref.handlers to support IIS CGI
+  environment better, and to correct unicode environment values for WSGI 1.0.1.
+
+- Issue #10281: nntplib now returns None for absent fields in the OVER/XOVER
+  response, instead of raising an exception.
+
+- wsgiref now implements and validates PEP 3333, rather than an experimental
+  extension of PEP 333.  (Note: earlier versions of Python 3.x may have
+  incorrectly validated some non-compliant applications as WSGI compliant; if
+  your app validates with Python <3.2b1+, but not on this version, it is likely
+  the case that your app was not compliant.)
+
+- Issue #10280: NNTP.nntp_version should reflect the highest version advertised
+  by the server.
+
+- Issue #10184: Touch directories only once when extracting a tarfile.
+
+- Issue #10199: New package, ``turtledemo`` now contains selected demo scripts
+  that were formerly found under Demo/turtle.
+
+- Issue #10265: Close file objects explicitly in sunau.  Patch by Brian Brazil.
+
+- Issue #10266: uu.decode didn't close in_file explicitly when it was given as a
+  filename.  Patch by Brian Brazil.
+
+- Issue #10110: Queue objects didn't recognize full queues when the maxsize
+  parameter had been reduced.
+
+- Issue #10160: Speed up operator.attrgetter.  Patch by Christos Georgiou.
+
+- logging: Added style option to basicConfig() to allow %, {} or $-formatting.
+
+- Issue #5729: json.dumps() now supports using a string such as '\t' for
+  pretty-printing multilevel objects.
+
+- Issue #10253: FileIO leaks a file descriptor when trying to open a file for
+  append that isn't seekable.  Patch by Brian Brazil.
+
+- Support context manager protocol for file-like objects returned by mailbox
+  ``get_file()`` methods.
+
+- Issue #10246: uu.encode didn't close file objects explicitly when filenames
+  were given to it.  Patch by Brian Brazil.
+
+- Issue #10198: fix duplicate header written to wave files when writeframes() is
+  called without data.
+
+- Close file objects in modulefinder in a timely manner.
+
+- Close a io.TextIOWrapper object in email.parser in a timely manner.
+
+- Close a file object in distutils.sysconfig in a timely manner.
+
+- Close a file object in pkgutil in a timely manner.
+
+- Issue #10233: Close file objects in a timely manner in the tarfile module and
+  its test suite.
+
+- Issue #10093: ResourceWarnings are now issued when files and sockets are
+  deallocated without explicit closing.  These warnings are silenced by default,
+  except in pydebug mode.
+
+- tarfile.py: Add support for all missing variants of the GNU sparse extensions
+  and create files with holes when extracting sparse members.
+
+- Issue #10218: Return timeout status from ``Condition.wait`` in threading.
+
+- Issue #7351: Add ``zipfile.BadZipFile`` spelling of the exception name and
+  deprecate the old name ``zipfile.BadZipfile``.
+
+- Issue #5027: The standard ``xml`` namespace is now understood by
+  xml.sax.saxutils.XMLGenerator as being bound to
+  http://www.w3.org/XML/1998/namespace.  Patch by Troy J. Farrell.
+
+- Issue #5975: Add csv.unix_dialect class.
+
+- Issue #7761: telnetlib.interact failures on Windows fixed.
+
+- logging: Added style option to Formatter to allow %, {} or $-formatting.
+
+- Issue #5178: Added tempfile.TemporaryDirectory class that can be used as a
+  context manager.
+
+- Issue #1349106: Generator (and BytesGenerator) flatten method and Header
+  encode method now support a 'linesep' argument.
+
+- Issue #5639: Add a *server_hostname* argument to ``SSLContext.wrap_socket`` in
+  order to support the TLS SNI extension.  ``HTTPSConnection`` and ``urlopen()``
+  also use this argument, so that HTTPS virtual hosts are now supported.
+
+- Issue #10166: Avoid recursion in pstats Stats.add() for many stats items.
+
+- Issue #10163: Skip unreadable registry keys during mimetypes initialization.
+
+- logging: Made StreamHandler terminator configurable.
+
+- logging: Allowed filters to be just callables.
+
+- logging: Added tests for _logRecordClass changes.
+
+- Issue #10092: Properly reset locale in calendar.Locale*Calendar classes.
+
+- logging: Added _logRecordClass, getLogRecordClass, setLogRecordClass to
+  increase flexibility of LogRecord creation.
+
+- Issue #5117: Case normalization was needed on ntpath.relpath().  Also fixed
+  root directory issue on posixpath.relpath().  (Ported working fixes from
+  ntpath.)
+
+- Issue #1343: xml.sax.saxutils.XMLGenerator now has an option
+  short_empty_elements to direct it to use self-closing tags when appropriate.
+
+- Issue #9807 (part 1): Expose the ABI flags in sys.abiflags.  Add --abiflags
+  switch to python-config for command line access.
+
+- Issue #6098: Don't claim DOM level 3 conformance in minidom.
+
+- Issue #5762: Fix AttributeError raised by ``xml.dom.minidom`` when an empty
+  XML namespace attribute is encountered.
+
+- Issue #2830: Add the ``html.escape()`` function, which quotes all problematic
+  characters by default.  Deprecate ``cgi.escape()``.
+
+- Issue #9409: Fix the regex to match all kind of filenames, for interactive
+  debugging in doctests.
+
+- Issue #9183: ``datetime.timezone(datetime.timedelta(0))`` will now return the
+  same instance as ``datetime.timezone.utc``.
+
+- Issue #7523: Add SOCK_CLOEXEC and SOCK_NONBLOCK to the socket module, where
+  supported by the system.  Patch by Nikita Vetoshkin.
+
+- Issue #10063: file:// scheme will stop accessing remote hosts via ftp
+  protocol. file:// urls had fallback to access remote hosts via ftp. This was
+  not correct, change is made to raise a URLError when a remote host is tried to
+  access via file:// scheme.
+
+- Issue #1710703: Write structures for an empty ZIP archive when a ZipFile is
+  created in modes 'a' or 'w' and then closed without adding any files. Raise
+  BadZipfile (rather than IOError) when opening small non-ZIP files.
+
+- Issue #10041: The signature of optional arguments in socket.makefile() didn't
+  match that of io.open(), and they also didn't get forwarded properly to
+  TextIOWrapper in text mode.  Patch by Kai Zhu.
+
+- Issue #9003: http.client.HTTPSConnection, urllib.request.HTTPSHandler and
+  urllib.request.urlopen now take optional arguments to allow for server
+  certificate checking, as recommended in public uses of HTTPS.
+
+- Issue #6612: Fix site and sysconfig to catch os.getcwd() error, eg. if the
+  current directory was deleted. Patch written by W. Trevor King.
+
+- Issue #3873: Speed up unpickling from file objects that have a peek() method.
+
+- Issue #10075: Add a session_stats() method to SSLContext objects.
+
+- Issue #9948: Fixed problem of losing filename case information.
+
+Extension Modules
+-----------------
+
+- Issue #5109: array.array constructor will now use fast code when
+  initial data is provided in an array object with correct type.
+
+- Issue #6317: Now winsound.PlaySound only accepts unicode.
+
+- Issue #6317: Now winsound.PlaySound can accept non ascii filename.
+
+- Issue #9377: Use Unicode API for gethostname on Windows.
+
+- Issue #10143: Update "os.pathconf" values.
+
+- Issue #6518: Support context manager protcol for ossaudiodev types.
+
+- Issue #678250: Make mmap flush a noop on ACCESS_READ and ACCESS_COPY.
+
+- Issue #9054: Fix a crash occurring when using the pyexpat module with expat
+  version 2.0.1.
+
+- Issue #5355: Provide mappings from Expat error numbers to string descriptions
+  and backwards, in order to actually make it possible to analyze error codes
+  provided by ExpatError.
+
+- The Unicode database was updated to 6.0.0.
+
+C-API
+-----
+
+- Issue #10288: The deprecated family of "char"-handling macros
+  (ISLOWER()/ISUPPER()/etc) have now been removed: use Py_ISLOWER() etc instead.
+
+- Issue #9778: Hash values are now always the size of pointers. A new Py_hash_t
+  type has been introduced.
+
+Tools/Demos
+-----------
+
+- Issue #10117: Tools/scripts/reindent.py now accepts source files that use
+  encoding other than ASCII or UTF-8.  Source encoding is preserved when
+  reindented code is written to a file.
+
+- Issue #7287: Demo/imputil/knee.py was removed.
+
+Tests
+-----
+
+- Issue #3699: Fix test_bigaddrspace and extend it to test bytestrings as well
+  as unicode strings.  Initial patch by Sandro Tosi.
+
+- Issue #10294: Remove dead code form test_unicode_file.
+
+- Issue #10123: Don't use non-ascii filenames in test_doctest tests. Add a new
+  test specific to unicode (non-ascii name and filename).
+
+Build
+-----
+
+- Issue #10268: Add a --enable-loadable-sqlite-extensions option to configure.
+
+- Issue #8852: Allow the socket module to build on OpenSolaris.
+
+- Drop -OPT:Olimit compiler option.
+
+- Issue #10094: Use versioned .so files on GNU/kfreeBSD and the GNU Hurd.
+
+- Accept Oracle Berkeley DB 5.0 and 5.1 as backend for the dbm extension.
+
+- Issue #7473: avoid link errors when building a framework with a different set
+  of architectures than the one that is currently installed.
+
+
+What's New in Python 3.2 Alpha 3?
+=================================
+
+*Release date: 09-Oct-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #10068: Global objects which have reference cycles with their module's
+  dict are now cleared again. This causes issue #7140 to appear again.
+
+- Issue #9738: Document PyErr_SetString() and PyErr_SetFromErrnoWithFilename()
+  encodings.
+
+- ast.literal_eval() can now handle negative numbers.  It is also a little more
+  liberal in what it accepts without compromising the safety of the evaluation.
+  For example, 3j+4 and 3+4+5 are both accepted.
+
+- Issue #10006: type.__abstractmethods__ now raises an AttributeError.  As a
+  result metaclasses can now be ABCs (see #9533).
+
+- Issue #8670: ctypes.c_wchar supports non-BMP characters with 32 bits wchar_t.
+
+- Issue #8670: PyUnicode_AsWideChar() and PyUnicode_AsWideCharString() replace
+  UTF-16 surrogate pairs by single non-BMP characters for 16 bits Py_UNICODE and
+  32 bits wchar_t (eg. Linux in narrow build).
+
+- Issue #10003: Allow handling of SIGBREAK on Windows. Fixes a regression
+  introduced by issue #9324.
+
+- Issue #9979: Create function PyUnicode_AsWideCharString().
+
+- Issue #7397: Mention that importlib.import_module() is probably what someone
+  really wants to be using in __import__'s docstring.
+
+- Issue #8521: Allow CreateKeyEx, OpenKeyEx, and DeleteKeyEx functions of winreg
+  to use named arguments.
+
+- Issue #9930: Remove bogus subtype check that was causing (e.g.)
+  float.__rdiv__(2.0, 3) to return NotImplemented instead of the expected 1.5.
+
+- Issue #9808: Implement os.getlogin for Windows. Patch by Jon Anglin.
+
+- Issue #9901: Destroying the GIL in Py_Finalize() can fail if some other
+  threads are still running.  Instead, reinitialize the GIL on a second call to
+  Py_Initialize().
+
+- All SyntaxErrors now have a column offset and therefore a caret when the error
+  is printed.
+
+- Issue #9252: PyImport_Import no longer uses a fromlist hack to return the
+  module that was imported, but instead gets the module from sys.modules.
+
+- Issue #9213: The range type_items now provides index() and count() methods, to
+  conform to the Sequence ABC.  Patch by Daniel Urban and Daniel Stutzbach.
+
+- Issue #7994: Issue a PendingDeprecationWarning if object.__format__ is called
+  with a non-empty format string.  This is an effort to future-proof user
+  code. If a derived class does not currently implement __format__ but later
+  adds its own __format__, it would most likely break user code that had
+  supplied a format string.  This will be changed to a DeprecationWaring in
+  Python 3.3 and it will be an error in Python 3.4.
+
+- Issue #9828: Destroy the GIL in Py_Finalize(), so that it gets properly
+  re-created on a subsequent call to Py_Initialize().  The problem (a crash)
+  wouldn't appear in 3.1 or 2.7 where the GIL's structure is more trivial.
+
+- Issue #9210: Configure option --with-wctype-functions was removed.  Using the
+  functions from the libc caused the methods .upper() and lower() to become
+  locale aware and created subtly wrong results.
+
+- Issue #9738: PyUnicode_FromFormat() and PyErr_Format() raise an error on a
+  non-ASCII byte in the format string.
+
+- Issue #4617: Previously it was illegal to delete a name from the local
+  namespace if it occurs as a free variable in a nested block.  This limitation
+  of the compiler has been lifted, and a new opcode introduced (DELETE_DEREF).
+
+- Issue #9804: ascii() now always represents unicode surrogate pairs as a single
+  ``\UXXXXXXXX``, regardless of whether the character is printable or not.
+  Also, the "backslashreplace" error handler now joins surrogate pairs into a
+  single character on UCS-2 builds.
+
+- Issue #9757: memoryview objects get a release() method to release the
+  underlying buffer (previously this was only done when deallocating the
+  memoryview), and gain support for the context management protocol.
+
+- Issue #9797: pystate.c wrongly assumed that zero couldn't be a valid
+  thread-local storage key.
+
+Library
+-------
+
+- Issue #2236: distutils' mkpath ignored the mode parameter.
+
+- Fix typo in one sdist option (medata-check).
+
+- Issue #9199: Fix incorrect use of distutils.cmd.Command.announce.
+
+- Issue #1718574: Fix options that were supposed to accept arguments but did
+  not in build_clib.
+
+- Issue #9437: Fix building C extensions with non-default LDFLAGS.
+
+- Issue #4661: email can now parse bytes input and generate either converted
+  7bit output or bytes output.  Email version bumped to 5.1.0.
+
+- Issue #1589: Add ssl.match_hostname(), to help implement server identity
+  verification for higher-level protocols.
+
+- Issue #9759: GzipFile now raises ValueError when an operation is attempted
+  after the file is closed.  Patch by Jeffrey Finkelstein.
+
+- Issue #9042: Fix interaction of custom translation classes and caching in
+  gettext.
+
+- Issue #6706: asyncore.dispatcher now provides a handle_accepted() method
+  returning a (sock, addr) pair which is called when a connection has been
+  established with a new remote endpoint.  This is supposed to be used as a
+  replacement for old handle_accept() and avoids the user to call accept()
+  directly.
+
+- Issue #9065: tarfile no longer uses "root" as the default for the uname and
+  gname field.
+
+- Issue #8980: Fixed a failure in distutils.command check that was shadowed by
+  an environment that does not have docutils.  Patch by Arfrever.
+
+- Issue #1050268: parseaddr now correctly quotes double quote and backslash
+  characters that appear inside quoted strings in email addresses.
+
+- Issue #10004: quoprimime no longer generates a traceback when confronted with
+  invalid characters after '=' in a Q-encoded word.
+
+- Issue #1491: BaseHTTPServer nows send a ``100 Continue`` response before
+  sending a 200 OK for the Expect: 100-continue request header.
+
+- Issue #9360: Cleanup and improvements to the nntplib module.  The API now
+  conforms to the philosophy of bytes and unicode separation in Python 3.  A
+  test suite has also been added.
+
+- Issue #9962: GzipFile now has the peek() method.
+
+- Issue #9090: When a socket with a timeout fails with EWOULDBLOCK or EAGAIN,
+  retry the select() loop instead of bailing out.  This is because select() can
+  incorrectly report a socket as ready for reading (for example, if it received
+  some data with an invalid checksum).
+
+- Issue #3612: Added new types to ctypes.wintypes. (CHAR and pointers)
+
+- Issue #9950: Fix socket.sendall() crash or misbehaviour when a signal is
+  received.  Now sendall() properly calls signal handlers if necessary, and
+  retries sending if these returned successfully, including on sockets with a
+  timeout.
+
+- Issue #9947: logging: Fixed locking bug in stopListening.
+
+- Issue #9945: logging: Fixed locking bugs in addHandler/removeHandler.
+
+- Issue #9936: Fixed executable lines' search in the trace module.
+
+- Issue #9790: Rework imports necessary for samefile and sameopenfile
+  in ntpath.
+
+- Issue #9928: Properly initialize the types exported by the bz2 module.
+
+- Issue #1675951: Allow GzipFile to work with unseekable file objects.  Patch by
+  Florian Festi.
+
+- Logging: Added QueueListener class to facilitate logging usage for
+  performance-critical threads.
+
+- Issue #9916: Add some missing errno symbols.
+
+- Issue #9877: Expose sysconfig.get_makefile_filename()
+
+- logging: Added hasHandlers() method to Logger and LoggerAdapter.
+
+- Issue #9908: Fix os.stat() on bytes paths under Windows 7.
+
+- Issue #2643: msync() is not called anymore when deallocating an open mmap
+  object, only munmap().
+
+- logging: Changed LoggerAdapter implementation internally, to make it easier to
+  subclass in a useful way.
+
+- logging: hasHandlers method was added to Logger, and isEnabledFor,
+  getEffectiveLevel, hasHandlers and setLevel were added to LoggerAdapter.
+  LoggerAdapter was introduced into the unit tests for logging.
+
+- Issue #1686: Fix string.Template when overriding the pattern attribute.
+
+- Issue #9854: SocketIO objects now observe the RawIOBase interface in
+  non-blocking mode: they return None when an operation would block (instead of
+  raising an exception).
+
+- Issue #1730136: Fix the comparison between a tk.font.Font and an object of
+  another kind.
+
+- Issue #9441: logging has better coverage for rotating file handlers.
+
+- Issue #9865: collections.OrderedDict now has a __sizeof__ method.
+
+- Issue #9854: The default read() implementation in io.RawIOBase now handles
+  non-blocking readinto() returning None correctly.
+
+- Issue #1552: socket.socketpair() now returns regular socket.socket objects
+  supporting the whole socket API (rather than the "raw" _socket.socket
+  objects).
+
+- Issue #9853: Fix the signature of SSLSocket.recvfrom() and SSLSocket.sendto()
+  to match the corresponding socket methods.
+
+- Issue #9840: Added a decorator to reprlib for wrapping __repr__ methods to make
+  them handle recursive calls within the same thread.
+
+- logging: Enhanced HTTPHandler with secure and credentials initializers.
+
+- Issue #767645: Set os.path.supports_unicode_filenames to True on Mac OS X.
+
+- Issue #9837: The read() method of ZipExtFile objects (as returned by
+  ZipFile.open()) could return more bytes than requested.
+
+- Issue #9826: OrderedDict.__repr__ can now handle self-referential values:
+  d['x'] = d.
+
+- Issue #9825: Using __del__ in the definition of collections.OrderedDict made
+  it possible for the user to create self-referencing ordered dictionaries which
+  become permanently uncollectable GC garbage.  Reinstated the Python 3.1
+  approach of using weakref proxies so that reference cycles never get created
+  in the first place.
+
+- Issue #9579, #9580: Fix os.confstr() for value longer than 255 bytes and
+  encode the value with filesystem encoding and surrogateescape (instead of
+  utf-8 in strict mode) . Patch written by David Watson.
+
+- Issue #9632: Remove sys.setfilesystemencoding() function: use PYTHONFSENCODING
+  environment variable to set the filesystem encoding at Python startup.
+  sys.setfilesystemencoding() creates inconsistencies because it is unable to
+  reencode all filenames in all objects.
+
+- Issue #9410: Various optimizations to the pickle module, leading to speedups
+  up to 4x (depending on the benchmark).  Mostly ported from Unladen Swallow;
+  initial patch by Alexandre Vassalotti.
+
+- The pprint module now supports printing OrderedDicts in their given order
+  (formerly, it would sort the keys).
+
+- Logging: Added QueueHandler class to facilitate logging usage with
+  multiprocessing.
+
+- Issue #9707: Rewritten reference implementation of threading.local which is
+  friendlier towards reference cycles.  This change is not normally visible
+  since an optimized C implementation (_thread._local) is used instead.
+
+- Issue #6394: os.getppid() is now supported on Windows.  Note that it will
+  still return the id of the parent process after it has exited.  This process
+  id may even have been reused by another unrelated process.
+
+- Issue #9792: In case of connection failure, socket.create_connection() would
+  swallow the exception and raise a new one, making it impossible to fetch the
+  original errno, or to filter timeout errors.  Now the original error is
+  re-raised.
+
+- Issue #9758: When fcntl.ioctl() was called with mutable_flag set to True, and
+  the passed buffer was exactly 1024 bytes long, the buffer wouldn't be updated
+  back after the system call.  Original patch by Brian Brazil.
+
+- Updates to the random module:
+
+  * Document which parts of the module are guaranteed to stay the same across
+    versions and which parts are subject to change.
+
+  * Update the seed() method to use all of the bits in a string instead of just
+    the hash value.  This makes better use of the seed value and assures the
+    seeding is platform independent.  Issue #7889.
+
+  * Improved the random()-->integer algorithm used in choice(), shuffle(),
+    sample(), randrange(), and randint().  Formerly, it used int(n*random())
+    which has a slight bias whenever n is not a power of two.  Issue #9025.
+
+  * Improved documentation of arguments to randrange().  Issue #9379.
+
+- collections.OrderedDict now supports a new method for repositioning keys to
+  either end.
+
+- Issue #9754: Similarly to assertRaises and assertRaisesRegexp, unittest test
+  cases now also have assertWarns and assertWarnsRegexp methods to check that a
+  given warning type was triggered by the code under test.
+
+- Issue #5506: BytesIO objects now have a getbuffer() method exporting a view of
+  their contents without duplicating them.  The view is both readable and
+  writable.
+
+- Issue #7566: Implement os.path.sameopenfile for Windows.
+
+- Issue #9293: I/O streams now raise ``io.UnsupportedOperation`` when an
+  unsupported operation is attempted (for example, writing to a file open only
+  for reading).
+
+- hashlib has two new constant attributes: algorithms_guaranteed and
+  algorithms_avaiable that respectively list the names of hash algorithms
+  guaranteed to exist in all Python implementations and the names of hash
+  algorithms available in the current process.
+
+- A new package ``concurrent.futures`` as defined by PEP 3148.
+
+C-API
+-----
+
+- Add PyErr_SyntaxLocationEx, which supports passing a column offset.
+
+- Issue #9834: Don't segfault in PySequence_GetSlice, PySequence_SetSlice, or
+  PySequence_DelSlice when the object doesn't have any mapping operations
+  defined.
+
+Tools/Demos
+-----------
+
+- Issue #9188: The gdb extension now handles correctly narrow (UCS2) as well as
+  wide (UCS4) unicode builds for both the host interpreter (embedded inside gdb)
+  and the interpreter under test.
+
+Tests
+-----
+
+- Issue #9308: Added tests for importing encoded modules that do not
+  depend on specific stdlib modules being encoded in a certain way.
+
+- Issue #1051: Add a script (Lib/test/make_ssl_certs.py) to generate the custom
+  certificate and private key files used by SSL-related certs.
+
+- Issue #9978: Wait until subprocess completes initialization. (Win32KillTests
+  in test_os)
+
+- Issue #7110: regrtest now sends test failure reports and single-failure
+  tracebacks to stderr rather than stdout.
+
+- Issue #9628: fix runtests.sh -x option so more than one test can be excluded.
+
+- Issue #9899: Fix test_tkinter.test_font on various platforms.  Patch by Ned
+  Deily.
+
+- Issue #9894: Do not hardcode ENOENT in test_subprocess.
+
+- Issue #9315: Added tests for the trace module.  Patch by Eli Bendersky.
+
+- Issue #9323: Make test.regrtest.__file__ absolute, this was not always the
+  case when running profile or trace, for example.
+
+- Issue #9568: Fix test_urllib2_localnet on OS X 10.3.
+
+Build
+-----
+
+- Issue #10062: Allow building on platforms which do not have sem_timedwait.
+
+- Issue #10054: Some platforms provide uintptr_t in inttypes.h.  Patch by Akira
+  Kitada.
+
+- Issue #10055: Make json C89-compliant in UCS4 mode.
+
+- Issue #9552: Avoid unnecessary rebuild of OpenSSL. (Windows)
+
+- Issue #1633863: Don't ignore $CC under AIX.
+
+- Issue #9810: Compile bzip2 source files in Python's project file directly. It
+  used to be built with bzip2's makefile.
+
+- Issue #9848: Stopping trying to build _weakref in setup.py as it is a built-in
+  module.
+
+- Issue #9806: python-config now has an ``--extension-suffix`` option that
+  outputs the suffix for dynamic libraries including the ABI version name
+  defined by PEP 3149.
+
+- Issue #941346: Improve the build process under AIX and allow Python to be
+  built as a shared library.  Patch by Sébastien Sablé.
+
+- Issue #4026: Make the fcntl extension build under AIX.  Patch by Sébastien
+  Sablé.
+
+- Issue #9701: The MacOSX installer can patch the shell profile to ensure that
+  the "bin" directory inside the framework is on the shell's search path. This
+  feature now also supports the ZSH shell.
+
+
+What's New in Python 3.2 Alpha 2?
+=================================
+
+*Release date: 05-Sep-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #9225: Remove the ROT_FOUR and DUP_TOPX opcode, the latter replaced by
+  the new (and simpler) DUP_TOP_TWO.  Performance isn't changed, but our
+  bytecode is a bit simplified.  Patch by Demur Rumed.
+
+- Issue #9766: Rename poorly named variables exposed by _warnings to prevent
+  confusion with the proper variables names from 'warnings' itself.
+
+- Issue #9212: dict_keys and dict_items now provide the isdisjoint() method, to
+  conform to the Set ABC.  Patch by Daniel Urban.
+
+- Issue #9737: Fix a crash when trying to delete a slice or an item from a
+  memoryview object.
+
+- Issue #9549: sys.setdefaultencoding() and PyUnicode_SetDefaultEncoding() are
+  now removed, since their effect was inexistent in 3.x (the default encoding is
+  hardcoded to utf-8 and cannot be changed).
+
+- Issue #7415: PyUnicode_FromEncodedObject() now uses the new buffer API
+  properly.  Patch by Stefan Behnel.
+
+- Issue #5553: The Py_LOCAL_INLINE macro now results in inlining on most
+  platforms.  Previously, it inlined only when using Microsoft Visual C.
+
+- Issue #9712: Fix tokenize on identifiers that start with non-ascii names.
+
+- Issue #9688: __basicsize__ and __itemsize__ must be accessed as Py_ssize_t.
+
+- Issue #9684: Added a definition for SIZEOF_WCHAR_T to PC/pyconfig.h, to match
+  the pyconfig.h generated by configure on other systems.
+
+- Issue #9666: Only catch AttributeError in hasattr(). All other exceptions that
+  occur during attribute lookup are now propagated to the caller.
+
+- Issue #8622: Add PYTHONFSENCODING environment variable to override the
+  filesystem encoding.
+
+- Issue #5127: The C functions that access the Unicode Database now accept and
+  return characters from the full Unicode range, even on narrow unicode builds
+  (Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible difference
+  in Python is that unicodedata.numeric() now returns the correct value for
+  large code points, and repr() may consider more characters as printable.
+
+- Issue #9425: Create PyModule_GetFilenameObject() function to get the filename
+  as a unicode object, instead of a byte string. Function needed to support
+  unencodable filenames. Deprecate PyModule_GetFilename() in favor on the new
+  function.
+
+- Issue #8063: Call _PyGILState_Init() earlier in Py_InitializeEx().
+
+- Issue #9612: The set object is now 64-bit clean under Windows.
+
+- Issue #8202: sys.argv[0] is now set to '-m' instead of '-c' when searching for
+  the module file to be executed with the -m command line option.
+
+- Issue #9599: Create PySys_FormatStdout() and PySys_FormatStderr() functions to
+  write a message formatted by PyUnicode_FromFormatV() to sys.stdout and
+  sys.stderr.
+
+- Issue #9542: Create PyUnicode_FSDecoder() function, a ParseTuple converter:
+  decode bytes objects to unicode using PyUnicode_DecodeFSDefaultAndSize(); str
+  objects are output as-is.
+
+- Issue #9203: Computed gotos are now enabled by default on supported compilers
+  (which are detected by the configure script).  They can still be disable
+  selectively by specifying --without-computed-gotos.
+
+- Issue #9425: Create PyErr_WarnFormat() function, similar to PyErr_WarnEx() but
+  use PyUnicode_FromFormatV() to format the warning message.
+
+- Issue #8530: Prevent stringlib fastsearch from reading beyond the front of an
+  array.
+
+- Issue #5319: Print an error if flushing stdout fails at interpreter shutdown.
+
+- Issue #9337: The str() of a float or complex number is now identical to its
+  repr().
+
+- Issue #9416: Fix some issues with complex formatting where the output with no
+  type specifier failed to match the str output:
+
+    - format(complex(-0.0, 2.0), '-') omitted the real part from the output,
+    - format(complex(0.0, 2.0), '-') included a sign and parentheses.
+
+Extension Modules
+-----------------
+
+- Issue #8013: time.asctime and time.ctime no longer call system
+  asctime and ctime functions.  The year range for time.asctime is now
+  1900 through maxint.  The range for time.ctime is the same as for
+  time.localtime.  The string produced by these functions is longer
+  than 24 characters when year is greater than 9999.
+
+- Issue #6608: time.asctime is now checking struct tm fields its input
+  before passing it to the system asctime.  Patch by MunSic Jeong.
+
+- Issue #8734: Avoid crash in msvcrt.get_osfhandle() when an invalid file
+  descriptor is provided.  Patch by Pascal Chambon.
+
+- Issue #7736: Release the GIL around calls to opendir() and closedir() in the
+  posix module.  Patch by Marcin Bachry.
+
+- Issue #4835: make PyLong_FromSocket_t() and PyLong_AsSocket_t() private to the
+  socket module, and fix the width of socket descriptors to be correctly
+  detected under 64-bit Windows.
+
+- Issue #1027206: Support IDNA in gethostbyname, gethostbyname_ex, getaddrinfo
+  and gethostbyaddr.  getnameinfo is now restricted to numeric addresses as
+  input.
+
+- Issue #9214: Set operations on a KeysView or ItemsView in collections now
+  correctly return a set.  Patch by Eli Bendersky.
+
+- Issue #5737: Add Solaris-specific mnemonics in the errno module.  Patch by
+  Matthew Ahrens.
+
+- Restore GIL in nis_cat in case of error. Decode NIS data to fs encoding, using
+  the surrogate error handler.
+
+- Issue #665761: ``functools.reduce()`` will no longer mask exceptions other
+  than ``TypeError`` raised by the iterator argument.
+
+- Issue #9570: Use PEP 383 decoding in os.mknod and os.mkfifo.
+
+- Issue #6915: Under Windows, os.listdir() didn't release the Global Interpreter
+  Lock around all system calls.  Original patch by Ryan Kelly.
+
+- Issue #8524: Add a detach() method to socket objects, so as to put the socket
+  into the closed state without closing the underlying file descriptor.
+
+- Issue #477863: Emit a ResourceWarning at shutdown if gc.garbage is not empty.
+
+- Issue #6869: Fix a refcount problem in the _ctypes extension.
+
+- Issue #5504: ctypes should now work with systems where mmap can't be
+  PROT_WRITE and PROT_EXEC.
+
+- Issue #9507: Named tuple repr will now automatically display the right name in
+  a tuple subclass.
+
+- Issue #9324: Add parameter validation to signal.signal on Windows in order to
+  prevent crashes.
+
+- Issue #9526: Remove some outdated (int) casts that were preventing the array
+  module from working correctly with arrays of more than 2**31 elements.
+
+- Fix memory leak in ssl._ssl._test_decode_cert.
+
+- Issue #8065: Fix memory leak in readline module (from failure to free the
+  result of history_get_history_state()).
+
+- Issue #9450: Fix memory leak in readline.replace_history_item and
+  readline.remove_history_item for readline version >= 5.0.
+
+- Issue #8105: Validate file descriptor passed to mmap.mmap on Windows.
+
+- Issue #8046: Add context manager protocol support and .closed property to mmap
+  objects.
+
+Library
+-------
+
+- Issue #7451: Improve decoding performance of JSON objects, and reduce the
+  memory consumption of said decoded objects when they use the same strings as
+  keys.
+
+- Issue #1100562: Fix deep-copying of objects derived from the list and dict
+  types.  Patch by Michele Orrù and Björn Lindqvist.
+
+- Issue #9753: Fixed socket.dup, which did not always work correctly on Windows.
+
+- Issue #9421: Made the get<type> methods consistently accept the vars and
+  default arguments on all parser classes.
+
+- Issue #7005: Fixed output of None values for RawConfigParser.write and
+  ConfigParser.write.
+
+- Issue #8990: array.fromstring() and array.tostring() get renamed to
+  frombytes() and tobytes(), respectively, to avoid confusion.  Furthermore,
+  array.frombytes(), array.extend() as well as the array.array() constructor now
+  accept bytearray objects.  Patch by Thomas Jollans.
+
+- Issue #808164: Fixed socket.close to avoid references to globals, to avoid
+  issues when socket.close is called from a __del__ method.
+
+- Issue #9706: ssl module provides a better error handling in various
+  circumstances.
+
+- Issue #1868: Eliminate subtle timing issues in thread-local objects by getting
+  rid of the cached copy of thread-local attribute dictionary.
+
+- Issue #1512791: In setframerate() in the wave module, non-integral frame rates
+  are rounded to the nearest integer.
+
+- Issue #8797: urllib2 does a retry for Basic Authentication failure instead of
+  falling into recursion.
+
+- Issue #1194222: email.utils.parsedate now returns RFC2822 compliant four
+  character years even if the message contains RFC822 two character years.
+
+- Issue #8750: Fixed MutableSet's methods to correctly handle reflexive
+  operations on its self, namely x -= x and x ^= x.
+
+- Issue #9129: smtpd.py is vulnerable to DoS attacks deriving from missing error
+  handling when accepting a new connection.
+
+- Issue #9601: ftplib now provides a workaround for non-compliant
+  implementations such as IIS shipped with Windows server 2003 returning invalid
+  response codes for MKD and PWD commands.
+
+- Issue #658749: asyncore's connect() method now correctly interprets winsock
+  errors.
+
+- Issue #9501: Fixed logging regressions in cleanup code.
+
+- Fix functools.total_ordering() to skip methods inherited from object.
+
+- Issue #9572: Importlib should not raise an exception if a directory it thought
+  it needed to create was done concurrently by another process.
+
+- Issue #9617: Signals received during a low-level write operation aren't
+  ignored by the buffered IO layer anymore.
+
+- Issue #843590: Make "macintosh" an alias to the "mac_roman" encoding.
+
+- Create os.fsdecode(): decode from the filesystem encoding with surrogateescape
+  error handler, or strict error handler on Windows.
+
+- Issue #3488: Provide convenient shorthand functions ``gzip.compress`` and
+  ``gzip.decompress``.  Original patch by Anand B. Pillai.
+
+- Issue #8807: poplib.POP3_SSL class now accepts a context parameter, which is a
+  ssl.SSLContext object allowing bundling SSL configuration options,
+  certificates and private keys into a single (potentially long-lived)
+  structure.
+
+- Issue #8866: parameters passed to socket.getaddrinfo can now be specified as
+  single keyword arguments.
+
+- Address XXX comment in dis.py by having inspect.py prefer to reuse the dis.py
+  compiler flag values over defining its own.
+
+- Issue #9147: Added dis.code_info() which is similar to show_code() but returns
+  formatted code information in a string rather than displaying on screen.
+
+- Issue #9567: functools.update_wrapper now adds a __wrapped__ attribute
+  pointing to the original callable.
+
+- Issue #3445: functools.update_wrapper now tolerates missing attributes on
+  wrapped callables.
+
+- Issue #5867: Add abc.abstractclassmethod and abc.abstractstaticmethod.
+
+- Issue #9605: posix.getlogin() decodes the username with file filesystem
+  encoding and surrogateescape error handler. Patch written by David Watson.
+
+- Issue #9604: posix.initgroups() encodes the username using the fileystem
+  encoding and surrogateescape error handler. Patch written by David Watson.
+
+- Issue #9603: posix.ttyname() and posix.ctermid() decode the terminal name
+  using the filesystem encoding and surrogateescape error handler. Patch written
+  by David Watson.
+
+- Issue #7647: The posix module now has the ST_RDONLY and ST_NOSUID constants,
+  for use with the statvfs() function.  Patch by Adam Jackson.
+
+- Issue #8688: MANIFEST files created by distutils now include a magic comment
+  indicating they are generated.  Manually maintained MANIFESTs without this
+  marker will not be overwritten or removed.
+
+- Issue #7467: when reading a file from a ZIP archive, its CRC is checked and a
+  BadZipfile error is raised if it doesn't match (as used to be the case in
+  Python 2.5 and earlier).
+
+- Issue #9550: a BufferedReader could issue an additional read when the original
+  read request had been satisfied, which could block indefinitely when the
+  underlying raw IO channel was e.g. a socket.  Report and original patch by
+  Jason V. Miller.
+
+- Issue #3757: thread-local objects now support cyclic garbage collection.
+  Thread-local objects involved in reference cycles will be deallocated timely
+  by the cyclic GC, even if the underlying thread is still running.
+
+- Issue #9452: Add read_file, read_string, and read_dict to the configparser
+  API; new source attribute to exceptions.
+
+- Issue #6231: Fix xml.etree.ElementInclude to include the tail of the current
+  node.
+
+- Issue #8047: Fix the xml.etree serializer to return bytes by default.  Use
+  ``encoding="unicode"`` to generate a Unicode string.
+
+- Issue #8280: urllib2's Request method will remove fragments in the url.  This
+  is how it is supposed to work, wget and curl do the same.  Previous behavior
+  was wrong.
+
+- Issue #6683: For SMTP logins we now try all authentication methods advertised
+  by the server.  Many servers are buggy and advertise authentication methods
+  they do not support in reality.
+
+- Issue #8814: function annotations (the ``__annotations__`` attribute) are now
+  included in the set of attributes copied by default by functools.wraps and
+  functools.update_wrapper.  Patch by Terrence Cole.
+
+- Issue #2944: asyncore doesn't handle connection refused correctly.
+
+- Issue #4184: Private attributes on smtpd.SMTPChannel made public and deprecate
+  the private attributes. Add tests for smtpd module.
+
+- Issue #3196: email header decoding is now forgiving if an RFC2047 encoded word
+  encoded in base64 is lacking padding.
+
+- Issue #9444: Argparse now uses the first element of prefix_chars as the option
+  character for the added 'h/help' option if prefix_chars does not contain a
+  '-', instead of raising an error.
+
+- Issue #7372: Fix pstats regression when stripping paths from profile data
+  generated with the profile module.
+
+- Issue #9428: Fix running scripts with the profile/cProfile modules from the
+  command line.
+
+- Issue #7781: Fix restricting stats by entry counts in the pstats interactive
+  browser.
+
+- Issue #9209: Do not crash in the pstats interactive browser on invalid regular
+  expressions.
+
+- Update collections.OrderedDict to match the implementation in Py2.7 (based on
+  lists instead of weakly referenced Link objects).
+
+- Issue #8397: Raise an error when attempting to mix iteration and regular reads
+  on a BZ2File object, rather than returning incorrect results.
+
+- Issue #9448: Fix a leak of OS resources (mutexes or semaphores) when
+  re-initializing a buffered IO object by calling its ``__init__`` method.
+
+- Issue #1713: Fix os.path.ismount(), which returned true for symbolic links
+  across devices.
+
+- Issue #8826: Properly load old-style "expires" attribute in http.cookies.
+
+- Issue #1690103: Fix initial namespace for code run with trace.main().
+
+- Issue #7395: Fix tracebacks in pstats interactive browser.
+
+- Issue #8230: Fix Lib/test/sortperf.py.
+
+- Issue #8620: when a cmd.Cmd() is fed input that reaches EOF without a final
+  newline, it no longer truncates the last character of the last command line.
+
+- Issue #5146: Handle UID THREAD command correctly in imaplib.
+
+- Issue #5147: Fix the header generated for cookie files written by
+  http.cookiejar.MozillaCookieJar.
+
+- Issue #8198: In pydoc, output all help text to the correct stream when
+  sys.stdout is reassigned.
+
+- Issue #7909: Do not touch paths with the special prefixes ``\\.\`` or ``\\?\``
+  in ntpath.normpath().
+
+- Issue #1286: Allow using fileinput.FileInput as a context manager.
+
+- Add lru_cache() decorator to the functools module.
+
+Tools/Demos
+-----------
+
+- Fix ``Tools/scripts/checkpyc.py`` after PEP 3147.
+
+- Issue #8867: Fix ``Tools/scripts/serve.py`` to work with files containing
+  non-ASCII content.
+
+Tests
+-----
+
+- Issue #9601: Provide a test case for ftplib.parse257.
+
+- Issue #8857: Provide a test case for socket.getaddrinfo.
+
+- Issue #7564: Skip test_ioctl if another process is attached to /dev/tty.
+
+- Issue #8433: Fix test_curses failure with newer versions of ncurses.
+
+- Issue #9496: Provide a test suite for the rlcompleter module.  Patch by
+  Michele Orrù.
+
+- Issue #8687: provide a test suite for sched.py module.
+
+Build
+-----
+
+- Issue #1303434: Generate ZIP file containing all PDBs.
+
+- Issue #9193: PEP 3149 is accepted.
+
+- Issue #3101: Helper functions _add_one_to_index_C() and _add_one_to_index_F()
+  become _Py_add_one_to_index_C() and _Py_add_one_to_index_F(), respectively.
+
+- Issue #9700: define HAVE_BROKEN_POSIX_SEMAPHORES under AIX 6.x.  Patch by
+  Sébastien Sablé.
+
+- Don't run pgen twice when using make -j.
+
+
+What's New in Python 3.2 Alpha 1?
+=================================
+
+*Release date: 01-Aug-2010*
+
+Core and Builtins
+-----------------
+
+- Issue #8991: convertbuffer() rejects discontigious buffers.
+
+- Issue #7616: Fix copying of overlapping memoryview slices with the Intel
+  compiler.
+
+- Issue #8413: structsequence now subclasses tuple.
+
+- Issue #8271: during the decoding of an invalid UTF-8 byte sequence, only the
+  start byte and the continuation byte(s) are now considered invalid, instead of
+  the number of bytes specified by the start byte.  E.g.:
+  '\xf1\x80AB'.decode('utf-8', 'replace') now returns u'\ufffdAB' and replaces
+  with U+FFFD only the start byte ('\xf1') and the continuation byte ('\x80')
+  even if '\xf1' is the start byte of a 4-bytes sequence.  Previous versions
+  returned a single u'\ufffd'.
+
+- Issue #9011: A negated imaginary literal (e.g., "-7j") now has real part -0.0
+  rather than 0.0.  So "-7j" is now exactly equivalent to "-(7j)".
+
+- Be more specific in error messages about positional arguments.
+
+- Issue #8949: "z" format of PyArg_Parse*() functions doesn't accept bytes
+  objects, as described in the documentation.
+
+- Issue #6543: Write the traceback in the terminal encoding instead of utf-8.
+  Fix the encoding of the modules filename.  Patch written by Amaury Forgeot
+  d'Arc.
+
+- Issue #9011: Remove buggy and unnecessary (in 3.x) ST->AST compilation code
+  dealing with unary minus applied to a constant.  The removed code was mutating
+  the ST, causing a second compilation to fail.
+
+- Issue #850997: mbcs encoding (Windows only) handles errors argument: strict
+  mode raises unicode errors.  The encoder only supports "strict" and "replace"
+  error handlers, the decoder only supports "strict" and "ignore" error
+  handlers.  Patch written by Mark Hammond.
+
+- Issue #8850: Remove "w" and "w#" formats from PyArg_Parse*() functions, use
+  "w*" format instead. Add tests for "w*" format.
+
+- Issue #8592: PyArg_Parse*() functions raise a TypeError for "y", "u" and "Z"
+  formats if the string contains a null byte/character.  Write unit tests for
+  string formats.
+
+- Issue #7490: To facilitate sharing of doctests between 2.x and 3.x test
+  suites, the IGNORE_EXCEPTION_DETAIL directive now also ignores the module
+  location of the raised exception.
+
+- Issue #8969: On Windows, use mbcs codec in strict mode to encode and decode
+  filenames and enable os.fsencode().
+
+- Issue #9058: Remove assertions about INT_MAX in UnicodeDecodeError.
+
+- Issue #8941: Decoding big endian UTF-32 data in UCS-2 builds could crash the
+  interpreter with characters outside the Basic Multilingual Plane (higher than
+  0x10000).
+
+- Issue #8950: (See also issue #5080).  Py_ArgParse*() functions now raise
+  TypeError instead of giving a DeprecationWarning when a float is parsed using
+  the 'L' code (for long long).  (All other integer codes already raise
+  TypeError in this case.)
+
+- Issue #8922: Normalize the encoding name in PyUnicode_AsEncodedString() to
+  enable shortcuts for upper case encoding name. Add also a shortcut for
+  "iso-8859-1" in PyUnicode_AsEncodedString() and PyUnicode_Decode().
+
+- Issue #8838: Remove codecs.charbuffer_encode() function.  The buffer protocol
+  doesn't support "char buffer" anymore in Python 3.
+
+- Issue #8339: Remove "t#" format of PyArg_Parse*() functions, use "s#" or "s*"
+  instead.  codecs.charbuffer_encode() now accepts modifiable buffer objects
+  like bytearray.
+
+- Issue #8837: Remove "O?" format of PyArg_Parse*() functions.  The format is no
+  used anymore and it was never documented.
+
+- In str.format(), raise a ValueError when indexes to arguments are too large.
+
+- Issue #2844: Make int('42', n) consistently raise ValueError for invalid
+  integers n (including n = -909).
+
+- Issue #8188: Introduce a new scheme for computing hashes of numbers (instances
+  of int, float, complex, decimal.Decimal and fractions.Fraction) that makes it
+  easy to maintain the invariant that hash(x) == hash(y) whenever x and y have
+  equal value.
+
+- Issue #8748: Fix two issues with comparisons between complex and integer
+  objects.  (1) The comparison could incorrectly return True in some cases
+  (2**53+1 == complex(2**53) == 2**53), breaking transitivity of equality.
+  (2) The comparison raised an OverflowError for large integers, leading to
+  unpredictable exceptions when combining integers and complex objects in sets
+  or dicts.
+
+- Issue #8766: Initialize _warnings module before importing the first module.
+  Fix a crash if an empty directory called "encodings" exists in sys.path.
+
+- Issue #8589: Decode PYTHONWARNINGS environment variable with the file system
+  encoding and surrogateescape error handler instead of the locale encoding to
+  be consistent with os.environ.  Add PySys_AddWarnOptionUnicode() function.
+
+- PyObject_Dump() encodes unicode objects to utf8 with backslashreplace (instead
+  of strict) error handler to escape surrogates.
+
+- Issue #8715: Create PyUnicode_EncodeFSDefault() function: Encode a Unicode
+  object to Py_FileSystemDefaultEncoding with the "surrogateescape" error
+  handler, and return bytes.  If Py_FileSystemDefaultEncoding is not set, fall
+  back to UTF-8.
+
+- Enable shortcuts for common encodings in PyUnicode_AsEncodedString() for any
+  error handler, not only the default error handler (strict).
+
+- Issue #8610: Load file system codec at startup, and display a fatal error on
+  failure.  Set the file system encoding to utf-8 (instead of None) if getting
+  the locale encoding failed, or if nl_langinfo(CODESET) function is missing.
+
+- PyFile_FromFd() uses PyUnicode_DecodeFSDefault() instead of
+  PyUnicode_FromString() to support surrogates in the filename and use the right
+  encoding.
+
+- Issue #7507: Quote "!" in pipes.quote(); it is special to some shells.
+
+- PyUnicode_DecodeFSDefaultAndSize() uses surrogateescape error handler.
+
+- Issue #8419: Prevent the dict constructor from accepting non-string keyword
+  arguments.
+
+- Issue #8124: PySys_WriteStdout() and PySys_WriteStderr() don't execute
+  indirectly Python signal handlers anymore because mywrite() ignores exceptions
+  (KeyboardInterrupt).
+
+- Issue #8092: Fix PyUnicode_EncodeUTF8() to support error handler producing
+  unicode string (eg. backslashreplace).
+
+- Issue #8485: PyUnicode_FSConverter() doesn't accept byteearray objects
+  anymore, you have to convert your bytearray filenames to bytes.
+
+- Issue #7332: Remove the 16KB stack-based buffer in
+  PyMarshal_ReadLastObjectFromFile, which doesn't bring any noticeable benefit
+  compared to the dynamic memory allocation fallback.  Patch by Charles-François
+  Natali.
+
+- Issue #8417: Raise an OverflowError when an integer larger than sys.maxsize is
+  passed to bytes or bytearray.
+
+- Issue #7301: Add environment variable $PYTHONWARNINGS.
+
+- Issue #8329: Don't return the same lists from select.select when no fds are
+  changed.
+
+- Issue #8259: 1L << (2**31) no longer produces an 'outrageous shift error' on
+  64-bit machines.  The shift count for either left or right shift is permitted
+  to be up to sys.maxsize.
+
+- Ensure that tokenization of identifiers is not affected by locale.
+
+- Issue #1222585: Added LDCXXSHARED for C++ support. Patch by Arfrever.
+
+- Raise a TypeError when trying to delete a T_STRING_INPLACE struct member.
+
+- Issue #8211: Save/restore CFLAGS around AC_PROG_CC in configure.in, in case it
+  is set.
+
+- Issue #8226: sys.setfilesystemencoding() raises a LookupError if the encoding
+  is unknown.
+
+- Issue #1583863: A str subclass can now override the __str__ method.
+
+- Issue #8014: Setting a T_UINT or T_PYSSIZET attribute of an object with
+  PyMemberDefs could produce an internal error; raise TypeError instead.
+
+- Issue #7845: Rich comparison methods on the complex type now return
+  NotImplemented rather than raising a TypeError when comparing with an
+  incompatible type; this allows user-defined classes to implement their own
+  comparisons with complex.
+
+- Issue #3137: Don't ignore errors at startup, especially a keyboard interrupt
+  (SIGINT). If an error occurs while importing the site module, the error is
+  printed and Python exits. Initialize the GIL before importing the site module.
+
+- Issue #7173: Generator finalization could invalidate sys.exc_info().
+
+- Issue #7544: Preallocate thread memory before creating the thread to avoid a
+  fatal error in low memory condition.
+
+- Issue #7820: The parser tokenizer restores all bytes in the right if the BOM
+  check fails.
+
+- Handle errors from looking up __prepare__ correctly.
+
+- Issue #5939: Add additional runtime checking to ensure a valid capsule in
+  Modules/_ctypes/callproc.c.
+
+- Issue #7309: Fix unchecked attribute access when converting
+  UnicodeEncodeError, UnicodeDecodeError, and UnicodeTranslateError to strings.
+
+- Issue #6902: Fix problem with built-in types format incorrectly with 0
+  padding.
+
+- Issue #7988: Fix default alignment to be right aligned for complex.__format__.
+  Now it matches other numeric types.
+
+- Issue #5988: Remove deprecated functions PyOS_ascii_formatd,
+  PyOS_ascii_strtod, and PyOS_ascii_atof.  Use PyOS_double_to_string and
+  PyOS_string_to_double instead.  See issue #5835 for the original deprecations.
+
+- Issue #7385: Fix a crash in `MemoryView_FromObject` when `PyObject_GetBuffer`
+  fails.  Patch by Florent Xicluna.
+
+- Issue #7788: Fix an interpreter crash produced by deleting a list slice with
+  very large step value.
+
+- Issue #7766: Change sys.getwindowsversion() return value to a named tuple and
+  add the additional members returned in an OSVERSIONINFOEX structure.  The new
+  members are service_pack_major, service_pack_minor, suite_mask, and
+  product_type.
+
+- Issue #7561: Operations on empty bytearrays (such as `int(bytearray())`) could
+  crash in many places because of the PyByteArray_AS_STRING() macro returning
+  NULL.  The macro now returns a statically allocated empty string instead.
+
+- Issue #6690: Optimize the bytecode for expressions such as `x in {1, 2, 3}`,
+  where the right hand operand is a set of constants, by turning the set into a
+  frozenset and pre-building it as a constant.  The comparison operation is made
+  against the constant instead of building a new set each time it is executed (a
+  similar optimization already existed which turned a list of constants into a
+  pre-built tuple).  Patch and additional tests by Dave Malcolm.
+
+- Issue #7622: Improve the split(), rsplit(), splitlines() and replace() methods
+  of bytes, bytearray and unicode objects by using a common implementation based
+  on stringlib's fast search.  Patch by Florent Xicluna.
+
+- Issue #7632: Fix various str -> float conversion bugs present in 2.7 alpha 2,
+  including: (1) a serious 'wrong output' bug that could occur for long (> 40
+  digit) input strings, (2) a crash in dtoa.c that occurred in debug builds when
+  parsing certain long numeric strings corresponding to subnormal values, (3) a
+  memory leak for some values large enough to cause overflow, and (4) a number
+  of flaws that could lead to incorrectly rounded results.
+
+- The __complex__ method is now looked up on the class of instances to make it
+  consistent with other special methods.
+
+- Issue #7462: Implement the stringlib fast search algorithm for the `rfind`,
+  `rindex`, `rsplit` and `rpartition` methods.  Patch by Florent Xicluna.
+
+- Issue #7604: Deleting an unset slotted attribute did not raise an
+  AttributeError.
+
+- Issue #7534: Fix handling of IEEE specials (infinities, nans, negative zero)
+  in ** operator.  The behaviour now conforms to that described in C99 Annex F.
+
+- Issue #1811: improve accuracy and cross-platform consistency for true division
+  of integers: the result of a/b is now correctly rounded for ints a and b (at
+  least on IEEE 754 platforms), and in particular does not depend on the
+  internal representation of an int.
+
+- Issue #6834: replace the implementation for the 'python' and 'pythonw'
+  executables on OSX.
+
+  These executables now work properly with the arch(1) command: ``arch -ppc
+  python`` will start a universal binary version of python in PPC mode (unlike
+  previous releases).
+
+- Issue #7466: Segmentation fault when the garbage collector is called in the
+  middle of populating a tuple.  Patch by Florent Xicluna.
+
+- Issue #7419: setlocale() could crash the interpreter on Windows when called
+  with invalid values.
+
+- Issue #6077: On Windows, files opened with tempfile.TemporaryFile in "wt+"
+  mode would appear truncated on the first '0x1a' byte (aka. Ctrl+Z).
+
+- Issue #7085: Fix crash when importing some extensions in a thread on MacOSX
+  10.6.
+
+- Issue #1757126: Fix the cyrillic-asian alias for the ptcp154 encoding.
+
+- Issue #6970: Remove redundant calls when comparing objects that don't
+  implement the relevant rich comparison methods.
+
+- Issue #7298: Fixes for range and reversed(range(...)).  Iteration over
+  range(a, b, c) incorrectly gave an empty iterator when a, b and c fit in C
+  long but the length of the range did not.  Also fix several cases where
+  reversed(range(a, b, c)) gave wrong results, and fix a refleak for
+  reversed(range(a, b, c)) with large arguments.
+
+- Issue #7244: itertools.izip_longest() no longer ignores exceptions raised
+  during the formation of an output tuple.
+
+- Issue #3297: On wide unicode builds, do not split unicode characters into
+  surrogates.
+
+- Remove length limitation when constructing a complex number from a string.
+
+- Issue #1087418: Boost performance of bitwise operations for longs.
+
+- Support for AtheOS has been completely removed from the code base. It was
+  disabled since Python 3.0.
+
+- Support for several legacy threading libraries has been disabled. These
+  libraries are: Mach C threads, SunOS LWP, GNU pth, Irix threads. Support code
+  will be entirely removed in 3.3.
+
+- Support for OSF* has been disabled. If nobody stands up, support will be
+  removed in 3.3. See <http://bugs.python.org/issue8606>.
+
+- Peephole constant folding had missed UNARY_POSITIVE.
+
+- Issue #1722344: threading._shutdown() is now called in Py_Finalize(), which
+  fixes the problem of some exceptions being thrown at shutdown when the
+  interpreter is killed. Patch by Adam Olsen.
+
+- Issue #7147: Remove support for compiling Python without complex number
+  support.
+
+- Issue #7120: logging: Removed import of multiprocessing which is causing crash
+  in GAE.
+
+- Issue #1754094: Improve the stack depth calculation in the compiler.  There
+  should be no other effect than a small decrease in memory use.  Patch by
+  Christopher Tur Lesniewski-Laas.
+
+- Issue #7065: Fix a crash in bytes.maketrans and bytearray.maketrans when using
+  byte values greater than 127.  Patch by Derk Drukker.
+
+- Issue #1571184: The Unicode database contains properties for more characters.
+  The tables for code points representing numeric values, white spaces or line
+  breaks are now generated from the official Unicode Character Database files,
+  and include information from the Unihan.txt file.
+
+- Issue #7019: Raise ValueError when unmarshalling bad long data, instead of
+  producing internally inconsistent Python longs.
+
+- Issue #6990: Fix threading.local subclasses leaving old state around after a
+  reference cycle GC which could be recycled by new locals.
+
+- Issue #5460: Fix an ambiguity in the grammar.
+
+- Issue #1766304: Improve performance of membership tests on range objects.
+
+- Issue #6713: Improve performance of integer -> string conversions.
+
+- Issue #6846: Fix bug where bytearray.pop() returns negative integers.
+
+- Issue #6750: A text file opened with io.open() could duplicate its output when
+  writing from multiple threads at the same time.
+
+- Issue #6707: dir() on an uninitialized module caused a crash.
+
+- Issue #6540: Fixed crash for bytearray.translate() with invalid parameters.
+
+- Issue #6573: set.union() stopped processing inputs if an instance of self
+  occurred in the argument chain.
+
+- Issue #6070: On posix platforms import no longer copies the execute bit from
+  the .py file to the .pyc file if it is set.
+
+- Issue #1616979: Added the cp720 (Arabic DOS) encoding.
+
+- Issue #6428: Since Python 3.0, the __bool__ method must return a bool object,
+  and not an int.  Fix the corresponding error message, and the documentation.
+
+- The deprecated PyCObject has been removed.
+
+- Issue #6347: Include inttypes.h as well as stdint.h in pyport.h.  This fixes a
+  build failure on HP-UX: int32_t and uint32_t are defined in inttypes.h instead
+  of stdint.h on that platform.
+
+- Issue #6373: Fixed a SystemError when encoding with the latin-1 codec and the
+  'surrogateescape' error handler, a string which contains unpaired surrogates.
+
+- Issue #4856: Remove checks for win NT.
+
+- Issue #6687: PyBytes_FromObject() no longer accepts an integer as its argument
+  to construct a null-initialized bytes object.
+
+- Issue #1023290: Add from_bytes() and to_bytes() methods to integers.  These
+  methods allow the conversion of integers to bytes, and vice-versa.
+
+- Issue #7382: Fix bug in bytes.__getnewargs__ that prevented bytes instances
+  from being copied with copy.copy(), and bytes subclasses from being pickled
+  properly.
+
+- Code objects now support weak references.
+
+- Issue #7072: isspace(0xa0) is true on Mac OS X.
+
+- Issue #8084: PEP 370 now conforms to system conventions for framework builds
+  on MacOS X. That is, "python setup.py install --user" will install into
+  "~/Library/Python/2.7" instead of "~/.local".
+
+C-API
+-----
+
+- Issue #2443: A new macro, `Py_VA_COPY`, copies the state of the
+  variable argument list.  `Py_VA_COPY` is equivalent to C99
+  `va_copy`, but available on all python platforms.
+
+- PySlice_GetIndicesEx now clips the step to [-PY_SSIZE_T_MAX, PY_SSIZE_T_MAX]
+  instead of [-PY_SSIZE_T_MAX-1, PY_SSIZE_T_MAX].  This makes it safe to do
+  "step = -step" when reversing a slice.
+
+- Issue #5753: A new C API function, `PySys_SetArgvEx`, allows embedders of the
+  interpreter to set sys.argv without also modifying sys.path.  This helps fix
+  `CVE-2008-5983
+  <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_.
+
+- Add PyArg_ValidateKeywordArguments, which checks if all keyword arguments are
+  strings in an efficient manner.
+
+- Issue #8276: PyEval_CallObject() is now only available in macro form.  The
+  function declaration, which was kept for backwards compatibility reasons, is
+  now removed (the macro was introduced in 1997!).
+
+- Issue #7767: New function PyLong_AsLongLongAndOverflow added, analogous to
+  PyLong_AsLongAndOverflow.
+
+- Make PyUnicode_CompareWithASCIIString return not equal if the Python string
+  has '\0' at the end.
+
+- Issue #5080: The argument parsing functions PyArg_ParseTuple,
+  PyArg_ParseTupleAndKeywords, PyArg_VaParse, PyArg_VaParseTupleAndKeywords and
+  PyArg_Parse now raise a DeprecationWarning for float arguments passed with the
+  'L' format code.  This will become a TypeError in a future version of Python,
+  to match the behaviour of the other integer format codes.
+
+- Issue #7033: Function ``PyErr_NewExceptionWithDoc()`` added.
+
+- Issue #7414: 'C' code wasn't being skipped properly (for keyword arguments) in
+  PyArg_ParseTupleAndKeywords.
+
+- Issue #7228: Add '%lld' and '%llu' support to PyString_FromFormat(V) and
+  PyErr_Format, on machines with HAVE_LONG_LONG defined.
+
+- Issue #6151: Made PyDescr_COMMON conform to standard C (like PyObject_HEAD in
+  PEP 3123).  The PyDescr_TYPE and PyDescr_NAME macros should be should used for
+  accessing the d_type and d_name members of structures using PyDescr_COMMON.
+
+- Issue #6405: Remove duplicate type declarations in descrobject.h.
+
+- The code flags for old __future__ features are now available again.
+
+- Issue #5954: Add a PyFrame_GetLineNumber() function to replace most uses of
+  PyCode_Addr2Line().
+
+- Issue #5959: Add a PyCode_NewEmpty() function to create a new empty code
+  object at a specified file, function, and line number.
+
+- Issue #1419652: Change the first argument to PyImport_AppendInittab() to
+  ``const char *`` as the string is stored beyond the call.
+
+- Issue #2422: When compiled with the ``--with-valgrind`` option, the pymalloc
+  allocator will be automatically disabled when running under Valgrind.  This
+  gives improved memory leak detection when running under Valgrind, while taking
+  advantage of pymalloc at other times.
+
+Library
+-------
+
+- In pdb, when Ctrl-C is entered while defining commands for a breakpoint, the
+  old commands are restored.
+
+- For traceback debugging, the pdb listing now also shows the locations where
+  the exception was originally (re)raised, if it differs from the last line
+  executed (e.g. in case of finally clauses).
+
+- The pdb command "source" has been added.  It displays the source code for a
+  given object, if possible.
+
+- The pdb command "longlist" has been added.  It displays the whole source code
+  for the current function.
+
+- Issue #1503502: Make pdb.Pdb easier to subclass by putting message and error
+  output into methods.
+
+- Issue #809887: Make the output of pdb's breakpoint deletions more consistent;
+  emit a message when a breakpoint is enabled or disabled.
+
+- Issue #5294: Fix the behavior of pdb's "continue" command when called in the
+  top-level debugged frame.
+
+- Issue #5727: Restore the ability to use readline when calling into pdb in
+  doctests.
+
+- Issue #6719: In pdb, do not stop somewhere in the encodings machinery if the
+  source file to be debugged is in a non-builtin encoding.
+
+- Issue #8048: Prevent doctests from failing when sys.displayhook has been
+  reassigned.
+
+- Issue #8015: In pdb, do not crash when an empty line is entered as a
+  breakpoint command.
+
+- In pdb, allow giving a line number to the "until" command.
+
+- Issue #1437051: For pdb, allow "continue" and related commands in .pdbrc
+  files.  Also, add a command-line option "-c" that runs a command as if given
+  in .pdbrc.
+
+- Issue #4179: In pdb, allow "list ." as a command to return to the currently
+  debugged line.
+
+- Issue #4108: In urllib.robotparser, if there are multiple ``User-agent: *``
+  entries, consider the first one.
+
+- Issue #6630: Allow customizing regex flags when subclassing the
+  string.Template class.
+
+- Issue #9411: Allow specifying an encoding for config files in the configparser
+  module.
+
+- Issue #1682942: Improvements to configparser: support alternate delimiters,
+  alternate comment prefixes and empty lines in values.
+
+- Issue #9354: Provide getsockopt() in asyncore's file_wrapper.
+
+- Issue #8966: ctypes: Remove implicit bytes-unicode conversion.
+
+- Issue #9378: python -m pickle <pickle file> will now load and display the
+  first object in the pickle file.
+
+- Issue #4770: Restrict binascii module to accept only bytes (as specified).
+  And fix the email package to encode to ASCII instead of ``raw-unicode-escape``
+  before ASCII-to-binary decoding.
+
+- Issue #9384: ``python -m tkinter`` will now display a simple demo applet.
+
+- The default size of the re module's compiled regular expression cache has been
+  increased from 100 to 500 and the cache replacement policy has changed from
+  simply clearing the entire cache on overflow to forgetting the least recently
+  used cached compiled regular expressions.  This is a performance win for
+  applications that use a lot of regular expressions and limits the impact of
+  the performance hit anytime the cache is exceeded.
+
+- Issue #7113: Speed up loading in configparser. Patch by Łukasz Langa.
+
+- Issue #9032: XML-RPC client retries the request on EPIPE error.  The EPIPE
+  error occurs when the server closes the socket and the client sends a big
+  XML-RPC request.
+
+- Issue #4629: getopt raises an error if an argument ends with "=", whereas
+  getopt doesn't accept a value (eg. --help= is rejected if getopt uses
+  ['help='] long options).
+
+- Issue #7989: Added pure python implementation of the `datetime` module.  The C
+  module is renamed to `_datetime` and if available, overrides all classes
+  defined in datetime with fast C impementation.  Python implementation is based
+  on the original python prototype for the datetime module by Tim Peters with
+  minor modifications by the PyPy project.  The test suite now tests `datetime`
+  module with and without `_datetime` acceleration using the same test cases.
+
+- Issue #7895: platform.mac_ver() no longer crashes after calling os.fork().
+
+- Issue #9323: Fixed a bug in trace.py that resulted in loosing the name of the
+  script being traced.  Patch by Eli Bendersky.
+
+- Issue #9282: Fixed --listfuncs option of trace.py.  Thanks Eli Bendersky for
+  the patch.
+
+- Issue #3704: http.cookiejar was not properly handling URLs with a / in the
+  parameters.
+
+- Issue #9268: ``pickletools.dis()`` now has an optional *annotate* argument
+  which controls printing of opcode descriptions in ``dis()`` output.
+
+- Issue #1555570: email no longer inserts extra blank lines when a \r\n combo
+  crosses an 8192 byte boundary.
+
+- Issue #9243: Fix sndhdr module and add unit tests, contributed by James Lee.
+
+- ``ast.literal_eval()`` now allows byte literals.
+
+- Issue #9137: Fix issue in MutableMapping.update, which incorrectly treated
+  keyword arguments called 'self' or 'other' specially.
+
+- ``ast.literal_eval()`` now allows set literals.
+
+- Issue #9164: Ensure that sysconfig handles duplicate -arch flags in CFLAGS.
+
+- Issue #7646: The fnmatch pattern cache no longer grows without bound.
+
+- Issue #9136: Fix 'dictionary changed size during iteration' RuntimeError
+  produced when profiling the decimal module.  This was due to a dangerous
+  iteration over 'locals()' in Context.__init__.
+
+- Fix extreme speed issue in Decimal.pow when the base is an exact power of 10
+  and the exponent is tiny (for example, ``Decimal(10) **
+  Decimal('1e-999999999')``).
+
+- Issue #9186: Fix math.log1p(-1.0) to raise ValueError, not OverflowError.
+
+- Issue #9130: Fix validation of relative imports in parser module.
+
+- Issue #9128: Fix validation of class decorators in parser module.
+
+- Issue #9094: python -m pickletools will now disassemble pickle files listed in
+  the command line arguments.  See output of python -m pickletools -h for more
+  details.
+
+- Issue #5468: urlencode to handle bytes type and other encodings in its query
+  parameter. Patch by Dan Mahn.
+
+- Issue #7673: Fix security vulnerability (CVE-2010-2089) in the audioop module,
+  ensure that the input string length is a multiple of the frame size.
+
+- Issue #6507: Accept source strings in dis.dis().  Original patch by Daniel
+  Urban.
+
+- Issue #7829: Clearly document that the dis module is exposing an
+  implementation detail that is not stable between Python VMs or releases.
+
+- Issue #6589: cleanup asyncore.socket_map in case smtpd.SMTPServer constructor
+  raises an exception.
+
+- Issue #9110: Addition of ContextDecorator to contextlib, for creating APIs
+  that act as both context managers and decorators. contextmanager changes to
+  use ContextDecorator.
+
+- Implement importlib.abc.SourceLoader and deprecate PyLoader and PyPycLoader
+  for removal in Python 3.4.
+
+- Issue #9064: pdb's "up" and "down" commands now accept an optional argument
+  giving the number of frames to go.
+
+- Issue #9018: os.path.normcase() now raises a TypeError if the argument is not
+  ``str`` or ``bytes``.
+
+- Issue #9075: In the ssl module, remove the setting of a ``debug`` flag on an
+  OpenSSL structure.
+
+- Issue #8682: The ssl module now temporary increments the reference count of a
+  socket object got through ``PyWeakref_GetObject``, so as to avoid possible
+  deallocation while the object is still being used.
+
+- Issue #1368368: FancyURLOpener class changed to throw an Exception on wrong
+  password instead of presenting an interactive prompt.  Older behavior can be
+  obtained by passing retry=True to http_error_xxx methods of FancyURLOpener.
+
+- Issue #8720: Fix regression caused by fix for #4050 by making getsourcefile
+  smart enough to find source files in the linecache.
+
+- Issue #5610: feedparser no longer eats extra characters at the end of a body
+  part if the body part ends with a ``\r\n``.
+
+- Issue #8986: math.erfc was incorrectly raising OverflowError for values
+  between -27.3 and -30.0 on some platforms.
+
+- Issue #8784: Set tarfile default encoding to 'utf-8' on Windows.
+
+- Issue #8966: If a ctypes structure field is an array of c_char, convert its
+  value to bytes instead of str (as done for c_char and c_char_p).
+
+- Issue #8188: Comparisons between Decimal and Fraction objects are now
+  permitted, returning a result based on the exact numerical values of the
+  operands.  This builds on issue #2531, which allowed Decimal-to-float
+  comparisons; all comparisons involving numeric types (bool, int, float,
+  complex, Decimal, Fraction) should now act as expected.
+
+- Issue #8897: Fix sunau module, use bytes to write the header. Patch written by
+  Thomas Jollans.
+
+- Issue #8899: time.struct_time now has class and attribute docstrings.
+
+- Issue #6470: Drop UNC prefix in FixTk.
+
+- Issue #4768: base64 encoded email body parts were incorrectly stored as binary
+  strings.  They are now correctly converted to strings.
+
+- Issue #8833: tarfile created hard link entries with a size field != 0 by
+  mistake.
+
+- Charset.body_encode now correctly handles base64 encoding by encoding with the
+  output_charset before calling base64mime.encode.  Passes the tests from 2.x
+  issue #1368247.
+
+- Issue #8845: sqlite3 Connection objects now have a read-only in_transaction
+  attribute that is True iff there are uncommitted changes.
+
+- Issue #1289118: datetime.timedelta objects can now be multiplied by float and
+  divided by float and int objects.  Results are rounded to the nearest multiple
+  of timedelta.resolution with ties resolved using round-half-to-even method.
+
+- Issue #7150: Raise OverflowError if the result of adding or subtracting
+  timedelta from date or datetime falls outside of the MINYEAR:MAXYEAR range.
+
+- Issue #8806: add SSL contexts support to ftplib.
+
+- Issue #4769: Fix main() function of the base64 module, use sys.stdin.buffer
+  and sys.stdout.buffer (instead of sys.stdin and sys.stdout) to use the bytes
+  API.
+
+- Issue #8770: Now sysconfig displays information when it's called as a script.
+  Initial idea by Sridhar Ratnakumar.
+
+- Issue #6662: Fix parsing of malformatted charref (&#bad;), patch written by
+  Fredrik Håård.
+
+- Issue #8540: Decimal module: rename the Context._clamp attribute to
+  Context.clamp and make it public.  This is useful in creating contexts that
+  correspond to the decimal interchange formats specified in IEEE 754.
+
+- Issue #6268: Fix seek() method of codecs.open(), don't read or write the BOM
+  twice after seek(0). Fix also reset() method of codecs, UTF-16, UTF-32 and
+  StreamWriter classes.
+
+- Issue #3798: sys.exit(message) writes the message to sys.stderr file, instead
+  of the C file stderr, to use stderr encoding and error handler.
+
+- Issue #8782: Add a trailing newline in linecache.updatecache to the last line
+  of files without one.
+
+- Issue #8729: Return NotImplemented from collections.Mapping.__eq__ when
+  comparing to a non-mapping.
+
+- Issue #8774: tabnanny uses the encoding cookie (#coding:...) to use the
+  correct encoding.
+
+- Issue #4870: Add an `options` attribute to SSL contexts, as well as several
+  ``OP_*`` constants to the `ssl` module.  This allows to selectively disable
+  protocol versions, when used in combination with `PROTOCOL_SSLv23`.
+
+- Issue #8759: Fixed user paths in sysconfig for posix and os2 schemes.
+
+- Issue #8663: distutils.log emulates backslashreplace error handler. Fix
+  compilation in a non-ASCII directory if stdout encoding is ASCII (eg. if
+  stdout is not a TTY).
+
+- Issue #8513: os.get_exec_path() supports b'PATH' key and bytes value.
+  subprocess.Popen() and os._execvpe() support bytes program name. Add
+  os.supports_bytes_environ flag: True if the native OS type of the environment
+  is bytes (eg. False on Windows).
+
+- Issue #8633: tarfile is now able to read and write archives with "raw" binary
+  pax headers as described in POSIX.1-2008.
+
+- Issue #1285086: Speed up urllib.parse functions: quote, quote_from_bytes,
+  unquote, unquote_to_bytes.
+
+- Issue #8688: Distutils now recalculates MANIFEST everytime.
+
+- Issue #8477: ssl.RAND_egd() and ssl._test_decode_cert() support str with
+  surrogates and bytes for the filename.
+
+- Issue #8550: Add first class ``SSLContext`` objects to the ssl module.
+
+- Issue #8681: Make the zlib module's error messages more informative when the
+  zlib itself doesn't give any detailed explanation.
+
+- The audioop module now supports sound fragments of length greater than 2**31
+  bytes on 64-bit machines, and is PY_SSIZE_T_CLEAN.
+
+- Issue #4972: Add support for the context manager protocol to the ftplib.FTP
+  class.
+
+- Issue #8664: In py_compile, create __pycache__ when the compiled path is
+  given.
+
+- Issue #8514: Add os.fsencode() function (Unix only): encode a string to bytes
+  for use in the file system, environment variables or the command line.
+
+- Issue #8571: Fix an internal error when compressing or decompressing a chunk
+  larger than 1GB with the zlib module's compressor and decompressor objects.
+
+- Issue #8603: Support bytes environmental variables on Unix: Add os.environb
+  mapping and os.getenvb() function. os.unsetenv() encodes str argument to the
+  file system encoding with the surrogateescape error handler (instead of
+  utf8/strict) and accepts bytes. posix.environ keys and values are now bytes.
+
+- Issue #8573: asyncore _strerror() function might throw ValueError.
+
+- Issue #8483: asyncore.dispatcher's __getattr__ method produced confusing error
+  messages when accessing undefined class attributes because of the cheap
+  inheritance with the underlying socket object.  The cheap inheritance has been
+  deprecated.
+
+- Issue #4265: shutil.copyfile() was leaking file descriptors when disk fills.
+  Patch by Tres Seaver.
+
+- Issue #8390: tarfile uses surrogateescape as the default error handler
+  (instead of replace in read mode or strict in write mode).
+
+- Issue #7755: Use an unencumbered audio file for tests.
+
+- Issue #8621: uuid.uuid4() returned the same sequence of values in the parent
+  and any children created using ``os.fork`` on MacOS X 10.6.
+
+- Issue #8567: Fix precedence of signals in Decimal module: when a Decimal
+  operation raises multiple signals and more than one of those signals is
+  trapped, the specification determines the order in which the signals should be
+  handled.  In many cases this order wasn't being followed, leading to the wrong
+  Python exception being raised.
+
+- Issue #7865: The close() method of ``io`` objects should not swallow
+  exceptions raised by the implicit flush().  Also qensure that calling close()
+  several times is supported.  Patch by Pascal Chambon.
+
+- Issue #4687: Fix accuracy of garbage collection runtimes displayed with
+  gc.DEBUG_STATS.
+
+- Issue #8354: The siginterrupt setting is now preserved for all signals, not
+  just SIGCHLD.
+
+- Issue #7192: webbrowser.get("firefox") now works on Mac OS X, as does
+  webbrowser.get("safari").
+
+- Issue #8464: tarfile no longer creates files with execute permissions set when
+  mode="w|" is used.
+
+- Issue #7834: Fix connect() of Bluetooth L2CAP sockets with recent versions of
+  the Linux kernel.  Patch by Yaniv Aknin.
+
+- Issue #8295: Added shutil.unpack_archive.
+
+- Issue #6312: Fixed http HEAD request when the transfer encoding is chunked.
+  It should correctly return an empty response now.
+
+- Issue #8546: Reject None given as the buffering argument to _pyio.open.
+
+- Issue #8549: Fix compiling the _ssl extension under AIX.  Patch by
+  Sridhar Ratnakumar.
+
+- Issue #6656: fix locale.format_string to handle escaped percents
+  and mappings.
+
+- Issue #2302: Fix a race condition in SocketServer.BaseServer.shutdown, where
+  the method could block indefinitely if called just before the event loop
+  started running.  This also fixes the occasional freezes witnessed in
+  test_httpservers.
+
+- Issue #8524: When creating an SSL socket, the timeout value of the original
+  socket wasn't retained (instead, a socket with a positive timeout would be
+  turned into a non-blocking SSL socket).
+
+- Issue #5103: SSL handshake would ignore the socket timeout and block
+  indefinitely if the other end didn't respond.
+
+- The do_handshake() method of SSL objects now adjusts the blocking mode of the
+  SSL structure if necessary (as other methods already do).
+
+- Issue #8391: os.execvpe() and os.getenv() supports unicode with surrogates and
+  bytes strings for environment keys and values.
+
+- Issue #8467: Pure Python implementation of subprocess encodes the error
+  message using surrogatepass error handler to support surrogates in the
+  message.
+
+- Issue #8468: bz2.BZ2File() accepts str with surrogates and bytes filenames.
+
+- Issue #8451: Syslog module now uses basename(sys.argv[0]) instead of the
+  string "python" as the *ident*.  openlog() arguments are all optional and
+  keywords.
+
+- Issue #8108: Fix the unwrap() method of SSL objects when the socket has a
+  non-infinite timeout.  Also make that method friendlier with applications
+  wanting to continue using the socket in clear-text mode, by disabling
+  OpenSSL's internal readahead.  Thanks to Darryl Miles for guidance.
+
+- Issue #8496: make mailcap.lookup() always return a list, rather than an
+  iterator.  Patch by Gregory Nofi.
+
+- Issue #8195: Fix a crash in sqlite Connection.create_collation() if the
+  collation name contains a surrogate character.
+
+- Issue #8484: Load all ciphers and digest algorithms when initializing the _ssl
+  extension, such that verification of some SSL certificates doesn't fail
+  because of an "unknown algorithm".
+
+- Issue #6547: Added the ignore_dangling_symlinks option to shutil.copytree.
+
+- Issue #1540112: Now allowing the choice of a copy function in shutil.copytree.
+
+- Issue #4814: timeout parameter is now applied also for connections resulting
+  from PORT/EPRT commands.
+
+- Issue #8463: added missing reference to bztar in shutil's documentation.
+
+- Issue #7154: urllib.request can now detect the proxy settings on OSX 10.6 (as
+  long as the user didn't specify 'automatic proxy configuration').
+
+- Issue #3817: ftplib.FTP.abort() method now considers 225 a valid response code
+  as stated in RFC-959 at chapter 5.4.
+
+- Issue #8394: _ctypes.dlopen() accepts bytes, bytearray and str with
+  surrogates.
+
+- Issue #850728: Add a *timeout* parameter to the `acquire()` method of
+  `threading.Semaphore` objects.  Original patch by Torsten Landschoff.
+
+- Issue #8322: Add a *ciphers* argument to SSL sockets, so as to change the
+  available cipher list.  Helps fix test_ssl with OpenSSL 1.0.0.
+
+- Issue #8393: subprocess accepts bytes, bytearray and str with surrogates for
+  the current working directory.
+
+- Issue #7606: XML-RPC traceback stored in X-traceback is now encoded to ASCII
+  using backslashreplace error handler.
+
+- Issue #8412: os.system() now accepts bytes, bytearray and str with surrogates.
+
+- Issue #2987: RFC2732 support for urlparse (IPv6 addresses). Patch by Tony
+  Locke and Hans Ulrich Niedermann.
+
+- Issue #5277: Fix quote counting when parsing RFC 2231 encoded parameters.
+
+- Issue #7316: The acquire() method of lock objects in the ``threading``
+  module now takes an optional timeout argument in seconds.  Timeout support
+  relies on the system threading library, so as to avoid a semi-busy wait loop.
+
+- Issue #8383: pickle and pickletools use surrogatepass error handler when
+  encoding unicode as utf8 to support lone surrogates and stay compatible with
+  Python 2.x and 3.x.
+
+- Issue #7585: difflib context and unified diffs now place a tab between
+  filename and date, conforming to the 'standards' they were originally designed
+  to follow.  This improves compatibility with patch tools.
+
+- Issue #7472: Fixed typo in email.encoders module; messages using ISO-2022
+  character sets will now consistently use a Content-Transfer-Encoding of 7bit
+  rather than sometimes being marked as 8bit.
+
+- Issue #8375: test_distutils now checks if the temporary directory are still
+  present before it cleans them.
+
+- Issue #8374: Update the internal alias table in the ``locale`` module to
+  cover recent locale changes and additions.
+
+- Issue #8321: Give access to OpenSSL version numbers from the `ssl` module,
+  using the new attributes `ssl.OPENSSL_VERSION`, `ssl.OPENSSL_VERSION_INFO` and
+  `ssl.OPENSSL_VERSION_NUMBER`.
+
+- Add functools.total_ordering() and functools.cmp_to_key().
+
+- Issue #8257: The Decimal construct now accepts a float instance directly,
+  converting that float to a Decimal of equal value:
+
+     >>> Decimal(1.1)
+     Decimal('1.100000000000000088817841970012523233890533447265625')
+
+- Issue #8294: The Fraction constructor now accepts Decimal and float instances
+  directly.
+
+- Issue #7279: Comparisons involving a Decimal signaling NaN now signal
+  InvalidOperation instead of returning False.  (Comparisons involving a quiet
+  NaN are unchanged.)  Also, Decimal quiet NaNs are now hashable; Decimal
+  signaling NaNs remain unhashable.
+
+- Issue #2531: Comparison operations between floats and Decimal instances now
+  return a result based on the numeric values of the operands; previously they
+  returned an arbitrary result based on the relative ordering of id(float) and
+  id(Decimal).  See also issue #8188, which adds Decimal-to-Fraction
+  comparisons.
+
+- Added a subtract() method to collections.Counter().
+
+- Issue #8233: When run as a script, py_compile.py optionally takes a single
+  argument `-` which tells it to read files to compile from stdin.  Each line is
+  read on demand and the named file is compiled immediately.  (Original patch by
+  Piotr Ożarowski).
+
+- Backwards incompatible change: Unicode codepoints line tabulation (0x0B) and
+  form feed (0x0C) are now considered linebreaks, as specified in Unicode
+  Standard Annex #14.  See issue #7643.  http://www.unicode.org/reports/tr14/
+
+- Comparisons using one of <, <=, >, >= between a complex instance and a
+  Fractions instance now raise TypeError instead of returning True/False.  This
+  makes Fraction <=> complex comparisons consistent with int <=> complex, float
+  <=> complex, and complex <=> complex comparisons.
+
+- Issue #8139: ossaudiodev didn't initialize its types properly, therefore some
+  methods (such as oss_mixer_device.fileno()) were not available.  Initial patch
+  by Bertrand Janin.
+
+- Issue #8205: Remove the "Modules" directory from sys.path when Python is
+  running from the build directory (POSIX only).
+
+- Issue #7512: shutil.copystat() could raise an OSError when the filesystem
+  didn't support chflags() (for example ZFS under FreeBSD).  The error is now
+  silenced.
+
+- Issue #7860: platform.uname now reports the correct 'machine' type when Python
+  is running in WOW64 mode on 64 bit Windows.
+
+- Issue #3890, #8222: Fix recv() and recv_into() on non-blocking SSL sockets.
+  Also, enable the SSL_MODE_AUTO_RETRY flag on SSL sockets, so that blocking
+  reads and writes are always retried by OpenSSL itself.
+
+- Issue #4282: Fix the main function of the profile module for a non-ASCII
+  script, open the file in binary mode and not in text mode with the default
+  (utf8) encoding.
+
+- Issue #8179: Fix macpath.realpath() on a non-existing path.
+
+- Issue #8024: Update the Unicode database to 5.2.
+
+- Issue #8168: py_compile now handles files with utf-8 BOMS.
+
+- ``tokenize.detect_encoding`` now returns ``'utf-8-sig'`` when a UTF-8 BOM is
+  detected.
+
+- Issue #6716/2: Backslash-replace error output in compilall.
+
+- Issue #4961: Inconsistent/wrong result of askyesno function in tkMessageBox
+  with Tcl/Tk-8.5.
+
+- Issue #8140: extend compileall to compile single files.  Add -i option.
+
+- Issue #7356: ctypes.util: Make parsing of ldconfig output independent of the
+  locale.
+
+- The internals of the subprocess module on POSIX systems have been replaced by
+  an extension module (_posixsubprocess) so that the fork()+exec() can be done
+  safely without the possibility of deadlock in multithreaded applications.
+
+- subprocess.Popen now has restore_signals and start_new_session features.  The
+  default of restore_signals=True is a new behavior compared to earlier Python
+  versions.  This means that signals such as SIGPIPE are not ignored by default
+  in subprocesses launched by Python (Issue #1652).
+
+- Issue #6472: The xml.etree package is updated to ElementTree 1.3.  The
+  cElementTree module is updated too.
+
+- Issue #7774: Set sys.executable to an empty string if argv[0] has been set to
+  an non existent program name and Python is unable to retrieve the real program
+  name.
+
+- Issue #7880: Fix sysconfig when the python executable is a symbolic link.
+
+- Issue #6509: fix re.sub to work properly when the pattern, the string, and the
+  replacement were all bytes.  Patch by Antoine Pitrou.
+
+- The sqlite3 module was updated to pysqlite 2.6.0. This fixes several obscure
+  bugs and allows loading SQLite extensions from shared libraries.
+
+- Issue #1054943: Fix ``unicodedata.normalize('NFC', text)`` for the Public
+  Review Issue #29 (http://unicode.org/review/pr-29.html).
+
+- Issue #7494: fix a crash in _lsprof (cProfile) after clearing the profiler,
+  reset also the pointer to the current pointer context.
+
+- Issue #7232: Add support for the context manager protocol to the TarFile
+  class.
+
+- Issue #7250: Fix info leak of os.environ across multi-run uses of
+  wsgiref.handlers.CGIHandler.
+
+- Issue #1729305: Fix doctest to handle encode error with "backslashreplace".
+
+- Issue #691291: codecs.open() should not convert end of lines on reading and
+  writing.
+
+- Issue #7869: logging: improved diagnostic for format-time errors.
+
+- Issue #7868: logging: added loggerClass attribute to Manager.
+
+- logging: Implemented PEP 391.
+
+- Issue #1537721: Add a writeheader() method to csv.DictWriter.
+
+- Issue #7959: ctypes callback functions are now registered correctly with the
+  cycle garbage collector.
+
+- Issue #5801: removed spurious empty lines in wsgiref.
+
+- Issue #6666: fix bug in trace.py that applied the list of directories to be
+  ignored only to the first file.  Noted by Bogdan Opanchuk.
+
+- Issue #7597: curses.use_env() can now be called before initscr().  Noted by
+  Kan-Ru Chen.
+
+- Issue #7310: fix the __repr__ of os.environ to show the environment variables.
+
+- Issue #7970: email.Generator.flatten now correctly flattens message/rfc822
+  messages parsed by email.Parser.HeaderParser.
+
+- Issue #7361: Importlib was not properly checking the number of bytes in
+  bytecode file when it was less then 8 bytes.
+
+- Issue #7633: In the decimal module, Context class methods (with the exception
+  of canonical and is_canonical) now accept instances of int and long wherever a
+  Decimal instance is accepted, and implicitly convert that argument to Decimal.
+  Previously only some arguments were converted.
+
+- Issue #7835: shelve should no longer produce mysterious warnings during
+  interpreter shutdown.
+
+- Issue #2746: Don't escape ampersands and angle brackets ("&", "<", ">") in XML
+  processing instructions and comments.  These raw characters are allowed by the
+  XML specification, and are necessary when outputting e.g.  PHP code in a
+  processing instruction.  Patch by Neil Muller.
+
+- Issue #6233: ElementTree failed converting unicode characters to XML entities
+  when they could't be represented in the requested output encoding.  Patch by
+  Jerry Chen.
+
+- Issue #6003: add an argument to ``zipfile.Zipfile.writestr`` to specify the
+  compression type.
+
+- Issue #4772: Raise a ValueError when an unknown Bluetooth protocol is
+  specified, rather than fall through to AF_PACKET (in the `socket` module).
+  Also, raise ValueError rather than TypeError when an unknown TIPC address type
+  is specified.  Patch by Brian Curtin.
+
+- Issue #6939: Fix file I/O objects in the `io` module to keep the original file
+  position when calling `truncate()`.  It would previously change the file
+  position to the given argument, which goes against the tradition of
+  ftruncate() and other truncation APIs.  Patch by Pascal Chambon.
+
+- Issue #7610: Reworked implementation of the internal
+  ``zipfile.ZipExtFile`` class used to represent files stored inside an
+  archive.  The new implementation is significantly faster and can be wrapped in
+  a ``io.BufferedReader`` object for more speedups.  It also solves an
+  issue where interleaved calls to `read()` and `readline()` give wrong results.
+  Patch by Nir Aides.
+
+- Issue #6963: Added "maxtasksperchild" argument to multiprocessing.Pool,
+  allowing for a maximum number of tasks within the pool to be completed by the
+  worker before that worker is terminated, and a new one created to replace it.
+
+- Issue #7792: Registering non-classes to ABCs raised an obscure error.
+
+- Issue #7785: Don't accept bytes in FileIO.write().
+
+- Removed the functions 'verify' and 'vereq' from Lib/test/support.py.
+
+- Issue #7773: Fix an UnboundLocalError in platform.linux_distribution() when
+  the release file is empty.
+
+- Issue #7561: Fix crashes when using bytearray objects with the posix
+  module.
+
+- Issue #1670765: Prevent email.generator.Generator from re-wrapping headers in
+  multipart/signed MIME parts, which fixes one of the sources of invalid
+  modifications to such parts by Generator.
+
+- Issue #7703: Add support for the new buffer API to `binascii.a2bhqx`.  Patch
+  by Florent Xicluna, along with some additional tests.
+
+- Issue #7701: Fix crash in binascii.b2a_uu() in debug mode when given a 1-byte
+  argument.  Patch by Victor Stinner.
+
+- Issue #3299: Fix possible crash in the _sre module when given bad argument
+  values in debug mode.  Patch by Victor Stinner.
+
+- Issue #2846: Add support for gzip.GzipFile reading zero-padded files.  Patch
+  by Brian Curtin.
+
+- Issue #7681: Use floor division in appropiate places in the wave module.
+
+- Issue #5372: Drop the reuse of .o files in Distutils' ccompiler (since
+  Extension extra options may change the output without changing the .c
+  file). Initial patch by Collin Winter.
+
+- Issue #7617: Make sure distutils.unixccompiler.UnixCCompiler recognizes gcc
+  when it has a fully qualified configuration prefix. Initial patch by Arfrever.
+
+- Issue #7105: Make WeakKeyDictionary and WeakValueDictionary robust against the
+  destruction of weakref'ed objects while iterating.
+
+- Issue #7455: Fix possible crash in cPickle on invalid input.  Patch by Victor
+  Stinner.
+
+- Issue #1628205: Socket file objects returned by socket.socket.makefile() now
+  properly handles EINTR within the read, readline, write & flush methods.  The
+  socket.sendall() method now properly handles interrupted system calls.
+
+- Issue #7471: Improve the performance of GzipFile's buffering mechanism, and
+  make it implement the `io.BufferedIOBase` ABC to allow for further speedups by
+  wrapping it in an `io.BufferedReader`.  Patch by Nir Aides.
+
+- Issue #3972: http.client.HTTPConnection now accepts an optional source_address
+  parameter to allow specifying where your connections come from.
+
+- socket.create_connection now accepts an optional source_address parameter.
+
+- Issue #5511: now zipfile.ZipFile can be used as a context manager.  Initial
+  patch by Brian Curtin.
+
+- Issue #7556: Make sure Distutils' msvc9compile reads and writes the MSVC XML
+  Manifest file in text mode so string patterns can be used in regular
+  expressions.
+
+- Issue #7552: Removed line feed in the base64 Authorization header in the
+  Distutils upload command to avoid an error when PyPI reads it.  This occurs on
+  long passwords. Initial patch by JP St. Pierre.
+
+- Issue #7231: urllib2 cannot handle https with proxy requiring auth.  Patch by
+  Tatsuhiro Tsujikawa.
+
+- Issue #4757: `zlib.compress` and other methods in the zlib module now raise a
+  TypeError when given an `str` object (rather than a `bytes`-like object).
+  Patch by Victor Stinner and Florent Xicluna.
+
+- Issue #7349: Make methods of file objects in the io module accept None as an
+  argument where file-like objects (ie StringIO and BytesIO) accept them to mean
+  the same as passing no argument.
+
+- Issue #7357: tarfile no longer suppresses fatal extraction errors by default.
+
+- Issue #5949: added check for correct lineends in input from IMAP server in
+  imaplib.
+
+- Add count() and reverse() methods to collections.deque().
+
+- Fix variations of extending deques:  d.extend(d)  d.extendleft(d)  d+=d
+
+- Issue #6986: Fix crash in the JSON C accelerator when called with the wrong
+  parameter types.  Patch by Victor Stinner.
+
+- Issue #7457: added a read_pkg_file method to
+  distutils.dist.DistributionMetadata.
+
+- logging: Added optional `secure` parameter to SMTPHandler, to enable use of
+  TLS with authentication credentials.
+
+- Issue #1923: Fixed the removal of meaningful spaces when PKG-INFO is generated
+  in Distutils.  Patch by Stephen Emslie.
+
+- Issue #4120: Drop reference to CRT from manifest when building extensions with
+  msvc9compiler.
+
+- Issue #7333: The `posix` module gains an `initgroups()` function providing
+  access to the initgroups(3) C library call on Unix systems which implement it.
+  Patch by Jean-Paul Calderone.
+
+- Issue #7408: Fixed distutils.tests.sdist so it doesn't check for group
+  ownership when the group is not forced, because the group may be different
+  from the user's group and inherit from its container when the test is run.
+
+- Issue #4486: When an exception has an explicit cause, do not print its
+  implicit context too.  This affects the `traceback` module as well as built-in
+  exception printing.
+
+- Issue #1515: Enable use of deepcopy() with instance methods.  Patch by Robert
+  Collins.
+
+- Issue #7403: logging: Fixed possible race condition in lock creation.
+
+- Issue #6845: Add restart support for binary upload in ftplib.  The
+  `storbinary()` method of FTP and FTP_TLS objects gains an optional `rest`
+  argument.  Patch by Pablo Mouzo.
+
+- Issue #5788: `datetime.timedelta` objects get a new `total_seconds()` method
+  returning the total number of seconds in the duration.  Patch by Brian
+  Quinlan.
+
+- Issue #7133: SSL objects now support the new buffer API.
+
+- Issue #1488943: difflib.Differ() doesn't always add hints for tab characters.
+
+- Issue #6123: tarfile now opens empty archives correctly and consistently
+  raises ReadError on empty files.
+
+- Issue #7354: distutils.tests.test_msvc9compiler - dragfullwindows can be 2.
+
+- Issue #5037: Proxy the __bytes__ special method instead to __bytes__ instead
+  of __str__.
+
+- Issue #7341: Close the internal file object in the TarFile constructor in case
+  of an error.
+
+- Issue #7293: distutils.test_msvc9compiler is fixed to work on any fresh
+  Windows box. Help provided by David Bolen.
+
+- Issue #2054: ftplib now provides an FTP_TLS class to do secure FTP using TLS
+  or SSL.  Patch by Giampaolo Rodola'.
+
+- Issue #7328: pydoc no longer corrupts sys.path when run with the '-m' switch.
+
+- Issue #4969: The mimetypes module now reads the MIME database from the
+  registry under Windows.  Patch by Gabriel Genellina.
+
+- Issue #6816: runpy now provides a run_path function that allows Python code to
+  execute file paths that refer to source or compiled Python files as well as
+  zipfiles, directories and other valid sys.path entries that contain a
+  __main__.py file.  This allows applications that run other Python scripts to
+  support the same flexibility as the CPython command line itself.
+
+- Issue #7318: multiprocessing now uses a timeout when it fails to establish a
+  connection with another process, rather than looping endlessly.  The default
+  timeout is 20 seconds, which should be amply sufficient for local connections.
+
+- Issue #7197: Allow unittest.TextTestRunner objects to be pickled and
+  unpickled.  This fixes crashes under Windows when trying to run
+  test_multiprocessing in verbose mode.
+
+- Issue #7893: ``unittest.TextTestResult`` is made public and a ``resultclass``
+  argument added to the TextTestRunner constructor allowing a different result
+  class to be used without having to subclass.
+
+- Issue #7588: ``unittest.TextTestResult.getDescription`` now includes the test
+  name in failure reports even if the test has a docstring.
+
+- Issue #3001: Add a C implementation of recursive locks which is used by
+  default when instantiating a `threading.RLock` object. This makes recursive
+  locks as fast as regular non-recursive locks (previously, they were slower by
+  10x to 15x).
+
+- Issue #7282: Fix a memory leak when an RLock was used in a thread other than
+  those started through `threading.Thread` (for example, using
+  `_thread.start_new_thread()`).
+
+- Issue #7187: Importlib would not silence the IOError raised when trying to
+  write new bytecode when it was made read-only.
+
+- Issue #7264: Fix a possible deadlock when deallocating thread-local objects
+  which are part of a reference cycle.
+
+- Issue #7211: Allow 64-bit values for the `ident` and `data` fields of kevent
+  objects on 64-bit systems.  Patch by Michael Broghton.
+
+- Issue #6896: mailbox.Maildir now invalidates its internal cache each time a
+  modification is done through it.  This fixes inconsistencies and test failures
+  on systems with slightly bogus mtime behaviour.
+
+- Issue #7246 & Issue #7208: getpass now properly flushes input before reading
+  from stdin so that existing input does not confuse it and lead to incorrect
+  entry or an IOError.  It also properly flushes it afterwards to avoid the
+  terminal echoing the input afterwards on OSes such as Solaris.
+
+- Issue #7233: Fix a number of two-argument Decimal methods to make sure that
+  they accept an int or long as the second argument.  Also fix buggy handling of
+  large arguments (those with coefficient longer than the current precision) in
+  shift and rotate.
+
+- Issue #4750: Store the basename of the original filename in the gzip FNAME
+  header as required by RFC 1952.
+
+- Issue #1180: Added a new global option to ignore ~/.pydistutils.cfg in
+  Distutils.
+
+- Issue #7218: Fix test_site for win32, the directory comparison was done with
+  an uppercase.
+
+- Issue #7205: Fix a possible deadlock when using a BZ2File object from
+  several threads at once.
+
+- Issue #7077: logging: SysLogHandler now treats Unicode as per RFC 5424.
+
+- Issue #7099: Decimal.is_normal now returns True for numbers with exponent
+  larger than emax.
+
+- Issue #7080: locale.strxfrm() raises a MemoryError on 64-bit non-Windows
+  platforms, and assorted locale fixes by Derk Drukker.
+
+- Issue #5833: Fix extra space character in readline completion with the GNU
+  readline library version 6.0.
+
+- Issue #6894: Fixed the issue urllib2 doesn't respect "no_proxy" environment.
+
+- Issue #7086: Added TCP support to SysLogHandler, and tidied up some
+  anachronisms in the code which were a relic of 1.5.2 compatibility.
+
+- Issue #7082: When falling back to the MIME 'name' parameter, the correct place
+  to look for it is the Content-Type header.
+
+- Make tokenize.detect_coding() normalize utf-8 and iso-8859-1 variants like the
+  builtin tokenizer.
+
+- Issue #7048: Force Decimal.logb to round its result when that result is too
+  large to fit in the current precision.
+
+- Issue #6236, #6348: Fix various failures in the I/O library under AIX and
+  other platforms, when using a non-gcc compiler. Patch by Derk Drukker.
+
+- Issue #4606: Passing 'None' if ctypes argtype is set to POINTER(...)  does now
+  always result in NULL.
+
+- Issue #5042: Structure sub-subclass does now initialize correctly with base
+  class positional arguments.
+
+- Issue #6882: Import uuid creates zombies processes.
+
+- Issue #6635: Fix profiler printing usage message.
+
+- Issue #6856: Add a filter keyword argument to TarFile.add().
+
+- Issue #6888: pdb's alias command was broken when no arguments were given.
+
+- Issue #6857: Default format() alignment should be '>' for Decimal instances.
+
+- Issue #6795: int(Decimal('nan')) now raises ValueError instead of returning
+  NaN or raising InvalidContext.  Also, fix infinite recursion in
+  long(Decimal('nan')).
+
+- Issue #6850: Fix bug in Decimal._parse_format_specifier for formats with no
+  type specifier.
+
+- Issue #6239: ctypes.c_char_p return value must return bytes.
+
+- Issue #6838: Use a list to accumulate the value instead of repeatedly
+  concatenating strings in http.client's HTTPResponse._read_chunked providing a
+  significant speed increase when downloading large files servend with a
+  Transfer-Encoding of 'chunked'.
+
+- Trying to import a submodule from a module that is not a package, ImportError
+  should be raised, not AttributeError.
+
+- When the globals past to importlib.__import__() has __package__ set to None,
+  fall back to computing what __package__ should be instead of giving up.
+
+- Raise a TypeError when the name of a module to be imported for
+  importlib.__import__ is not a string (was raising an AttributeError before).
+
+- Allow the fromlist passed into importlib.__import__ to be any iterable.
+
+- Have importlib raise ImportError if None is found in sys.modules.
+
+- Issue #6054: Do not normalize stored pathnames in tarfile.
+
+- Issue #6794: Fix Decimal.compare_total and Decimal.compare_total_mag: NaN
+  payloads are now ordered by integer value rather than lexicographically.
+
+- Issue #1356969: Add missing info methods in tix.HList.
+
+- Issue #1522587: New constants and methods for the tix.Grid widget.
+
+- Issue #1250469: Fix the return value of tix.PanedWindow.panes.
+
+- Issue #1119673: Do not override tkinter.Text methods when creating a
+  ScrolledText.
+
+- Issue #6665: Fix fnmatch to properly match filenames with newlines in them.
+
+- Issue #1135: Add the XView and YView mix-ins to avoid duplicating the xview*
+  and yview* methods.
+
+- Issue #6629: Fix a data corruption issue in the new I/O library, which could
+  occur when writing to a BufferedRandom object (e.g. a file opened in "rb+" or
+  "wb+" mode) after having buffered a certain amount of data for reading. This
+  bug was not present in the pure Python implementation.
+
+- Issue #6622: Fix "local variable 'secret' referenced before assignment" bug in
+  POP3.apop.
+
+- Issue #2715: Remove remnants of Carbon.File from binhex module.
+
+- Issue #6595: The Decimal constructor now allows arbitrary Unicode decimal
+  digits in input, as recommended by the standard.  Previously it was restricted
+  to accepting [0-9].
+
+- Issue #6106: telnetlib.Telnet.process_rawq doesn't handle default WILL/WONT
+  DO/DONT correctly.
+
+- Issue #1424152: Fix for http.client, urllib.request to support SSL while
+  working through proxy.  Original patch by Christopher Li, changes made by
+  Senthil Kumaran.
+
+- Add importlib.abc.ExecutionLoader to represent the PEP 302 protocol for
+  loaders that allow for modules to be executed. Both importlib.abc.PyLoader and
+  PyPycLoader inherit from this class and provide implementations in relation to
+  other methods required by the ABCs.
+
+- importlib.abc.PyLoader did not inherit from importlib.abc.ResourceLoader like
+  the documentation said it did even though the code in PyLoader relied on the
+  abstract method required by ResourceLoader.
+
+- Issue #6431: Make Fraction type return NotImplemented when it doesn't know how
+  to handle a comparison without loss of precision.  Also add correct handling
+  of infinities and nans for comparisons with float.
+
+- Issue #6415: Fixed warnings.warn segfault on bad formatted string.
+
+- Issue #6358: The exit status of a command started with os.popen() was reported
+  differently than it did with python 2.x.
+
+- Issue #6323: The pdb debugger did not exit when running a script with a syntax
+  error.
+
+- Issue #3392: The subprocess communicate() method no longer fails in select()
+  when file descriptors are large; communicate() now uses poll() when possible.
+
+- Issue #6369: Fix an RLE decompression bug in the binhex module.
+
+- Issue #6344: Fixed a crash of mmap.read() when passed a negative argument.
+
+- The deprecated function string.maketrans has been removed.
+
+- Issue #4005: Fixed a crash of pydoc when there was a zip file present in
+  sys.path.
+
+- Issue #6218: io.StringIO and io.BytesIO instances are now picklable.
+
+- The os.get_exec_path() function to return the list of directories that will be
+  searched for an executable when launching a subprocess was added.
+
+- Issue #7481: When a threading.Thread failed to start it would leave the
+  instance stuck in initial state and present in threading.enumerate().
+
+- Issue #1068268: The subprocess module now handles EINTR in internal os.waitpid
+  and os.read system calls where appropriate.
+
+- Issue #6729: Added ctypes.c_ssize_t to represent ssize_t.
+
+- Issue #6247: The argparse module has been added to the standard library.
+
+- Issue #8235: _socket: Add the constant ``SO_SETFIB``.  SO_SETFIB is a socket
+  option available on FreeBSD 7.1 and newer.
+
+- Issue #9315: Fix for the trace module to record correct class name
+  for tracing methods.
+
+Extension Modules
+-----------------
+
+- Issue #9959: Tweak formula used for computing math.log of an integer,
+  making it marginally more accurate for exact powers of 2.
+
+- Issue #9422: Fix memory leak when re-initializing a struct.Struct object.
+
+- Issue #7900: The getgroups(2) system call on MacOSX behaves rather oddly
+  compared to other unix systems. In particular, os.getgroups() does not reflect
+  any changes made using os.setgroups() but basicly always returns the same
+  information as the id command. os.getgroups() can now return more than 16
+  groups on MacOSX.
+
+- Issue #6095: Make directory argument to os.listdir optional.
+
+- Issue #9277: Fix bug in struct.pack for bools in standard mode (e.g.,
+  struct.pack('>?')): if conversion to bool raised an exception then that
+  exception wasn't properly propagated on machines where char is unsigned.
+
+- Issue #5180: Fixed a bug that prevented loading 2.x pickles in 3.x python when
+  they contain instances of old-style classes.
+
+- Issue #9165: Add new functions math.isfinite and cmath.isfinite, to accompany
+  existing isinf and isnan functions.
+
+- Issue #1578269: Implement os.symlink for Windows 6.0+.  Patch by Jason
+  R. Coombs.
+
+- In struct.pack, correctly propogate exceptions from computing the truth of an
+  object in the '?' format.
+
+- Issue #9000: datetime.timezone objects now have eval-friendly repr.
+
+- In the math module, correctly lookup __trunc__, __ceil__, and __floor__ as
+  special methods.
+
+- Issue #9005: Prevent utctimetuple() from producing year 0 or year 10,000.
+  Prior to this change, timezone adjustment in utctimetuple() could produce
+  tm_year value of 0 or 10,000.  Now an OverflowError is raised in these edge
+  cases.
+
+- Issue #6641: The ``datetime.strptime`` method now supports the ``%z``
+  directive.  When the ``%z`` directive is present in the format string, an
+  aware ``datetime`` object is returned with ``tzinfo`` bound to a
+  ``datetime.timezone`` instance constructed from the parsed offset.  If both
+  ``%z`` and ``%Z`` are present, the data in ``%Z`` field is used for timezone
+  name, but ``%Z`` data without ``%z`` is discarded.
+
+- Issue #5094: The ``datetime`` module now has a simple concrete class
+  implementing ``datetime.tzinfo`` interface.  Instances of the new class,
+  ``datetime.timezone``, return fixed name and UTC offset from their
+  ``tzname(dt)`` and ``utcoffset(dt)`` methods.  The ``dst(dt)`` method always
+  returns ``None``.  A class attribute, ``utc`` contains an instance
+  representing the UTC timezone.  Original patch by Rafe Kaplan.
+
+- Issue #8973: Add __all__ to struct module; this ensures that help(struct)
+  includes documentation for the struct.Struct class.
+
+- Issue #3129: Trailing digits in struct format string are no longer ignored.
+  For example, "1" or "ilib123" are now invalid formats and cause
+  ``struct.error`` to be raised.  Patch by Caleb Deveraux.
+
+- Issue #7384: If the system readline library is linked against ncurses, the
+  curses module must be linked against ncurses as well. Otherwise it is not safe
+  to load both the readline and curses modules in an application.
+
+- Issue #2810: Fix cases where the Windows registry API returns ERROR_MORE_DATA,
+  requiring a re-try in order to get the complete result.
+
+- Issue #8692: Optimize math.factorial: replace the previous naive algorithm
+  with an improved 'binary-split' algorithm that uses fewer multiplications and
+  allows many of the multiplications to be performed using plain C integer
+  arithmetic instead of PyLong arithmetic.  Also uses a lookup table for small
+  arguments.
+
+- Issue #8674: Fixed a number of incorrect or undefined-behaviour-inducing
+  overflow checks in the audioop module.
+
+- Issue #8644: The accuracy of td.total_seconds() has been improved (by
+  calculating with integer arithmetic instead of float arithmetic internally):
+  the result is now always correctly rounded, and is equivalent to ``td /
+  timedelta(seconds=1)``.
+
+- Issue #2706: Allow division of a timedelta by another timedelta: timedelta /
+  timedelta, timedelta % timedelta, timedelta // timedelta and divmod(timedelta,
+  timedelta) are all supported.
+
+- Issue #8314: Fix unsigned long long bug in libffi on Sparc v8.
+
+- Issue #8300: When passing a non-integer argument to struct.pack with any
+  integer format code, struct.pack first attempts to convert the non-integer
+  using its __index__ method.  If that method is non-existent or raises
+  TypeError it goes on to try the __int__ method, as described below.
+
+- Issue #8142: Update libffi to the 3.0.9 release.
+
+- Issue #6949: Allow the _dbm extension to be built with db 4.8.x.
+
+- Issue #6544: Fix a reference leak in the kqueue implementation's error
+  handling.
+
+- Stop providing crtassem.h symbols when compiling with Visual Studio 2010, as
+  msvcr100.dll is not a platform assembly anymore.
+
+- Issue #6508: Add posix.{getresuid,getresgid,setresuid,setresgid}.
+
+- Issue #7078: Set struct.__doc__ from _struct.__doc__.
+
+- Issue #3366: Add erf, erfc, expm1, gamma, lgamma functions to math module.
+
+- Issue #6877: It is now possible to link the readline extension to the libedit
+  readline emulation on OSX 10.5 or later.
+
+- Issue #6848: Fix curses module build failure on OS X 10.6.
+
+- Fix a segfault that could be triggered by expat with specially formed input.
+
+- Issue #6561: '\d' in a regex now matches only characters with Unicode category
+  'Nd' (Number, Decimal Digit).  Previously it also matched characters with
+  category 'No'.
+
+- Issue #4509: Array objects are no longer modified after an operation failing
+  due to the resize restriction in-place when the object has exported buffers.
+
+- Issue #2389: Array objects are now pickled in a portable manner.
+
+- Expat: Fix DoS via XML document with malformed UTF-8 sequences
+  (CVE_2009_3560).
+
+- Issue #7242: On Solaris 9 and earlier calling os.fork() from within a thread
+  could raise an incorrect RuntimeError about not holding the import lock.  The
+  import lock is now reinitialized after fork.
+
+- Issue #7999: os.setreuid() and os.setregid() would refuse to accept a -1
+  parameter on some platforms such as OS X.
+
+- Build the ossaudio extension on GNU/kFreeBSD.
+
+- Issue #7347: winreg: Add CreateKeyEx and DeleteKeyEx, as well as fix a bug in
+  the return value of QueryReflectionKey.
+
+- Issue #7567: PyCurses_setupterm: Don't call ``setupterm`` twice.
+
+Build
+-----
+
+- Use OpenSSL 1.0.0a on Windows.
+
+- Issue #9280: Make sharedinstall depend on sharedmods.
+
+- Issue #9189: Make a user-specified CFLAGS, CPPFLAGS, or LDFLAGS setting
+  override the configure and makefile defaults, without deleting options the
+  user didn't intend to override.  Developers should no longer need to specify
+  OPT or EXTRA_CFLAGS, although those variables are still present for
+  backward-compatibility.
+
+- Issue #8854: Fix finding Visual Studio 2008 on Windows x64.
+
+- Issue #1759169, #8864: Drop _XOPEN_SOURCE on Solaris, define it for
+  multiprocessing only.
+
+- Issue #8625: Turn off optimization in --with-pydebug builds with gcc.
+  (Optimization was unintentionally turned on in gcc --with-pydebug builds as a
+  result of the issue #1628484 fix, combined with autoconf's strange choice of
+  default CFLAGS produced by AC_PROG_CC for gcc.)
+
+- Issue #3646: It is now easily possible to install a Python framework into your
+  home directory on MacOSX, see Mac/README for more information.
+
+- Issue #3928: os.mknod() now available in Solaris, also.
+
+- Issue #3326: Build Python without -fno-strict-aliasing when the gcc does not
+  give false warnings.
+
+- Issue #1628484: The Makefile doesn't ignore the CFLAGS environment variable
+  anymore.  It also forwards the LDFLAGS settings to the linker when building a
+  shared library.
+
+- Issue #6716: Quote -x arguments of compileall in MSI installer.  Exclude 2to3
+  tests from compileall.
+
+- Issue #3920, #7903: Define _BSD_SOURCE on OpenBSD 4.4 through 4.9.
+
+- Issue #7632: When Py_USING_MEMORY_DEBUGGER is defined, disable the private
+  memory allocation scheme in dtoa.c and use PyMem_Malloc and PyMem_Free
+  instead.  Also disable caching of powers of 5.
+
+- Issue #6491: Allow --with-dbmliborder to specify that no dbms will be built.
+
+- Issue #6943: Use pkg-config to find the libffi headers when the
+  --with-system-ffi flag is used.
+
+- Issue #7609: Add a --with-system-expat option that causes the system's expat
+  library to be used for the pyexpat module instead of the one included with
+  Python.
+
+- Issue #7589: Only build the nis module when the correct header files are
+  found.
+
+- Switch to OpenSSL 0.9.8l and sqlite 3.6.21 on Windows.
+
+- Issue #5792: Extend the short float repr support to x86 systems using
+  icc or suncc.
+
+- Issue #6603: Change READ_TIMESTAMP macro in ceval.c so that it compiles
+  correctly under gcc on x86-64.  This fixes a reported problem with the
+  --with-tsc build on x86-64.
+
+- Issue #6802: Fix build issues on MacOSX 10.6.
+
+- Issue #6244: Allow detect_tkinter to look for Tcl/Tk 8.6.
+
+- Issue #4601: 'make install' did not set the appropriate permissions on
+  directories.
+
+- Issue #5390: Add uninstall icon independent of whether file extensions are
+  installed.
+
+- Issue #7541: When using ``python-config`` with a framework install the
+  compiler might use the wrong library.
+
+- python-config now supports multiple options on the same command line.
+
+- Issue #8509: Fix quoting in help strings and code snippets in configure.in.
+
+- Issue #8510: Update to autoconf2.65.
+
+Documentation
+-------------
+
+- Issue #9817: Add expat COPYING file; add expat, libffi and expat licenses
+  to Doc/license.rst.
+
+- Issue #9524: Document that two CTRL* signals are meant for use only
+  with os.kill.
+
+- Issue #9255: Document that the 'test' package is meant for internal Python use
+  only.
+
+- A small WSGI server was added as Tools/scripts/serve.py, and is used to
+  implement a local documentation server via 'make serve' in the doc directory.
+
+- Updating `Using Python` documentation to include description of CPython's -J
+  and -X options.
+
+- Document that importing a module that has None in sys.modules triggers an
+  ImportError.
+
+- Issue #6556: Fixed the Distutils configuration files location explanation for
+  Windows.
+
+- Update python manual page (options -B, -O0, -s, environment variables
+  PYTHONDONTWRITEBYTECODE, PYTHONNOUSERSITE).
+
+- Issue #8909: Added the size of the bitmap used in the installer created by
+  distutils' bdist_wininst. Patch by Anatoly Techtonik.
+
+Tests
+-----
+
+- Issue #9251: test_threaded_import didn't fail when run through regrtest if the
+  import lock was disabled.
+
+- Issue #8605: Skip test_gdb if Python is compiled with optimizations.
+
+- Issue #7449: Skip test_socketserver if threading support is disabled.
+
+- Issue #8672: Add a zlib test ensuring that an incomplete stream can be handled
+  by a decompressor object without errors (it returns incomplete uncompressed
+  data).
+
+- Issue #8533: regrtest uses backslashreplace error handler for stdout to avoid
+  UnicodeEncodeError (write non-ASCII character to stdout using ASCII encoding).
+
+- Issue #8576: Remove use of find_unused_port() in test_smtplib and
+  test_multiprocessing.  Patch by Paul Moore.
+
+- Issue #7449: Fix many tests to support Python compiled without thread
+  support. Patches written by Jerry Seutter.
+
+- Issue #8108: test_ftplib's non-blocking SSL server now has proper handling of
+  SSL shutdowns.
+
+- Issues #8279, #8330, #8437, #8480, #8495: Fix test_gdb failures, patch written
+  by Dave Malcolm.
+
+- Issue #3864: Skip three test_signal tests on freebsd6 because they fail if any
+  thread was previously started, most likely due to a platform bug.
+
+- Issue #8193: Fix test_zlib failure with zlib 1.2.4.
+
+- Issue #8248: Add some tests for the bool type.  Patch by Gregory Nofi.
+
+- Issue #8263: Now regrtest.py will report a failure if it receives a
+  KeyboardInterrupt (SIGINT).
+
+- Issue #8180 and #8207: Fix test_pep277 on OS X and add more tests for special
+  Unicode normalization cases.
+
+- Issue #7783: test.support.open_urlresource invalidates the outdated files from
+  the local cache.
+
+- Issue #7849: Now the utility ``check_warnings`` verifies if the warnings are
+  effectively raised.
+
+- The four path modules (genericpath, macpath, ntpath, posixpath) share a common
+  TestCase for some tests: test_genericpath.CommonTest.
+
+- Print platform information when running the whole test suite, or using the
+  --verbose flag.
+
+- Issue #767675: enable test_pep277 on POSIX platforms with Unicode-friendly
+  filesystem encoding.
+
+- Issue #6292: for the moment at least, the test suite runs cleanly if python is
+  run with the -OO flag.  Tests requiring docstrings are skipped.
+
+- Issue #7712: test.support gained a new `temp_cwd` context manager which is now
+  also used by regrtest to run all the tests in a temporary directory.  The
+  original CWD is saved in `support.SAVEDCWD`.  Thanks to Florent Xicluna who
+  helped with the patch.
+
+- Issue #7924: Fix an intermittent 'XXX undetected error' failure in test_capi
+  (only seen so far on platforms where the curses module wasn't built), due to
+  an uncleared exception.
+
+- Issue #7728: test_timeout was changed to use support.bind_port instead of a
+  hard coded port.
+
+- Issue #7376: Instead of running a self-test (which was failing) when called
+  with no arguments, doctest.py now gives a usage message.
+
+- Issue #7396: fix regrtest -s, which was broken by the -j enhancement.
+
+- Issue #7498: test_multiprocessing now uses test.support.find_unused_port
+  instead of a hardcoded port number in test_rapid_restart.
+
+- Issue #7431: Use TESTFN in test_linecache instead of trying to create a file
+  in the Lib/test directory, which might be read-only for the user running the
+  tests.
+
+- Issue #7324: Add a sanity check to regrtest argument parsing to catch the case
+  of an option with no handler.
+
+- Issue #7312: Add a -F flag to run the selected tests in a loop until a test
+  fails.  Can be combined with -j.
+
+- Issue #6551: test_zipimport could import and then destroy some modules of the
+  encodings package, which would make other tests fail further down the road
+  because the internally cached encoders and decoders would point to empty
+  global variables.
+
+- Issue #7295: Do not use a hardcoded file name in test_tarfile.
+
+- Issue #7270: Add some dedicated unit tests for multi-thread synchronization
+  primitives such as Lock, RLock, Condition, Event and Semaphore.
+
+- Issue #7248 (part 2): Use a unique temporary directory for importlib source
+  tests instead of tempfile.tempdir. This prevents the tests from sharing state
+  between concurrent executions on the same system.
+
+- Issue #7248: In importlib.test.source.util a try/finally block did not make
+  sure that some referenced objects actually were created in the block before
+  calling methods on the object.
+
+- Issue #7222: Make thread "reaping" more reliable so that reference
+  leak-chasing test runs give sensible results.  The previous method of reaping
+  threads could return successfully while some Thread objects were still
+  referenced.  This also introduces a new private function:
+  ``_thread._count()``.
+
+- Issue #7151: Fixed regrtest -j so that output to stderr from a test no longer
+  runs the risk of causing the worker thread to fail.
+
+- Issue #7055: test___all__ now greedily detects all modules which have an
+  __all__ attribute, rather than using a hardcoded and incomplete list.
+
+- Issue #7058: Added save/restore for things like sys.argv and cwd to
+  runtest_inner in regrtest, with warnings if the called test modifies them, and
+  a new section in the summary report at the end.
+
+- Issue #7042: Fix test_signal (test_itimer_virtual) failure on OS X 10.6.
+
+- Fixed tests in importlib.test.source.test_abc_loader that were masking the
+  proper exceptions that should be raised for missing or improper code object
+  bytecode.
+
+- Removed importlib's custom test discovery code and switched to
+  unittest.TestLoader.discover().
+
+Tools/Demos
+-----------
+
+- Issue #5464, #8974: Implement plural forms in msgfmt.py.
+
+- iobench (a file I/O benchmark) and ccbench (a concurrency benchmark) were
+  added to the `Tools/` directory.  They were previously living in the sandbox.
+
+
+What's New in Python 3.1?
+=========================
+
+*Release date: 27-June-2009*
+
+Core and Builtins
+-----------------
+
+- Issue #6334: Fix bug in range length calculation for ranges with
+  large arguments.
+
+- Issue #6329: Fixed iteration for memoryview objects (it was being blocked
+  because it wasn't recognized as a sequence).
+
+Library
+-------
+
+- Issue #6126: Fixed pdb command-line usage.
+
+- Issue #6314: logging: performs extra checks on the "level" argument.
+
+- Issue #6274: Fixed possible file descriptors leak in subprocess.py
+
+- Accessing io.StringIO.buffer now raises an AttributeError instead of
+  io.UnsupportedOperation.
+
+- Issue #6271: mmap tried to close invalid file handle (-1) when anonymous.
+  (On Unix)
+
+- Issue #1202: zipfile module would cause a struct.error when attempting to
+  store files with a CRC32 > 2**31-1.
+
+Extension Modules
+-----------------
+
+- Issue #5590: Remove unused global variable in pyexpat extension.
+
+
+What's New in Python 3.1 Release Candidate 2?
+=============================================
+
+*Release date: 13-June-2009*
+
+Core and Builtins
+-----------------
+
+- Fixed SystemError triggered by "range([], 1, -1)".
+
+- Issue #5924: On Windows, a large PYTHONPATH environment variable
+  (more than 255 characters) would be completely ignored.
+
+- Issue #4547: When debugging a very large function, it was not always
+  possible to update the lineno attribute of the current frame.
+
+- Issue #5330: C functions called with keyword arguments were not reported by
+  the various profiling modules (profile, cProfile). Patch by Hagen Fürstenau.
+
+Library
+-------
+
+- Issue #6438: Fixed distutils.cygwinccompiler.get_versions : the regular
+  expression string pattern was trying to match against a bytes returned by
+  Popen. Tested under win32 to build the py-postgresql project.
+
+- Issue #6258: Support AMD64 in bdist_msi.
+
+- Issue #6195: fixed doctest to no longer try to read 'source' data from
+  binary files.
+
+- Issue #5262: Fixed bug in next rollover time computation in
+  TimedRotatingFileHandler.
+
+- Issue #6217: The C implementation of io.TextIOWrapper didn't include the
+  errors property.  Additionally, the errors and encoding properties of StringIO
+  are always None now.
+
+- Issue #6137: The pickle module now translates module names when loading
+  or dumping pickles with a 2.x-compatible protocol, in order to make data
+  sharing and migration easier. This behaviour can be disabled using the
+  new `fix_imports` optional argument.
+
+- Removed the ipaddr module.
+
+- Issue #3613: base64.{encode,decode}string are now called
+  base64.{encode,decode}bytes which reflects what type they accept and return.
+  The old names are still there as deprecated aliases.
+
+- Issue #5767: Remove sgmlop support from xmlrpc.client.
+
+- Issue #6150: Fix test_unicode on wide-unicode builds.
+
+- Issue #6149: Fix initialization of WeakValueDictionary objects from non-empty
+  parameters.
+
+Windows
+-------
+
+- Issue #6221: Delete test registry key before running the test.
+
+- Issue #6158: Package Sine-1000Hz-300ms.aif in MSI file.
+
+C-API
+-----
+
+- Issue #5735: Python compiled with --with-pydebug should throw an
+  ImportError when trying to import modules compiled without
+  --with-pydebug, and vice-versa.
+
+
+Build
+-----
+
+- Issue #6154: Make sure the intl library is added to LIBS if needed. Also
+  added LIBS to OS X framework builds.
+
+- Issue #5809: Specifying both --enable-framework and --enable-shared is
+  an error. Configure now explicity tells you about this.
+
+
+
+What's New in Python 3.1 release candidate 1?
+=============================================
+
+*Release date: 2009-05-30*
+
+Core and Builtins
+-----------------
+
+- Issue #6097: Escape UTF-8 surrogates resulting from mbstocs conversion
+  of the command line.
+
+- Issue #6012: Add cleanup support to O& argument parsing.
+
+- Issue #6089: Fixed str.format with certain invalid field specifiers
+  that would raise SystemError.
+
+- Issue #5982: staticmethod and classmethod now expose the wrapped
+  function with __func__.
+
+- Added support for multiple context managers in the same with-statement.
+  Deprecated contextlib.nested() which is no longer needed.
+
+- Issue #5829: complex("1e500") no longer raises OverflowError.  This
+  makes it consistent with float("1e500") and interpretation of real
+  and imaginary literals.
+
+- Issue #3527: Removed Py_WIN_WIDE_FILENAMES which is not used any more.
+
+- Issue #5994: the marshal module now has docstrings.
+
+- Issue #5981: Fix three minor inf/nan issues in float.fromhex:
+  (1) inf and nan strings with trailing whitespace were incorrectly
+  rejected;  (2) parsing of strings representing infinities and nans
+  was locale aware; and (3) the interpretation of fromhex('-nan')
+  didn't match that of float('-nan').
+
+Library
+-------
+
+- Issue #4859: Implement PEP 383 for pwd, spwd, and grp.
+
+- smtplib 'login' and 'cram-md5' login are also fixed (see Issue #5259).
+
+- Issue #6121: pydoc now ignores leading and trailing spaces in the
+  argument to the 'help' function.
+
+- Issue #6118: urllib.parse.quote_plus ignored the encoding and errors
+  arguments for strings with a space in them.
+
+- collections.namedtuple() was not working with the following field
+  names:  cls, self, tuple, itemgetter, and property.
+
+- In unittest, using a skipping decorator on a class is now equivalent to
+  skipping every test on the class.  The ClassTestSuite class has been removed.
+
+- Issue #6050: Don't fail extracting a directory from a zipfile if
+  the directory already exists.
+
+- Issue #1309352: fcntl now converts its third arguments to a C `long` rather
+  than an int, which makes some operations possible under 64-bit Linux (e.g.
+  DN_MULTISHOT with F_NOTIFY).
+
+- Issue #5761: Add the name of the underlying file to the repr() of various
+  IO objects.
+
+- Issue #5259: smtplib plain auth login no longer gives a traceback.  Fix
+  by Musashi Tamura, tests by Marcin Bachry.
+
+- Issue #1983: Fix functions taking or returning a process identifier to use
+  the dedicated C type ``pid_t`` instead of a C ``int``. Some platforms have
+  a process identifier type wider than the standard C integer type.
+
+- Issue #4066: smtplib.SMTP_SSL._get_socket now correctly returns the socket.
+  Patch by Farhan Ahmad, test by Marcin Bachry.
+
+- Issue #2116: Weak references and weak dictionaries now support copy()ing and
+  deepcopy()ing.
+
+- Issue #1655: Make imaplib IPv6-capable. Patch by Derek Morr.
+
+- Issue #5918: Fix a crash in the parser module.
+
+- Issue #1664: Make nntplib IPv6-capable. Patch by Derek Morr.
+
+- Issue #5006: Better handling of unicode byte-order marks (BOM) in the io
+  library. This means, for example, that opening an UTF-16 text file in
+  append mode doesn't add a BOM at the end of the file if the file isn't
+  empty.
+
+- Issue #4050: inspect.findsource/getsource now raise an IOError if the 'source'
+  file is a binary.  Patch by Brodie Rao, tests by Daniel Diniz.  This fix
+  corrects a pydoc regression.
+
+- Issue #5955: aifc's close method did not close the file it wrapped,
+  now it does.  This also means getfp method now returns the real fp.
+
+Installation
+------------
+
+- Issue #6047: fullinstall has been removed because Python 3's executable will
+  now be known as python3.
+
+- Lib/smtpd.py is no longer installed as a script.
+
+Extension Modules
+-----------------
+
+- Issue #3061: Use wcsftime for time.strftime where available.
+
+- Issue #4873: Fix resource leaks in error cases of pwd and grp.
+
+- Issue #6093: Fix off-by-one error in locale.strxfrm.
+
+- The _functools and _locale modules are now built into the libpython shared
+  library instead of as extension modules.
+
+Build
+-----
+
+- Issue #3585: Add pkg-config support. It creates a python-2.7.pc file
+  and a python3.pc symlink in the $(LIBDIR)/pkgconfig directory. Patch by
+  Clinton Roy.
+
+Tests
+-----
+
+- Issue #5442: Tests for importlib were not properly skipping case-sensitivity
+  tests on darwin even when the OS was installed on a case-sensitive
+  filesystem. Also fixed tests that should not be run when
+  sys.dont_write_bytecode is true.
+
+
+What's New in Python 3.1 beta 1?
+================================
+
+*Release date: 2009-05-06*
+
+Core and Builtins
+-----------------
+
+- Issue #5914: Add new C API function PyOS_string_to_double, and
+  deprecate PyOS_ascii_strtod and PyOS_ascii_atof.
+
+- Issue #3382: float.__format__, complex.__format__, and %-formatting
+  no longer map 'F' to 'f'. Because of issue #5859 (below), this only
+  affects nan -> NAN and inf -> INF.
+
+- Issue #5799: ntpath (ie, os.path on Windows) fully supports UNC pathnames
+  in all operations, including splitdrive, split, etc.  splitunc() now issues
+  a PendingDeprecation warning.
+
+- Issue #5920: For float.__format__, change the behavior with the
+  empty presentation type (that is, not one of 'e', 'f', 'g', or 'n')
+  to be like 'g' but with at least one decimal point and with a
+  default precision of 12. Previously, the behavior the same but with
+  a default precision of 6.  This more closely matches str(), and
+  reduces surprises when adding alignment flags to the empty
+  presentation type. This also affects the new complex.__format__ in
+  the same way.
+
+- Implement PEP 383, Non-decodable Bytes in System Character Interfaces.
+
+- Issue #5890: in subclasses of 'property' the __doc__ attribute was
+  shadowed by classtype's, even if it was None.  property now
+  inserts the __doc__ into the subclass instance __dict__.
+
+- Issue #4426: The UTF-7 decoder was too strict and didn't accept some legal
+  sequences. Patch by Nick Barnes and Victor Stinner.
+
+- Issue #3672: Reject surrogates in utf-8 codec; add surrogatepass error handler.
+
+- Issue #5883: In the io module, the BufferedIOBase and TextIOBase ABCs have
+  received a new method, detach().  detach() disconnects the underlying stream
+  from the buffer or text IO and returns it.
+
+- Issue #5859: Remove switch from '%f' to '%g'-style formatting for
+  floats with absolute value over 1e50.  Also remove length
+  restrictions for float formatting: '%.67f' % 12.34 and '%.120e' %
+  12.34 no longer raise an exception.
+
+- Issue #1588: Add complex.__format__. For example,
+  format(complex(1, 2./3), '.5') now produces a sensible result.
+
+- Issue #5864: Fix empty format code formatting for floats so that it
+  never gives more than the requested number of significant digits.
+
+- Issue #5793: Rationalize isdigit / isalpha / tolower, etc. Includes
+  new Py_ISDIGIT / Py_ISALPHA / Py_TOLOWER, etc. in pctypes.h.
+
+- Issue #5835: Deprecate PyOS_ascii_formatd.
+
+- Issue #4971: Fix titlecase for characters that are their own
+  titlecase, but not their own uppercase.
+
+- Issue #5283: Setting __class__ in __del__ caused a segfault.
+
+- Issue #5816: complex(repr(z)) now recovers z exactly, even when
+  z involves nans, infs or negative zeros.
+
+- Issue #3166: Make int -> float conversions correctly rounded.
+
+- Issue #1869 (and many duplicates): make round(x, n) correctly
+  rounded for a float x, by using the decimal <-> binary conversions
+  from Python/dtoa.c.  As a consequence, (e.g.) round(x, 2) now
+  consistently agrees with format(x, '.2f').
+
+- Issue #5787: object.__getattribute__(some_type, "__bases__") segfaulted on
+  some builtin types.
+
+- Issue #5772: format(1e100, '<') produces '1e+100', not '1.0e+100'.
+
+- Issue #5515: str.format() type 'n' combined with commas and leading
+  zeros no longer gives odd results with ints and floats.
+
+- Implement PEP 378, Format Specifier for Thousands Separator, for
+  floats.
+
+- The str function switches to exponential notation at
+  1e11, not 1e12.  This avoids printing 13 significant digits in
+  situations where only 12 of them are correct.  Example problem
+  value: str(1e11 + 0.5).  (This minor issue has existed in 2.x for a
+  long time.)
+
+- Issue #1580: On most platforms, use a 'short' float repr: for a
+  finite float x, repr(x) now outputs a string based on the shortest
+  sequence of decimal digits that rounds to x.  Previous behaviour was
+  to output 17 significant digits and then strip trailing zeros.
+  Another minor difference is that the new repr switches to
+  exponential notation at 1e16 instead of the previous 1e17; this
+  avoids misleading output in some cases.
+
+  There's a new sys attribute sys.float_repr_style, which takes
+  the value 'short' to indicate that we're using short float repr,
+  and 'legacy' if the short float repr isn't available for one
+  reason or another.
+
+  The float repr change involves incorporating David Gay's 'perfect
+  rounding' code into the Python core (it's in Python/dtoa.c).  As a
+  secondary consequence, all string-to-float and float-to-string
+  conversions (including all float formatting operations) will be
+  correctly rounded on these platforms.
+
+  See issue #1580 discussions for details of platforms for which
+  this change does not apply.
+
+- Issue #5759: float() didn't call __float__ on str subclasses.
+
+- The string.maketrans() function is deprecated; there is a new static method
+  maketrans() on the bytes and bytearray classes.  This removes confusion about
+  the types string.maketrans() is supposed to work with, and mirrors the
+  methods available on the str class.
+
+- Issue #2170: refactored xml.dom.minidom.normalize, increasing both
+  its clarity and its speed.
+
+- Issue #1113244: Py_XINCREF, Py_DECREF, Py_XDECREF: Add ``do { ... } while (0)``
+  to avoid compiler warnings.
+
+- Issue #3739: The unicode-internal encoder now reports the number of characters
+  consumed like any other encoder (instead of the number of bytes).
+
+Installation
+------------
+
+- Issue #5756: Install idle and pydoc with a 3 suffix.
+
+Library
+-------
+
+- Issue #8203: Fix IDLE Credits dialog: view_file() uses its encoding argument.
+
+- Issue #5311: bdist_msi can now build packages that do not depend on a
+  specific Python version.
+
+- Issue #5150: IDLE's format menu now has an option to strip trailing
+  whitespace.
+
+- Issue #5940: distutils.command.build_clib.check_library_list was not doing
+  the right type checkings anymore.
+
+- Issue #4875: On win32, ctypes.util.find_library does no longer
+  return directories.
+
+- Issue #5142: Add the ability to skip modules while stepping to pdb.
+
+- Issue #1309567: Fix linecache behavior of stripping subdirectories when
+  looking for files given by a relative filename.
+
+- Issue #5923: Update the ``turtle`` module to version 1.1, add two new
+  turtle demos in Demo/turtle.
+
+- Issue #5692: In ``zipfile.Zipfile``, fix wrong path calculation when
+  extracting a file to the root directory.
+
+- Issue #5913: os.listdir() should fail for empty path on windows.
+
+- Issue #5084: unpickling now interns the attribute names of pickled objects,
+  saving memory and avoiding growth in size of subsequent pickles. Proposal
+  and original patch by Jake McGuire.
+
+- The json module now works exclusively with str and not bytes.
+
+- Issue #3959: The ipaddr module has been added to the standard library.
+  Contributed by Google.
+
+- Issue #3002: ``shutil.copyfile()`` and ``shutil.copytree()`` now raise an
+  error when a named pipe is encountered, rather than blocking infinitely.
+
+- Issue #5857: tokenize.tokenize() now returns named tuples.
+
+- Issue #4305: ctypes should now build again on mipsel-linux-gnu
+
+- Issue #1734234: Massively speedup ``unicodedata.normalize()`` when the
+  string is already in normalized form, by performing a quick check beforehand.
+  Original patch by Rauli Ruohonen.
+
+- Issue #5853: calling a function of the mimetypes module from several threads
+  at once could hit the recursion limit if the mimetypes database hadn't been
+  initialized before.
+
+- Issue #5854: Updated __all__ to include some missing names and remove some
+  names which should not be exported.
+
+- Issue #3102:  All global symbols that the _ctypes extension defines
+  are now prefixed with 'Py' or '_ctypes'.
+
+- Issue #5041: ctypes does now allow pickling wide character.
+
+- Issue #5812: For the two-argument form of the Fraction constructor,
+  Fraction(m, n), m and n are permitted to be arbitrary Rational
+  instances.
+
+- Issue #5812: Fraction('1e6') is valid: more generally, any string
+  that's valid for float() is now valid for Fraction(), with the
+  exception of strings representing NaNs and infinities.
+
+- Issue #5734: BufferedRWPair was poorly tested and had several glaring
+  bugs. Patch by Brian Quinlan.
+
+- Issue #1161031: fix readwrite select flag handling: POLLPRI now
+  results in a handle_expt_event call, not handle_read_event, and POLLERR
+  and POLLNVAL now call handle_close, not handle_expt_event.  Also,
+  dispatcher now has an 'ignore_log_types' attribute for suppressing
+  log messages, which is set to 'warning' by default.
+
+- Issue #2703: SimpleXMLRPCDispatcher.__init__: Provide default values for
+  new arguments introduced in 2.5.
+
+- Issue #5828 (Invalid behavior of unicode.lower): Fixed bogus logic in
+  makeunicodedata.py and regenerated the Unicode database (This fixes
+  u'\u1d79'.lower() == '\x00').
+
+Extension Modules
+-----------------
+
+- Issue #5881: Remove old undocumented compatibility interfaces in hashlib and
+  pwd.
+
+- Issue #5463: In struct module, remove deprecated float coercion
+  for integer type codes: struct.pack('L', 0.3) should now raise
+  an error.  The _PY_STRUCT_FLOAT_COERCE constant has been removed.
+  The version number has been bumped to 0.3.
+
+- Issue #5359: Readd the Berkeley DB detection code to allow _dbm be built
+  using Berkeley DB.
+
+Tests
+-----
+
+- Issue #5354: New test support function import_fresh_module() makes
+  it easy to import both normal and optimised versions of modules.
+  test_heapq and test_warnings have been adjusted to use it, tests for
+  other modules with both C and Python implementations in the stdlib
+  can be adjusted to use it over time.
+
+- Issue #5837: Certain sequences of calls to set() and unset() for
+  support.EnvironmentVarGuard objects restored the environment variables
+  incorrectly on __exit__.
+
+C-API
+-----
+
+- Issue #5630: A replacement PyCObject API, PyCapsule, has been added.
+
+
+What's New in Python 3.1 alpha 2?
+=================================
+
+*Release date: 2009-4-4*
+
+Core and Builtins
+-----------------
+
+- Implement PEP 378, Format Specifier for Thousands Separator, for
+  integers.
+
+- Issue #5666: Py_BuildValue's 'c' code should create byte strings.
+
+- Issue #5499: The 'c' code for argument parsing functions now only accepts a
+  byte, and the 'C' code only accepts a unicode character.
+
+- Fix a problem in PyErr_NormalizeException that leads to "undetected errors"
+  when hitting the recursion limit under certain circumstances.
+
+- Issue #1665206: Remove the last eager import in _warnings.c and make it lazy.
+
+- Fix a segfault when running test_exceptions with coverage, caused by
+  insufficient checks in accessors of Exception.__context__.
+
+- Issue #5604: non-ASCII characters in module name passed to
+  imp.find_module() were converted to UTF-8 while the path is
+  converted to the default filesystem encoding, causing nonsense.
+
+- Issue #5126: str.isprintable() returned False for space characters.
+
+- Issue #4865: On MacOSX /Library/Python/2.7/site-packages is added to
+  the end sys.path, for compatibility with the system install of Python.
+
+- Issue #4688: Add a heuristic so that tuples and dicts containing only
+  untrackable objects are not tracked by the garbage collector. This can
+  reduce the size of collections and therefore the garbage collection overhead
+  on long-running programs, depending on their particular use of datatypes.
+
+- Issue #5512: Rewrite PyLong long division algorithm (x_divrem) to
+  improve its performance.  Long divisions and remainder operations
+  are now between 50% and 150% faster.
+
+- Issue #4258: Make it possible to use base 2**30 instead of base
+  2**15 for the internal representation of integers, for performance
+  reasons.  Base 2**30 is enabled by default on 64-bit machines.  Add
+  --enable-big-digits option to configure, which overrides the
+  default.  Add sys.int_info structseq to provide information about
+  the internal format.
+
+- Issue #4474: PyUnicode_FromWideChar now converts characters outside
+  the BMP to surrogate pairs, on systems with sizeof(wchar_t) == 4
+  and sizeof(Py_UNICODE) == 2.
+
+- Issue #5237: Allow auto-numbered fields in str.format(). For
+  example: '{} {}'.format(1, 2) == '1 2'.
+
+- Issue #5392: when a very low recursion limit was set, the interpreter would
+  abort with a fatal error after the recursion limit was hit twice.
+
+- Issue #3845: In PyRun_SimpleFileExFlags avoid invalid memory access with
+  short file names.
+
+Library
+-------
+
+- Issue #2625: added missing items() call to the for loop in
+  mailbox.MH.get_message().
+
+- Issue #5640: Fix _multibytecodec so that CJK codecs don't repeat
+  error substitutions from non-strict codec error callbacks in
+  incrementalencoder and StreamWriter.
+
+- Issue #5656: Fix the coverage reporting when running the test suite with
+  the -T argument.
+
+- Issue #5647: MutableSet.__iand__() no longer mutates self during iteration.
+
+- Issue #5624: Fix the _winreg module name still used in several modules.
+
+- Issue #5628: Fix io.TextIOWrapper.read() with a unreadable buffer.
+
+- Issue #5619: Multiprocessing children disobey the debug flag and causes
+  popups on windows buildbots. Patch applied to work around this issue.
+
+- Issue #5400: Added patch for multiprocessing on netbsd compilation/support
+
+- Issue #5387: Fixed mmap.move crash by integer overflow.
+
+- Issue #5261: Patch multiprocessing's semaphore.c to support context
+  manager use: "with multiprocessing.Lock()" works now.
+
+- Issue #5236: Change time.strptime() to only take strings. Didn't work with
+  bytes already but the failure was non-obvious.
+
+- Issue #5177: Multiprocessing's SocketListener class now uses
+  socket.SO_REUSEADDR on all connections so that the user no longer needs
+  to wait 120 seconds for the socket to expire.
+
+- Issue #5595: Fix UnboundedLocalError in ntpath.ismount().
+
+- Issue #1174606: Calling read() without arguments of an unbounded file
+  (typically /dev/zero under Unix) could crash the interpreter.
+
+- The max_buffer_size arguments of io.BufferedWriter, io.BufferedRWPair, and
+  io.BufferedRandom have been deprecated for removal in Python 3.2.
+
+- Issue #5068: Fixed the tarfile._BZ2Proxy.read() method that would loop
+  forever on incomplete input. That caused tarfile.open() to hang when used
+  with mode 'r' or 'r:bz2' and a fileobj argument that contained no data or
+  partial bzip2 compressed data.
+
+- Issue #2110: Add support for thousands separator and 'n' type
+  specifier to Decimal.__format__
+
+- Fix Decimal.__format__ bug that swapped the meanings of the '<' and
+  '>' alignment characters.
+
+- The error detection code in FileIO.close() could fail to reflect the `errno`
+  value, and report it as -1 instead.
+
+- Issue #5016: FileIO.seekable() could return False if the file position
+  was negative when truncated to a C int. Patch by Victor Stinner.
+
+Extension Modules
+-----------------
+
+- Issue #5391: mmap now deals exclusively with bytes.
+
+- Issue #5463: In struct module, remove deprecated overflow wrapping
+  when packing an integer: struct.pack('=L', -1) now raises
+  struct.error instead of returning b'\xff\xff\xff\xff'.  The
+  _PY_STRUCT_RANGE_CHECKING and _PY_STRUCT_OVERFLOW_MASKING constants
+  have been removed from the struct module.
+
+
+What's New in Python 3.1 alpha 1
+================================
+
+*Release date: 2009-03-07*
+
+Core and Builtins
+-----------------
+
+- The io module has been reimplemented in C for speed.
+
+- Give dict views an informative __repr__.
+
+- Issue #5247: Improve error message when unknown format codes are
+  used when using str.format() with str, int, and float arguments.
+
+- Issue #5249: time.strftime returned malformed string when format string
+  contained non ascii character on windows.
+
+- Issue #4626: compile(), exec(), and eval() ignore the coding cookie if the
+  source has already been decoded into str.
+
+- Issue #5186: Reduce hash collisions for objects with no __hash__ method by
+  rotating the object pointer by 4 bits to the right.
+
+- Issue #4575: Fix Py_IS_INFINITY macro to work correctly on x87 FPUs:
+  it now forces its argument to double before testing for infinity.
+
+- Issue #5137: Make len() correctly raise a TypeError when a __len__ method
+  returns a non-number type.
+
+- Issue #5182: Removed memoryview.__str__.
+
+- Issue #1717: Removed builtin cmp() function, dropped tp_compare
+  slot, the C API functions PyObject_Compare and PyUnicode_Compare and
+  the type definition cmpfunc.  The tp_compare slot has been renamed
+  to tp_reserved, and is reserved for future usage.
+
+- Issue #1242657: the __len__() and __length_hint__() calls in several tools
+  were suppressing all exceptions.  These include list() and bytearray().
+
+- Issue #4707: round(x, n) now returns an integer if x is an integer.
+  Previously it returned a float.
+
+- Issue #4753: By enabling a configure option named '--with-computed-gotos'
+  on compilers that support it (notably: gcc, SunPro, icc), the bytecode
+  evaluation loop is compiled with a new dispatch mechanism which gives
+  speedups of up to 20%, depending on the system, on various benchmarks.
+
+- Issue #4874: Most builtin decoders now reject unicode input.
+
+- Issue #4842: Don't allow trailing 'L' when constructing an integer
+  from a string.
+
+- Issue #4991: os.fdopen now raises an OSError for invalid file descriptors.
+
+- Issue #4838: When a module is deallocated, free the memory backing the
+  optional module state data.
+
+- Issue #4910: Rename nb_long slot to nb_reserved, and change its
+  type to ``(void *)``.
+
+- Issue #4935: The overflow checking code in the expandtabs() method common
+  to str, bytes and bytearray could be optimized away by the compiler, letting
+  the interpreter segfault instead of raising an error.
+
+- Issue #3720: Fix a crash when an iterator modifies its class and removes its
+  __next__ method.
+
+- Issue #4910: Builtin int() function and PyNumber_Long/PyNumber_Int API
+  function no longer attempt to call the __long__ slot to convert an object
+  to an integer.  Only the __int__ and __trunc__ slots are examined.
+
+- Issue #4893: Use NT threading on CE.
+
+- Issue #4915: Port sysmodule to Windows CE.
+
+- Issue #4868: utf-8, utf-16 and latin1 decoding are now 2x to 4x faster. The
+  common cases are optimized thanks to a dedicated fast path and a moderate
+  amount of loop unrolling.
+
+- Issue #4074: Change the criteria for doing a full garbage collection (i.e.
+  collecting the oldest generation) so that allocating lots of objects without
+  destroying them does not show quadratic performance. Based on a proposal by
+  Martin von Löwis at
+  http://mail.python.org/pipermail/python-dev/2008-June/080579.html.
+
+- Issue #4604: Some objects of the I/O library could still be used after
+  having been closed (for instance, a read() call could return some
+  previously buffered data). Patch by Dmitry Vasiliev.
+
+- Issue #4705: Fix the -u ("unbuffered binary stdout and stderr") command-line
+  flag to work properly. Furthermore, when specifying -u, the text stdout
+  and stderr streams have line-by-line buffering enabled (the default being
+  to buffer arbitrary chunks of data).
+
+- The internal table, _PyLong_DigitValue, is now an array of unsigned chars
+  instead of ints (reducing its size from 4 to 8 times thereby reducing
+  Python's overall memory).
+
+- Issue #1180193: When importing a module from a .pyc (or .pyo) file with
+  an existing .py counterpart, override the co_filename attributes of all
+  code objects if the original filename is obsolete (which can happen if the
+  file has been renamed, moved, or if it is accessed through different paths).
+  Patch by Ziga Seilnacht and Jean-Paul Calderone.
+
+- Issue #4580: Fix slicing of memoryviews when the item size is greater than
+  one byte. Also fixes the meaning of len() so that it returns the number of
+  items, rather than the size in bytes.
+
+- Issue #4075: Use OutputDebugStringW in Py_FatalError.
+
+- Issue #4747: When the terminal does not use utf-8, executing a script with
+  non-ascii characters in its name could fail with a "SyntaxError: None" error.
+
+- Issue #4797: IOError.filename was not set when ``_fileio.FileIO`` failed
+  to open file with a bytes filename on Windows.
+
+- Issue #3680: Reference cycles created through a dict, set or deque iterator
+  did not get collected.
+
+- Issue #4701: PyObject_Hash now implicitly calls PyType_Ready on types
+  where the tp_hash and tp_dict slots are both NULL.
+
+- Issue #4759: None is now allowed as the first argument of
+  bytearray.translate().  It was always allowed for bytes.translate().
+
+- Added test case to ensure attempts to read from a file opened for writing
+  fail.
+
+- Issue #3106: Speedup some comparisons (str/str and int/int).
+
+- Issue #2183: Simplify and optimize bytecode for list, dict and set
+  comprehensions. Original patch for list comprehensions by Neal Norwitz.
+
+- Issue #2467: gc.DEBUG_STATS reported invalid elapsed times. Also, always
+  print elapsed times, not only when some objects are uncollectable /
+  unreachable. Original patch by Neil Schemenauer.
+
+- Issue #3439: Add a bit_length method to int.
+
+- Issue #2173: When getting device encoding, check that return value of
+  nl_langinfo is not the empty string.  This was causing silent build
+  failures on OS X.
+
+- Issue #4597: Fixed several opcodes that weren't always propagating
+  exceptions.
+
+- Issue #4589: Fixed exception handling when the __exit__ function of a
+  context manager returns a value that cannot be converted to a bool.
+
+- Issue #4445: Replace "sizeof(PyBytesObject)" with
+  "offsetof(PyBytesObject, ob_sval) + 1" when allocating memory for
+  bytes instances.  On a typical machine this saves 3 bytes of memory
+  (on average) per allocation of a bytes instance.
+
+- Issue #4533: File read operation was dreadfully slow due to a slowly
+  growing read buffer. Fixed by using the same growth rate algorithm as
+  Python 2.x.
+
+- Issue #4509: Various issues surrounding resize of bytearray objects to
+  which there are buffer exports (e.g. memoryview instances).
+
+- Issue #4233: Changed semantic of ``_fileio.FileIO``'s ``close()``
+  method on file objects with closefd=False. The file descriptor is still
+  kept open but the file object behaves like a closed file. The ``FileIO``
+  object also got a new readonly attribute ``closefd``.
+
+- Issue #4569: Interpreter crash when mutating a memoryview with an item size
+  larger than 1.
+
+- Issue #4748: Lambda generators no longer return a value.
+
+- The re.sub(), re.subn() and re.split() functions now accept a flags parameter.
+
+- Issue #5108: Handle %s like %S, %R and %A in PyUnicode_FromFormatV(): Call
+  PyUnicode_DecodeUTF8() once, remember the result and output it in a second
+  step. This avoids problems with counting UTF-8 bytes that ignores the effect
+  of using the replace error handler in PyUnicode_DecodeUTF8().
+
+Library
+-------
+
+- Issue #7071: byte-compilation in Distutils is now done with respect to
+  sys.dont_write_bytecode.
+
+- Issue #7066: archive_util.make_archive now restores the cwd if an error is
+  raised. Initial patch by Ezio Melotti.
+
+- Issue #6516: Added owner/group support when creating tar archives in
+  Distutils.
+
+- Issue #6954: Fixed crash when using DISTUTILS_DEBUG flag in Distutils.
+
+- Issue #6163: Fixed HP-UX runtime library dir options in
+  distutils.unixcompiler. Initial patch by Sridhar Ratnakumar and
+  Michael Haubenwallner.
+
+- Issue #6693: New functions in site.py to get user/global site packages paths.
+
+- Issue #6511: ZipFile now raises BadZipfile (instead of an IOError) when
+  opening an empty or very small file.
+
+- Issue #6545: Removed assert statements in distutils.Extension, so the
+  behavior is similar when used with -O.
+
+- unittest has been split up into a package.  All old names should still work.
+
+- Issue #6466: now distutils.cygwinccompiler and distutils.emxccompiler
+  uses the same refactored function to get gcc/ld/dllwrap versions numbers.
+  It's `distutils.util.get_compiler_versions`. Added deprecation warnings
+  for the obsolete get_versions() functions.
+
+- Issue #6433: fixed issues with multiprocessing.pool.map hanging on empty list
+
+- Issue #6314: logging: Extra checks on the "level" argument in more places.
+
+- Issue #2622: Fixed an ImportError when importing email.message from a
+  standalone application built with py2exe or py2app.
+
+- Issue #6455: Fixed test_build_ext under win32.
+
+- Issue #6377: Enabled the compiler option, and deprecate its usage as an
+  attribute.
+
+- Issue #6413: Fixed the log level in distutils.dist for announce.
+
+- Issue #6403: Fixed package path usage in build_ext.
+
+- Issues #5155, 5313, 5331: multiprocessing.Process._bootstrap was
+  unconditionally calling "os.close(sys.stdin.fileno())" resulting in file
+  descriptor errors
+
+- Issue #6365: Distutils build_ext inplace mode was copying the compiled
+  extension in a subdirectory if the extension name had dots.
+
+- Issue #6164: Added an AIX specific linker argument in Distutils
+  unixcompiler. Original patch by Sridhar Ratnakumar.
+
+- Issue #6286: Now Distutils upload command is based on urllib2 instead of
+  httplib, allowing the usage of http_proxy.
+
+- Issue #6287: Added the license field in Distutils documentation.
+
+- Issue #6263: Fixed syntax error in distutils.cygwincompiler.
+
+- Issue #5201: distutils.sysconfig.parse_makefile() now understands `$$`
+  in Makefiles. This prevents compile errors when using syntax like:
+  `LDFLAGS='-rpath=\$$LIB:/some/other/path'`. Patch by Floris Bruynooghe.
+
+- Issue #6131: test_modulefinder leaked when run after test_distutils.
+  Patch by Hirokazu Yamamoto.
+
+- Issue #6048: Now Distutils uses the tarfile module in archive_util.
+
+- Issue #6062: In distutils, fixed the package option of build_ext. Feedback
+  and tests on pywin32 by Tim Golden.
+
+- Issue #6053: Fixed distutils tests on win32. patch by Hirokazu Yamamoto.
+
+- Issue #6046: Fixed the library extension when distutils build_ext is used
+  inplace. Initial patch by Roumen Petrov.
+
+- Issue #6041: Now distutils `sdist` and `register` commands use `check` as a
+  subcommand.
+
+- Issue #6022: a test file was created in the current working directory by
+  test_get_outputs in Distutils.
+
+- Issue #5977: distutils build_ext.get_outputs was not taking into account the
+  inplace option. Initial patch by kxroberto.
+
+- Issue #5984: distutils.command.build_ext.check_extensions_list checks were broken
+  for old-style extensions.
+
+- Issue #5976: Fixed Distutils test_check_environ.
+
+- Issue #5941: Distutils build_clib command was not working anymore because
+  of an incomplete costumization of the archiver command. Added ARFLAGS in the
+  Makefile besides AR and make Distutils use it. Original patch by David
+  Cournapeau.
+
+- Issue #2245: aifc now skips chunk types it doesn't recognize, per spec.
+
+- Issue #5874: distutils.tests.test_config_cmd is not locale-sensitive
+  anymore.
+
+- Issue #5810: Fixed Distutils test_build_scripts so it uses
+  sysconfig.get_config_vars.
+
+- Issue #4951: Fixed failure in test_httpservers.
+
+- Issue #5795: Fixed test_distutils failure on Debian ppc.
+
+- Issue #5607: fixed Distutils test_get_platform for Mac OS X fat binaries.
+
+- Issue #5741: don't disallow "%%" (which is an escape for "%") when setting
+  a value in SafeConfigParser.
+
+- Issue #5732: added a new command in Distutils: check.
+
+- Issue #5731: Distutils bdist_wininst no longer worked on non-Windows
+  platforms. Initial patch by Paul Moore.
+
+- Issue #5095: Added bdist_msi to the list of bdist supported formats.
+  Initial fix by Steven Bethard.
+
+- Issue #1491431: Fixed distutils.filelist.glob_to_re for edge cases.
+  Initial fix by Wayne Davison.
+
+- Issue #5694: removed spurious test output in Distutils (test_clean).
+
+- Issue #1326077: fix the formatting of SyntaxErrors by the traceback module.
+
+- Issue #1665206 (partially): Move imports in cgitb to the top of the module
+  instead of performing them in functions. Helps prevent import deadlocking in
+  threads.
+
+- Issue #2522: locale.format now checks its first argument to ensure it has
+  been passed only one pattern, avoiding mysterious errors where it appeared
+  that it was failing to do localization.
+
+- Issue #5583: Added optional Extensions in Distutils. Initial patch by Georg
+  Brandl.
+
+- Issue #1222: locale.format() bug when the thousands separator is a space
+  character.
+
+- Issue #5472: Fixed distutils.test_util tear down. Original patch by
+  Tim Golden.
+
+- collections.deque() objects now have a read-only attribute called maxlen.
+
+- Issue #2638: Show a window constructed with tkSimpleDialog.Dialog only after
+  it is has been populated and properly configured in order to prevent
+  window flashing.
+
+- Issue #4792: Prevent a segfault in _tkinter by using the
+  guaranteed to be safe interp argument given to the PythonCmd in place of
+  the Tcl interpreter taken from a PythonCmd_ClientData.
+
+- Issue #5193: Guarantee that tkinter.Text.search returns a string.
+
+- Issue #5394: removed > 2.3 syntax from distutils.msvc9compiler.
+  Original patch by Akira Kitada.
+
+- Issue #5334: array.fromfile() failed to insert values when EOFError was raised.
+
+- Issue #5385: Fixed mmap crash after resize failure on windows.
+
+- Issue #5179: Fixed subprocess handle leak on failure on windows.
+
+- PEP 372:  Added collections.OrderedDict().
+
+- The _asdict() for method for namedtuples now returns an OrderedDict().
+
+- configparser now defaults to using an ordered dictionary.
+
+- Issue #5401: Fixed a performance problem in mimetypes when ``from mimetypes
+  import guess_extension`` was used.
+
+- Issue #1733986: Fixed mmap crash in accessing elements of second map object
+  with same tagname but larger size than first map. (Windows)
+
+- Issue #5386: mmap.write_byte didn't check map size, so it could cause buffer
+  overrun.
+
+- Issue #1533164: Installed but not listed ``*.pyo`` was breaking Distutils
+  bdist_rpm command.
+
+- Issue #5378: added --quiet option to Distutils bdist_rpm command.
+
+- Issue #5052: make Distutils compatible with 2.3 again.
+
+- Issue #5316: Fixed buildbot failures introduced by multiple inheritance
+  in Distutils tests.
+
+- Issue #5287: Add exception handling around findCaller() call to help out
+  IronPython.
+
+- Issue #5282: Fixed mmap resize on 32bit windows and unix. When offset > 0,
+  The file was resized to wrong size.
+
+- Issue #5292: Fixed mmap crash on its boundary access m[len(m)].
+
+- Issue #2279: distutils.sdist.add_defaults now add files
+  from the package_data and the data_files metadata.
+
+- Issue #5257: refactored all tests in distutils, so they use
+  support.TempdirManager, to avoid writing in the tests directory.
+
+- Issue #4524: distutils build_script command failed with --with-suffix=3.
+  Initial patch by Amaury Forgeot d'Arc.
+
+- Issue #2461: added tests for distutils.util
+
+- Issue #4998: The memory saving effect of __slots__ had been lost on Fractions
+  which inherited from numbers.py which did not have __slots__ defined.  The
+  numbers hierarchy now has its own __slots__ declarations.
+
+- Issue #4631: Fix urlopen() result when an HTTP response uses chunked
+  encoding.
+
+- Issue #5203: Fixed ctypes segfaults when passing a unicode string to a
+  function without argtypes (only occurs if HAVE_USABLE_WCHAR_T is false).
+
+- Issue #3386: distutils.sysconfig.get_python_lib prefix argument was ignored
+  under NT and OS2. Patch by Philip Jenvey.
+
+- Issue #5128: Make compileall properly inspect bytecode to determine if needs
+  to be recreated. This avoids a timing hole thanks to the old reliance on the
+  ctime of the files involved.
+
+- Issue #5122: Synchronize tk load failure check to prevent a potential
+  deadlock.
+
+- Issue #1818: collections.namedtuple() now supports a keyword argument
+  'rename' which lets invalid fieldnames be automatically converted to
+  positional names in the form, _1, _2, ...
+
+- Issue #4890: Handle empty text search pattern in Tkinter.Text.search.
+
+- Issue #4512 (part 2): Promote ``ZipImporter._get_filename()`` to be a
+  public documented method ``ZipImporter.get_filename()``.
+
+- Issue #4195: The ``runpy`` module (and the ``-m`` switch) now support
+  the execution of packages by looking for and executing a ``__main__``
+  submodule when a package name is supplied. Initial patch by Andi
+  Vajda.
+
+- Issue #1731706: Call Tcl_ConditionFinalize for Tcl_Conditions that will
+  not be used again (this requires Tcl/Tk 8.3.1), also fix a memory leak in
+  Tkapp_Call when calling from a thread different than the one that created
+  the Tcl interpreter. Patch by Robert Hancock.
+
+- Issue #4285: Change sys.version_info to be a named tuple. Patch by
+  Ross Light.
+
+- Issue #1520877: Now distutils.sysconfig reads $AR from the
+  environment/Makefile. Patch by Douglas Greiman.
+
+- Issue #1276768: The verbose option was not used in the code of
+  distutils.file_util and distutils.dir_util.
+
+- Issue #5132: Fixed trouble building extensions under Solaris with
+  --enabled-shared activated. Initial patch by Dave Peterson.
+
+- Issue #1581476: Always use the Tcl global namespace when calling into Tcl.
+
+- The shelve module now defaults to pickle protocol 3.
+
+- Fix a bug in the trace module where a bytes object from co_lnotab had its
+  items being passed through ord().
+
+- Issue #2047: shutil.move() could believe that its destination path was
+  inside its source path if it began with the same letters (e.g. "src" vs.
+  "src.new").
+
+- Added the ttk module. See issue #2983: Ttk support for Tkinter.
+
+- Removed isSequenceType(), isMappingType, and isNumberType() from the
+  operator module; use the abstract base classes instead.  Also removed
+  the repeat() function; use mul() instead.
+
+- Issue #5021:  doctest.testfile() did not create __name__ and
+  collections.namedtuple() relied on __name__ being defined.
+
+- Backport importlib from Python 3.1. Only the import_module() function has
+  been backported to help facilitate transitions from 2.7 to 3.1.
+
+- Issue #1885: distutils. When running sdist with --formats=tar,gztar
+  the tar file was overriden by the gztar one.
+
+- Issue #4863: distutils.mwerkscompiler has been removed.
+
+- Added a new itertools functions:  combinations_with_replacement()
+  and compress().
+
+- Issue #5032:  added a step argument to itertools.count() and
+  allowed non-integer arguments.
+
+- Fix and properly document the multiprocessing module's logging
+  support, expose the internal levels and provide proper usage
+  examples.
+
+- Issue #1672332: fix unpickling of subnormal floats, which was
+  producing a ValueError on some platforms.
+
+- Issue #3881: Help Tcl to load even when started through the
+  unreadable local symlink to "Program Files" on Vista.
+
+- Issue #4710: Extract directories properly in the zipfile module;
+  allow adding directories to a zipfile.
+
+- Issue #3807: _multiprocessing build fails when configure is passed
+  --without-threads argument. When this occurs, _multiprocessing will
+  be disabled, and not compiled.
+
+- Issue #5008: When a file is opened in append mode with the new IO library,
+  do an explicit seek to the end of file (so that e.g. tell() returns the
+  file size rather than 0). This is consistent with the behaviour of the
+  traditional 2.x file object.
+
+- Issue #5013: Fixed a bug in FileHandler which occurred when the delay
+  parameter was set.
+
+- Issue #4842: Always append a trailing 'L' when pickling longs using
+  pickle protocol 0.  When reading, the 'L' is optional.
+
+- Add the importlib package.
+
+- Issue #4301: Patch the logging module to add processName support, remove
+  _check_logger_class from multiprocessing.
+
+- Issue #3325: Remove python2.x try: except: imports for old cPickle from
+  multiprocessing.
+
+- Issue #4959: inspect.formatargspec now works for keyword only arguments
+  without defaults.
+
+- Issue #3321: ``_multiprocessing.Connection()`` doesn't check handle; added checks
+  for Unix machines for negative handles and large int handles. Without this check
+  it is possible to segfault the interpreter.
+
+- Issue #4449: AssertionError in mp_benchmarks.py, caused by an underlying issue
+  in sharedctypes.py.
+
+- Issue #1225107: inspect.isclass() returned True for instances with a custom
+  __getattr__.
+
+- Issue #3826 and #4791: The socket module now closes the underlying socket
+  appropriately when it is being used via socket.makefile() objects
+  rather than delaying the close by waiting for garbage collection to do it.
+
+- Issue #1696199:  Add collections.Counter() for rapid and convenient
+  counting.
+
+- Issue #3860: GzipFile and BZ2File now support the context manager protocol.
+
+- Issue #4867: Fixed a crash in ctypes when passing a string to a
+  function without defining argtypes.
+
+- Issue #4272: Add an optional argument to the GzipFile constructor to override
+  the timestamp in the gzip stream. The default value remains the current time.
+  The information can be used by e.g. gunzip when decompressing. Patch by
+  Jacques Frechet.
+
+- Restore Python 2.3 compatibility for decimal.py.
+
+- Issue #3638: Remove functions from _tkinter module level that depend on
+  TkappObject to work with multiple threads.
+
+- Issue #4718: Adapt the wsgiref package so that it actually works with
+  Python 3.x, in accordance with the `official amendments of the spec
+  <http://www.wsgi.org/wsgi/Amendments_1.0>`_.
+
+- Issue #4796: Added Decimal.from_float() and Context.create_decimal_from_float()
+  to the decimal module.
+
+- Fractions.from_float() no longer loses precision for integers too big to
+  cast as floats.
+
+- Issue #4812: add missing underscore prefix to some internal-use-only
+  constants in the decimal module.  (Dec_0 becomes _Dec_0, etc.)
+
+- Issue #4790: The nsmallest() and nlargest() functions in the heapq module
+  did unnecessary work in the common case where no key function was specified.
+
+- Issue #4795: inspect.isgeneratorfunction() returns False instead of None when
+  the function is not a generator.
+
+- Issue #4702: Throwing a DistutilsPlatformError instead of IOError in case
+  no MSVC compiler is found under Windows. Original patch by Philip Jenvey.
+
+- Issue #4646: distutils was choking on empty options arg in the setup
+  function. Original patch by Thomas Heller.
+
+- Issue #3767: Convert Tk object to string in tkColorChooser.
+
+- Issue #3248: Allow placing ScrolledText in a PanedWindow.
+
+- Issue #4444: Allow assertRaises() to be used as a context handler, so that
+  the code under test can be written inline if more practical.
+
+- Issue #4739: Add pydoc help topics for symbols, so that e.g. help('@')
+  works as expected in the interactive environment.
+
+- Issue #4756: zipfile.is_zipfile() now supports file-like objects. Patch by
+  Gabriel Genellina.
+
+- Issue #4574: reading an UTF16-encoded text file crashes if \r on 64-char
+  boundary.
+
+- Issue #4223: inspect.getsource() will now correctly display source code
+  for packages loaded via zipimport (or any other conformant PEP 302
+  loader). Original patch by Alexander Belopolsky.
+
+- Issue #4201: pdb can now access and display source code loaded via
+  zipimport (or any other conformant PEP 302 loader). Original patch by
+  Alexander Belopolsky.
+
+- Issue #4197: doctests in modules loaded via zipimport (or any other PEP
+  302 conformant loader) will now work correctly in most cases (they
+  are still subject to the constraints that exist for all code running
+  from inside a module loaded via a PEP 302 loader and attempting to
+  perform IO operations based on __file__). Original patch by
+  Alexander Belopolsky.
+
+- Issues #4082 and #4512: Add runpy support to zipimport in a manner that
+  allows backporting to maintenance branches. Original patch by
+  Alexander Belopolsky.
+
+- Issue #4163: textwrap module: allow word splitting on a hyphen preceded by
+  a non-ASCII letter.
+
+- Issue #4616: TarFile.utime(): Restore directory times on Windows.
+
+- Issue #4021: tokenize.detect_encoding() now raises a SyntaxError when the
+  codec cannot be found.  This is for compatibility with the builtin behavior.
+
+- Issue #4084: Fix max, min, max_mag and min_mag Decimal methods to
+  give correct results in the case where one argument is a quiet NaN
+  and the other is a finite number that requires rounding.
+
+- Issue #4483: _dbm module now builds on systems with gdbm & gdbm_compat
+  libs.
+
+- Added the subprocess.check_call_output() convenience function to get output
+  from a subprocess on success or raise an exception on error.
+
+- Issue #1055234: cgi.parse_header(): Fixed parsing of header parameters to
+  support unusual filenames (such as those containing semi-colons) in
+  Content-Disposition headers.
+
+- Issue #4384: Added logging integration with warnings module using
+  captureWarnings(). This change includes a NullHandler which does nothing;
+  it will be of use to library developers who want to avoid the "No handlers
+  could be found for logger XXX" message which can appear if the library user
+  doesn't configure logging.
+
+- Issue #3741: DISTUTILS_USE_SDK set causes msvc9compiler.py to raise an
+  exception.
+
+- Issue #4529: fix the parser module's validation of try-except-finally
+  statements.
+
+- Issue #4458: getopt.gnu_getopt() now recognizes a single "-" as an argument,
+  not a malformed option.
+
+- Added the subprocess.check_output() convenience function to get output
+  from a subprocess on success or raise an exception on error.
+
+- Issue #4542: On Windows, binascii.crc32 still accepted str as binary input;
+  the corresponding tests now pass.
+
+- Issue #4537: webbrowser.UnixBrowser would fail to open the browser because
+  it was calling the wrong open() function.
+
+- Issue #1055234: cgi.parse_header(): Fixed parsing of header parameters to
+  support unusual filenames (such as those containing semi-colons) in
+  Content-Disposition headers.
+
+- Issue #4861: ctypes.util.find_library(): Robustify. Fix library detection on
+  biarch systems. Try to rely on ldconfig only, without using objdump and gcc.
+
+- Issue #5104: The socket module now raises OverflowError when 16-bit port and
+  protocol numbers are supplied outside the allowed 0-65536 range on bind()
+  and getservbyport().
+
+- Windows locale mapping updated to Vista.
+
+Tools/Demos
+-----------
+
+- Issue #4704: remove use of cmp() in pybench, bump its version number to 2.1,
+  and make it 2.6-compatible.
+
+- Ttk demos added in Demo/tkinter/ttk/
+
+- Issue #4677: add two list comprehension tests to pybench.
+
+
+Build
+-----
+
+- Issue #6094: Build correctly with Subversion 1.7.
+
+- Issue #5847: Remove -n switch on "Edit with IDLE" menu item.
+
+- Issue #5726: Make Modules/ld_so_aix return the actual exit code of the
+  linker, rather than always exit successfully. Patch by Floris Bruynooghe.
+
+- Issue #4587: Add configure option --with-dbmliborder=db1:db2:... to specify
+  the order that backends for the dbm extension are checked.
+
+- Link the shared python library with $(MODLIBS).
+
+- Issue #5134: Silence compiler warnings when compiling sqlite with VC++.
+
+- Issue #4494: Fix build with Py_NO_ENABLE_SHARED on Windows.
+
+- Issue #4895: Use _strdup on Windows CE.
+
+- Issue #4472: "configure --enable-shared" now works on OSX
+
+- Issues #4728 and #4060: WORDS_BIGEDIAN is now correct in Universal builds.
+
+- Issue #4389: Add icon to the uninstall entry in "add-and-remove-programs".
+
+- Issue #4289: Remove Cancel button from AdvancedDlg.
+
+- Issue #1656675: Register a drop handler for .py* files on Windows.
+
+- Issue #4120: Exclude manifest from extension modules in VS2008.
+
+- Issue #4091: Install pythonxy.dll in system32 again.
+
+- Issue #4018: Disable "for me" installations on Vista.
+
+- Issue #3758: Add ``patchcheck`` build target to .PHONY.
+
+- Issue #4204: Fixed module build errors on FreeBSD 4.
+
+
+C-API
+-----
+
+- Issue #6624: yArg_ParseTuple with "s" format when parsing argument with
+  NUL: Bogus TypeError detail string.
+
+- Issue #5175: PyLong_AsUnsignedLongLong now raises OverflowError
+  for negative arguments.  Previously, it raised TypeError.
+
+- Issue #4720: The format for PyArg_ParseTupleAndKeywords can begin with '|'.
+
+- Issue #3632: from the gdb debugger, the 'pyo' macro can now be called when
+  the GIL is released, or owned by another thread.
+
+- Issue #4122: On Windows, fix a compilation error when using the
+  Py_UNICODE_ISSPACE macro in an extension module.
+
+
+Extension Modules
+-----------------
+
+- Issue #3745: Fix hashlib to always reject unicode and non buffer-api
+  supporting objects as input no matter how it was compiled (built in
+  implementations or external openssl library).
+
+- Issue #4397: Fix occasional test_socket failure on OS X.
+
+- Issue #4279: Fix build of parsermodule under Cygwin.
+
+- Issue #4751: hashlib now releases the GIL when hashing large buffers
+  (with a hardwired threshold of 2048 bytes), allowing better parallelization
+  on multi-CPU systems. Contributed by Lukas Lueg (ebfe) and Victor Stinner.
+
+- Issue #4051: Prevent conflict of UNICODE macros in cPickle.
+
+- Issue #4738: Each zlib object now has a separate lock, allowing to compress
+  or decompress several streams at once on multi-CPU systems. Also, the GIL
+  is now released when computing the CRC of a large buffer. Patch by ebfe.
+
+- Issue #4228: Pack negative values the same way as 2.4 in struct's L format.
+
+- Issue #1040026: Fix os.times result on systems where HZ is incorrect.
+
+- Issues #3167, #3682: Fix test_math failures for log, log10 on Solaris,
+  OpenBSD.
+
+- Issue #4583: array.array would not always prohibit resizing when a buffer
+  has been exported, resulting in an interpreter crash when accessing the
+  buffer.
+
+
+- Issue #5228: Make functools.partial objects can now be pickled.
+
+Tests
+-----
+
+- Issue #6152: New option '-j'/'--multiprocess' for regrtest allows running
+  regression tests in parallel, shortening the total runtime.
+
+- Issue #5450: Moved tests involving loading tk from Lib/test/test_tcl to
+  Lib/tkinter/test/test_tkinter/test_loadtk. With this, these tests demonstrate
+  the same behaviour as test_ttkguionly (and now also test_tk) which is to
+  skip the tests if DISPLAY is defined but can't be used.
+
+- regrtest no longer treats ImportError as equivalent to SkipTest.  Imports
+  that should cause a test to be skipped are now done using import_module
+  from test support, which does the conversion.
+
+- Issue #5083: New 'gui' resource for regrtest.
+
+
+Docs
+----
+
+
 What's New in Python 3.0 final
 ==============================
 
diff -r bd8afb90ebf2 Misc/NEWS
--- a/Misc/NEWS
+++ b/Misc/NEWS
@@ -2,6 +2,430 @@
 Python News
 +++++++++++
 
+What's New in Python 3.3.1?
+===========================
+
+*Not yet released, see sections below for changes released in 3.3.0*
+
+.. *Release date: XX-XXX-2012*
+
+Core and Builtins
+-----------------
+
+- Issue #16722: In the bytes() constructor, try to call __bytes__ on the
+  argument before __index__.
+
+- Issue #16602: When a weakref's target was part of a long deallocation
+  chain, the object could remain reachable through its weakref even though
+  its refcount had dropped to zero.
+
+- Issue #16416: On Mac OS X, operating system data are now always
+  encoded/decoded to/from UTF-8/surrogateescape, instead of the locale encoding
+  (which may be ASCII if no locale environment variable is set), to avoid
+  inconsistencies with os.fsencode() and os.fsdecode() functions which are
+  already using UTF-8/surrogateescape.
+
+- Issue #16588: Silence unused-but-set warnings in Python/thread_pthread
+
+- Issue #16546: Fix: ast.YieldFrom argument is now mandatory.
+
+- Issue #16514: Fix regression causing a traceback when sys.path[0] is None
+  (actually, any non-string or non-bytes type).
+
+- Issue #16306: Fix multiple error messages when unknown command line
+  parameters where passed to the interpreter.  Patch by Hieu Nguyen.
+
+- Issue #16215: Fix potential double memory free in str.replace().  Patch
+  by Serhiy Storchaka.
+
+- Issue #16453: Fix equality testing of dead weakref objects.
+
+- Issue #9535: Fix pending signals that have been received but not yet
+  handled by Python to not persist after os.fork() in the child process.
+
+- Issue #15001: fix segfault on "del sys.modules['__main__']". Patch by Victor
+  Stinner.
+
+- Issue #8271: the utf-8 decoder now outputs the correct number of U+FFFD
+  characters when used with the 'replace' error handler on invalid utf-8
+  sequences.  Patch by Serhiy Storchaka, tests by Ezio Melotti.
+
+- Issue #5765: Apply a hard recursion limit in the compiler instead of
+  blowing the stack and segfaulting. Initial patch by Andrea Griffini.
+
+- Issue #16402: When slicing a range, fix shadowing of exceptions from
+  __index__.
+
+- Issue #16336: fix input checking in the surrogatepass error handler.
+  Patch by Serhiy Storchaka.
+
+- Issue #8401: assigning an int to a bytearray slice (e.g. b[3:4] = 5) now
+  raises an error.
+
+- Fix segfaults on setting __qualname__ on builtin types and attempting to
+  delete it on any type.
+
+- Issue #16345: Fix an infinite loop when ``fromkeys`` on a dict subclass
+  received a nonempty dict from the constructor.
+
+- Issue #16271: Fix strange bugs that resulted from __qualname__ appearing in a
+  class's __dict__ and on type.
+
+- Issue #16197: Update winreg docstrings and documentation to match code.
+  Patch by Zachary Ware.
+
+- Issue #16241: Document -X faulthandler command line option.
+  Patch by Marek Šuppa.
+
+- Issue #6074: Ensure cached bytecode files can always be updated by the
+  user that created them, even when the source file is read-only.
+
+- Issue #14783: Improve int() docstring and switch docstrings for str(),
+  range(), and slice() to use multi-line signatures.
+
+- Issue #16160: Subclass support now works for types.SimpleNamespace.
+
+- Issue #15379: Fix passing of non-BMP characters as integers for the charmap
+  decoder (already working as unicode strings).  Patch by Serhiy Storchaka.
+
+- Issue #15144: Fix possible integer overflow when handling pointers as integer
+  values, by using `Py_uintptr_t` instead of `size_t`.  Patch by Serhiy
+  Storchaka.
+
+- Issue #15965: Explicitly cast `AT_FDCWD` as (int).  Required on Solaris 10
+  (which defines `AT_FDCWD` as ``0xffd19553``), harmless on other platforms.
+
+- Issue #15839: Convert SystemErrors in `super()` to RuntimeErrors.
+
+- Issue #15846: Fix SystemError which happened when using `ast.parse()` in an
+  exception handler on code with syntax errors.
+
+- Issue #15801: Make sure mappings passed to '%' formatting are actually
+  subscriptable.
+
+- Issue #15111: __import__ should let ImportError propagate when a module that
+  is imported as a side-effect of using fromlist tries to import a module
+  that cannot be found.
+
+
+Library
+-------
+
+- Issue #16646: ftplib.FTP.makeport() might lose socket error details.
+  (patch by Serhiy Storchaka)
+
+- Issue #16626: Fix infinite recursion in glob.glob() on Windows when the
+  pattern contains a wildcard in the drive or UNC path.  Patch by Serhiy
+  Storchaka.
+
+- Issue #15783: Except for the number methods, the C version of decimal now
+  supports all None default values present in decimal.py. These values were
+  largely undocumented.
+
+- Issue #16298: In HTTPResponse.read(), close the socket when there is no
+  Content-Length and the incoming stream is finished.  Patch by Eran
+  Rundstein.
+
+- Issue #15872: Fix 3.3 regression introduced by the new fd-based shutil.rmtree
+  that caused it to not ignore certain errors when ignore_errors was set.
+  Patch by Alessandro Moura and Serhiy Storchaka.
+
+- Issue #16248: Disable code execution from the user's home directory by
+  tkinter when the -E flag is passed to Python.  Patch by Zachary Ware.
+
+- Issue #16628: Fix a memory leak in ctypes.resize().
+
+- Issue #13614: Fix setup.py register failure with invalid rst in description.
+  Patch by Julien Courteau and Pierre Paul Lefebvre.
+
+- Issue #13512: Create ~/.pypirc securely (CVE-2011-4944).  Initial patch by
+  Philip Jenvey, tested by Mageia and Debian.
+
+- Issue #7719: Make distutils ignore ``.nfs*`` files instead of choking later
+  on.  Initial patch by SilentGhost and Jeff Ramnani.
+
+- Issue #13120: Allow to call pdb.set_trace() from thread.
+  Patch by Ilya Sandler.
+
+- Issue #16585: Make CJK encoders support error handlers that return bytes per
+  PEP 383.
+
+- Issue #10182: The re module doesn't truncate indices to 32 bits anymore.
+  Patch by Serhiy Storchaka.
+
+- Issue #16573: In 2to3, treat enumerate() like a consuming call, so superfluous
+  list() calls aren't added to filter(), map(), and zip() which are directly
+  passed enumerate().
+
+- Issue #16476: Fix json.tool to avoid including trailing whitespace.
+
+- Issue #16549: Make json.tool work again on Python 3 and add tests.
+  Initial patch by Berker Peksag and Serhiy Storchaka.
+
+- Issue #12848: The pure Python pickle implementation now treats object
+  lengths as unsigned 32-bit integers, like the C implementation does.
+  Patch by Serhiy Storchaka.
+
+- Issue #16408: Fix file descriptors not being closed in error conditions
+  in the zipfile module.  Patch by Serhiy Storchaka.
+
+- Issue #16481: multiprocessing no longer leaks process handles on Windows.
+
+- Issue #16140: The subprocess module no longer double closes its child
+  subprocess.PIPE parent file descriptors on child error prior to exec().
+
+- Remove a bare print to stdout from the subprocess module that could have
+  happened if the child process wrote garbage to its pre-exec error pipe.
+
+- Issue #16327: The subprocess module no longer leaks file descriptors
+  used for stdin/stdout/stderr pipes to the child when fork() fails.
+
+- Issue #14396: Handle the odd rare case of waitpid returning 0 when not
+  expected in subprocess.Popen.wait().
+
+- Issue #16411: Fix a bug where zlib.decompressobj().flush() might try to access
+  previously-freed memory. Patch by Serhiy Storchaka.
+
+- Issue #16357: fix calling accept() on a SSLSocket created through
+  SSLContext.wrap_socket().  Original patch by Jeff McNeil.
+
+- Issue #16409: The reporthook callback made by the legacy
+  urllib.request.urlretrieve API now properly supplies a constant non-zero
+  block_size as it did in Python 3.2 and 2.7.  This matches the behavior of
+  urllib.request.URLopener.retrieve.
+
+- Issue #16431: Use the type information when constructing a Decimal subtype
+  from a Decimal argument.
+
+- Issue #16350: zlib.decompressobj().decompress() now accumulates data from
+  successive calls after EOF in unused_data, instead of only saving the argument
+  to the last call. decompressobj().flush() now correctly sets unused_data and
+  unconsumed_tail. A bug in the handling of MemoryError when setting the
+  unconsumed_tail attribute has also been fixed. Patch by Serhiy Storchaka.
+
+- Issue #12759: sre_parse now raises a proper error when the name of the group
+  is missing.  Initial patch by Serhiy Storchaka.
+
+- Issue #16152: fix tokenize to ignore whitespace at the end of the code when
+  no newline is found.  Patch by Ned Batchelder.
+
+- Issue #1207589: Add Cut/Copy/Paste items to IDLE right click Context Menu
+  Patch by Todd Rovito.
+
+- Issue #16230: Fix a crash in select.select() when one the lists changes
+  size while iterated on.  Patch by Serhiy Storchaka.
+
+- Issue #16228: Fix a crash in the json module where a list changes size
+  while it is being encoded.  Patch by Serhiy Storchaka.
+
+- Issue #14897: Enhance error messages of struct.pack and
+  struct.pack_into. Patch by Matti Mäki.
+
+- Issue #12890: cgitb no longer prints spurious <p> tags in text
+  mode when the logdir option is specified.
+
+- Issue #16307: Fix multiprocessing.Pool.map_async not calling its callbacks.
+  Patch by Janne Karila.
+
+- Issue #16250: Fix URLError invocation with proper args.
+
+- Issue #16116: Fix include and library paths to be correct when building C
+  extensions in venvs.
+
+- Issue #16245: Fix the value of a few entities in html.entities.html5.
+
+- Issue #14398: Fix size truncation and overflow bugs in the bz2 module.
+
+- Issue #16220: wsgiref now always calls close() on an iterable response.
+  Patch by Brent Tubbs.
+
+- Issue #16270: urllib may hang when used for retrieving files via FTP by using
+  a context manager.  Patch by Giampaolo Rodola'.
+
+- Issue #16461: Wave library should be able to deal with 4GB wav files,
+  and sample rate of 44100 Hz.
+
+- Issue #16176: Properly identify Windows 8 via platform.platform()
+
+- Issue #16114: The subprocess module no longer provides a misleading error
+  message stating that args[0] did not exist when either the cwd or executable
+  keyword arguments specified a path that did not exist.
+
+- Issue #16169: Fix ctypes.WinError()'s confusion between errno and winerror.
+
+- Issue #16089: Allow ElementTree.TreeBuilder to work again with a non-Element
+  element_factory (fixes a regression in SimpleTAL).
+
+- Issue #16034: Fix performance regressions in the new `bz2.BZ2File`
+  implementation.  Initial patch by Serhiy Storchaka.
+
+- Issue #16112: platform.architecture does not correctly escape argument to
+  /usr/bin/file.  Patch by David Benjamin.
+
+- Issue #15756: `subprocess.poll()` now properly handles `errno.ECHILD` to
+  return a returncode of 0 when the child has already exited or cannot be waited
+  on.
+
+- Issue #15323: Improve failure message of `Mock.assert_called_once_with()`.
+
+- Issue #16064: ``unittest -m`` claims executable is "python", not "python3".
+
+- Issue #12376: Pass on parameters in `TextTestResult.__init__()` super call.
+
+- Issue #15222: Insert blank line after each message in mbox mailboxes.
+
+- Issue #16013: Fix `csv.Reader` parsing issue with ending quote characters.
+  Patch by Serhiy Storchaka.
+
+- Issue #15421: Fix an OverflowError in `Calendar.itermonthdates()` after
+  `datetime.MAXYEAR`.  Patch by Cédric Krier.
+
+- Issue #15970: `xml.etree.ElementTree` now serializes correctly the empty HTML
+  elements 'meta' and 'param'.
+
+- Issue #15842: The `SocketIO.{readable,writable,seekable}` methods now raise
+  ValueError when the file-like object is closed.  Patch by Alessandro Moura.
+
+- Issue #15876: Fix a refleak in the `curses` module: window.encoding.
+
+- Issue #15881: Fix `atexit` hook in `multiprocessing`.  Original patch by Chris
+  McDonough.
+
+- Issue #15841: The readable(), writable() and seekable() methods of
+  `io.BytesIO` and `io.StringIO` objects now raise ValueError when the object
+  has been closed.  Patch by Alessandro Moura.
+
+- Issue #16126: PyErr_Format format mismatch in _testcapimodule.c.
+  Patch by Serhiy Storchaka.
+
+- Issue #15447: Use `subprocess.DEVNULL` in webbrowser, instead of opening
+  `os.devnull` explicitly and leaving it open.
+
+- Issue #15509: `webbrowser.UnixBrowser` no longer passes empty arguments to
+  Popen when ``%action`` substitutions produce empty strings.
+
+- Issue #12776, issue #11839: Call `argparse` type function (specified by
+  add_argument) only once.  Before, the type function was called twice in the
+  case where the default was specified and the argument was given as well.  This
+  was especially problematic for the FileType type, as a default file would
+  always be opened, even if a file argument was specified on the command line.
+
+- Issue #15906: Fix a regression in `argparse` caused by the preceding change,
+  when ``action='append'``, ``type='str'`` and ``default=[]``.
+
+Tests
+-----
+
+- Issue #16664: Add regression tests for glob's behaviour concerning entries
+  starting with a ".".  Patch by Sebastian Kreft.
+
+- Issue #16559: Add more tests for the json module, including some from the
+  official test suite at json.org.  Patch by Serhiy Storchaka.
+
+- Issue #16661: Fix the `os.getgrouplist()` test by not assuming that it gives
+  the same output as :command:`id -G`.
+
+- Issue #16115: Add some tests for the executable argument to
+  subprocess.Popen().  Initial patch by Kushal Das.
+
+- Issue #15304: Fix warning message when `os.chdir()` fails inside
+  `test.support.temp_cwd()`.  Patch by Chris Jerdonek.
+
+- Issue #15802: Fix test logic in `TestMaildir.test_create_tmp()`. Patch by
+  Serhiy Storchaka.
+
+- Issue #15557: Add a test suite for the `webbrowser` module, thanks to Anton
+  Barkovsky.
+
+Build
+-----
+
+- Cross compiling needs host and build settings. configure no longer
+  creates a broken PYTHON_FOR_BUILD variable when --build is missing.
+
+- Fix cross compiling issue in setup.py, ensure that lib_dirs and inc_dirs are
+  defined in cross compiling mode, too.
+
+- Issue #16593: Have BSD 'make -s' do the right thing, thanks to Daniel Shahaf
+
+- Issue #16262: fix out-of-src-tree builds, if mercurial is not installed.
+
+- Issue #15298: ensure _sysconfigdata is generated in build directory, not
+  source directory.
+
+- Issue #15833: Fix a regression in 3.3 that resulted in exceptions being
+  raised if importlib failed to write byte-compiled files.  This affected
+  attempts to build Python out-of-tree from a read-only source directory.
+
+- Issue #15923: Fix a mistake in ``asdl_c.py`` that resulted in a TypeError
+  after 2801bf875a24 (see #15801).
+
+- Issue #15819: Make sure we can build Python out-of-tree from a read-only
+  source directory.  (Somewhat related to issue #9860.)
+
+Tools/Demos
+-----------
+
+- Issue #13301: use ast.literal_eval() instead of eval() in Tools/i18n/msgfmt.py
+  Patch by Serhiy Storchaka.
+
+Documentation
+-------------
+
+- Issue #14901: Update portions of the Windows FAQ.
+  Patch by Ashish Nitin Patil.
+
+- Issue #16267: Better document the 3.3+ approach to combining
+  @abstractmethod with @staticmethod, @classmethod and @property
+
+- Issue #15209: Clarify exception chaining description in exceptions module
+  documentation
+
+- Issue #15990: Improve argument/parameter documentation.
+
+- Issue #16209: Move the documentation for the str built-in function to a new
+  str class entry in the "Text Sequence Type" section.
+
+- Issue #13538: Improve str() and object.__str__() documentation.
+
+- Issue #16489: Make it clearer that importlib.find_loader() requires any and
+  all packages to be separately imported.
+
+- Issue #16400: Update the description of which versions of a given package
+  PyPI displays.
+
+- Issue #15677: Document that zlib and gzip accept a compression level of 0 to
+  mean 'no compression'. Patch by Brian Brazil.
+
+- Issue #8040: added a version switcher to the documentation.  Patch by
+  Yury Selivanov.
+
+- Additional comments and some style changes in the concurrent.futures URL
+  retrieval example
+
+- Issue #16115: Improve subprocess.Popen() documentation around args, shell,
+  and executable arguments.
+
+- Issue #15533: Clarify docs and add tests for `subprocess.Popen()`'s cwd
+  argument.
+
+- Issue #15979: Improve timeit documentation.
+
+- Issue #16036: Improve documentation of built-in `int()`'s signature and
+  arguments.
+
+- Issue #15935: Clarification of `argparse` docs, re: add_argument() type and
+  default arguments.  Patch contributed by Chris Jerdonek.
+
+- Issue #11964: Document a change in v3.2 to the behavior of the indent
+  parameter of json encoding operations.
+
+Tools/Demos
+-----------
+
+- Issue #15378: Fix Tools/unicode/comparecodecs.py.  Patch by Serhiy Storchaka.
+
+
 What's New in Python 3.3.0?
 ===========================
 
@@ -12,13 +436,13 @@
 
 - Issue #16046: Fix loading sourceless legacy .pyo files.
 
-- Issue #16060: Fix refcounting bug when __trunc__ returns an object
-  whose __int__ gives a non-integer.  Patch by Serhiy Storchaka.
+- Issue #16060: Fix refcounting bug when `__trunc__()` returns an object whose
+  `__int__()` gives a non-integer.  Patch by Serhiy Storchaka.
 
 Extension Modules
 -----------------
 
-- Issue #16012: Fix a regression in pyexpat. The parser's UseForeignDTD()
+- Issue #16012: Fix a regression in pyexpat. The parser's `UseForeignDTD()`
   method doesn't require an argument again.
 
 
@@ -30,26 +454,26 @@
 Core and Builtins
 -----------------
 
-- Issue #15900: Fix reference leak in PyUnicode_TranslateCharmap().
+- Issue #15900: Fix reference leak in `PyUnicode_TranslateCharmap()`.
 
 - Issue #15926: Fix crash after multiple reinitializations of the interpreter.
 
 - Issue #15895: Fix FILE pointer leak in one error branch of
-  PyRun_SimpleFileExFlags() when filename points to a pyc/pyo file, closeit
-  is false an and set_main_loader() fails.
+  `PyRun_SimpleFileExFlags()` when filename points to a pyc/pyo file, closeit is
+  false an and set_main_loader() fails.
 
 - Fixes for a few crash and memory leak regressions found by Coverity.
 
 Library
 -------
 
-- Issue #15882: Change _decimal to accept any coefficient tuple when
-  constructing infinities. This is done for backwards compatibility
-  with decimal.py: Infinity coefficients are undefined in _decimal
-  (in accordance with the specification).
-
-- Issue #15925: Fix a regression in email.util where the parsedate() and
-  parsedate_tz() functions did not return None anymore when the argument could
+- Issue #15882: Change `_decimal` to accept any coefficient tuple when
+  constructing infinities. This is done for backwards compatibility with
+  decimal.py: Infinity coefficients are undefined in _decimal (in accordance
+  with the specification).
+
+- Issue #15925: Fix a regression in `email.util` where the `parsedate()` and
+  `parsedate_tz()` functions did not return None anymore when the argument could
   not be parsed.
 
 Extension Modules
@@ -61,7 +485,7 @@
 - Issue #15977: Fix memory leak in Modules/_ssl.c when the function
   _set_npn_protocols() is called multiple times, thanks to Daniel Sommermann.
 
-- Issue #15969: faulthandler module: rename dump_tracebacks_later() to
+- Issue #15969: `faulthandler` module: rename dump_tracebacks_later() to
   dump_traceback_later() and cancel_dump_tracebacks_later() to
   cancel_dump_traceback_later().
 
@@ -77,35 +501,34 @@
 -----------------
 
 - Issue #13992: The trashcan mechanism is now thread-safe.  This eliminates
-  sporadic crashes in multi-thread programs when several long deallocator
-  chains ran concurrently and involved subclasses of built-in container
-  types.
-
-- Issue #15784: Modify OSError.__str__() to better distinguish between
-  errno error numbers and Windows error numbers.
+  sporadic crashes in multi-thread programs when several long deallocator chains
+  ran concurrently and involved subclasses of built-in container types.
+
+- Issue #15784: Modify `OSError`.__str__() to better distinguish between errno
+  error numbers and Windows error numbers.
 
 - Issue #15781: Fix two small race conditions in import's module locking.
 
 Library
 -------
 
-- Issue #15847: Fix a regression in argparse, which did not accept tuples
-  as argument lists anymore.
-
-- Issue #15828: Restore support for C extensions in imp.load_module().
-
-- Issue #15340: Fix importing the random module when /dev/urandom cannot
-  be opened.  This was a regression caused by the hash randomization patch.
-
-- Issue #10650: Deprecate the watchexp parameter of the Decimal.quantize()
+- Issue #15847: Fix a regression in argparse, which did not accept tuples as
+  argument lists anymore.
+
+- Issue #15828: Restore support for C extensions in `imp.load_module()`.
+
+- Issue #15340: Fix importing the random module when ``/dev/urandom`` cannot be
+  opened.  This was a regression caused by the hash randomization patch.
+
+- Issue #10650: Deprecate the watchexp parameter of the `Decimal.quantize()`
   method.
 
-- Issue #15785: Modify window.get_wch() API of the curses module: return
-  a character for most keys, and an integer for special keys, instead of
-  always returning an integer. So it is now possible to distinguish special
-  keys like keypad keys.
-
-- Issue #14223: Fix window.addch() of the curses module for special characters
+- Issue #15785: Modify `window.get_wch()` API of the curses module: return a
+  character for most keys, and an integer for special keys, instead of always
+  returning an integer. So it is now possible to distinguish special keys like
+  keypad keys.
+
+- Issue #14223: Fix `window.addch()` of the curses module for special characters
   like curses.ACS_HLINE: the Python function addch(int) and addch(bytes) is now
   calling the C function waddch()/mvwaddch() (as it was done in Python 3.2),
   instead of wadd_wch()/mvwadd_wch(). The Python function addch(str) is still
@@ -121,10 +544,10 @@
 Documentation
 -------------
 
-- Issue #15814: The memoryview enhancements in 3.3.0 accidentally permitted
-  the hashing of multi-dimensional memorviews and memoryviews with multi-byte
-  item formats. The intended restrictions have now been documented - they
-  will be correctly enforced in 3.3.1
+- Issue #15814: The memoryview enhancements in 3.3.0 accidentally permitted the
+  hashing of multi-dimensional memorviews and memoryviews with multi-byte item
+  formats. The intended restrictions have now been documented - they will be
+  correctly enforced in 3.3.1.
 
 
 What's New in Python 3.3.0 Release Candidate 1?
@@ -138,79 +561,78 @@
 - Issue #15573: memoryview comparisons are now performed by value with full
   support for any valid struct module format definition.
 
-- Issue #15316: When an item in the fromlist for __import__ doesn't exist,
+- Issue #15316: When an item in the fromlist for `__import__()` doesn't exist,
   don't raise an error, but if an exception is raised as part of an import do
   let that propagate.
 
-- Issue #15778: ensure that str(ImportError(msg)) returns a str
-  even when msg isn't a str.
-
-- Issue #2051: Source file permission bits are once again correctly
-  copied to the cached bytecode file. (The migration to importlib
-  reintroduced this problem because these was no regression test. A test
-  has been added as part of this patch)
-
-- Issue #15761: Fix crash when PYTHONEXECUTABLE is set on Mac OS X.
-
-- Issue #15726: Fix incorrect bounds checking in PyState_FindModule.
-  Patch by Robin Schreiber.
-
-- Issue #15604: Update uses of PyObject_IsTrue() to check for and handle
+- Issue #15778: Ensure that ``str(ImportError(msg))`` returns a str even when
+  msg isn't a str.
+
+- Issue #2051: Source file permission bits are once again correctly copied to
+  the cached bytecode file. (The migration to importlib reintroduced this
+  problem because these was no regression test. A test has been added as part of
+  this patch)
+
+- Issue #15761: Fix crash when ``PYTHONEXECUTABLE`` is set on Mac OS X.
+
+- Issue #15726: Fix incorrect bounds checking in PyState_FindModule.  Patch by
+  Robin Schreiber.
+
+- Issue #15604: Update uses of `PyObject_IsTrue()` to check for and handle
   errors correctly.  Patch by Serhiy Storchaka.
 
-- Issue #14846: importlib.FileFinder now handles the case where the
-  directory being searched is removed after a previous import attempt
+- Issue #14846: `importlib.FileFinder` now handles the case where the directory
+  being searched is removed after a previous import attempt.
 
 Library
 -------
 
-- Issue #13370: Ensure that ctypes works on Mac OS X when Python is
-  compiled using the clang compiler
-
-- Issue #13072: The array module's 'u' format code is now deprecated and
-  will be removed in Python 4.0.
+- Issue #13370: Ensure that ctypes works on Mac OS X when Python is compiled
+  using the clang compiler.
+
+- Issue #13072: The array module's 'u' format code is now deprecated and will be
+  removed in Python 4.0.
 
 - Issue #15544: Fix Decimal.__float__ to work with payload-carrying NaNs.
 
 - Issue #15776: Allow pyvenv to work in existing directory with --clean.
 
-- Issue #15249: BytesGenerator now correctly mangles From lines (when
+- Issue #15249: email's BytesGenerator now correctly mangles From lines (when
   requested) even if the body contains undecodable bytes.
 
 - Issue #15777: Fix a refleak in _posixsubprocess.
 
-- Issue ##665194: Update email.utils.localtime to use datetime.astimezone and
+- Issue ##665194: Update `email.utils.localtime` to use datetime.astimezone and
   correctly handle historic changes in UTC offsets.
 
 - Issue #15199: Fix JavaScript's default MIME type to application/javascript.
   Patch by Bohuslav Kabrda.
 
-- Issue #12643: code.InteractiveConsole now respects sys.excepthook when
-  displaying exceptions (Patch by Aaron Iles)
-
-- Issue #13579: string.Formatter now understands the 'a' conversion specifier.
-
-- Issue #15595: Fix subprocess.Popen(universal_newlines=True)
-  for certain locales (utf-16 and utf-32 family). Patch by Chris Jerdonek.
+- Issue #12643: `code.InteractiveConsole` now respects `sys.excepthook` when
+  displaying exceptions.  Patch by Aaron Iles.
+
+- Issue #13579: `string.Formatter` now understands the 'a' conversion specifier.
+
+- Issue #15595: Fix ``subprocess.Popen(universal_newlines=True)`` for certain
+  locales (utf-16 and utf-32 family). Patch by Chris Jerdonek.
 
 - Issue #15477: In cmath and math modules, add workaround for platforms whose
   system-supplied log1p function doesn't respect signs of zeros.
 
-- Issue #15715: importlib.__import__() will silence an ImportError when the use
-  of fromlist leads to a failed import.
-
-- Issue #14669: Fix pickling of connections and sockets on MacOSX
-  by sending/receiving an acknowledgment after file descriptor transfer.
-  TestPicklingConnection has been reenabled for MacOSX.
+- Issue #15715: `importlib.__import__()` will silence an ImportError when the
+  use of fromlist leads to a failed import.
+
+- Issue #14669: Fix pickling of connections and sockets on Mac OS X by
+  sending/receiving an acknowledgment after file descriptor transfer.
+  TestPicklingConnection has been reenabled for Mac OS X.
 
 - Issue #11062: Fix adding a message from file to Babyl mailbox.
 
-- Issue #15646: Prevent equivalent of a fork bomb when using
-  multiprocessing on Windows without the "if __name__ == '__main__'"
-  idiom.
-
-- Issue #15678: Fix IDLE menus when started from OS X command line
-  (3.3.0b2 regression).
+- Issue #15646: Prevent equivalent of a fork bomb when using `multiprocessing`
+  on Windows without the ``if __name__ == '__main__'`` idiom.
+
+- Issue #15678: Fix IDLE menus when started from OS X command line (3.3.0b2
+  regression).
 
 C API
 -----
@@ -224,44 +646,42 @@
 Documentation
 -------------
 
-- Issue #14674: Add a discussion of the json module's standard compliance.
+- Issue #14674: Add a discussion of the `json` module's standard compliance.
   Patch by Chris Rebert.
 
 - Create a 'Concurrent Execution' section in the docs, and split up the
   'Optional Operating System Services' section to use a more user-centric
-  classification scheme (splitting them across the new CE section, IPC and
-  text processing). Operating system limitatons can be reflected with
-  the Sphinx :platform: tag, it doesn't make sense as part of the Table of
-  Contents.
-
-- Issue #4966: Bring the sequence docs up to date for the Py3k transition
-  and the many language enhancements since they were original written
+  classification scheme (splitting them across the new CE section, IPC and text
+  processing). Operating system limitatons can be reflected with the Sphinx
+  ``:platform:`` tag, it doesn't make sense as part of the Table of Contents.
+
+- Issue #4966: Bring the sequence docs up to date for the Py3k transition and
+  the many language enhancements since they were original written.
 
 - The "path importer" misnomer has been replaced with Eric Snow's
-  more-awkward-but-at-least-not-wrong suggestion of "path based finder" in
-  the import system reference docs
-
-- Issue #15640: Document importlib.abc.Finder as deprecated.
-
-- Issue #15630: Add an example for "continue" stmt in the tutorial. Patch by
+  more-awkward-but-at-least-not-wrong suggestion of "path based finder" in the
+  import system reference docs.
+
+- Issue #15640: Document `importlib.abc.Finder` as deprecated.
+
+- Issue #15630: Add an example for "continue" stmt in the tutorial.  Patch by
   Daniel Ellis.
 
 Tests
 -----
 
 - Issue #15747: ZFS always returns EOPNOTSUPP when attempting to set the
-  UF_IMMUTABLE flag (via either chflags or lchflags); refactor affected
-  tests in test_posix.py to account for this.
-
-- Issue #15285: Refactor the approach for testing connect timeouts using
-  two external hosts that have been configured specifically for this type
-  of test.
-
-- Issue #15743: Remove the deprecated method usage in urllib tests. Patch by
+  UF_IMMUTABLE flag (via either chflags or lchflags); refactor affected tests in
+  test_posix.py to account for this.
+
+- Issue #15285: Refactor the approach for testing connect timeouts using two
+  external hosts that have been configured specifically for this type of test.
+
+- Issue #15743: Remove the deprecated method usage in `urllib` tests. Patch by
   Jeff Knupp.
 
-- Issue #15615: Add some tests for the json module's handling of invalid
-  input data.  Patch by Kushal Das.
+- Issue #15615: Add some tests for the `json` module's handling of invalid input
+  data.  Patch by Kushal Das.
 
 Build
 -----
@@ -270,11 +690,11 @@
 
 - Pick up 32-bit launcher from PGO directory on 64-bit PGO build.
 
-- Drop PC\python_nt.h as it's not used. Add input dependency on custom
+- Drop ``PC\python_nt.h`` as it's not used.  Add input dependency on custom
   build step.
 
-- Issue #15511: Drop explicit dependency on pythonxy.lib from _decimal
-  amd64 configuration.
+- Issue #15511: Drop explicit dependency on pythonxy.lib from _decimal amd64
+  configuration.
 
 - Add missing PGI/PGO configurations for pywlauncher.
 
@@ -289,15 +709,15 @@
 Core and Builtins
 -----------------
 
-- Issue #15568: Fix the return value of "yield from" when StopIteration is
+- Issue #15568: Fix the return value of ``yield from`` when StopIteration is
   raised by a custom iterator.
 
-- Issue #13119: sys.stdout and sys.stderr are now using "\r\n" newline on
+- Issue #13119: `sys.stdout` and `sys.stderr` are now using "\r\n" newline on
   Windows, as Python 2.
 
 - Issue #15534: Fix the fast-search function for non-ASCII Unicode strings.
 
-- Issue #15508: Fix the docstring for __import__ to have the proper default
+- Issue #15508: Fix the docstring for `__import__()` to have the proper default
   value of 0 for 'level' and to not mention negative levels since they are not
   supported.
 
@@ -310,17 +730,17 @@
   byte code files) equal between 32-bit and 64-bit systems.
 
 - Issue #1692335: Move initial exception args assignment to
-  "BaseException.__new__" to help pickling of naive subclasses.
-
-- Issue #12834: Fix PyBuffer_ToContiguous() for non-contiguous arrays.
-
-- Issue #15456: Fix code __sizeof__ after #12399 change.  Patch by Serhiy
+  `BaseException.__new__()` to help pickling of naive subclasses.
+
+- Issue #12834: Fix `PyBuffer_ToContiguous()` for non-contiguous arrays.
+
+- Issue #15456: Fix code `__sizeof__()` after #12399 change.  Patch by Serhiy
   Storchaka.
 
 - Issue #15404: Refleak in PyMethodObject repr.
 
-- Issue #15394: An issue in PyModule_Create that caused references to be leaked
-  on some error paths has been fixed.  Patch by Julia Lawall.
+- Issue #15394: An issue in `PyModule_Create()` that caused references to be
+  leaked on some error paths has been fixed.  Patch by Julia Lawall.
 
 - Issue #15368: An issue that caused bytecode generation to be non-deterministic
   has been fixed.
@@ -328,7 +748,7 @@
 - Issue #15202: Consistently use the name "follow_symlinks" for new parameters
   in os and shutil functions.
 
-- Issue #15314: __main__.__loader__ is now set correctly during interpreter
+- Issue #15314: ``__main__.__loader__`` is now set correctly during interpreter
   startup.
 
 - Issue #15111: When a module imported using 'from import' has an ImportError
@@ -343,57 +763,62 @@
 - Issue #15110: Fix the tracebacks generated by "import xxx" to not show the
   importlib stack frames.
 
+- Issue #16369: Global PyTypeObjects not initialized with PyType_Ready(...).
+
 - Issue #15020: The program name used to search for Python's path is now
   "python3" under Unix, not "python".
 
-- Issue #15033: Fix the exit status bug when modules invoked using -m swith,
+- Issue #15897: zipimport.c doesn't check return value of fseek().
+  Patch by Felipe Cruz.
+
+- Issue #15033: Fix the exit status bug when modules invoked using -m switch,
   return the proper failure return value (1). Patch contributed by Jeff Knupp.
 
-- Issue #15229: An OSError subclass whose __init__ doesn't call back
+- Issue #15229: An `OSError` subclass whose __init__ doesn't call back
   OSError.__init__ could produce incomplete instances, leading to crashes when
   calling str() on them.
 
-- Issue 15307: Virtual environments now use symlinks with framework builds on
+- Issue #15307: Virtual environments now use symlinks with framework builds on
   Mac OS X, like other POSIX builds.
 
 Library
 -------
 
-- Issue #15424: Add a __sizeof__ implementation for array objects.  Patch by
+- Issue #15424: Add a `__sizeof__()` implementation for array objects.  Patch by
   Ludwig Hähne.
 
 - Issue #15576: Allow extension modules to act as a package's __init__ module.
 
-- Issue #15502: Have importlib.invalidate_caches() work on sys.meta_path instead
-  of sys.path_importer_cache.
+- Issue #15502: Have `importlib.invalidate_caches()` work on `sys.meta_path`
+  instead of `sys.path_importer_cache`.
 
 - Issue #15163: Pydoc shouldn't list __loader__ as module data.
 
 - Issue #15471: Do not use mutable objects as defaults for
-  importlib.__import__().
+  `importlib.__import__()`.
 
 - Issue #15559: To avoid a problematic failure mode when passed to the bytes
-  constructor, objects in the ipaddress module no longer implement __index__
-  (they still implement __int__ as appropriate)
+  constructor, objects in the ipaddress module no longer implement `__index__()`
+  (they still implement `__int__()` as appropriate).
 
 - Issue #15546: Fix handling of pathological input data in the peek() and
   read1() methods of the BZ2File, GzipFile and LZMAFile classes.
 
 - Issue #13052: Fix IDLE crashing when replace string in Search/Replace dialog
-  ended with '\'. Patch by Roger Serwy.
-
-- Issue #12655: Instead of requiring a custom type, os.sched_getaffinity and
-  os.sched_setaffinity now use regular sets of integers to represent the CPUs a
-  process is restricted to.
-
-- Issue #15538: Fix compilation of the getnameinfo() / getaddrinfo() emulation
-  code.  Patch by Philipp Hagemeister.
+  ended with ``\``.  Patch by Roger Serwy.
+
+- Issue #12655: Instead of requiring a custom type, `os.sched_getaffinity()` and
+  `os.sched_setaffinity()` now use regular sets of integers to represent the
+  CPUs a process is restricted to.
+
+- Issue #15538: Fix compilation of the `socket.getnameinfo()` /
+  `socket.getaddrinfo()` emulation code.  Patch by Philipp Hagemeister.
 
 - Issue #15519: Properly expose WindowsRegistryFinder in importlib (and use the
-  correct term for it). Original patch by Eric Snow.
+  correct term for it).  Original patch by Eric Snow.
 
 - Issue #15502: Bring the importlib ABCs into line with the current state of the
-  import protocols given PEP 420. Original patch by Eric Snow.
+  import protocols given PEP 420.  Original patch by Eric Snow.
 
 - Issue #15499: Launching a webbrowser in Unix used to sleep for a few seconds.
   Original patch by Anton Barkovsky.
@@ -401,37 +826,38 @@
 - Issue #15463: The faulthandler module truncates strings to 500 characters,
   instead of 100, to be able to display long file paths.
 
-- Issue #6056: Make multiprocessing use setblocking(True) on the sockets it
+- Issue #6056: Make `multiprocessing` use setblocking(True) on the sockets it
   uses.  Original patch by J Derek Wilson.
 
 - Issue #15364: Fix sysconfig.get_config_var('srcdir') to be an absolute path.
 
 - Issue #15041: Update "see also" list in tkinter documentation.
 
-- Issue #15413: os.times() had disappeared under Windows.
-
-- Issue #15402: An issue in the struct module that caused sys.getsizeof to
+- Issue #15413: `os.times()` had disappeared under Windows.
+
+- Issue #15402: An issue in the struct module that caused `sys.getsizeof()` to
   return incorrect results for struct.Struct instances has been fixed.  Initial
   patch by Serhiy Storchaka.
 
-- Issue #15232: When mangle_from is True, email.Generator now correctly mangles
-  lines that start with 'From ' that occur in a MIME preamble or epilogue.
+- Issue #15232: When mangle_from is True, `email.Generator` now correctly
+  mangles lines that start with 'From ' that occur in a MIME preamble or
+  epilogue.
 
 - Issue #15094: Incorrectly placed #endif in _tkinter.c.  Patch by Serhiy
   Storchaka.
 
-- Issue #13922: argparse no longer incorrectly strips '--'s that appear after
+- Issue #13922: `argparse` no longer incorrectly strips '--'s that appear after
   the first one.
 
-- Issue #12353: argparse now correctly handles null argument values.
+- Issue #12353: `argparse` now correctly handles null argument values.
 
 - Issue #10017, issue #14998: Fix TypeError using pprint on dictionaries with
   user-defined types as keys or other unorderable keys.
 
-- Issue #15397: inspect.getmodulename() is now based directly on importlib via a
-  new importlib.machinery.all_suffixes() API.
-
-- Issue #14635: telnetlib will use poll() rather than select() when possible to
+- Issue #15397: `inspect.getmodulename()` is now based directly on importlib via
+  a new `importlib.machinery.all_suffixes()` API.
+
+- Issue #14635: `telnetlib` will use poll() rather than select() when possible to
   avoid failing due to the select() file descriptor limit.
 
 - Issue #15180: Clarify posixpath.join() error message when mixing str & bytes.
@@ -448,7 +874,7 @@
 - Issue #15233: Python now guarantees that callables registered with the atexit
   module will be called in a deterministic order.
 
-- Issue #15238: shutil.copystat now copies Linux "extended attributes".
+- Issue #15238: `shutil.copystat()` now copies Linux "extended attributes".
 
 - Issue #15230: runpy.run_path now correctly sets __package__ as described in
   the documentation.
@@ -458,42 +884,42 @@
 - Issue #15294: Fix a regression in pkgutil.extend_path()'s handling of nested
   namespace packages.
 
-- Issue #15056: imp.cache_from_source() and source_from_cache() raise
-  NotImplementedError when sys.implementation.cache_tag is set to None.
-
-- Issue #15256: Grammatical mistake in exception raised by imp.find_module().
-
-- Issue #5931: wsgiref environ variable SERVER_SOFTWARE will specify an
+- Issue #15056: `imp.cache_from_source()` and `imp.source_from_cache()` raise
+  NotImplementedError when `sys.implementation.cache_tag` is set to None.
+
+- Issue #15256: Grammatical mistake in exception raised by `imp.find_module()`.
+
+- Issue #5931: `wsgiref` environ variable SERVER_SOFTWARE will specify an
   implementation specific term like CPython, Jython instead of generic "Python".
 
 - Issue #13248: Remove obsolete argument "max_buffer_size" of BufferedWriter and
   BufferedRWPair, from the io module.
 
-- Issue #13248: Remove obsolete argument "version" of argparse.ArgumentParser.
+- Issue #13248: Remove obsolete argument "version" of `argparse.ArgumentParser`.
 
 - Issue #14814: Implement more consistent ordering and sorting behaviour for
   ipaddress objects.
 
-- Issue #14814: ipaddress network objects correctly return NotImplemented when
+- Issue #14814: `ipaddress` network objects correctly return NotImplemented when
   compared to arbitrary objects instead of raising TypeError.
 
 - Issue #14990: Correctly fail with SyntaxError on invalid encoding declaration.
 
-- Issue #14814: ipaddress now provides more informative error messages when
+- Issue #14814: `ipaddress` now provides more informative error messages when
   constructing instances directly (changes permitted during beta due to
   provisional API status).
 
-- Issue #15247: FileIO now raises an error when given a file descriptor pointing
-  to a directory.
+- Issue #15247: `io.FileIO` now raises an error when given a file descriptor
+  pointing to a directory.
 
 - Issue #15261: Stop os.stat(fd) crashing on Windows when fd not open.
 
-- Issue #15166: Implement imp.get_tag() using sys.implementation.cache_tag.
-
-- Issue #15210: Catch KeyError when importlib.__init__ can't find
+- Issue #15166: Implement `imp.get_tag()` using `sys.implementation.cache_tag`.
+
+- Issue #15210: Catch KeyError when `importlib.__init__()` can't find
   _frozen_importlib in sys.modules, not ImportError.
 
-- Issue #15030: importlib.abc.PyPycLoader now supports the new source size
+- Issue #15030: `importlib.abc.PyPycLoader` now supports the new source size
   header field in .pyc files.
 
 - Issue #5346: Preserve permissions of mbox, MMDF and Babyl mailbox files on
@@ -506,7 +932,7 @@
   renamed over the old file when flush() is called on an mbox, MMDF or Babyl
   mailbox.
 
-- Issue 10924: Fixed crypt.mksalt() to use a RNG that is suitable for
+- Issue #10924: Fixed `crypt.mksalt()` to use a RNG that is suitable for
   cryptographic purpose.
 
 - Issue #15184: Ensure consistent results of OS X configuration tailoring for
@@ -517,10 +943,10 @@
 C API
 -----
 
-- Issue #15610: PyImport_ImportModuleEx() now uses a 'level' of 0 instead of -1.
-
-- Issues #15169, #14599: Strip out the C implementation of
-  imp.source_from_cache() used by PyImport_ExecCodeModuleWithPathnames() and
+- Issue #15610: `PyImport_ImportModuleEx()` now uses a 'level' of 0 instead of -1.
+
+- Issue #15169, issue #14599: Strip out the C implementation of
+  `imp.source_from_cache()` used by PyImport_ExecCodeModuleWithPathnames() and
   used the Python code instead. Leads to PyImport_ExecCodeModuleObject() to not
   try to infer the source path from the bytecode path as
   PyImport_ExecCodeModuleWithPathnames() does.
@@ -528,8 +954,8 @@
 Extension Modules
 -----------------
 
-- Issue #6493: An issue in ctypes on Windows that caused structure bitfields
-  of type ctypes.c_uint32 and width 32 to incorrectly be set has been fixed.
+- Issue #6493: An issue in ctypes on Windows that caused structure bitfields of
+  type `ctypes.c_uint32` and width 32 to incorrectly be set has been fixed.
 
 - Issue #15194: Update libffi to the 3.0.11 release.
 
@@ -544,15 +970,16 @@
 - Issue #12605: The gdb hooks for debugging CPython (within Tools/gdb) have been
   enhanced to show information on more C frames relevant to CPython within the
   "py-bt" and "py-bt-full" commands:
-    * C frames that are waiting on the GIL
-    * C frames that are garbage-collecting
-    * C frames that are due to the invocation of a PyCFunction
+
+  * C frames that are waiting on the GIL
+  * C frames that are garbage-collecting
+  * C frames that are due to the invocation of a PyCFunction
 
 Documentation
 -------------
 
-- Issue #15444: Use proper spelling for non-ASCII contributor names.  Patch
-  by Serhiy Storchaka.
+- Issue #15444: Use proper spelling for non-ASCII contributor names.  Patch by
+  Serhiy Storchaka.
 
 - Issue #15295: Reorganize and rewrite the documentation on the import system.
 
@@ -567,25 +994,25 @@
   "changed" since they will no longer work with modules directly imported by
   import itself.
 
-- Issue #13557: Clarify effect of giving two different namespaces to exec or
-  execfile().
-
-- Issue #15250: Document that filecmp.dircmp compares files shallowly. Patch
+- Issue #13557: Clarify effect of giving two different namespaces to `exec()` or
+  `execfile()`.
+
+- Issue #15250: Document that `filecmp.dircmp()` compares files shallowly. Patch
   contributed by Chris Jerdonek.
 
 Tests
 -----
 
-- Issue #15467: Move helpers for __sizeof__ tests into test_support.  Patch by
-  Serhiy Storchaka.
+- Issue #15467: Move helpers for `__sizeof__()` tests into test_support.  Patch
+  by Serhiy Storchaka.
 
 - Issue #15320: Make iterating the list of tests thread-safe when running tests
   in multiprocess mode. Patch by Chris Jerdonek.
 
-- Issue #15168: Move importlib.test to test.test_importlib.
+- Issue #15168: Move `importlib.test` to `test.test_importlib`.
 
 - Issue #15091: Reactivate a test on UNIX which was failing thanks to a
-  forgotten importlib.invalidate_caches() call.
+  forgotten `importlib.invalidate_caches()` call.
 
 - Issue #15230: Adopted a more systematic approach in the runpy tests.
 
@@ -688,6 +1115,9 @@
 Library
 -------
 
+- Issue #16305: Fix a segmentation fault occurring when interrupting
+  math.factorial.
+
 - Issue #9803: Don't close IDLE on saving if breakpoint is open.
   Patch by Roger Serwy.
 
@@ -1931,6 +2361,10 @@
 
 - PEP 3151 / issue #12555: reworking the OS and IO exception hierarchy.
 
+- Issue #13560: Add PyUnicode_DecodeLocale(), PyUnicode_DecodeLocaleAndSize()
+  and PyUnicode_EncodeLocale() functions to the C API to decode/encode from/to
+  the current locale encoding.
+
 - Add internal API for static strings (_Py_identifier et al.).
 
 - Issue #13063: the Windows error ERROR_NO_DATA (numbered 232 and described
@@ -2193,7 +2627,7 @@
 - Issue #11272: On Windows, input() strips '\r' (and not only '\n'), and
   sys.stdin uses universal newline (replace '\r\n' by '\n').
 
-- issue #11828: startswith and endswith don't accept None as slice index.
+- Issue #11828: startswith and endswith now accept None as slice index.
   Patch by Torsten Becker.
 
 - Issue #10830: Fix PyUnicode_FromFormatV("%c") for non-BMP characters on
@@ -2345,11 +2779,6 @@
   make sure two listeners can't bind to the same socket/pipe (or any existing
   socket/pipe).
 
-- Issue #9021: Add an introduction to the copy module documentation.
-
-- Issue #6005: Examples in the socket library documentation use sendall, where
-  relevant, instead send method.
-
 - Issue #10811: Fix recursive usage of cursors. Instead of crashing,
   raise a ProgrammingError now.
 
@@ -2458,8 +2887,6 @@
 
 - Add a flags parameter to select.epoll.
 
-- Issue #12798: Updated the mimetypes documentation.
-
 - Issue #13626: Add support for SSL Diffie-Hellman key exchange, through the
   SSLContext.load_dh_params() method and the ssl.OP_SINGLE_DH_USE option.
 
@@ -2504,10 +2931,6 @@
 - Issue #13560: os.strerror() now uses the current locale encoding instead of
   UTF-8.
 
-- Issue #13560: Add PyUnicode_DecodeLocale(), PyUnicode_DecodeLocaleAndSize()
-  and PyUnicode_EncodeLocale() functions to the C API to decode/encode from/to
-  the current locale encoding.
-
 - Issue #8373: The filesystem path of AF_UNIX sockets now uses the filesystem
   encoding and the surrogateescape error handler, rather than UTF-8.  Patch
   by David Watson.
@@ -2692,7 +3115,7 @@
 
 - Issue #8540: Remove deprecated Context._clamp attribute in Decimal module.
 
-- Issue #13235: Added PendingDeprecationWarning to warn() method and function.
+- Issue #13235: Added DeprecationWarning to logging.warn() method and function.
 
 - Issue #9168: now smtpd is able to bind privileged port.
 
@@ -2713,12 +3136,12 @@
   in order to display the prompt correctly.
 
 - Issue #12454: The mailbox module is now using ASCII, instead of the locale
-  encoding, to read and write MH mailboxes (.mh_sequences files).
+  encoding, to read and write .mh_sequences files.
 
 - Issue #13194: zlib.compressobj().copy() and zlib.decompressobj().copy() are
   now available on Windows.
 
-- issue #1673007: urllib2  to support HEAD request via new method argument.
+- Issue #1673007: urllib.request now supports HEAD request via new method argument.
   Patch contributions by David Stanek, Patrick Westerhoff and Ezio Melotti.
 
 - Issue #12386: packaging does not fail anymore when writing the RESOURCES
@@ -2759,8 +3182,6 @@
   metaclass is registered with copyreg.  Patch by Nicolas M. Thiéry and Craig
   Citro.
 
-- Issue #4147: minidom's toprettyxml no longer adds whitespace to text nodes.
-
 - Issue #13034: When decoding some SSL certificates, the subjectAltName
   extension could be unreported.
 
@@ -2870,8 +3291,9 @@
 - Issue #12540: Prevent zombie IDLE processes on Windows due to changes
   in os.kill().
 
-- Add support for unary plus and unary minus to collections.Counter().
-  Issue #13121: Also add support for inplace math operators.
+- Issue #13121: add support for inplace math operators to collections.Counter.
+
+- Add support for unary plus and unary minus to collections.Counter.
 
 - Issue #12683: urlparse updated to include svn as schemes that uses relative
   paths. (svn from 1.5 onwards support relative path).
@@ -2896,11 +3318,11 @@
 - Issue #8887: "pydoc somebuiltin.somemethod" (or help('somebuiltin.somemethod')
   in Python code) now finds the doc of the method.
 
-- Issue #10968: Remove indirection in threading.  The public names (Thread,
+- Issue #10968: Remove indirection in threading.  The public names (Event,
   Condition, etc.) used to be factory functions returning instances of hidden
-  classes (_Thread, _Condition, etc.), because (if Guido recalls correctly) this
-  code pre-dates the ability to subclass extension types.  It is now possible to
-  inherit from Thread and other classes, without having to import the private
+  classes (_Event, _Condition, etc.), because (if Guido recalls correctly) this
+  code pre-dates the ability to subclass extension types.  It is now possible
+  to inherit from these classes, without having to import the private
   underscored names like multiprocessing did.
 
 - Issue #9723: Add shlex.quote functions, to escape filenames and command
@@ -3024,7 +3446,7 @@
 - Issue #12352: Fix a deadlock in multiprocessing.Heap when a block is freed by
   the garbage collector while the Heap lock is held.
 
-- Issue #12462: time.sleep() now calls immediatly the (Python) signal handler
+- Issue #12462: time.sleep() now immediately calls the (Python) signal handler
   if it is interrupted by a signal, instead of having to wait until the next
   instruction.
 
@@ -3177,7 +3599,7 @@
   if the file is closed.
 
 - Issue #11109: New service_action method for BaseServer, used by ForkingMixin
-  class for cleanup. Initial Patch by Justin Wark.
+  class for cleanup. Initial Patch by Justin Warkentin.
 
 - Issue #12045: Avoid duplicate execution of command in
   ctypes.util._get_soname().  Patch by Sijin Joseph.
@@ -3262,9 +3684,9 @@
 - Issue #12011: signal.signal() and signal.siginterrupt() raise an OSError,
   instead of a RuntimeError: OSError has an errno attribute.
 
-- Issue #3709: a flush_headers method to BaseHTTPRequestHandler which manages
-  the sending of headers to output stream and flushing the internal headers
-  buffer. Patch contribution by Andrew Schaaf
+- Issue #3709: add a flush_headers method to BaseHTTPRequestHandler, which
+  manages the sending of headers to output stream and flushing the internal
+  headers buffer. Patch contribution by Andrew Schaaf
 
 - Issue #11743: Rewrite multiprocessing connection classes in pure Python.
 
@@ -3566,7 +3988,7 @@
   not installed. Instead, the zipfile.ZIP_STORED compression is used to create
   the ZipFile. Patch by Natalia B. Bidart.
 
-- Issue #11289: `smtp.SMTP` class becomes a context manager so it can be used
+- Issue #11289: `smtp.SMTP` class is now a context manager so it can be used
   in a `with` statement.  Contributed by Giampaolo Rodola.
 
 - Issue #11554: Fixed support for Japanese codecs; previously the body output
@@ -3578,7 +4000,7 @@
 - Issue #11407: `TestCase.run` returns the result object used or created.
   Contributed by Janathan Hartley.
 
-- Issue #11500: Fixed a bug in the os x proxy bypass code for fully qualified
+- Issue #11500: Fixed a bug in the OS X proxy bypass code for fully qualified
   IP addresses in the proxy exception list.
 
 - Issue #11491: dbm.error is no longer raised when dbm.open is called with
@@ -3735,7 +4157,7 @@
   functions (BSD and OS X).  Also add new stat file flags for OS X
   (UF_HIDDEN and UF_COMPRESSED).
 
-- Issue #10645: Installing Python does no longer create a
+- Issue #10645: Installing Python no longer creates a
   Python-X.Y.Z-pyX.Y.egg-info file in the lib-dynload directory.
 
 - Do not accidentally include the directory containing sqlite.h twice when
@@ -4076,6 +4498,9 @@
 Documentation
 -------------
 
+- Issue #13498: Clarify docs of os.makedirs()'s exist_ok argument.  Done with
+  great native-speaker help from R. David Murray.
+
 - Issues #13491 and #13995: Fix many errors in sqlite3 documentation.
   Initial patch for #13491 by Johannes Vogel.
 
@@ -4083,6 +4508,13 @@
 
 - Issue #13883: PYTHONCASEOK also works on OS X.
 
+- Issue #9021: Add an introduction to the copy module documentation.
+
+- Issue #6005: Examples in the socket library documentation use sendall, where
+  relevant, instead send method.
+
+- Issue #12798: Updated the mimetypes documentation.
+
 - Issue #12949: Document the kwonlyargcount argument for the PyCode_New
   C API function.
 
@@ -4097,5401 +4529,4 @@
 - Issue #11818: Fix tempfile examples for Python 3.
 
 
-What's New in Python 3.2?
-=========================
-
-*Release date: 20-Feb-2011*
-
-Core and Builtins
------------------
-
-- Issue #11249: Fix potential crashes when using the limited API.
-
-Build
------
-
-- Issue #11222: Fix non-framework shared library build on Mac OS X.
-
-- Issue #11184: Fix large-file support on AIX.
-
-- Issue #941346: Fix broken shared library build on AIX.
-
-Documentation
--------------
-
-- Issue #10709: Add updated AIX notes in Misc/README.AIX.
-
-
-What's New in Python 3.2 Release Candidate 3?
-=============================================
-
-*Release date: 13-Feb-2011*
-
-Core and Builtins
------------------
-
-- Issue #11134: Add missing fields to typeslots.h.
-
-- Issue #11135: Remove redundant doc field from PyType_Spec.
-
-- Issue #11067: Add PyType_GetFlags, to support PyUnicode_Check in the limited
-  ABI.
-
-- Issue #11118: Fix bogus export of None in python3.dll.
-
-Library
--------
-
-- Issue #11116: any error during addition of a message to a mailbox now causes a
-  rollback, instead of leaving the mailbox partially modified.
-
-- Issue #11132: Fix passing of "optimize" parameter when recursing in
-  compileall.compile_dir().
-
-- Issue #11110: Fix a potential decref of a NULL in sqlite3.
-
-- Issue #8275: Fix passing of callback arguments with ctypes under Win64.  Patch
-  by Stan Mihai.
-
-Build
------
-
-- Issue #11079: The /Applications/Python x.x folder created by the Mac OS X
-  installers now includes a link to the installed documentation and no longer
-  includes an Extras directory.  The Tools directory is now installed in the
-  framework under share/doc.
-
-- Issue #11121: Fix building with --enable-shared.
-
-Tests
------
-
-- Issue #10971: test_zipimport_support is once again compatible with the refleak
-  hunter feature of test.regrtest.
-
-
-What's New in Python 3.2 Release Candidate 2?
-=============================================
-
-*Release date: 30-Jan-2011*
-
-Core and Builtins
------------------
-
-- Issue #10451: memoryview objects could allow to mutate a readable buffer.
-  Initial patch by Ross Lagerwall.
-
-Library
--------
-
-- Issue #9124: mailbox now accepts binary input and reads and writes mailbox
-  files in binary mode, using the email package's binary support to parse
-  arbitrary email messages.  StringIO and text file input is deprecated,
-  and string input fails early if non-ASCII characters are used, where
-  previously it would fail when the email was processed in a later step.
-
-- Issue #10845: Mitigate the incompatibility between the multiprocessing
-  module on Windows and the use of package, zipfile or directory execution
-  by special casing main modules that actually *are* called __main__.py.
-
-- Issue #11045: Protect logging call against None argument.
-
-- Issue #11052: Correct IDLE menu accelerators on Mac OS X for Save
-  commands.
-
-- Issue #11053: Fix IDLE "Syntax Error" windows to behave as in 2.x,
-  preventing a confusing hung appearance on OS X with the windows
-  obscured.
-
-- Issue #10940: Workaround an IDLE hang on Mac OS X 10.6 when using the
-  menu accelerators for Open Module, Go to Line, and New Indent Width.
-  The accelerators still work but no longer appear in the menu items.
-
-- Issue #10989: Fix a crash on SSLContext.load_verify_locations(None, True).
-
-- Issue #11020: Command-line pyclbr was broken because of missing 2-to-3
-  conversion.
-
-- Issue #11019: Fixed BytesGenerator so that it correctly handles a Message
-  with a None body.
-
-- Issue #11014: Make 'filter' argument in tarfile.Tarfile.add() into a
-  keyword-only argument.  The preceding positional argument was deprecated,
-  so it made no sense to add filter as a positional argument.
-
-- Issue #11004: Repaired edge case in deque.count().
-
-- Issue #10974: IDLE no longer crashes if its recent files list includes files
-  with non-ASCII characters in their path names.
-
-- Have hashlib.algorithms_available and hashlib.algorithms_guaranteed both
-  return sets instead of one returning a tuple and the other a frozenset.
-
-- Issue #10987: Fix the recursion limit handling in the _pickle module.
-
-- Issue #10983: Fix several bugs making tunnel requests in http.client.
-
-- Issue #10955: zipimport uses ASCII encoding instead of cp437 to decode
-  filenames, at bootstrap, if the codec registry is not ready yet. It is still
-  possible to have non-ASCII filenames using the Unicode flag (UTF-8 encoding)
-  for all file entries in the ZIP file.
-
-- Issue #10949: Improved robustness of rotating file handlers.
-
-- Issue #10955: Fix a potential crash when trying to mmap() a file past its
-  length.  Initial patch by Ross Lagerwall.
-
-- Issue #10898: Allow compiling the posix module when the C library defines
-  a symbol named FSTAT.
-
-- Issue #10980: the HTTP server now encodes headers with iso-8859-1 (latin1)
-  encoding.  This is the preferred encoding of PEP 3333 and the base encoding
-  of HTTP 1.1.
-
-- To match the behaviour of HTTP server, the HTTP client library now also
-  encodes headers with iso-8859-1 (latin1) encoding.  It was already doing
-  that for incoming headers which makes this behaviour now consistent in
-  both incoming and outgoing direction.
-
-- Issue #9509: argparse now properly handles IOErrors raised by
-  argparse.FileType.
-
-- Issue #10961: The new pydoc server now better handles exceptions raised
-  during request handling.
-
-- Issue #10680: Fix mutually exclusive arguments for argument groups in
-  argparse.
-
-Build
------
-
-- Issue #11054: Allow Mac OS X installer builds to again work on 10.5 with
-  the system-provided Python.
-
-
-What's New in Python 3.2 Release Candidate 1
-============================================
-
-*Release date: 16-Jan-2011*
-
-Core and Builtins
------------------
-
-- Issue #10889: range indexing and slicing now works correctly on ranges with
-  a length that exceeds sys.maxsize.
-
-- Issue #10892: Don't segfault when trying to delete __abstractmethods__ from a
-  class.
-
-- Issue #8020: Avoid a crash where the small objects allocator would read
-  non-Python managed memory while it is being modified by another thread.  Patch
-  by Matt Bandy.
-
-- Issue #10841: On Windows, set the binary mode on stdin, stdout, stderr and all
-  io.FileIO objects (to not translate newlines, \r\n <=> \n).  The Python parser
-  translates newlines (\r\n => \n).
-
-- Remove buffer API from stable ABI for now, see #10181.
-
-- Issue #8651: PyArg_Parse*() functions raise an OverflowError if the file
-  doesn't have PY_SSIZE_T_CLEAN define and the size doesn't fit in an int
-  (length bigger than 2^31-1 bytes).
-
-- Issue #9015, #9611: FileIO.readinto(), FileIO.write(), os.write() and
-  stdprinter.write() clamp the length to INT_MAX on Windows.
-
-- Issue #8278: On Windows and with a NTFS filesystem, os.stat() and os.utime()
-  can now handle dates after 2038.
-
-- Issue #10780: PyErr_SetFromWindowsErrWithFilename() and
-  PyErr_SetExcFromWindowsErrWithFilename() decode the filename from the
-  filesystem encoding instead of UTF-8.
-
-- Issue #10779: PyErr_WarnExplicit() decodes the filename from the filesystem
-  encoding instead of UTF-8.
-
-- Add sys.flags attribute for the new -q command-line option.
-
-- Issue #11506: Trying to assign to a bytes literal should result in a
-  SyntaxError.
-
-Library
--------
-
-- Issue #10916: mmap should not segfault when a file is mapped using 0 as length
-  and a non-zero offset, and an attempt to read past the end of file is made
-  (IndexError is raised instead).  Patch by Ross Lagerwall.
-
-- Issue #10154, #10090: change the normalization of UTF-8 to "UTF-8" instead
-  of "UTF8" in the locale module as the latter is not supported MacOSX and OpenBSD.
-
-- Issue #10907: Warn OS X 10.6 IDLE users to use ActiveState Tcl/Tk 8.5, rather
-  than the currently problematic Apple-supplied one, when running with the
-  64-/32-bit installer variant.
-
-- Issue #4953: cgi.FieldStorage and cgi.parse() parse the request as bytes, not
-  as unicode, and accept binary files. Add encoding and errors attributes to
-  cgi.FieldStorage. Patch written by Pierre Quentel (with many inputs by Glenn
-  Linderman).
-
-- Add encoding and errors arguments to urllib.parse_qs() and urllib.parse_qsl().
-
-- Issue #10899: No function type annotations in the standard library.  Removed
-  function type annotations from _pyio.py.
-
-- Issue #10875: Update Regular Expression HOWTO; patch by 'SilentGhost'.
-
-- Issue #10872: The repr() of TextIOWrapper objects now includes the mode
-  if available.
-
-- Issue #10869: Fixed bug where ast.increment_lineno modified the root node
-  twice.
-
-- Issue #5871: email.header.Header.encode now raises an error if any
-  continuation line in the formatted value has no leading white space and looks
-  like a header.  Since Generator uses Header to format all headers, this check
-  is made for all headers in any serialized message at serialization time.  This
-  provides protection against header injection attacks.
-
-- Issue #10859: Make ``contextlib.GeneratorContextManager`` officially
-  private by renaming it to ``_GeneratorContextManager``.
-
-- Issue #10042: Fixed the total_ordering decorator to handle cross-type
-  comparisons that could lead to infinite recursion.
-
-- Issue #10686: the email package now :rfc:`2047`\ -encodes headers with
-  non-ASCII bytes (parsed by a BytesParser) when doing conversion to 7bit-clean
-  presentation, instead of replacing them with ?s.
-
-- email.header.Header was incorrectly encoding folding whitespace when
-  rfc2047-encoding header values with embedded newlines, leaving them without
-  folding whitespace.  It now uses the continuation_ws, as it does for
-  continuation lines that it creates itself.
-
-- Issue #1777412, #10827: Changed the rules for 2-digit years. The
-  time.asctime(), time.ctime() and time.strftime() functions will now format
-  any year when ``time.accept2dyear`` is False and will accept years >= 1000
-  otherwise. ``time.mktime`` and ``time.strftime`` now accept full range
-  supported by the OS. With Visual Studio or on Solaris, the year is limited to
-  the range [1; 9999]. Conversion of 2-digit years to 4-digit is deprecated.
-
-- Issue #7858: Raise an error properly when os.utime() fails under Windows
-  on an existing file.
-
-- Issue #3839: wsgiref should not override a Content-Length header set by
-  the application.  Initial patch by Clovis Fabricio.
-
-- Issue #10492: bdb.Bdb.run() only traces the execution of the code, not the
-  compilation (if the input is a string).
-
-- Issue #7995: When calling accept() on a socket with a timeout, the returned
-  socket is now always blocking, regardless of the operating system.
-
-- Issue #10756: atexit normalizes the exception before displaying it. Patch by
-  Andreas Stührk.
-
-- Issue #10790: email.header.Header.append's charset logic now works correctly
-  for charsets whose output codec is different from its input codec.
-
-- Issue #10819: SocketIO.name property returns -1 when its closed, instead of
-  raising a ValueError, to fix repr().
-
-- Issue #8650: zlib.compress() and zlib.decompress() raise an OverflowError if
-  the input buffer length doesn't fit into an unsigned int (length bigger than
-  2^32-1 bytes).
-
-- Issue #6643: Reinitialize locks held within the threading module after fork to
-  avoid a potential rare deadlock or crash on some platforms.
-
-- Issue #10806, issue #9905: Fix subprocess pipes when some of the standard file
-  descriptors (0, 1, 2) are closed in the parent process.  Initial patch by Ross
-  Lagerwall.
-
-- `unittest.TestCase` can be instantiated without a method name; for simpler
-  exploration from the interactive interpreter.
-
-- Issue #10798: Reject supporting concurrent.futures if the system has too
-  few POSIX semaphores.
-
-- Issue #10807: Remove base64, bz2, hex, quopri, rot13, uu and zlib codecs from
-  the codec aliases. They are still accessible via codecs.lookup().
-
-- Issue #10801: In zipfile, support different encodings for the header and the
-  filenames.
-
-- Issue #6285: IDLE no longer crashes on missing help file; patch by Scott
-  David Daniels.
-
-- Fix collections.OrderedDict.setdefault() so that it works in subclasses that
-  define __missing__().
-
-- Issue #10786: unittest.TextTestRunner default stream no longer bound at import
-  time. `sys.stderr` now looked up at instantiation time.  Fix contributed by
-  Mark Roddy.
-
-- Issue #10753: Characters ';', '=' and ',' in the PATH_INFO environment variable
-  won't be quoted when the URI is constructed by the wsgiref.util's request_uri
-  method. According to RFC 3986, these characters can be a part of params in
-  PATH component of URI and need not be quoted.
-
-- Issue #10738: Fix webbrowser.Opera.raise_opts.
-
-- Issue #9824: SimpleCookie now encodes , and ; in values to cater to how
-  browsers actually parse cookies.
-
-- Issue #9333: os.symlink now available regardless of user privileges.  The
-  function now raises OSError on Windows >=6.0 when the user is unable to create
-  symbolic links. XP and 2003 still raise NotImplementedError.
-
-- Issue #10783: struct.pack() no longer implicitly encodes unicode to UTF-8.
-
-- Issue #10730: Add SVG mime types to mimetypes module.
-
-- Issue #10768: Make the Tkinter ScrolledText widget work again.
-
-- Issue #10777: Fix "dictionary changed size during iteration" bug in
-  ElementTree register_namespace().
-
-- Issue #10626: test_logging now preserves logger disabled states.
-
-- Issue #10774: test_logging now removes temp files created during tests.
-
-- Issue #5258/#10642: if site.py encounters a .pth file that generates an error,
-  it now prints the filename, line number, and traceback to stderr and skips
-  the rest of that individual file, instead of stopping processing entirely.
-
-- Issue #10763: subprocess.communicate() closes stdout and stderr if both are
-  pipes (bug specific to Windows).
-
-- Issue #1693546: fix email.message RFC 2231 parameter encoding to be in better
-  compliance (no "s around encoded values).
-
-- Improved the diff message in the unittest module's assertCountEqual().
-
-- Issue #1155362: email.utils.parsedate_tz now handles a missing space before
-  the '-' of a timezone field as well as before a '+'.
-
-- Issue #4871: The zipfile module now gives a more useful error message if
-  an attempt is made to use a string to specify the archive password.
-
-- Issue #10750: The ``raw`` attribute of buffered IO objects is now read-only.
-
-- Deprecated assertDictContainsSubset() in the unittest module.
-
-C-API
------
-
-- PyObject_CallMethod now passes along any underlying AttributeError from
-  PyObject_GetAttr, instead of replacing it with something less informative
-
-- Issue #10913: Deprecate misleading functions PyEval_AcquireLock() and
-  PyEval_ReleaseLock().  The thread-state aware APIs should be used instead.
-
-- Issue #10333: Remove ancient GC API, which has been deprecated since Python
-  2.2.
-
-Build
------
-
-- Issue #10843: Update third-party library versions used in OS X 32-bit
-  installer builds: bzip2 1.0.6, readline 6.1.2, SQLite 3.7.4 (with FTS3/FTS4
-  and RTREE enabled), and ncursesw 5.5 (wide-char support enabled).
-
-- Issue #10820: Fix OS X framework installs to support version-specific
-  scripts (#10679).
-
-- Issue #7716: Under Solaris, don't assume existence of /usr/xpg4/bin/grep in
-  the configure script but use $GREP instead.  Patch by Fabian Groffen.
-
-- Issue #10475: Don't hardcode compilers for LDSHARED/LDCXXSHARED on NetBSD
-  and DragonFly BSD.  Patch by Nicolas Joly.
-
-- Issue #10679: The "idle", "pydoc" and "2to3" scripts are now installed with
-  a version-specific suffix on "make altinstall".
-
-- Issue #10655: Fix the build on PowerPC on Linux with GCC when building with
-  timestamp profiling (--with-tsc): the preprocessor test for the PowerPC
-  support now looks for "__powerpc__" as well as "__ppc__": the latter seems to
-  only be present on OS X; the former is the correct one for Linux with GCC.
-
-- Issue #1099: Fix the build on MacOSX when building a framework with pydebug
-  using GCC 4.0.
-
-Tools/Demos
------------
-
-- Issue #10843: Install the Tools directory on OS X in the applications Extras
-  (/Applications/Python 3.n/Extras/) where the Demo directory had previous been
-  installed.
-
-- Issue #7962: The Demo directory is gone.  Most of the old and unmaintained
-  demos have been removed, others integrated in documentation or a new
-  Tools/demo subdirectory.
-
-- Issue #10502: Addition of the unittestgui tool. Originally by Steve Purcell.
-  Updated for test discovery by Mark Roddy and Python 3 compatibility by Brian
-  Curtin.
-
-Tests
------
-
-- Issue #11910: Fix test_heapq to skip the C tests when _heapq is missing.
-
-- Fix test_startfile to wait for child process to terminate before finishing.
-
-- Issue #10822: Fix test_posix:test_getgroups failure under Solaris.  Patch
-  by Ross Lagerwall.
-
-- Make the --coverage flag work for test.regrtest.
-
-- Issue #1677694: Refactor and improve test_timeout.  Original patch by
-  Björn Lindqvist.
-
-- Issue #5485: Add tests for the UseForeignDTD method of expat parser objects.
-  Patch by Jean-Paul Calderone and Sandro Tosi.
-
-- Issue #6293: Have regrtest.py echo back sys.flags.  This is done by default in
-  whole runs and enabled selectively using ``--header`` when running an explicit
-  list of tests.  Original patch by Collin Winter.
-
-
-What's New in Python 3.2 Beta 2?
-================================
-
-*Release date: 19-Dec-2010*
-
-Core and Builtins
------------------
-
-- Issue #8844: Regular and recursive lock acquisitions can now be interrupted
-  by signals on platforms using pthreads.  Patch by Reid Kleckner.
-
-- Issue #4236: PyModule_Create2 now checks the import machinery directly
-  rather than the Py_IsInitialized flag, avoiding a Fatal Python
-  error in certain circumstances when an import is done in __del__.
-
-- Issue #5587: add a repr to dict_proxy objects.  Patch by David Stanek and
-  Daniel Urban.
-
-Library
--------
-
-- Issue #3243:  Support iterable bodies in httplib. Patch Contributions by
-  Xuanji Li and Chris AtLee.
-
-- Issue #10611: SystemExit exception will no longer kill a unittest run.
-
-- Issue #9857: It is now possible to skip a test in a setUp, tearDown or clean
-  up function.
-
-- Issue #10573: use actual/expected consistently in unittest methods.
-  The order of the args of assertCountEqual is also changed.
-
-- Issue #9286: email.utils.parseaddr no longer concatenates blank-separated
-  words in the local part of email addresses, thereby preserving the input.
-
-- Issue #6791: Limit header line length (to 65535 bytes) in http.client
-  and http.server, to avoid denial of services from the other party.
-
-- Issue #10404: Use ctl-button-1 on OSX for the context menu in Idle.
-
-- Issue #9907: Fix tab handling on OSX when using editline by calling
-  rl_initialize first, then setting our custom defaults, then reading .editrc.
-
-- Issue #4188: Avoid creating dummy thread objects when logging operations
-  from the threading module (with the internal verbose flag activated).
-
-- Issue #10711: Remove HTTP 0.9 support from http.client.  The ``strict``
-  parameter to HTTPConnection and friends is deprecated.
-
-- Issue #9721: Fix the behavior of urljoin when the relative url starts with a
-  ';' character. Patch by Wes Chow.
-
-- Issue #10714: Limit length of incoming request in http.server to 65536 bytes
-  for security reasons.  Initial patch by Ross Lagerwall.
-
-- Issue #9558: Fix distutils.command.build_ext with VS 8.0.
-
-- Issue #10667: Fast path for collections.Counter().
-
-- Issue #10695: passing the port as a string value to telnetlib no longer
-  causes debug mode to fail.
-
-- Issue #1078919: add_header now automatically RFC2231 encodes parameters
-  that contain non-ascii values.
-
-- Issue #10188 (partial resolution): tempfile.TemporaryDirectory emits
-  a warning on sys.stderr rather than throwing a misleading exception
-  if cleanup fails due to nulling out of modules during shutdown.
-  Also avoids an AttributeError when mkdtemp call fails and issues
-  a ResourceWarning on implicit cleanup via __del__.
-
-- Issue #10107: Warn about unsaved files in IDLE on OSX.
-
-- Issue #7213: subprocess.Popen's default for close_fds has been changed.
-  It is now True in most cases other than on Windows when input, output or
-  error handles are provided.
-
-- Issue #6559: subprocess.Popen has a new pass_fds parameter (actually
-  added in 3.2beta1) to allow specifying a specific list of file descriptors
-  to keep open in the child process.
-
-- Issue #1731717: Fixed the problem where subprocess.wait() could cause an
-  OSError exception when The OS had been told to ignore SIGCLD in our process
-  or otherwise not wait for exiting child processes.
-
-Tests
------
-
-- Issue #775964: test_grp now skips YP/NIS entries instead of failing when
-  encountering them.
-
-Tools/Demos
------------
-
-- Issue #6075: IDLE on Mac OS X now works with both Carbon AquaTk and
-  Cocoa AquaTk.
-
-- Issue #10710: ``Misc/setuid-prog.c`` is removed from the source tree.
-
-- Issue #10706: Remove outdated script runtests.sh.  Either ``make test``
-  or ``python -m test`` should be used instead.
-
-Build
------
-
-- The Windows build now uses Tcl/Tk 8.5.9 and sqlite3 3.7.4.
-
-- Issue #9234: argparse supports alias names for subparsers.
-
-
-What's New in Python 3.2 Beta 1?
-================================
-
-*Release date: 05-Dec-2010*
-
-Core and Builtins
------------------
-
-- Issue #10630: Return dict views from the dict proxy keys()/values()/items()
-  methods.
-
-- Issue #10596: Fix float.__mod__ to have the same behaviour as float.__divmod__
-  with respect to signed zeros.  -4.0 % 4.0 should be 0.0, not -0.0.
-
-- Issue #1772833: Add the -q command-line option to suppress copyright and
-  version output in interactive mode.
-
-- Provide an *optimize* parameter in the built-in compile() function.
-
-- Fixed several corner case issues on Windows in os.stat/os.lstat related to
-  reparse points.
-
-- PEP 384 (Defining a Stable ABI) is implemented.
-
-- Issue #2690: Range objects support negative indices and slicing.
-
-- Issue #9915: Speed up sorting with a key.
-
-- Issue #8685: Speed up set difference ``a - b`` when source set ``a`` is much
-  larger than operand ``b``.  Patch by Andrew Bennetts.
-
-- Issue #10518: Bring back the callable() builtin.
-
-- Issue #7094: Added alternate formatting (specified by '#') to ``__format__``
-  method of float, complex, and Decimal. This allows more precise control over
-  when decimal points are displayed.
-
-- Issue #10474: range.count() should return integers.
-
-- Issue #1574217: isinstance now catches only AttributeError, rather than
-  masking all errors.
-
-Library
--------
-
-- logging: added "handler of last resort". See http://bit.ly/last-resort-handler
-
-- test.support: Added TestHandler and Matcher classes for better support of
-  assertions about logging.
-
-- Issue #4391: Use proper plural forms in argparse.
-
-- Issue #10601: sys.displayhook uses 'backslashreplace' error handler on
-  UnicodeEncodeError.
-
-- Add the "display" and "undisplay" pdb commands.
-
-- Issue #7245: Add a SIGINT handler in pdb that allows to break a program again
-  after a "continue" command.
-
-- Add the "interact" pdb command.
-
-- Issue #7905: Actually respect the keyencoding parameter to shelve.Shelf.
-
-- Issue #1569291: Speed up array.repeat().
-
-- Provide an interface to set the optimization level of compilation in
-  py_compile, compileall and zipfile.PyZipFile.
-
-- Issue #7904: Changes to urllib.parse.urlsplit to handle schemes as defined by
-  RFC3986. Anything before :// is considered a scheme and is followed by an
-  authority (or netloc) and by '/' led path, which is optional.
-
-- Issue #6045: dbm.gnu databases now support get() and setdefault() methods.
-
-- Issue #10620: `python -m unittest` can accept file paths instead of module
-  names for running specific tests.
-
-- Issue #9424: Deprecate the `unittest.TestCase` methods `assertEquals`,
-  `assertNotEquals`, `assertAlmostEquals`, `assertNotAlmostEquals` and `assert_`
-  and replace them with the correct methods in the Python test suite.
-
-- Issue #10272: The ssl module now raises socket.timeout instead of a generic
-  SSLError on socket timeouts.
-
-- Issue #10528: Allow translators to reorder placeholders in localizable
-  messages from argparse.
-
-- Issue #10497: Fix incorrect use of gettext in argparse.
-
-- Issue #10478: Reentrant calls inside buffered IO objects (for example by
-  way of a signal handler) now raise a RuntimeError instead of freezing the
-  current process.
-
-- logging: Added getLogRecordFactory/setLogRecordFactory with docs and tests.
-
-- Issue #10549: Fix pydoc traceback when text-documenting certain classes.
-
-- Issue #2001: New HTML server with enhanced Web page features.  Patch by Ron
-  Adam.
-
-- Issue #10360: In WeakSet, do not raise TypeErrors when testing for membership
-  of non-weakrefable objects.
-
-- Issue #940286: pydoc.Helper.help() ignores input/output init parameters.
-
-- Issue #1745035: Add a command size and data size limit to smtpd.py, to prevent
-  DoS attacks.  Patch by Savio Sena.
-
-- Issue #4925: Add filename to error message when executable can't be found in
-  subprocess.
-
-- Issue #10391: Don't dereference invalid memory in error messages in the ast
-  module.
-
-- Issue #10027: st_nlink was not being set on Windows calls to os.stat or
-  os.lstat. Patch by Hirokazu Yamamoto.
-
-- Issue #9333: Expose os.symlink only when the SeCreateSymbolicLinkPrivilege is
-  held by the user's account, i.e., when the function can actually be used.
-
-- Issue #8879: Add os.link support for Windows.
-
-- Issue #7911: ``unittest.TestCase.longMessage`` defaults to True for improved
-  failure messages by default. Patch by Mark Roddy.
-
-- Issue #1486713: HTMLParser now has an optional tolerant mode where it tries to
-  guess at the correct parsing of invalid html.
-
-- Issue #10554: Add context manager support to subprocess.Popen objects.
-
-- Issue #8989: email.utils.make_msgid now has a domain parameter that can
-  override the domain name used in the generated msgid.
-
-- Issue #9299: Add exist_ok parameter to os.makedirs to suppress the 'File
-  exists' exception when a target directory already exists with the specified
-  mode. Patch by Ray Allen.
-
-- Issue #9573: os.fork() now works correctly when triggered as a side effect of
-  a module import.
-
-- Issue #10464: netrc now correctly handles lines with embedded '#' characters.
-
-- Added itertools.accumulate().
-
-- Issue #4113: Added custom ``__repr__`` method to ``functools.partial``.
-  Original patch by Daniel Urban.
-
-- Issue #10273: Rename `assertRegexpMatches` and `assertRaisesRegexp` to
-  `assertRegex` and `assertRaisesRegex`.
-
-- Issue #10535: Enable silenced warnings in unittest by default.
-
-- Issue #9873: The URL parsing functions in urllib.parse now accept ASCII byte
-  sequences as input in addition to character strings.
-
-- Issue #10586: The statistics API for the new functools.lru_cache has been
-  changed to a single cache_info() method returning a named tuple.
-
-- Issue #10323: itertools.islice() now consumes the minimum number of inputs
-  before stopping.  Formerly, the final state of the underlying iterator was
-  undefined.
-
-- Issue #10565: The collections.Iterator ABC now checks for both __iter__ and
-  __next__.
-
-- Issue #10242: Fixed implementation of unittest.ItemsEqual and gave it a new
-  more informative name, unittest.CountEqual.
-
-- Issue #10561: In pdb, clear the breakpoints by the breakpoint number.
-
-- Issue #2986: difflib.SequenceMatcher gets a new parameter, autojunk, which can
-  be set to False to turn off the previously undocumented 'popularity'
-  heuristic. Patch by Terry Reedy and Eli Bendersky.
-
-- Issue #10534: in difflib, expose bjunk and bpopular sets; deprecate
-  undocumented and now redundant isbjunk and isbpopular methods.
-
-- Issue #9846: zipfile is now correctly closing underlying file objects.
-
-- Issue #10459: Update CJK character names to Unicode 6.0.
-
-- Issue #4493: urllib.request adds '/' in front of path components which does not
-  start with '/. Common behavior exhibited by browsers and other clients.
-
-- Issue #6378: idle.bat now runs with the appropriate Python version rather than
-  the system default. Patch by Sridhar Ratnakumar.
-
-- Issue #10470: 'python -m unittest' will now run test discovery by default,
-  when no extra arguments have been provided.
-
-- Issue #3709: BaseHTTPRequestHandler will buffer the headers and write to
-  output stream only when end_headers is invoked. This is a speedup and an
-  internal optimization.  Patch by endian.
-
-- Issue #10220: Added inspect.getgeneratorstate. Initial patch by Rodolpho
-  Eckhardt.
-
-- Issue #10453: compileall now uses argparse instead of getopt, and thus
-  provides clean output when called with '-h'.
-
-- Issue #8078: Add constants for higher baud rates in the termios module.  Patch
-  by Rodolpho Eckhardt.
-
-- Issue #10407: Fix two NameErrors in distutils.
-
-- Issue #10371: Deprecated undocumented functions in the trace module.
-
-- Issue #10467: Fix BytesIO.readinto() after seeking into a position after the
-  end of the file.
-
-- configparser: 100% test coverage.
-
-- Issue #10499: configparser supports pluggable interpolation handlers. The
-  default classic interpolation handler is called BasicInterpolation. Another
-  interpolation handler added (ExtendedInterpolation) which supports the syntax
-  used by zc.buildout (e.g. interpolation between sections).
-
-- configparser: the SafeConfigParser class has been renamed to ConfigParser.
-  The legacy ConfigParser class has been removed but its interpolation mechanism
-  is still available as LegacyInterpolation.
-
-- configparser: Usage of RawConfigParser is now discouraged for new projects
-  in favor of ConfigParser(interpolation=None).
-
-- Issue #1682942: configparser supports alternative option/value delimiters.
-
-- Issue #5412: configparser supports mapping protocol access.
-
-- Issue #9411: configparser supports specifying encoding for read operations.
-
-- Issue #9421: configparser's getint(), getfloat() and getboolean() methods
-  accept vars and default arguments just like get() does.
-
-- Issue #9452: configparser supports reading from strings and dictionaries
-  (thanks to the mapping protocol API, the latter can be used to copy data
-  between parsers).
-
-- configparser: accepted INI file structure is now customizable, including
-  comment prefixes, name of the DEFAULT section, empty lines in multiline
-  values, and indentation.
-
-- Issue #10326: unittest.TestCase instances can be pickled.
-
-- Issue #9926: Wrapped TestSuite subclass does not get __call__ executed.
-
-- Issue #9920: Skip tests for cmath.atan and cmath.atanh applied to complex
-  zeros on systems where the log1p function fails to respect the sign of zero.
-  This fixes a test failure on AIX.
-
-- Issue #9732: Addition of getattr_static to the inspect module.
-
-- Issue #10446: Module documentation generated by pydoc now links to a
-  version-specific online reference manual.
-
-- Make the 'No module named' exception message from importlib consistent.
-
-- Issue #10443: Add the SSLContext.set_default_verify_paths() method.
-
-- Issue #10440: Support RUSAGE_THREAD as a constant in the resource module.
-  Patch by Robert Collins.
-
-- Issue #10429: IMAP.starttls() stored the capabilities as bytes objects, rather
-  than strings.
-
-C-API
------
-
-- Issue #10557: Added a new API function, PyUnicode_TransformDecimalToASCII(),
-  which transforms non-ASCII decimal digits in a Unicode string to their ASCII
-  equivalents.
-
-- Issue #9518: Extend the PyModuleDef_HEAD_INIT macro to explicitly
-  zero-initialize all fields, fixing compiler warnings seen when building
-  extension modules with gcc with "-Wmissing-field-initializers" (implied by
-  "-W").
-
-- Issue #10255: Fix reference leak in Py_InitializeEx().  Patch by Neil
-  Schemenauer.
-
-- structseq.h is now included in Python.h.
-
-- Loosen PyArg_ValidateKeywordArguments to allow dict subclasses.
-
-Tests
------
-
-- regrtest.py once again ensures the test directory is removed from sys.path
-  when it is invoked directly as the __main__ module.
-
-- `python -m test` can be used to run the test suite as well as `python -m
-  test.regrtest`.
-
-- Do not fail test_socket when the IP address of the local hostname cannot be
-  looked up.
-
-- Issue #8886: Use context managers throughout test_zipfile. Patch by Eric
-  Carstensen.
-
-Build
------
-
-- Issue #10325: Fix two issues in the fallback definitions for PY_ULLONG_MAX and
-  PY_LLONG_MAX that made them unsuitable for use in preprocessor conditionals.
-
-Documentation
--------------
-
-- Issue #10299: List the built-in functions in a table in functions.rst.
-
-
-What's New in Python 3.2 Alpha 4?
-=================================
-
-*Release date: 13-Nov-2010*
-
-Core and Builtins
------------------
-
-- Issue #10372: Import the warnings module only after the IO library is
-  initialized, so as to avoid bootstrap issues with the '-W' option.
-
-- Issue #10293: Remove obsolete field in the PyMemoryView structure, unused
-  undocumented value PyBUF_SHADOW, and strangely-looking code in
-  PyMemoryView_GetContiguous.
-
-- Issue #6081: Add str.format_map(), similar to ``str.format(**mapping)``.
-
-- If FileIO.__init__ fails, close the file descriptor.
-
-- Issue #10221: dict.pop(k) now has a key error message that includes the
-  missing key (same message d[k] returns for missing keys).
-
-- Issue #5437: A preallocated MemoryError instance should not keep traceback
-  data (including local variables caught in the stack trace) alive infinitely.
-
-- Issue #10186: Fix the SyntaxError caret when the offset is equal to the length
-  of the offending line.
-
-- Issue #10089: Add support for arbitrary -X options on the command line.  They
-  can be retrieved through a new attribute ``sys._xoptions``.
-
-- Issue #4388: On Mac OS X, decode command line arguments from UTF-8, instead of
-  the locale encoding.  If the LANG (and LC_ALL and LC_CTYPE) environment
-  variable is not set, the locale encoding is ISO-8859-1, whereas most programs
-  (including Python) expect UTF-8.  Python already uses UTF-8 for the filesystem
-  encoding and to encode command line arguments on this OS.
-
-- Issue #9713, #10114: Parser functions (e.g. PyParser_ASTFromFile) expect
-  filenames encoded to the filesystem encoding with the surrogateescape error
-  handler (to support undecodable bytes), instead of UTF-8 in strict mode.
-
-- Issue #9997: Don't let the name "top" have special significance in scope
-  resolution.
-
-- Issue #9862: Compensate for broken PIPE_BUF in AIX by hard coding its value as
-  the default 512 when compiling on AIX.
-
-- Use locale encoding instead of UTF-8 to encode and decode filenames if
-  Py_FileSystemDefaultEncoding is not set.
-
-- Issue #10095: fp_setreadl() doesn't reopen the file, instead reuse the file
-  descriptor.
-
-- Issue #9418: Moved private string methods ``_formatter_parser`` and
-  ``_formatter_field_name_split`` into a new ``_string`` module.
-
-- Issue #9992: Remove PYTHONFSENCODING environment variable.
-
-Library
--------
-
-- Issue #12943: python -m tokenize support has been added to tokenize.
-
-- Issue #10465: fix broken delegating of attributes by gzip._PaddedFile.
-
-- Issue #10356: Decimal.__hash__(-1) should return -2.
-
-- Issue #1553375: logging: Added stack_info kwarg to display stack information.
-
-- Issue #5111: IPv6 Host in the Header is wrapped inside [ ]. Patch by Chandru.
-
-- Fix Fraction.__hash__ so that Fraction.__hash__(-1) is -2.  (See also issue
-  #10356.)
-
-- Issue #4471: Add the IMAP.starttls() method to enable encryption on standard
-  IMAP4 connections.  Original patch by Lorenzo M. Catucci.
-
-- Issue #1466065: Add 'validate' option to base64.b64decode to raise an error if
-  there are non-base64 alphabet characters in the input.
-
-- Issue #10386: Add __all__ to token module; this simplifies importing in
-  tokenize module and prevents leaking of private names through ``import *``.
-
-- Issue #4471: Properly shutdown socket in IMAP.shutdown().  Patch by Lorenzo
-  M. Catucci.
-
-- Fix IMAP.login() to work properly.
-
-- Issue #9244: multiprocessing pool worker processes could terminate
-  unexpectedly if the return value of a task could not be pickled.  Only the
-  ``repr`` of such errors are now sent back, wrapped in an
-  ``MaybeEncodingError`` exception.
-
-- Issue #9244: The ``apply_async()`` and ``map_async()`` methods of
-  ``multiprocessing.Pool`` now accepts a ``error_callback`` argument.  This can
-  be a callback with the signature ``callback(exc)``, which will be called if
-  the target raises an exception.
-
-- Issue #10022: The dictionary returned by the ``getpeercert()`` method of SSL
-  sockets now has additional items such as ``issuer`` and ``notBefore``.
-
-- ``usenetrc`` is now false by default for NNTP objects.
-
-- Issue #1926: Add support for NNTP over SSL on port 563, as well as STARTTLS.
-  Patch by Andrew Vant.
-
-- Issue #10335: Add tokenize.open(), detect the file encoding using
-  tokenize.detect_encoding() and open it in read only mode.
-
-- Issue #10321: Add support for binary data to smtplib.SMTP.sendmail, and a new
-  method send_message to send an email.message.Message object.
-
-- Issue #6011: sysconfig and distutils.sysconfig use the surrogateescape error
-  handler to parse the Makefile file.  Avoid a UnicodeDecodeError if the source
-  code directory name contains a non-ASCII character and the locale encoding is
-  ASCII.
-
-- Issue #10329: The trace module writes reports using the input Python script
-  encoding, instead of the locale encoding.  Patch written by Alexander
-  Belopolsky.
-
-- Issue #10126: Fix distutils' test_build when Python was built with
-  --enable-shared.
-
-- Issue #9281: Prevent race condition with mkdir in distutils.  Patch by
-  Arfrever.
-
-- Issue #10229: Fix caching error in gettext.
-
-- Issue #10252: Close file objects in a timely manner in distutils code and
-  tests.  Patch by Brian Brazil, completed by Éric Araujo.
-
-- Issue #10180: Pickling file objects is now explicitly forbidden, since
-  unpickling them produced nonsensical results.
-
-- Issue #10311: The signal module now restores errno before returning from its
-  low-level signal handler.  Patch by Hallvard B Furuseth.
-
-- Issue #10282: Add a ``nntp_implementation`` attribute to NNTP objects.
-
-- Issue #10283: Add a ``group_pattern`` argument to NNTP.list().
-
-- Issue #10155: Add IISCGIHandler to wsgiref.handlers to support IIS CGI
-  environment better, and to correct unicode environment values for WSGI 1.0.1.
-
-- Issue #10281: nntplib now returns None for absent fields in the OVER/XOVER
-  response, instead of raising an exception.
-
-- wsgiref now implements and validates PEP 3333, rather than an experimental
-  extension of PEP 333.  (Note: earlier versions of Python 3.x may have
-  incorrectly validated some non-compliant applications as WSGI compliant; if
-  your app validates with Python <3.2b1+, but not on this version, it is likely
-  the case that your app was not compliant.)
-
-- Issue #10280: NNTP.nntp_version should reflect the highest version advertised
-  by the server.
-
-- Issue #10184: Touch directories only once when extracting a tarfile.
-
-- Issue #10199: New package, ``turtledemo`` now contains selected demo scripts
-  that were formerly found under Demo/turtle.
-
-- Issue #10265: Close file objects explicitly in sunau.  Patch by Brian Brazil.
-
-- Issue #10266: uu.decode didn't close in_file explicitly when it was given as a
-  filename.  Patch by Brian Brazil.
-
-- Issue #10110: Queue objects didn't recognize full queues when the maxsize
-  parameter had been reduced.
-
-- Issue #10160: Speed up operator.attrgetter.  Patch by Christos Georgiou.
-
-- logging: Added style option to basicConfig() to allow %, {} or $-formatting.
-
-- Issue #5729: json.dumps() now supports using a string such as '\t' for
-  pretty-printing multilevel objects.
-
-- Issue #10253: FileIO leaks a file descriptor when trying to open a file for
-  append that isn't seekable.  Patch by Brian Brazil.
-
-- Support context manager protocol for file-like objects returned by mailbox
-  ``get_file()`` methods.
-
-- Issue #10246: uu.encode didn't close file objects explicitly when filenames
-  were given to it.  Patch by Brian Brazil.
-
-- Issue #10198: fix duplicate header written to wave files when writeframes() is
-  called without data.
-
-- Close file objects in modulefinder in a timely manner.
-
-- Close a io.TextIOWrapper object in email.parser in a timely manner.
-
-- Close a file object in distutils.sysconfig in a timely manner.
-
-- Close a file object in pkgutil in a timely manner.
-
-- Issue #10233: Close file objects in a timely manner in the tarfile module and
-  its test suite.
-
-- Issue #10093: ResourceWarnings are now issued when files and sockets are
-  deallocated without explicit closing.  These warnings are silenced by default,
-  except in pydebug mode.
-
-- tarfile.py: Add support for all missing variants of the GNU sparse extensions
-  and create files with holes when extracting sparse members.
-
-- Issue #10218: Return timeout status from ``Condition.wait`` in threading.
-
-- Issue #7351: Add ``zipfile.BadZipFile`` spelling of the exception name and
-  deprecate the old name ``zipfile.BadZipfile``.
-
-- Issue #5027: The standard ``xml`` namespace is now understood by
-  xml.sax.saxutils.XMLGenerator as being bound to
-  http://www.w3.org/XML/1998/namespace.  Patch by Troy J. Farrell.
-
-- Issue #5975: Add csv.unix_dialect class.
-
-- Issue #7761: telnetlib.interact failures on Windows fixed.
-
-- logging: Added style option to Formatter to allow %, {} or $-formatting.
-
-- Issue #5178: Added tempfile.TemporaryDirectory class that can be used as a
-  context manager.
-
-- Issue #1349106: Generator (and BytesGenerator) flatten method and Header
-  encode method now support a 'linesep' argument.
-
-- Issue #5639: Add a *server_hostname* argument to ``SSLContext.wrap_socket`` in
-  order to support the TLS SNI extension.  ``HTTPSConnection`` and ``urlopen()``
-  also use this argument, so that HTTPS virtual hosts are now supported.
-
-- Issue #10166: Avoid recursion in pstats Stats.add() for many stats items.
-
-- Issue #10163: Skip unreadable registry keys during mimetypes initialization.
-
-- logging: Made StreamHandler terminator configurable.
-
-- logging: Allowed filters to be just callables.
-
-- logging: Added tests for _logRecordClass changes.
-
-- Issue #10092: Properly reset locale in calendar.Locale*Calendar classes.
-
-- logging: Added _logRecordClass, getLogRecordClass, setLogRecordClass to
-  increase flexibility of LogRecord creation.
-
-- Issue #5117: Case normalization was needed on ntpath.relpath().  Also fixed
-  root directory issue on posixpath.relpath().  (Ported working fixes from
-  ntpath.)
-
-- Issue #1343: xml.sax.saxutils.XMLGenerator now has an option
-  short_empty_elements to direct it to use self-closing tags when appropriate.
-
-- Issue #9807 (part 1): Expose the ABI flags in sys.abiflags.  Add --abiflags
-  switch to python-config for command line access.
-
-- Issue #6098: Don't claim DOM level 3 conformance in minidom.
-
-- Issue #5762: Fix AttributeError raised by ``xml.dom.minidom`` when an empty
-  XML namespace attribute is encountered.
-
-- Issue #2830: Add the ``html.escape()`` function, which quotes all problematic
-  characters by default.  Deprecate ``cgi.escape()``.
-
-- Issue #9409: Fix the regex to match all kind of filenames, for interactive
-  debugging in doctests.
-
-- Issue #9183: ``datetime.timezone(datetime.timedelta(0))`` will now return the
-  same instance as ``datetime.timezone.utc``.
-
-- Issue #7523: Add SOCK_CLOEXEC and SOCK_NONBLOCK to the socket module, where
-  supported by the system.  Patch by Nikita Vetoshkin.
-
-- Issue #10063: file:// scheme will stop accessing remote hosts via ftp
-  protocol. file:// urls had fallback to access remote hosts via ftp. This was
-  not correct, change is made to raise a URLError when a remote host is tried to
-  access via file:// scheme.
-
-- Issue #1710703: Write structures for an empty ZIP archive when a ZipFile is
-  created in modes 'a' or 'w' and then closed without adding any files. Raise
-  BadZipfile (rather than IOError) when opening small non-ZIP files.
-
-- Issue #10041: The signature of optional arguments in socket.makefile() didn't
-  match that of io.open(), and they also didn't get forwarded properly to
-  TextIOWrapper in text mode.  Patch by Kai Zhu.
-
-- Issue #9003: http.client.HTTPSConnection, urllib.request.HTTPSHandler and
-  urllib.request.urlopen now take optional arguments to allow for server
-  certificate checking, as recommended in public uses of HTTPS.
-
-- Issue #6612: Fix site and sysconfig to catch os.getcwd() error, eg. if the
-  current directory was deleted. Patch written by W. Trevor King.
-
-- Issue #3873: Speed up unpickling from file objects that have a peek() method.
-
-- Issue #10075: Add a session_stats() method to SSLContext objects.
-
-- Issue #9948: Fixed problem of losing filename case information.
-
-Extension Modules
------------------
-
-- Issue #5109: array.array constructor will now use fast code when
-  initial data is provided in an array object with correct type.
-
-- Issue #6317: Now winsound.PlaySound only accepts unicode.
-
-- Issue #6317: Now winsound.PlaySound can accept non ascii filename.
-
-- Issue #9377: Use Unicode API for gethostname on Windows.
-
-- Issue #10143: Update "os.pathconf" values.
-
-- Issue #6518: Support context manager protcol for ossaudiodev types.
-
-- Issue #678250: Make mmap flush a noop on ACCESS_READ and ACCESS_COPY.
-
-- Issue #9054: Fix a crash occurring when using the pyexpat module with expat
-  version 2.0.1.
-
-- Issue #5355: Provide mappings from Expat error numbers to string descriptions
-  and backwards, in order to actually make it possible to analyze error codes
-  provided by ExpatError.
-
-- The Unicode database was updated to 6.0.0.
-
-C-API
------
-
-- Issue #10288: The deprecated family of "char"-handling macros
-  (ISLOWER()/ISUPPER()/etc) have now been removed: use Py_ISLOWER() etc instead.
-
-- Issue #9778: Hash values are now always the size of pointers. A new Py_hash_t
-  type has been introduced.
-
-Tools/Demos
------------
-
-- Issue #10117: Tools/scripts/reindent.py now accepts source files that use
-  encoding other than ASCII or UTF-8.  Source encoding is preserved when
-  reindented code is written to a file.
-
-- Issue #7287: Demo/imputil/knee.py was removed.
-
-Tests
------
-
-- Issue #3699: Fix test_bigaddrspace and extend it to test bytestrings as well
-  as unicode strings.  Initial patch by Sandro Tosi.
-
-- Issue #10294: Remove dead code form test_unicode_file.
-
-- Issue #10123: Don't use non-ascii filenames in test_doctest tests. Add a new
-  test specific to unicode (non-ascii name and filename).
-
-Build
------
-
-- Issue #10268: Add a --enable-loadable-sqlite-extensions option to configure.
-
-- Issue #8852: Allow the socket module to build on OpenSolaris.
-
-- Drop -OPT:Olimit compiler option.
-
-- Issue #10094: Use versioned .so files on GNU/kfreeBSD and the GNU Hurd.
-
-- Accept Oracle Berkeley DB 5.0 and 5.1 as backend for the dbm extension.
-
-- Issue #7473: avoid link errors when building a framework with a different set
-  of architectures than the one that is currently installed.
-
-
-What's New in Python 3.2 Alpha 3?
-=================================
-
-*Release date: 09-Oct-2010*
-
-Core and Builtins
------------------
-
-- Issue #10068: Global objects which have reference cycles with their module's
-  dict are now cleared again. This causes issue #7140 to appear again.
-
-- Issue #9738: Document PyErr_SetString() and PyErr_SetFromErrnoWithFilename()
-  encodings.
-
-- ast.literal_eval() can now handle negative numbers.  It is also a little more
-  liberal in what it accepts without compromising the safety of the evaluation.
-  For example, 3j+4 and 3+4+5 are both accepted.
-
-- Issue #10006: type.__abstractmethods__ now raises an AttributeError.  As a
-  result metaclasses can now be ABCs (see #9533).
-
-- Issue #8670: ctypes.c_wchar supports non-BMP characters with 32 bits wchar_t.
-
-- Issue #8670: PyUnicode_AsWideChar() and PyUnicode_AsWideCharString() replace
-  UTF-16 surrogate pairs by single non-BMP characters for 16 bits Py_UNICODE and
-  32 bits wchar_t (eg. Linux in narrow build).
-
-- Issue #10003: Allow handling of SIGBREAK on Windows. Fixes a regression
-  introduced by issue #9324.
-
-- Issue #9979: Create function PyUnicode_AsWideCharString().
-
-- Issue #7397: Mention that importlib.import_module() is probably what someone
-  really wants to be using in __import__'s docstring.
-
-- Issue #8521: Allow CreateKeyEx, OpenKeyEx, and DeleteKeyEx functions of winreg
-  to use named arguments.
-
-- Issue #9930: Remove bogus subtype check that was causing (e.g.)
-  float.__rdiv__(2.0, 3) to return NotImplemented instead of the expected 1.5.
-
-- Issue #9808: Implement os.getlogin for Windows. Patch by Jon Anglin.
-
-- Issue #9901: Destroying the GIL in Py_Finalize() can fail if some other
-  threads are still running.  Instead, reinitialize the GIL on a second call to
-  Py_Initialize().
-
-- All SyntaxErrors now have a column offset and therefore a caret when the error
-  is printed.
-
-- Issue #9252: PyImport_Import no longer uses a fromlist hack to return the
-  module that was imported, but instead gets the module from sys.modules.
-
-- Issue #9213: The range type_items now provides index() and count() methods, to
-  conform to the Sequence ABC.  Patch by Daniel Urban and Daniel Stutzbach.
-
-- Issue #7994: Issue a PendingDeprecationWarning if object.__format__ is called
-  with a non-empty format string.  This is an effort to future-proof user
-  code. If a derived class does not currently implement __format__ but later
-  adds its own __format__, it would most likely break user code that had
-  supplied a format string.  This will be changed to a DeprecationWaring in
-  Python 3.3 and it will be an error in Python 3.4.
-
-- Issue #9828: Destroy the GIL in Py_Finalize(), so that it gets properly
-  re-created on a subsequent call to Py_Initialize().  The problem (a crash)
-  wouldn't appear in 3.1 or 2.7 where the GIL's structure is more trivial.
-
-- Issue #9210: Configure option --with-wctype-functions was removed.  Using the
-  functions from the libc caused the methods .upper() and lower() to become
-  locale aware and created subtly wrong results.
-
-- Issue #9738: PyUnicode_FromFormat() and PyErr_Format() raise an error on a
-  non-ASCII byte in the format string.
-
-- Issue #4617: Previously it was illegal to delete a name from the local
-  namespace if it occurs as a free variable in a nested block.  This limitation
-  of the compiler has been lifted, and a new opcode introduced (DELETE_DEREF).
-
-- Issue #9804: ascii() now always represents unicode surrogate pairs as a single
-  ``\UXXXXXXXX``, regardless of whether the character is printable or not.
-  Also, the "backslashreplace" error handler now joins surrogate pairs into a
-  single character on UCS-2 builds.
-
-- Issue #9757: memoryview objects get a release() method to release the
-  underlying buffer (previously this was only done when deallocating the
-  memoryview), and gain support for the context management protocol.
-
-- Issue #9797: pystate.c wrongly assumed that zero couldn't be a valid
-  thread-local storage key.
-
-Library
--------
-
-- Issue #2236: distutils' mkpath ignored the mode parameter.
-
-- Fix typo in one sdist option (medata-check).
-
-- Issue #9199: Fix incorrect use of distutils.cmd.Command.announce.
-
-- Issue #1718574: Fix options that were supposed to accept arguments but did
-  not in build_clib.
-
-- Issue #9437: Fix building C extensions with non-default LDFLAGS.
-
-- Issue #4661: email can now parse bytes input and generate either converted
-  7bit output or bytes output.  Email version bumped to 5.1.0.
-
-- Issue #1589: Add ssl.match_hostname(), to help implement server identity
-  verification for higher-level protocols.
-
-- Issue #9759: GzipFile now raises ValueError when an operation is attempted
-  after the file is closed.  Patch by Jeffrey Finkelstein.
-
-- Issue #9042: Fix interaction of custom translation classes and caching in
-  gettext.
-
-- Issue #6706: asyncore.dispatcher now provides a handle_accepted() method
-  returning a (sock, addr) pair which is called when a connection has been
-  established with a new remote endpoint.  This is supposed to be used as a
-  replacement for old handle_accept() and avoids the user to call accept()
-  directly.
-
-- Issue #9065: tarfile no longer uses "root" as the default for the uname and
-  gname field.
-
-- Issue #8980: Fixed a failure in distutils.command check that was shadowed by
-  an environment that does not have docutils.  Patch by Arfrever.
-
-- Issue #1050268: parseaddr now correctly quotes double quote and backslash
-  characters that appear inside quoted strings in email addresses.
-
-- Issue #10004: quoprimime no longer generates a traceback when confronted with
-  invalid characters after '=' in a Q-encoded word.
-
-- Issue #1491: BaseHTTPServer nows send a ``100 Continue`` response before
-  sending a 200 OK for the Expect: 100-continue request header.
-
-- Issue #9360: Cleanup and improvements to the nntplib module.  The API now
-  conforms to the philosophy of bytes and unicode separation in Python 3.  A
-  test suite has also been added.
-
-- Issue #9962: GzipFile now has the peek() method.
-
-- Issue #9090: When a socket with a timeout fails with EWOULDBLOCK or EAGAIN,
-  retry the select() loop instead of bailing out.  This is because select() can
-  incorrectly report a socket as ready for reading (for example, if it received
-  some data with an invalid checksum).
-
-- Issue #3612: Added new types to ctypes.wintypes. (CHAR and pointers)
-
-- Issue #9950: Fix socket.sendall() crash or misbehaviour when a signal is
-  received.  Now sendall() properly calls signal handlers if necessary, and
-  retries sending if these returned successfully, including on sockets with a
-  timeout.
-
-- Issue #9947: logging: Fixed locking bug in stopListening.
-
-- Issue #9945: logging: Fixed locking bugs in addHandler/removeHandler.
-
-- Issue #9936: Fixed executable lines' search in the trace module.
-
-- Issue #9790: Rework imports necessary for samefile and sameopenfile
-  in ntpath.
-
-- Issue #9928: Properly initialize the types exported by the bz2 module.
-
-- Issue #1675951: Allow GzipFile to work with unseekable file objects.  Patch by
-  Florian Festi.
-
-- Logging: Added QueueListener class to facilitate logging usage for
-  performance-critical threads.
-
-- Issue #9916: Add some missing errno symbols.
-
-- Issue #9877: Expose sysconfig.get_makefile_filename()
-
-- logging: Added hasHandlers() method to Logger and LoggerAdapter.
-
-- Issue #9908: Fix os.stat() on bytes paths under Windows 7.
-
-- Issue #2643: msync() is not called anymore when deallocating an open mmap
-  object, only munmap().
-
-- logging: Changed LoggerAdapter implementation internally, to make it easier to
-  subclass in a useful way.
-
-- logging: hasHandlers method was added to Logger, and isEnabledFor,
-  getEffectiveLevel, hasHandlers and setLevel were added to LoggerAdapter.
-  LoggerAdapter was introduced into the unit tests for logging.
-
-- Issue #1686: Fix string.Template when overriding the pattern attribute.
-
-- Issue #9854: SocketIO objects now observe the RawIOBase interface in
-  non-blocking mode: they return None when an operation would block (instead of
-  raising an exception).
-
-- Issue #1730136: Fix the comparison between a tk.font.Font and an object of
-  another kind.
-
-- Issue #9441: logging has better coverage for rotating file handlers.
-
-- Issue #9865: collections.OrderedDict now has a __sizeof__ method.
-
-- Issue #9854: The default read() implementation in io.RawIOBase now handles
-  non-blocking readinto() returning None correctly.
-
-- Issue #1552: socket.socketpair() now returns regular socket.socket objects
-  supporting the whole socket API (rather than the "raw" _socket.socket
-  objects).
-
-- Issue #9853: Fix the signature of SSLSocket.recvfrom() and SSLSocket.sendto()
-  to match the corresponding socket methods.
-
-- Issue #9840: Added a decorator to reprlib for wrapping __repr__ methods to make
-  them handle recursive calls within the same thread.
-
-- logging: Enhanced HTTPHandler with secure and credentials initializers.
-
-- Issue #767645: Set os.path.supports_unicode_filenames to True on Mac OS X.
-
-- Issue #9837: The read() method of ZipExtFile objects (as returned by
-  ZipFile.open()) could return more bytes than requested.
-
-- Issue #9826: OrderedDict.__repr__ can now handle self-referential values:
-  d['x'] = d.
-
-- Issue #9825: Using __del__ in the definition of collections.OrderedDict made
-  it possible for the user to create self-referencing ordered dictionaries which
-  become permanently uncollectable GC garbage.  Reinstated the Python 3.1
-  approach of using weakref proxies so that reference cycles never get created
-  in the first place.
-
-- Issue #9579, #9580: Fix os.confstr() for value longer than 255 bytes and
-  encode the value with filesystem encoding and surrogateescape (instead of
-  utf-8 in strict mode) . Patch written by David Watson.
-
-- Issue #9632: Remove sys.setfilesystemencoding() function: use PYTHONFSENCODING
-  environment variable to set the filesystem encoding at Python startup.
-  sys.setfilesystemencoding() creates inconsistencies because it is unable to
-  reencode all filenames in all objects.
-
-- Issue #9410: Various optimizations to the pickle module, leading to speedups
-  up to 4x (depending on the benchmark).  Mostly ported from Unladen Swallow;
-  initial patch by Alexandre Vassalotti.
-
-- The pprint module now supports printing OrderedDicts in their given order
-  (formerly, it would sort the keys).
-
-- Logging: Added QueueHandler class to facilitate logging usage with
-  multiprocessing.
-
-- Issue #9707: Rewritten reference implementation of threading.local which is
-  friendlier towards reference cycles.  This change is not normally visible
-  since an optimized C implementation (_thread._local) is used instead.
-
-- Issue #6394: os.getppid() is now supported on Windows.  Note that it will
-  still return the id of the parent process after it has exited.  This process
-  id may even have been reused by another unrelated process.
-
-- Issue #9792: In case of connection failure, socket.create_connection() would
-  swallow the exception and raise a new one, making it impossible to fetch the
-  original errno, or to filter timeout errors.  Now the original error is
-  re-raised.
-
-- Issue #9758: When fcntl.ioctl() was called with mutable_flag set to True, and
-  the passed buffer was exactly 1024 bytes long, the buffer wouldn't be updated
-  back after the system call.  Original patch by Brian Brazil.
-
-- Updates to the random module:
-
-  * Document which parts of the module are guaranteed to stay the same across
-    versions and which parts are subject to change.
-
-  * Update the seed() method to use all of the bits in a string instead of just
-    the hash value.  This makes better use of the seed value and assures the
-    seeding is platform independent.  Issue #7889.
-
-  * Improved the random()-->integer algorithm used in choice(), shuffle(),
-    sample(), randrange(), and randint().  Formerly, it used int(n*random())
-    which has a slight bias whenever n is not a power of two.  Issue #9025.
-
-  * Improved documentation of arguments to randrange().  Issue #9379.
-
-- collections.OrderedDict now supports a new method for repositioning keys to
-  either end.
-
-- Issue #9754: Similarly to assertRaises and assertRaisesRegexp, unittest test
-  cases now also have assertWarns and assertWarnsRegexp methods to check that a
-  given warning type was triggered by the code under test.
-
-- Issue #5506: BytesIO objects now have a getbuffer() method exporting a view of
-  their contents without duplicating them.  The view is both readable and
-  writable.
-
-- Issue #7566: Implement os.path.sameopenfile for Windows.
-
-- Issue #9293: I/O streams now raise ``io.UnsupportedOperation`` when an
-  unsupported operation is attempted (for example, writing to a file open only
-  for reading).
-
-- hashlib has two new constant attributes: algorithms_guaranteed and
-  algorithms_avaiable that respectively list the names of hash algorithms
-  guaranteed to exist in all Python implementations and the names of hash
-  algorithms available in the current process.
-
-- A new package ``concurrent.futures`` as defined by PEP 3148.
-
-C-API
------
-
-- Add PyErr_SyntaxLocationEx, which supports passing a column offset.
-
-- Issue #9834: Don't segfault in PySequence_GetSlice, PySequence_SetSlice, or
-  PySequence_DelSlice when the object doesn't have any mapping operations
-  defined.
-
-Tools/Demos
------------
-
-- Issue #9188: The gdb extension now handles correctly narrow (UCS2) as well as
-  wide (UCS4) unicode builds for both the host interpreter (embedded inside gdb)
-  and the interpreter under test.
-
-Tests
------
-
-- Issue #9308: Added tests for importing encoded modules that do not
-  depend on specific stdlib modules being encoded in a certain way.
-
-- Issue #1051: Add a script (Lib/test/make_ssl_certs.py) to generate the custom
-  certificate and private key files used by SSL-related certs.
-
-- Issue #9978: Wait until subprocess completes initialization. (Win32KillTests
-  in test_os)
-
-- Issue #7110: regrtest now sends test failure reports and single-failure
-  tracebacks to stderr rather than stdout.
-
-- Issue #9628: fix runtests.sh -x option so more than one test can be excluded.
-
-- Issue #9899: Fix test_tkinter.test_font on various platforms.  Patch by Ned
-  Deily.
-
-- Issue #9894: Do not hardcode ENOENT in test_subprocess.
-
-- Issue #9315: Added tests for the trace module.  Patch by Eli Bendersky.
-
-- Issue #9323: Make test.regrtest.__file__ absolute, this was not always the
-  case when running profile or trace, for example.
-
-- Issue #9568: Fix test_urllib2_localnet on OS X 10.3.
-
-Build
------
-
-- Issue #10062: Allow building on platforms which do not have sem_timedwait.
-
-- Issue #10054: Some platforms provide uintptr_t in inttypes.h.  Patch by Akira
-  Kitada.
-
-- Issue #10055: Make json C89-compliant in UCS4 mode.
-
-- Issue #9552: Avoid unnecessary rebuild of OpenSSL. (Windows)
-
-- Issue #1633863: Don't ignore $CC under AIX.
-
-- Issue #9810: Compile bzip2 source files in Python's project file directly. It
-  used to be built with bzip2's makefile.
-
-- Issue #9848: Stopping trying to build _weakref in setup.py as it is a built-in
-  module.
-
-- Issue #9806: python-config now has an ``--extension-suffix`` option that
-  outputs the suffix for dynamic libraries including the ABI version name
-  defined by PEP 3149.
-
-- Issue #941346: Improve the build process under AIX and allow Python to be
-  built as a shared library.  Patch by Sébastien Sablé.
-
-- Issue #4026: Make the fcntl extension build under AIX.  Patch by Sébastien
-  Sablé.
-
-- Issue #9701: The MacOSX installer can patch the shell profile to ensure that
-  the "bin" directory inside the framework is on the shell's search path. This
-  feature now also supports the ZSH shell.
-
-
-What's New in Python 3.2 Alpha 2?
-=================================
-
-*Release date: 05-Sep-2010*
-
-Core and Builtins
------------------
-
-- Issue #9225: Remove the ROT_FOUR and DUP_TOPX opcode, the latter replaced by
-  the new (and simpler) DUP_TOP_TWO.  Performance isn't changed, but our
-  bytecode is a bit simplified.  Patch by Demur Rumed.
-
-- Issue #9766: Rename poorly named variables exposed by _warnings to prevent
-  confusion with the proper variables names from 'warnings' itself.
-
-- Issue #9212: dict_keys and dict_items now provide the isdisjoint() method, to
-  conform to the Set ABC.  Patch by Daniel Urban.
-
-- Issue #9737: Fix a crash when trying to delete a slice or an item from a
-  memoryview object.
-
-- Issue #9549: sys.setdefaultencoding() and PyUnicode_SetDefaultEncoding() are
-  now removed, since their effect was inexistent in 3.x (the default encoding is
-  hardcoded to utf-8 and cannot be changed).
-
-- Issue #7415: PyUnicode_FromEncodedObject() now uses the new buffer API
-  properly.  Patch by Stefan Behnel.
-
-- Issue #5553: The Py_LOCAL_INLINE macro now results in inlining on most
-  platforms.  Previously, it inlined only when using Microsoft Visual C.
-
-- Issue #9712: Fix tokenize on identifiers that start with non-ascii names.
-
-- Issue #9688: __basicsize__ and __itemsize__ must be accessed as Py_ssize_t.
-
-- Issue #9684: Added a definition for SIZEOF_WCHAR_T to PC/pyconfig.h, to match
-  the pyconfig.h generated by configure on other systems.
-
-- Issue #9666: Only catch AttributeError in hasattr(). All other exceptions that
-  occur during attribute lookup are now propagated to the caller.
-
-- Issue #8622: Add PYTHONFSENCODING environment variable to override the
-  filesystem encoding.
-
-- Issue #5127: The C functions that access the Unicode Database now accept and
-  return characters from the full Unicode range, even on narrow unicode builds
-  (Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible difference
-  in Python is that unicodedata.numeric() now returns the correct value for
-  large code points, and repr() may consider more characters as printable.
-
-- Issue #9425: Create PyModule_GetFilenameObject() function to get the filename
-  as a unicode object, instead of a byte string. Function needed to support
-  unencodable filenames. Deprecate PyModule_GetFilename() in favor on the new
-  function.
-
-- Issue #8063: Call _PyGILState_Init() earlier in Py_InitializeEx().
-
-- Issue #9612: The set object is now 64-bit clean under Windows.
-
-- Issue #8202: sys.argv[0] is now set to '-m' instead of '-c' when searching for
-  the module file to be executed with the -m command line option.
-
-- Issue #9599: Create PySys_FormatStdout() and PySys_FormatStderr() functions to
-  write a message formatted by PyUnicode_FromFormatV() to sys.stdout and
-  sys.stderr.
-
-- Issue #9542: Create PyUnicode_FSDecoder() function, a ParseTuple converter:
-  decode bytes objects to unicode using PyUnicode_DecodeFSDefaultAndSize(); str
-  objects are output as-is.
-
-- Issue #9203: Computed gotos are now enabled by default on supported compilers
-  (which are detected by the configure script).  They can still be disable
-  selectively by specifying --without-computed-gotos.
-
-- Issue #9425: Create PyErr_WarnFormat() function, similar to PyErr_WarnEx() but
-  use PyUnicode_FromFormatV() to format the warning message.
-
-- Issue #8530: Prevent stringlib fastsearch from reading beyond the front of an
-  array.
-
-- Issue #5319: Print an error if flushing stdout fails at interpreter shutdown.
-
-- Issue #9337: The str() of a float or complex number is now identical to its
-  repr().
-
-- Issue #9416: Fix some issues with complex formatting where the output with no
-  type specifier failed to match the str output:
-
-    - format(complex(-0.0, 2.0), '-') omitted the real part from the output,
-    - format(complex(0.0, 2.0), '-') included a sign and parentheses.
-
-Extension Modules
------------------
-
-- Issue #8013: time.asctime and time.ctime no longer call system
-  asctime and ctime functions.  The year range for time.asctime is now
-  1900 through maxint.  The range for time.ctime is the same as for
-  time.localtime.  The string produced by these functions is longer
-  than 24 characters when year is greater than 9999.
-
-- Issue #6608: time.asctime is now checking struct tm fields its input
-  before passing it to the system asctime.  Patch by MunSic Jeong.
-
-- Issue #8734: Avoid crash in msvcrt.get_osfhandle() when an invalid file
-  descriptor is provided.  Patch by Pascal Chambon.
-
-- Issue #7736: Release the GIL around calls to opendir() and closedir() in the
-  posix module.  Patch by Marcin Bachry.
-
-- Issue #4835: make PyLong_FromSocket_t() and PyLong_AsSocket_t() private to the
-  socket module, and fix the width of socket descriptors to be correctly
-  detected under 64-bit Windows.
-
-- Issue #1027206: Support IDNA in gethostbyname, gethostbyname_ex, getaddrinfo
-  and gethostbyaddr.  getnameinfo is now restricted to numeric addresses as
-  input.
-
-- Issue #9214: Set operations on a KeysView or ItemsView in collections now
-  correctly return a set.  Patch by Eli Bendersky.
-
-- Issue #5737: Add Solaris-specific mnemonics in the errno module.  Patch by
-  Matthew Ahrens.
-
-- Restore GIL in nis_cat in case of error. Decode NIS data to fs encoding, using
-  the surrogate error handler.
-
-- Issue #665761: ``functools.reduce()`` will no longer mask exceptions other
-  than ``TypeError`` raised by the iterator argument.
-
-- Issue #9570: Use PEP 383 decoding in os.mknod and os.mkfifo.
-
-- Issue #6915: Under Windows, os.listdir() didn't release the Global Interpreter
-  Lock around all system calls.  Original patch by Ryan Kelly.
-
-- Issue #8524: Add a detach() method to socket objects, so as to put the socket
-  into the closed state without closing the underlying file descriptor.
-
-- Issue #477863: Emit a ResourceWarning at shutdown if gc.garbage is not empty.
-
-- Issue #6869: Fix a refcount problem in the _ctypes extension.
-
-- Issue #5504: ctypes should now work with systems where mmap can't be
-  PROT_WRITE and PROT_EXEC.
-
-- Issue #9507: Named tuple repr will now automatically display the right name in
-  a tuple subclass.
-
-- Issue #9324: Add parameter validation to signal.signal on Windows in order to
-  prevent crashes.
-
-- Issue #9526: Remove some outdated (int) casts that were preventing the array
-  module from working correctly with arrays of more than 2**31 elements.
-
-- Fix memory leak in ssl._ssl._test_decode_cert.
-
-- Issue #8065: Fix memory leak in readline module (from failure to free the
-  result of history_get_history_state()).
-
-- Issue #9450: Fix memory leak in readline.replace_history_item and
-  readline.remove_history_item for readline version >= 5.0.
-
-- Issue #8105: Validate file descriptor passed to mmap.mmap on Windows.
-
-- Issue #8046: Add context manager protocol support and .closed property to mmap
-  objects.
-
-Library
--------
-
-- Issue #7451: Improve decoding performance of JSON objects, and reduce the
-  memory consumption of said decoded objects when they use the same strings as
-  keys.
-
-- Issue #1100562: Fix deep-copying of objects derived from the list and dict
-  types.  Patch by Michele Orrù and Björn Lindqvist.
-
-- Issue #9753: Fixed socket.dup, which did not always work correctly on Windows.
-
-- Issue #9421: Made the get<type> methods consistently accept the vars and
-  default arguments on all parser classes.
-
-- Issue #7005: Fixed output of None values for RawConfigParser.write and
-  ConfigParser.write.
-
-- Issue #8990: array.fromstring() and array.tostring() get renamed to
-  frombytes() and tobytes(), respectively, to avoid confusion.  Furthermore,
-  array.frombytes(), array.extend() as well as the array.array() constructor now
-  accept bytearray objects.  Patch by Thomas Jollans.
-
-- Issue #808164: Fixed socket.close to avoid references to globals, to avoid
-  issues when socket.close is called from a __del__ method.
-
-- Issue #9706: ssl module provides a better error handling in various
-  circumstances.
-
-- Issue #1868: Eliminate subtle timing issues in thread-local objects by getting
-  rid of the cached copy of thread-local attribute dictionary.
-
-- Issue #1512791: In setframerate() in the wave module, non-integral frame rates
-  are rounded to the nearest integer.
-
-- Issue #8797: urllib2 does a retry for Basic Authentication failure instead of
-  falling into recursion.
-
-- Issue #1194222: email.utils.parsedate now returns RFC2822 compliant four
-  character years even if the message contains RFC822 two character years.
-
-- Issue #8750: Fixed MutableSet's methods to correctly handle reflexive
-  operations on its self, namely x -= x and x ^= x.
-
-- Issue #9129: smtpd.py is vulnerable to DoS attacks deriving from missing error
-  handling when accepting a new connection.
-
-- Issue #9601: ftplib now provides a workaround for non-compliant
-  implementations such as IIS shipped with Windows server 2003 returning invalid
-  response codes for MKD and PWD commands.
-
-- Issue #658749: asyncore's connect() method now correctly interprets winsock
-  errors.
-
-- Issue #9501: Fixed logging regressions in cleanup code.
-
-- Fix functools.total_ordering() to skip methods inherited from object.
-
-- Issue #9572: Importlib should not raise an exception if a directory it thought
-  it needed to create was done concurrently by another process.
-
-- Issue #9617: Signals received during a low-level write operation aren't
-  ignored by the buffered IO layer anymore.
-
-- Issue #843590: Make "macintosh" an alias to the "mac_roman" encoding.
-
-- Create os.fsdecode(): decode from the filesystem encoding with surrogateescape
-  error handler, or strict error handler on Windows.
-
-- Issue #3488: Provide convenient shorthand functions ``gzip.compress`` and
-  ``gzip.decompress``.  Original patch by Anand B. Pillai.
-
-- Issue #8807: poplib.POP3_SSL class now accepts a context parameter, which is a
-  ssl.SSLContext object allowing bundling SSL configuration options,
-  certificates and private keys into a single (potentially long-lived)
-  structure.
-
-- Issue #8866: parameters passed to socket.getaddrinfo can now be specified as
-  single keyword arguments.
-
-- Address XXX comment in dis.py by having inspect.py prefer to reuse the dis.py
-  compiler flag values over defining its own.
-
-- Issue #9147: Added dis.code_info() which is similar to show_code() but returns
-  formatted code information in a string rather than displaying on screen.
-
-- Issue #9567: functools.update_wrapper now adds a __wrapped__ attribute
-  pointing to the original callable.
-
-- Issue #3445: functools.update_wrapper now tolerates missing attributes on
-  wrapped callables.
-
-- Issue #5867: Add abc.abstractclassmethod and abc.abstractstaticmethod.
-
-- Issue #9605: posix.getlogin() decodes the username with file filesystem
-  encoding and surrogateescape error handler. Patch written by David Watson.
-
-- Issue #9604: posix.initgroups() encodes the username using the fileystem
-  encoding and surrogateescape error handler. Patch written by David Watson.
-
-- Issue #9603: posix.ttyname() and posix.ctermid() decode the terminal name
-  using the filesystem encoding and surrogateescape error handler. Patch written
-  by David Watson.
-
-- Issue #7647: The posix module now has the ST_RDONLY and ST_NOSUID constants,
-  for use with the statvfs() function.  Patch by Adam Jackson.
-
-- Issue #8688: MANIFEST files created by distutils now include a magic comment
-  indicating they are generated.  Manually maintained MANIFESTs without this
-  marker will not be overwritten or removed.
-
-- Issue #7467: when reading a file from a ZIP archive, its CRC is checked and a
-  BadZipfile error is raised if it doesn't match (as used to be the case in
-  Python 2.5 and earlier).
-
-- Issue #9550: a BufferedReader could issue an additional read when the original
-  read request had been satisfied, which could block indefinitely when the
-  underlying raw IO channel was e.g. a socket.  Report and original patch by
-  Jason V. Miller.
-
-- Issue #3757: thread-local objects now support cyclic garbage collection.
-  Thread-local objects involved in reference cycles will be deallocated timely
-  by the cyclic GC, even if the underlying thread is still running.
-
-- Issue #9452: Add read_file, read_string, and read_dict to the configparser
-  API; new source attribute to exceptions.
-
-- Issue #6231: Fix xml.etree.ElementInclude to include the tail of the current
-  node.
-
-- Issue #8047: Fix the xml.etree serializer to return bytes by default.  Use
-  ``encoding="unicode"`` to generate a Unicode string.
-
-- Issue #8280: urllib2's Request method will remove fragments in the url.  This
-  is how it is supposed to work, wget and curl do the same.  Previous behavior
-  was wrong.
-
-- Issue #6683: For SMTP logins we now try all authentication methods advertised
-  by the server.  Many servers are buggy and advertise authentication methods
-  they do not support in reality.
-
-- Issue #8814: function annotations (the ``__annotations__`` attribute) are now
-  included in the set of attributes copied by default by functools.wraps and
-  functools.update_wrapper.  Patch by Terrence Cole.
-
-- Issue #2944: asyncore doesn't handle connection refused correctly.
-
-- Issue #4184: Private attributes on smtpd.SMTPChannel made public and deprecate
-  the private attributes. Add tests for smtpd module.
-
-- Issue #3196: email header decoding is now forgiving if an RFC2047 encoded word
-  encoded in base64 is lacking padding.
-
-- Issue #9444: Argparse now uses the first element of prefix_chars as the option
-  character for the added 'h/help' option if prefix_chars does not contain a
-  '-', instead of raising an error.
-
-- Issue #7372: Fix pstats regression when stripping paths from profile data
-  generated with the profile module.
-
-- Issue #9428: Fix running scripts with the profile/cProfile modules from the
-  command line.
-
-- Issue #7781: Fix restricting stats by entry counts in the pstats interactive
-  browser.
-
-- Issue #9209: Do not crash in the pstats interactive browser on invalid regular
-  expressions.
-
-- Update collections.OrderedDict to match the implementation in Py2.7 (based on
-  lists instead of weakly referenced Link objects).
-
-- Issue #8397: Raise an error when attempting to mix iteration and regular reads
-  on a BZ2File object, rather than returning incorrect results.
-
-- Issue #9448: Fix a leak of OS resources (mutexes or semaphores) when
-  re-initializing a buffered IO object by calling its ``__init__`` method.
-
-- Issue #1713: Fix os.path.ismount(), which returned true for symbolic links
-  across devices.
-
-- Issue #8826: Properly load old-style "expires" attribute in http.cookies.
-
-- Issue #1690103: Fix initial namespace for code run with trace.main().
-
-- Issue #7395: Fix tracebacks in pstats interactive browser.
-
-- Issue #8230: Fix Lib/test/sortperf.py.
-
-- Issue #8620: when a cmd.Cmd() is fed input that reaches EOF without a final
-  newline, it no longer truncates the last character of the last command line.
-
-- Issue #5146: Handle UID THREAD command correctly in imaplib.
-
-- Issue #5147: Fix the header generated for cookie files written by
-  http.cookiejar.MozillaCookieJar.
-
-- Issue #8198: In pydoc, output all help text to the correct stream when
-  sys.stdout is reassigned.
-
-- Issue #7909: Do not touch paths with the special prefixes ``\\.\`` or ``\\?\``
-  in ntpath.normpath().
-
-- Issue #1286: Allow using fileinput.FileInput as a context manager.
-
-- Add lru_cache() decorator to the functools module.
-
-Tools/Demos
------------
-
-- Fix ``Tools/scripts/checkpyc.py`` after PEP 3147.
-
-- Issue #8867: Fix ``Tools/scripts/serve.py`` to work with files containing
-  non-ASCII content.
-
-Tests
------
-
-- Issue #9601: Provide a test case for ftplib.parse257.
-
-- Issue #8857: Provide a test case for socket.getaddrinfo.
-
-- Issue #7564: Skip test_ioctl if another process is attached to /dev/tty.
-
-- Issue #8433: Fix test_curses failure with newer versions of ncurses.
-
-- Issue #9496: Provide a test suite for the rlcompleter module.  Patch by
-  Michele Orrù.
-
-- Issue #8687: provide a test suite for sched.py module.
-
-Build
------
-
-- Issue #1303434: Generate ZIP file containing all PDBs.
-
-- Issue #9193: PEP 3149 is accepted.
-
-- Issue #3101: Helper functions _add_one_to_index_C() and _add_one_to_index_F()
-  become _Py_add_one_to_index_C() and _Py_add_one_to_index_F(), respectively.
-
-- Issue #9700: define HAVE_BROKEN_POSIX_SEMAPHORES under AIX 6.x.  Patch by
-  Sébastien Sablé.
-
-- Don't run pgen twice when using make -j.
-
-
-What's New in Python 3.2 Alpha 1?
-=================================
-
-*Release date: 01-Aug-2010*
-
-Core and Builtins
------------------
-
-- Issue #8991: convertbuffer() rejects discontigious buffers.
-
-- Issue #7616: Fix copying of overlapping memoryview slices with the Intel
-  compiler.
-
-- Issue #8413: structsequence now subclasses tuple.
-
-- Issue #8271: during the decoding of an invalid UTF-8 byte sequence, only the
-  start byte and the continuation byte(s) are now considered invalid, instead of
-  the number of bytes specified by the start byte.  E.g.:
-  '\xf1\x80AB'.decode('utf-8', 'replace') now returns u'\ufffdAB' and replaces
-  with U+FFFD only the start byte ('\xf1') and the continuation byte ('\x80')
-  even if '\xf1' is the start byte of a 4-bytes sequence.  Previous versions
-  returned a single u'\ufffd'.
-
-- Issue #9011: A negated imaginary literal (e.g., "-7j") now has real part -0.0
-  rather than 0.0.  So "-7j" is now exactly equivalent to "-(7j)".
-
-- Be more specific in error messages about positional arguments.
-
-- Issue #8949: "z" format of PyArg_Parse*() functions doesn't accept bytes
-  objects, as described in the documentation.
-
-- Issue #6543: Write the traceback in the terminal encoding instead of utf-8.
-  Fix the encoding of the modules filename.  Patch written by Amaury Forgeot
-  d'Arc.
-
-- Issue #9011: Remove buggy and unnecessary (in 3.x) ST->AST compilation code
-  dealing with unary minus applied to a constant.  The removed code was mutating
-  the ST, causing a second compilation to fail.
-
-- Issue #850997: mbcs encoding (Windows only) handles errors argument: strict
-  mode raises unicode errors.  The encoder only supports "strict" and "replace"
-  error handlers, the decoder only supports "strict" and "ignore" error
-  handlers.  Patch written by Mark Hammond.
-
-- Issue #8850: Remove "w" and "w#" formats from PyArg_Parse*() functions, use
-  "w*" format instead. Add tests for "w*" format.
-
-- Issue #8592: PyArg_Parse*() functions raise a TypeError for "y", "u" and "Z"
-  formats if the string contains a null byte/character.  Write unit tests for
-  string formats.
-
-- Issue #7490: To facilitate sharing of doctests between 2.x and 3.x test
-  suites, the IGNORE_EXCEPTION_DETAIL directive now also ignores the module
-  location of the raised exception.
-
-- Issue #8969: On Windows, use mbcs codec in strict mode to encode and decode
-  filenames and enable os.fsencode().
-
-- Issue #9058: Remove assertions about INT_MAX in UnicodeDecodeError.
-
-- Issue #8941: Decoding big endian UTF-32 data in UCS-2 builds could crash the
-  interpreter with characters outside the Basic Multilingual Plane (higher than
-  0x10000).
-
-- Issue #8950: (See also issue #5080).  Py_ArgParse*() functions now raise
-  TypeError instead of giving a DeprecationWarning when a float is parsed using
-  the 'L' code (for long long).  (All other integer codes already raise
-  TypeError in this case.)
-
-- Issue #8922: Normalize the encoding name in PyUnicode_AsEncodedString() to
-  enable shortcuts for upper case encoding name. Add also a shortcut for
-  "iso-8859-1" in PyUnicode_AsEncodedString() and PyUnicode_Decode().
-
-- Issue #8838: Remove codecs.charbuffer_encode() function.  The buffer protocol
-  doesn't support "char buffer" anymore in Python 3.
-
-- Issue #8339: Remove "t#" format of PyArg_Parse*() functions, use "s#" or "s*"
-  instead.  codecs.charbuffer_encode() now accepts modifiable buffer objects
-  like bytearray.
-
-- Issue #8837: Remove "O?" format of PyArg_Parse*() functions.  The format is no
-  used anymore and it was never documented.
-
-- In str.format(), raise a ValueError when indexes to arguments are too large.
-
-- Issue #2844: Make int('42', n) consistently raise ValueError for invalid
-  integers n (including n = -909).
-
-- Issue #8188: Introduce a new scheme for computing hashes of numbers (instances
-  of int, float, complex, decimal.Decimal and fractions.Fraction) that makes it
-  easy to maintain the invariant that hash(x) == hash(y) whenever x and y have
-  equal value.
-
-- Issue #8748: Fix two issues with comparisons between complex and integer
-  objects.  (1) The comparison could incorrectly return True in some cases
-  (2**53+1 == complex(2**53) == 2**53), breaking transitivity of equality.
-  (2) The comparison raised an OverflowError for large integers, leading to
-  unpredictable exceptions when combining integers and complex objects in sets
-  or dicts.
-
-- Issue #8766: Initialize _warnings module before importing the first module.
-  Fix a crash if an empty directory called "encodings" exists in sys.path.
-
-- Issue #8589: Decode PYTHONWARNINGS environment variable with the file system
-  encoding and surrogateescape error handler instead of the locale encoding to
-  be consistent with os.environ.  Add PySys_AddWarnOptionUnicode() function.
-
-- PyObject_Dump() encodes unicode objects to utf8 with backslashreplace (instead
-  of strict) error handler to escape surrogates.
-
-- Issue #8715: Create PyUnicode_EncodeFSDefault() function: Encode a Unicode
-  object to Py_FileSystemDefaultEncoding with the "surrogateescape" error
-  handler, and return bytes.  If Py_FileSystemDefaultEncoding is not set, fall
-  back to UTF-8.
-
-- Enable shortcuts for common encodings in PyUnicode_AsEncodedString() for any
-  error handler, not only the default error handler (strict).
-
-- Issue #8610: Load file system codec at startup, and display a fatal error on
-  failure.  Set the file system encoding to utf-8 (instead of None) if getting
-  the locale encoding failed, or if nl_langinfo(CODESET) function is missing.
-
-- PyFile_FromFd() uses PyUnicode_DecodeFSDefault() instead of
-  PyUnicode_FromString() to support surrogates in the filename and use the right
-  encoding.
-
-- Issue #7507: Quote "!" in pipes.quote(); it is special to some shells.
-
-- PyUnicode_DecodeFSDefaultAndSize() uses surrogateescape error handler.
-
-- Issue #8419: Prevent the dict constructor from accepting non-string keyword
-  arguments.
-
-- Issue #8124: PySys_WriteStdout() and PySys_WriteStderr() don't execute
-  indirectly Python signal handlers anymore because mywrite() ignores exceptions
-  (KeyboardInterrupt).
-
-- Issue #8092: Fix PyUnicode_EncodeUTF8() to support error handler producing
-  unicode string (eg. backslashreplace).
-
-- Issue #8485: PyUnicode_FSConverter() doesn't accept byteearray objects
-  anymore, you have to convert your bytearray filenames to bytes.
-
-- Issue #7332: Remove the 16KB stack-based buffer in
-  PyMarshal_ReadLastObjectFromFile, which doesn't bring any noticeable benefit
-  compared to the dynamic memory allocation fallback.  Patch by Charles-François
-  Natali.
-
-- Issue #8417: Raise an OverflowError when an integer larger than sys.maxsize is
-  passed to bytes or bytearray.
-
-- Issue #7301: Add environment variable $PYTHONWARNINGS.
-
-- Issue #8329: Don't return the same lists from select.select when no fds are
-  changed.
-
-- Issue #8259: 1L << (2**31) no longer produces an 'outrageous shift error' on
-  64-bit machines.  The shift count for either left or right shift is permitted
-  to be up to sys.maxsize.
-
-- Ensure that tokenization of identifiers is not affected by locale.
-
-- Issue #1222585: Added LDCXXSHARED for C++ support. Patch by Arfrever.
-
-- Raise a TypeError when trying to delete a T_STRING_INPLACE struct member.
-
-- Issue #8211: Save/restore CFLAGS around AC_PROG_CC in configure.in, in case it
-  is set.
-
-- Issue #8226: sys.setfilesystemencoding() raises a LookupError if the encoding
-  is unknown.
-
-- Issue #1583863: A str subclass can now override the __str__ method.
-
-- Issue #8014: Setting a T_UINT or T_PYSSIZET attribute of an object with
-  PyMemberDefs could produce an internal error; raise TypeError instead.
-
-- Issue #7845: Rich comparison methods on the complex type now return
-  NotImplemented rather than raising a TypeError when comparing with an
-  incompatible type; this allows user-defined classes to implement their own
-  comparisons with complex.
-
-- Issue #3137: Don't ignore errors at startup, especially a keyboard interrupt
-  (SIGINT). If an error occurs while importing the site module, the error is
-  printed and Python exits. Initialize the GIL before importing the site module.
-
-- Issue #7173: Generator finalization could invalidate sys.exc_info().
-
-- Issue #7544: Preallocate thread memory before creating the thread to avoid a
-  fatal error in low memory condition.
-
-- Issue #7820: The parser tokenizer restores all bytes in the right if the BOM
-  check fails.
-
-- Handle errors from looking up __prepare__ correctly.
-
-- Issue #5939: Add additional runtime checking to ensure a valid capsule in
-  Modules/_ctypes/callproc.c.
-
-- Issue #7309: Fix unchecked attribute access when converting
-  UnicodeEncodeError, UnicodeDecodeError, and UnicodeTranslateError to strings.
-
-- Issue #6902: Fix problem with built-in types format incorrectly with 0
-  padding.
-
-- Issue #7988: Fix default alignment to be right aligned for complex.__format__.
-  Now it matches other numeric types.
-
-- Issue #5988: Remove deprecated functions PyOS_ascii_formatd,
-  PyOS_ascii_strtod, and PyOS_ascii_atof.  Use PyOS_double_to_string and
-  PyOS_string_to_double instead.  See issue #5835 for the original deprecations.
-
-- Issue #7385: Fix a crash in `MemoryView_FromObject` when `PyObject_GetBuffer`
-  fails.  Patch by Florent Xicluna.
-
-- Issue #7788: Fix an interpreter crash produced by deleting a list slice with
-  very large step value.
-
-- Issue #7766: Change sys.getwindowsversion() return value to a named tuple and
-  add the additional members returned in an OSVERSIONINFOEX structure.  The new
-  members are service_pack_major, service_pack_minor, suite_mask, and
-  product_type.
-
-- Issue #7561: Operations on empty bytearrays (such as `int(bytearray())`) could
-  crash in many places because of the PyByteArray_AS_STRING() macro returning
-  NULL.  The macro now returns a statically allocated empty string instead.
-
-- Issue #6690: Optimize the bytecode for expressions such as `x in {1, 2, 3}`,
-  where the right hand operand is a set of constants, by turning the set into a
-  frozenset and pre-building it as a constant.  The comparison operation is made
-  against the constant instead of building a new set each time it is executed (a
-  similar optimization already existed which turned a list of constants into a
-  pre-built tuple).  Patch and additional tests by Dave Malcolm.
-
-- Issue #7622: Improve the split(), rsplit(), splitlines() and replace() methods
-  of bytes, bytearray and unicode objects by using a common implementation based
-  on stringlib's fast search.  Patch by Florent Xicluna.
-
-- Issue #7632: Fix various str -> float conversion bugs present in 2.7 alpha 2,
-  including: (1) a serious 'wrong output' bug that could occur for long (> 40
-  digit) input strings, (2) a crash in dtoa.c that occurred in debug builds when
-  parsing certain long numeric strings corresponding to subnormal values, (3) a
-  memory leak for some values large enough to cause overflow, and (4) a number
-  of flaws that could lead to incorrectly rounded results.
-
-- The __complex__ method is now looked up on the class of instances to make it
-  consistent with other special methods.
-
-- Issue #7462: Implement the stringlib fast search algorithm for the `rfind`,
-  `rindex`, `rsplit` and `rpartition` methods.  Patch by Florent Xicluna.
-
-- Issue #7604: Deleting an unset slotted attribute did not raise an
-  AttributeError.
-
-- Issue #7534: Fix handling of IEEE specials (infinities, nans, negative zero)
-  in ** operator.  The behaviour now conforms to that described in C99 Annex F.
-
-- Issue #1811: improve accuracy and cross-platform consistency for true division
-  of integers: the result of a/b is now correctly rounded for ints a and b (at
-  least on IEEE 754 platforms), and in particular does not depend on the
-  internal representation of an int.
-
-- Issue #6834: replace the implementation for the 'python' and 'pythonw'
-  executables on OSX.
-
-  These executables now work properly with the arch(1) command: ``arch -ppc
-  python`` will start a universal binary version of python in PPC mode (unlike
-  previous releases).
-
-- Issue #7466: Segmentation fault when the garbage collector is called in the
-  middle of populating a tuple.  Patch by Florent Xicluna.
-
-- Issue #7419: setlocale() could crash the interpreter on Windows when called
-  with invalid values.
-
-- Issue #6077: On Windows, files opened with tempfile.TemporaryFile in "wt+"
-  mode would appear truncated on the first '0x1a' byte (aka. Ctrl+Z).
-
-- Issue #7085: Fix crash when importing some extensions in a thread on MacOSX
-  10.6.
-
-- Issue #1757126: Fix the cyrillic-asian alias for the ptcp154 encoding.
-
-- Issue #6970: Remove redundant calls when comparing objects that don't
-  implement the relevant rich comparison methods.
-
-- Issue #7298: Fixes for range and reversed(range(...)).  Iteration over
-  range(a, b, c) incorrectly gave an empty iterator when a, b and c fit in C
-  long but the length of the range did not.  Also fix several cases where
-  reversed(range(a, b, c)) gave wrong results, and fix a refleak for
-  reversed(range(a, b, c)) with large arguments.
-
-- Issue #7244: itertools.izip_longest() no longer ignores exceptions raised
-  during the formation of an output tuple.
-
-- Issue #3297: On wide unicode builds, do not split unicode characters into
-  surrogates.
-
-- Remove length limitation when constructing a complex number from a string.
-
-- Issue #1087418: Boost performance of bitwise operations for longs.
-
-- Support for AtheOS has been completely removed from the code base. It was
-  disabled since Python 3.0.
-
-- Support for several legacy threading libraries has been disabled. These
-  libraries are: Mach C threads, SunOS LWP, GNU pth, Irix threads. Support code
-  will be entirely removed in 3.3.
-
-- Support for OSF* has been disabled. If nobody stands up, support will be
-  removed in 3.3. See <http://bugs.python.org/issue8606>.
-
-- Peephole constant folding had missed UNARY_POSITIVE.
-
-- Issue #1722344: threading._shutdown() is now called in Py_Finalize(), which
-  fixes the problem of some exceptions being thrown at shutdown when the
-  interpreter is killed. Patch by Adam Olsen.
-
-- Issue #7147: Remove support for compiling Python without complex number
-  support.
-
-- Issue #7120: logging: Removed import of multiprocessing which is causing crash
-  in GAE.
-
-- Issue #1754094: Improve the stack depth calculation in the compiler.  There
-  should be no other effect than a small decrease in memory use.  Patch by
-  Christopher Tur Lesniewski-Laas.
-
-- Issue #7065: Fix a crash in bytes.maketrans and bytearray.maketrans when using
-  byte values greater than 127.  Patch by Derk Drukker.
-
-- Issue #1571184: The Unicode database contains properties for more characters.
-  The tables for code points representing numeric values, white spaces or line
-  breaks are now generated from the official Unicode Character Database files,
-  and include information from the Unihan.txt file.
-
-- Issue #7019: Raise ValueError when unmarshalling bad long data, instead of
-  producing internally inconsistent Python longs.
-
-- Issue #6990: Fix threading.local subclasses leaving old state around after a
-  reference cycle GC which could be recycled by new locals.
-
-- Issue #5460: Fix an ambiguity in the grammar.
-
-- Issue #1766304: Improve performance of membership tests on range objects.
-
-- Issue #6713: Improve performance of integer -> string conversions.
-
-- Issue #6846: Fix bug where bytearray.pop() returns negative integers.
-
-- Issue #6750: A text file opened with io.open() could duplicate its output when
-  writing from multiple threads at the same time.
-
-- Issue #6707: dir() on an uninitialized module caused a crash.
-
-- Issue #6540: Fixed crash for bytearray.translate() with invalid parameters.
-
-- Issue #6573: set.union() stopped processing inputs if an instance of self
-  occurred in the argument chain.
-
-- Issue #6070: On posix platforms import no longer copies the execute bit from
-  the .py file to the .pyc file if it is set.
-
-- Issue #1616979: Added the cp720 (Arabic DOS) encoding.
-
-- Issue #6428: Since Python 3.0, the __bool__ method must return a bool object,
-  and not an int.  Fix the corresponding error message, and the documentation.
-
-- The deprecated PyCObject has been removed.
-
-- Issue #6347: Include inttypes.h as well as stdint.h in pyport.h.  This fixes a
-  build failure on HP-UX: int32_t and uint32_t are defined in inttypes.h instead
-  of stdint.h on that platform.
-
-- Issue #6373: Fixed a SystemError when encoding with the latin-1 codec and the
-  'surrogateescape' error handler, a string which contains unpaired surrogates.
-
-- Issue #4856: Remove checks for win NT.
-
-- Issue #6687: PyBytes_FromObject() no longer accepts an integer as its argument
-  to construct a null-initialized bytes object.
-
-- Issue #1023290: Add from_bytes() and to_bytes() methods to integers.  These
-  methods allow the conversion of integers to bytes, and vice-versa.
-
-- Issue #7382: Fix bug in bytes.__getnewargs__ that prevented bytes instances
-  from being copied with copy.copy(), and bytes subclasses from being pickled
-  properly.
-
-- Code objects now support weak references.
-
-- Issue #7072: isspace(0xa0) is true on Mac OS X.
-
-- Issue #8084: PEP 370 now conforms to system conventions for framework builds
-  on MacOS X. That is, "python setup.py install --user" will install into
-  "~/Library/Python/2.7" instead of "~/.local".
-
-C-API
------
-
-- Issue #2443: A new macro, `Py_VA_COPY`, copies the state of the
-  variable argument list.  `Py_VA_COPY` is equivalent to C99
-  `va_copy`, but available on all python platforms.
-
-- PySlice_GetIndicesEx now clips the step to [-PY_SSIZE_T_MAX, PY_SSIZE_T_MAX]
-  instead of [-PY_SSIZE_T_MAX-1, PY_SSIZE_T_MAX].  This makes it safe to do
-  "step = -step" when reversing a slice.
-
-- Issue #5753: A new C API function, `PySys_SetArgvEx`, allows embedders of the
-  interpreter to set sys.argv without also modifying sys.path.  This helps fix
-  `CVE-2008-5983
-  <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_.
-
-- Add PyArg_ValidateKeywordArguments, which checks if all keyword arguments are
-  strings in an efficient manner.
-
-- Issue #8276: PyEval_CallObject() is now only available in macro form.  The
-  function declaration, which was kept for backwards compatibility reasons, is
-  now removed (the macro was introduced in 1997!).
-
-- Issue #7767: New function PyLong_AsLongLongAndOverflow added, analogous to
-  PyLong_AsLongAndOverflow.
-
-- Make PyUnicode_CompareWithASCIIString return not equal if the Python string
-  has '\0' at the end.
-
-- Issue #5080: The argument parsing functions PyArg_ParseTuple,
-  PyArg_ParseTupleAndKeywords, PyArg_VaParse, PyArg_VaParseTupleAndKeywords and
-  PyArg_Parse now raise a DeprecationWarning for float arguments passed with the
-  'L' format code.  This will become a TypeError in a future version of Python,
-  to match the behaviour of the other integer format codes.
-
-- Issue #7033: Function ``PyErr_NewExceptionWithDoc()`` added.
-
-- Issue #7414: 'C' code wasn't being skipped properly (for keyword arguments) in
-  PyArg_ParseTupleAndKeywords.
-
-- Issue #7228: Add '%lld' and '%llu' support to PyString_FromFormat(V) and
-  PyErr_Format, on machines with HAVE_LONG_LONG defined.
-
-- Issue #6151: Made PyDescr_COMMON conform to standard C (like PyObject_HEAD in
-  PEP 3123).  The PyDescr_TYPE and PyDescr_NAME macros should be should used for
-  accessing the d_type and d_name members of structures using PyDescr_COMMON.
-
-- Issue #6405: Remove duplicate type declarations in descrobject.h.
-
-- The code flags for old __future__ features are now available again.
-
-- Issue #5954: Add a PyFrame_GetLineNumber() function to replace most uses of
-  PyCode_Addr2Line().
-
-- Issue #5959: Add a PyCode_NewEmpty() function to create a new empty code
-  object at a specified file, function, and line number.
-
-- Issue #1419652: Change the first argument to PyImport_AppendInittab() to
-  ``const char *`` as the string is stored beyond the call.
-
-- Issue #2422: When compiled with the ``--with-valgrind`` option, the pymalloc
-  allocator will be automatically disabled when running under Valgrind.  This
-  gives improved memory leak detection when running under Valgrind, while taking
-  advantage of pymalloc at other times.
-
-Library
--------
-
-- In pdb, when Ctrl-C is entered while defining commands for a breakpoint, the
-  old commands are restored.
-
-- For traceback debugging, the pdb listing now also shows the locations where
-  the exception was originally (re)raised, if it differs from the last line
-  executed (e.g. in case of finally clauses).
-
-- The pdb command "source" has been added.  It displays the source code for a
-  given object, if possible.
-
-- The pdb command "longlist" has been added.  It displays the whole source code
-  for the current function.
-
-- Issue #1503502: Make pdb.Pdb easier to subclass by putting message and error
-  output into methods.
-
-- Issue #809887: Make the output of pdb's breakpoint deletions more consistent;
-  emit a message when a breakpoint is enabled or disabled.
-
-- Issue #5294: Fix the behavior of pdb's "continue" command when called in the
-  top-level debugged frame.
-
-- Issue #5727: Restore the ability to use readline when calling into pdb in
-  doctests.
-
-- Issue #6719: In pdb, do not stop somewhere in the encodings machinery if the
-  source file to be debugged is in a non-builtin encoding.
-
-- Issue #8048: Prevent doctests from failing when sys.displayhook has been
-  reassigned.
-
-- Issue #8015: In pdb, do not crash when an empty line is entered as a
-  breakpoint command.
-
-- In pdb, allow giving a line number to the "until" command.
-
-- Issue #1437051: For pdb, allow "continue" and related commands in .pdbrc
-  files.  Also, add a command-line option "-c" that runs a command as if given
-  in .pdbrc.
-
-- Issue #4179: In pdb, allow "list ." as a command to return to the currently
-  debugged line.
-
-- Issue #4108: In urllib.robotparser, if there are multiple ``User-agent: *``
-  entries, consider the first one.
-
-- Issue #6630: Allow customizing regex flags when subclassing the
-  string.Template class.
-
-- Issue #9411: Allow specifying an encoding for config files in the configparser
-  module.
-
-- Issue #1682942: Improvements to configparser: support alternate delimiters,
-  alternate comment prefixes and empty lines in values.
-
-- Issue #9354: Provide getsockopt() in asyncore's file_wrapper.
-
-- Issue #8966: ctypes: Remove implicit bytes-unicode conversion.
-
-- Issue #9378: python -m pickle <pickle file> will now load and display the
-  first object in the pickle file.
-
-- Issue #4770: Restrict binascii module to accept only bytes (as specified).
-  And fix the email package to encode to ASCII instead of ``raw-unicode-escape``
-  before ASCII-to-binary decoding.
-
-- Issue #9384: ``python -m tkinter`` will now display a simple demo applet.
-
-- The default size of the re module's compiled regular expression cache has been
-  increased from 100 to 500 and the cache replacement policy has changed from
-  simply clearing the entire cache on overflow to forgetting the least recently
-  used cached compiled regular expressions.  This is a performance win for
-  applications that use a lot of regular expressions and limits the impact of
-  the performance hit anytime the cache is exceeded.
-
-- Issue #7113: Speed up loading in configparser. Patch by Łukasz Langa.
-
-- Issue #9032: XML-RPC client retries the request on EPIPE error.  The EPIPE
-  error occurs when the server closes the socket and the client sends a big
-  XML-RPC request.
-
-- Issue #4629: getopt raises an error if an argument ends with "=", whereas
-  getopt doesn't accept a value (eg. --help= is rejected if getopt uses
-  ['help='] long options).
-
-- Issue #7989: Added pure python implementation of the `datetime` module.  The C
-  module is renamed to `_datetime` and if available, overrides all classes
-  defined in datetime with fast C impementation.  Python implementation is based
-  on the original python prototype for the datetime module by Tim Peters with
-  minor modifications by the PyPy project.  The test suite now tests `datetime`
-  module with and without `_datetime` acceleration using the same test cases.
-
-- Issue #7895: platform.mac_ver() no longer crashes after calling os.fork().
-
-- Issue #9323: Fixed a bug in trace.py that resulted in loosing the name of the
-  script being traced.  Patch by Eli Bendersky.
-
-- Issue #9282: Fixed --listfuncs option of trace.py.  Thanks Eli Bendersky for
-  the patch.
-
-- Issue #3704: http.cookiejar was not properly handling URLs with a / in the
-  parameters.
-
-- Issue #9268: ``pickletools.dis()`` now has an optional *annotate* argument
-  which controls printing of opcode descriptions in ``dis()`` output.
-
-- Issue #1555570: email no longer inserts extra blank lines when a \r\n combo
-  crosses an 8192 byte boundary.
-
-- Issue #9243: Fix sndhdr module and add unit tests, contributed by James Lee.
-
-- ``ast.literal_eval()`` now allows byte literals.
-
-- Issue #9137: Fix issue in MutableMapping.update, which incorrectly treated
-  keyword arguments called 'self' or 'other' specially.
-
-- ``ast.literal_eval()`` now allows set literals.
-
-- Issue #9164: Ensure that sysconfig handles duplicate -arch flags in CFLAGS.
-
-- Issue #7646: The fnmatch pattern cache no longer grows without bound.
-
-- Issue #9136: Fix 'dictionary changed size during iteration' RuntimeError
-  produced when profiling the decimal module.  This was due to a dangerous
-  iteration over 'locals()' in Context.__init__.
-
-- Fix extreme speed issue in Decimal.pow when the base is an exact power of 10
-  and the exponent is tiny (for example, ``Decimal(10) **
-  Decimal('1e-999999999')``).
-
-- Issue #9186: Fix math.log1p(-1.0) to raise ValueError, not OverflowError.
-
-- Issue #9130: Fix validation of relative imports in parser module.
-
-- Issue #9128: Fix validation of class decorators in parser module.
-
-- Issue #9094: python -m pickletools will now disassemble pickle files listed in
-  the command line arguments.  See output of python -m pickletools -h for more
-  details.
-
-- Issue #5468: urlencode to handle bytes type and other encodings in its query
-  parameter. Patch by Dan Mahn.
-
-- Issue #7673: Fix security vulnerability (CVE-2010-2089) in the audioop module,
-  ensure that the input string length is a multiple of the frame size.
-
-- Issue #6507: Accept source strings in dis.dis().  Original patch by Daniel
-  Urban.
-
-- Issue #7829: Clearly document that the dis module is exposing an
-  implementation detail that is not stable between Python VMs or releases.
-
-- Issue #6589: cleanup asyncore.socket_map in case smtpd.SMTPServer constructor
-  raises an exception.
-
-- Issue #9110: Addition of ContextDecorator to contextlib, for creating APIs
-  that act as both context managers and decorators. contextmanager changes to
-  use ContextDecorator.
-
-- Implement importlib.abc.SourceLoader and deprecate PyLoader and PyPycLoader
-  for removal in Python 3.4.
-
-- Issue #9064: pdb's "up" and "down" commands now accept an optional argument
-  giving the number of frames to go.
-
-- Issue #9018: os.path.normcase() now raises a TypeError if the argument is not
-  ``str`` or ``bytes``.
-
-- Issue #9075: In the ssl module, remove the setting of a ``debug`` flag on an
-  OpenSSL structure.
-
-- Issue #8682: The ssl module now temporary increments the reference count of a
-  socket object got through ``PyWeakref_GetObject``, so as to avoid possible
-  deallocation while the object is still being used.
-
-- Issue #1368368: FancyURLOpener class changed to throw an Exception on wrong
-  password instead of presenting an interactive prompt.  Older behavior can be
-  obtained by passing retry=True to http_error_xxx methods of FancyURLOpener.
-
-- Issue #8720: Fix regression caused by fix for #4050 by making getsourcefile
-  smart enough to find source files in the linecache.
-
-- Issue #5610: feedparser no longer eats extra characters at the end of a body
-  part if the body part ends with a ``\r\n``.
-
-- Issue #8986: math.erfc was incorrectly raising OverflowError for values
-  between -27.3 and -30.0 on some platforms.
-
-- Issue #8784: Set tarfile default encoding to 'utf-8' on Windows.
-
-- Issue #8966: If a ctypes structure field is an array of c_char, convert its
-  value to bytes instead of str (as done for c_char and c_char_p).
-
-- Issue #8188: Comparisons between Decimal and Fraction objects are now
-  permitted, returning a result based on the exact numerical values of the
-  operands.  This builds on issue #2531, which allowed Decimal-to-float
-  comparisons; all comparisons involving numeric types (bool, int, float,
-  complex, Decimal, Fraction) should now act as expected.
-
-- Issue #8897: Fix sunau module, use bytes to write the header. Patch written by
-  Thomas Jollans.
-
-- Issue #8899: time.struct_time now has class and attribute docstrings.
-
-- Issue #6470: Drop UNC prefix in FixTk.
-
-- Issue #4768: base64 encoded email body parts were incorrectly stored as binary
-  strings.  They are now correctly converted to strings.
-
-- Issue #8833: tarfile created hard link entries with a size field != 0 by
-  mistake.
-
-- Charset.body_encode now correctly handles base64 encoding by encoding with the
-  output_charset before calling base64mime.encode.  Passes the tests from 2.x
-  issue #1368247.
-
-- Issue #8845: sqlite3 Connection objects now have a read-only in_transaction
-  attribute that is True iff there are uncommitted changes.
-
-- Issue #1289118: datetime.timedelta objects can now be multiplied by float and
-  divided by float and int objects.  Results are rounded to the nearest multiple
-  of timedelta.resolution with ties resolved using round-half-to-even method.
-
-- Issue #7150: Raise OverflowError if the result of adding or subtracting
-  timedelta from date or datetime falls outside of the MINYEAR:MAXYEAR range.
-
-- Issue #8806: add SSL contexts support to ftplib.
-
-- Issue #4769: Fix main() function of the base64 module, use sys.stdin.buffer
-  and sys.stdout.buffer (instead of sys.stdin and sys.stdout) to use the bytes
-  API.
-
-- Issue #8770: Now sysconfig displays information when it's called as a script.
-  Initial idea by Sridhar Ratnakumar.
-
-- Issue #6662: Fix parsing of malformatted charref (&#bad;), patch written by
-  Fredrik Håård.
-
-- Issue #8540: Decimal module: rename the Context._clamp attribute to
-  Context.clamp and make it public.  This is useful in creating contexts that
-  correspond to the decimal interchange formats specified in IEEE 754.
-
-- Issue #6268: Fix seek() method of codecs.open(), don't read or write the BOM
-  twice after seek(0). Fix also reset() method of codecs, UTF-16, UTF-32 and
-  StreamWriter classes.
-
-- Issue #3798: sys.exit(message) writes the message to sys.stderr file, instead
-  of the C file stderr, to use stderr encoding and error handler.
-
-- Issue #8782: Add a trailing newline in linecache.updatecache to the last line
-  of files without one.
-
-- Issue #8729: Return NotImplemented from collections.Mapping.__eq__ when
-  comparing to a non-mapping.
-
-- Issue #8774: tabnanny uses the encoding cookie (#coding:...) to use the
-  correct encoding.
-
-- Issue #4870: Add an `options` attribute to SSL contexts, as well as several
-  ``OP_*`` constants to the `ssl` module.  This allows to selectively disable
-  protocol versions, when used in combination with `PROTOCOL_SSLv23`.
-
-- Issue #8759: Fixed user paths in sysconfig for posix and os2 schemes.
-
-- Issue #8663: distutils.log emulates backslashreplace error handler. Fix
-  compilation in a non-ASCII directory if stdout encoding is ASCII (eg. if
-  stdout is not a TTY).
-
-- Issue #8513: os.get_exec_path() supports b'PATH' key and bytes value.
-  subprocess.Popen() and os._execvpe() support bytes program name. Add
-  os.supports_bytes_environ flag: True if the native OS type of the environment
-  is bytes (eg. False on Windows).
-
-- Issue #8633: tarfile is now able to read and write archives with "raw" binary
-  pax headers as described in POSIX.1-2008.
-
-- Issue #1285086: Speed up urllib.parse functions: quote, quote_from_bytes,
-  unquote, unquote_to_bytes.
-
-- Issue #8688: Distutils now recalculates MANIFEST everytime.
-
-- Issue #8477: ssl.RAND_egd() and ssl._test_decode_cert() support str with
-  surrogates and bytes for the filename.
-
-- Issue #8550: Add first class ``SSLContext`` objects to the ssl module.
-
-- Issue #8681: Make the zlib module's error messages more informative when the
-  zlib itself doesn't give any detailed explanation.
-
-- The audioop module now supports sound fragments of length greater than 2**31
-  bytes on 64-bit machines, and is PY_SSIZE_T_CLEAN.
-
-- Issue #4972: Add support for the context manager protocol to the ftplib.FTP
-  class.
-
-- Issue #8664: In py_compile, create __pycache__ when the compiled path is
-  given.
-
-- Issue #8514: Add os.fsencode() function (Unix only): encode a string to bytes
-  for use in the file system, environment variables or the command line.
-
-- Issue #8571: Fix an internal error when compressing or decompressing a chunk
-  larger than 1GB with the zlib module's compressor and decompressor objects.
-
-- Issue #8603: Support bytes environmental variables on Unix: Add os.environb
-  mapping and os.getenvb() function. os.unsetenv() encodes str argument to the
-  file system encoding with the surrogateescape error handler (instead of
-  utf8/strict) and accepts bytes. posix.environ keys and values are now bytes.
-
-- Issue #8573: asyncore _strerror() function might throw ValueError.
-
-- Issue #8483: asyncore.dispatcher's __getattr__ method produced confusing error
-  messages when accessing undefined class attributes because of the cheap
-  inheritance with the underlying socket object.  The cheap inheritance has been
-  deprecated.
-
-- Issue #4265: shutil.copyfile() was leaking file descriptors when disk fills.
-  Patch by Tres Seaver.
-
-- Issue #8390: tarfile uses surrogateescape as the default error handler
-  (instead of replace in read mode or strict in write mode).
-
-- Issue #7755: Use an unencumbered audio file for tests.
-
-- Issue #8621: uuid.uuid4() returned the same sequence of values in the parent
-  and any children created using ``os.fork`` on MacOS X 10.6.
-
-- Issue #8567: Fix precedence of signals in Decimal module: when a Decimal
-  operation raises multiple signals and more than one of those signals is
-  trapped, the specification determines the order in which the signals should be
-  handled.  In many cases this order wasn't being followed, leading to the wrong
-  Python exception being raised.
-
-- Issue #7865: The close() method of ``io`` objects should not swallow
-  exceptions raised by the implicit flush().  Also qensure that calling close()
-  several times is supported.  Patch by Pascal Chambon.
-
-- Issue #4687: Fix accuracy of garbage collection runtimes displayed with
-  gc.DEBUG_STATS.
-
-- Issue #8354: The siginterrupt setting is now preserved for all signals, not
-  just SIGCHLD.
-
-- Issue #7192: webbrowser.get("firefox") now works on Mac OS X, as does
-  webbrowser.get("safari").
-
-- Issue #8464: tarfile no longer creates files with execute permissions set when
-  mode="w|" is used.
-
-- Issue #7834: Fix connect() of Bluetooth L2CAP sockets with recent versions of
-  the Linux kernel.  Patch by Yaniv Aknin.
-
-- Issue #8295: Added shutil.unpack_archive.
-
-- Issue #6312: Fixed http HEAD request when the transfer encoding is chunked.
-  It should correctly return an empty response now.
-
-- Issue #8546: Reject None given as the buffering argument to _pyio.open.
-
-- Issue #8549: Fix compiling the _ssl extension under AIX.  Patch by
-  Sridhar Ratnakumar.
-
-- Issue #6656: fix locale.format_string to handle escaped percents
-  and mappings.
-
-- Issue #2302: Fix a race condition in SocketServer.BaseServer.shutdown, where
-  the method could block indefinitely if called just before the event loop
-  started running.  This also fixes the occasional freezes witnessed in
-  test_httpservers.
-
-- Issue #8524: When creating an SSL socket, the timeout value of the original
-  socket wasn't retained (instead, a socket with a positive timeout would be
-  turned into a non-blocking SSL socket).
-
-- Issue #5103: SSL handshake would ignore the socket timeout and block
-  indefinitely if the other end didn't respond.
-
-- The do_handshake() method of SSL objects now adjusts the blocking mode of the
-  SSL structure if necessary (as other methods already do).
-
-- Issue #8391: os.execvpe() and os.getenv() supports unicode with surrogates and
-  bytes strings for environment keys and values.
-
-- Issue #8467: Pure Python implementation of subprocess encodes the error
-  message using surrogatepass error handler to support surrogates in the
-  message.
-
-- Issue #8468: bz2.BZ2File() accepts str with surrogates and bytes filenames.
-
-- Issue #8451: Syslog module now uses basename(sys.argv[0]) instead of the
-  string "python" as the *ident*.  openlog() arguments are all optional and
-  keywords.
-
-- Issue #8108: Fix the unwrap() method of SSL objects when the socket has a
-  non-infinite timeout.  Also make that method friendlier with applications
-  wanting to continue using the socket in clear-text mode, by disabling
-  OpenSSL's internal readahead.  Thanks to Darryl Miles for guidance.
-
-- Issue #8496: make mailcap.lookup() always return a list, rather than an
-  iterator.  Patch by Gregory Nofi.
-
-- Issue #8195: Fix a crash in sqlite Connection.create_collation() if the
-  collation name contains a surrogate character.
-
-- Issue #8484: Load all ciphers and digest algorithms when initializing the _ssl
-  extension, such that verification of some SSL certificates doesn't fail
-  because of an "unknown algorithm".
-
-- Issue #6547: Added the ignore_dangling_symlinks option to shutil.copytree.
-
-- Issue #1540112: Now allowing the choice of a copy function in shutil.copytree.
-
-- Issue #4814: timeout parameter is now applied also for connections resulting
-  from PORT/EPRT commands.
-
-- Issue #8463: added missing reference to bztar in shutil's documentation.
-
-- Issue #7154: urllib.request can now detect the proxy settings on OSX 10.6 (as
-  long as the user didn't specify 'automatic proxy configuration').
-
-- Issue #3817: ftplib.FTP.abort() method now considers 225 a valid response code
-  as stated in RFC-959 at chapter 5.4.
-
-- Issue #8394: _ctypes.dlopen() accepts bytes, bytearray and str with
-  surrogates.
-
-- Issue #850728: Add a *timeout* parameter to the `acquire()` method of
-  `threading.Semaphore` objects.  Original patch by Torsten Landschoff.
-
-- Issue #8322: Add a *ciphers* argument to SSL sockets, so as to change the
-  available cipher list.  Helps fix test_ssl with OpenSSL 1.0.0.
-
-- Issue #8393: subprocess accepts bytes, bytearray and str with surrogates for
-  the current working directory.
-
-- Issue #7606: XML-RPC traceback stored in X-traceback is now encoded to ASCII
-  using backslashreplace error handler.
-
-- Issue #8412: os.system() now accepts bytes, bytearray and str with surrogates.
-
-- Issue #2987: RFC2732 support for urlparse (IPv6 addresses). Patch by Tony
-  Locke and Hans Ulrich Niedermann.
-
-- Issue #5277: Fix quote counting when parsing RFC 2231 encoded parameters.
-
-- Issue #7316: The acquire() method of lock objects in the ``threading``
-  module now takes an optional timeout argument in seconds.  Timeout support
-  relies on the system threading library, so as to avoid a semi-busy wait loop.
-
-- Issue #8383: pickle and pickletools use surrogatepass error handler when
-  encoding unicode as utf8 to support lone surrogates and stay compatible with
-  Python 2.x and 3.x.
-
-- Issue #7585: difflib context and unified diffs now place a tab between
-  filename and date, conforming to the 'standards' they were originally designed
-  to follow.  This improves compatibility with patch tools.
-
-- Issue #7472: Fixed typo in email.encoders module; messages using ISO-2022
-  character sets will now consistently use a Content-Transfer-Encoding of 7bit
-  rather than sometimes being marked as 8bit.
-
-- Issue #8375: test_distutils now checks if the temporary directory are still
-  present before it cleans them.
-
-- Issue #8374: Update the internal alias table in the ``locale`` module to
-  cover recent locale changes and additions.
-
-- Issue #8321: Give access to OpenSSL version numbers from the `ssl` module,
-  using the new attributes `ssl.OPENSSL_VERSION`, `ssl.OPENSSL_VERSION_INFO` and
-  `ssl.OPENSSL_VERSION_NUMBER`.
-
-- Add functools.total_ordering() and functools.cmp_to_key().
-
-- Issue #8257: The Decimal construct now accepts a float instance directly,
-  converting that float to a Decimal of equal value:
-
-     >>> Decimal(1.1)
-     Decimal('1.100000000000000088817841970012523233890533447265625')
-
-- Issue #8294: The Fraction constructor now accepts Decimal and float instances
-  directly.
-
-- Issue #7279: Comparisons involving a Decimal signaling NaN now signal
-  InvalidOperation instead of returning False.  (Comparisons involving a quiet
-  NaN are unchanged.)  Also, Decimal quiet NaNs are now hashable; Decimal
-  signaling NaNs remain unhashable.
-
-- Issue #2531: Comparison operations between floats and Decimal instances now
-  return a result based on the numeric values of the operands; previously they
-  returned an arbitrary result based on the relative ordering of id(float) and
-  id(Decimal).  See also issue #8188, which adds Decimal-to-Fraction
-  comparisons.
-
-- Added a subtract() method to collections.Counter().
-
-- Issue #8233: When run as a script, py_compile.py optionally takes a single
-  argument `-` which tells it to read files to compile from stdin.  Each line is
-  read on demand and the named file is compiled immediately.  (Original patch by
-  Piotr Ożarowski).
-
-- Backwards incompatible change: Unicode codepoints line tabulation (0x0B) and
-  form feed (0x0C) are now considered linebreaks, as specified in Unicode
-  Standard Annex #14.  See issue #7643.  http://www.unicode.org/reports/tr14/
-
-- Comparisons using one of <, <=, >, >= between a complex instance and a
-  Fractions instance now raise TypeError instead of returning True/False.  This
-  makes Fraction <=> complex comparisons consistent with int <=> complex, float
-  <=> complex, and complex <=> complex comparisons.
-
-- Issue #8139: ossaudiodev didn't initialize its types properly, therefore some
-  methods (such as oss_mixer_device.fileno()) were not available.  Initial patch
-  by Bertrand Janin.
-
-- Issue #8205: Remove the "Modules" directory from sys.path when Python is
-  running from the build directory (POSIX only).
-
-- Issue #7512: shutil.copystat() could raise an OSError when the filesystem
-  didn't support chflags() (for example ZFS under FreeBSD).  The error is now
-  silenced.
-
-- Issue #7860: platform.uname now reports the correct 'machine' type when Python
-  is running in WOW64 mode on 64 bit Windows.
-
-- Issue #3890, #8222: Fix recv() and recv_into() on non-blocking SSL sockets.
-  Also, enable the SSL_MODE_AUTO_RETRY flag on SSL sockets, so that blocking
-  reads and writes are always retried by OpenSSL itself.
-
-- Issue #4282: Fix the main function of the profile module for a non-ASCII
-  script, open the file in binary mode and not in text mode with the default
-  (utf8) encoding.
-
-- Issue #8179: Fix macpath.realpath() on a non-existing path.
-
-- Issue #8024: Update the Unicode database to 5.2.
-
-- Issue #8168: py_compile now handles files with utf-8 BOMS.
-
-- ``tokenize.detect_encoding`` now returns ``'utf-8-sig'`` when a UTF-8 BOM is
-  detected.
-
-- Issue #6716/2: Backslash-replace error output in compilall.
-
-- Issue #4961: Inconsistent/wrong result of askyesno function in tkMessageBox
-  with Tcl/Tk-8.5.
-
-- Issue #8140: extend compileall to compile single files.  Add -i option.
-
-- Issue #7356: ctypes.util: Make parsing of ldconfig output independent of the
-  locale.
-
-- The internals of the subprocess module on POSIX systems have been replaced by
-  an extension module (_posixsubprocess) so that the fork()+exec() can be done
-  safely without the possibility of deadlock in multithreaded applications.
-
-- subprocess.Popen now has restore_signals and start_new_session features.  The
-  default of restore_signals=True is a new behavior compared to earlier Python
-  versions.  This means that signals such as SIGPIPE are not ignored by default
-  in subprocesses launched by Python (Issue #1652).
-
-- Issue #6472: The xml.etree package is updated to ElementTree 1.3.  The
-  cElementTree module is updated too.
-
-- Issue #7774: Set sys.executable to an empty string if argv[0] has been set to
-  an non existent program name and Python is unable to retrieve the real program
-  name.
-
-- Issue #7880: Fix sysconfig when the python executable is a symbolic link.
-
-- Issue #6509: fix re.sub to work properly when the pattern, the string, and the
-  replacement were all bytes.  Patch by Antoine Pitrou.
-
-- The sqlite3 module was updated to pysqlite 2.6.0. This fixes several obscure
-  bugs and allows loading SQLite extensions from shared libraries.
-
-- Issue #1054943: Fix ``unicodedata.normalize('NFC', text)`` for the Public
-  Review Issue #29 (http://unicode.org/review/pr-29.html).
-
-- Issue #7494: fix a crash in _lsprof (cProfile) after clearing the profiler,
-  reset also the pointer to the current pointer context.
-
-- Issue #7232: Add support for the context manager protocol to the TarFile
-  class.
-
-- Issue #7250: Fix info leak of os.environ across multi-run uses of
-  wsgiref.handlers.CGIHandler.
-
-- Issue #1729305: Fix doctest to handle encode error with "backslashreplace".
-
-- Issue #691291: codecs.open() should not convert end of lines on reading and
-  writing.
-
-- Issue #7869: logging: improved diagnostic for format-time errors.
-
-- Issue #7868: logging: added loggerClass attribute to Manager.
-
-- logging: Implemented PEP 391.
-
-- Issue #1537721: Add a writeheader() method to csv.DictWriter.
-
-- Issue #7959: ctypes callback functions are now registered correctly with the
-  cycle garbage collector.
-
-- Issue #5801: removed spurious empty lines in wsgiref.
-
-- Issue #6666: fix bug in trace.py that applied the list of directories to be
-  ignored only to the first file.  Noted by Bogdan Opanchuk.
-
-- Issue #7597: curses.use_env() can now be called before initscr().  Noted by
-  Kan-Ru Chen.
-
-- Issue #7310: fix the __repr__ of os.environ to show the environment variables.
-
-- Issue #7970: email.Generator.flatten now correctly flattens message/rfc822
-  messages parsed by email.Parser.HeaderParser.
-
-- Issue #7361: Importlib was not properly checking the number of bytes in
-  bytecode file when it was less then 8 bytes.
-
-- Issue #7633: In the decimal module, Context class methods (with the exception
-  of canonical and is_canonical) now accept instances of int and long wherever a
-  Decimal instance is accepted, and implicitly convert that argument to Decimal.
-  Previously only some arguments were converted.
-
-- Issue #7835: shelve should no longer produce mysterious warnings during
-  interpreter shutdown.
-
-- Issue #2746: Don't escape ampersands and angle brackets ("&", "<", ">") in XML
-  processing instructions and comments.  These raw characters are allowed by the
-  XML specification, and are necessary when outputting e.g.  PHP code in a
-  processing instruction.  Patch by Neil Muller.
-
-- Issue #6233: ElementTree failed converting unicode characters to XML entities
-  when they could't be represented in the requested output encoding.  Patch by
-  Jerry Chen.
-
-- Issue #6003: add an argument to ``zipfile.Zipfile.writestr`` to specify the
-  compression type.
-
-- Issue #4772: Raise a ValueError when an unknown Bluetooth protocol is
-  specified, rather than fall through to AF_PACKET (in the `socket` module).
-  Also, raise ValueError rather than TypeError when an unknown TIPC address type
-  is specified.  Patch by Brian Curtin.
-
-- Issue #6939: Fix file I/O objects in the `io` module to keep the original file
-  position when calling `truncate()`.  It would previously change the file
-  position to the given argument, which goes against the tradition of
-  ftruncate() and other truncation APIs.  Patch by Pascal Chambon.
-
-- Issue #7610: Reworked implementation of the internal
-  ``zipfile.ZipExtFile`` class used to represent files stored inside an
-  archive.  The new implementation is significantly faster and can be wrapped in
-  a ``io.BufferedReader`` object for more speedups.  It also solves an
-  issue where interleaved calls to `read()` and `readline()` give wrong results.
-  Patch by Nir Aides.
-
-- Issue #6963: Added "maxtasksperchild" argument to multiprocessing.Pool,
-  allowing for a maximum number of tasks within the pool to be completed by the
-  worker before that worker is terminated, and a new one created to replace it.
-
-- Issue #7792: Registering non-classes to ABCs raised an obscure error.
-
-- Issue #7785: Don't accept bytes in FileIO.write().
-
-- Removed the functions 'verify' and 'vereq' from Lib/test/support.py.
-
-- Issue #7773: Fix an UnboundLocalError in platform.linux_distribution() when
-  the release file is empty.
-
-- Issue #7561: Fix crashes when using bytearray objects with the posix
-  module.
-
-- Issue #1670765: Prevent email.generator.Generator from re-wrapping headers in
-  multipart/signed MIME parts, which fixes one of the sources of invalid
-  modifications to such parts by Generator.
-
-- Issue #7703: Add support for the new buffer API to `binascii.a2bhqx`.  Patch
-  by Florent Xicluna, along with some additional tests.
-
-- Issue #7701: Fix crash in binascii.b2a_uu() in debug mode when given a 1-byte
-  argument.  Patch by Victor Stinner.
-
-- Issue #3299: Fix possible crash in the _sre module when given bad argument
-  values in debug mode.  Patch by Victor Stinner.
-
-- Issue #2846: Add support for gzip.GzipFile reading zero-padded files.  Patch
-  by Brian Curtin.
-
-- Issue #7681: Use floor division in appropiate places in the wave module.
-
-- Issue #5372: Drop the reuse of .o files in Distutils' ccompiler (since
-  Extension extra options may change the output without changing the .c
-  file). Initial patch by Collin Winter.
-
-- Issue #7617: Make sure distutils.unixccompiler.UnixCCompiler recognizes gcc
-  when it has a fully qualified configuration prefix. Initial patch by Arfrever.
-
-- Issue #7105: Make WeakKeyDictionary and WeakValueDictionary robust against the
-  destruction of weakref'ed objects while iterating.
-
-- Issue #7455: Fix possible crash in cPickle on invalid input.  Patch by Victor
-  Stinner.
-
-- Issue #1628205: Socket file objects returned by socket.socket.makefile() now
-  properly handles EINTR within the read, readline, write & flush methods.  The
-  socket.sendall() method now properly handles interrupted system calls.
-
-- Issue #7471: Improve the performance of GzipFile's buffering mechanism, and
-  make it implement the `io.BufferedIOBase` ABC to allow for further speedups by
-  wrapping it in an `io.BufferedReader`.  Patch by Nir Aides.
-
-- Issue #3972: http.client.HTTPConnection now accepts an optional source_address
-  parameter to allow specifying where your connections come from.
-
-- socket.create_connection now accepts an optional source_address parameter.
-
-- Issue #5511: now zipfile.ZipFile can be used as a context manager.  Initial
-  patch by Brian Curtin.
-
-- Issue #7556: Make sure Distutils' msvc9compile reads and writes the MSVC XML
-  Manifest file in text mode so string patterns can be used in regular
-  expressions.
-
-- Issue #7552: Removed line feed in the base64 Authorization header in the
-  Distutils upload command to avoid an error when PyPI reads it.  This occurs on
-  long passwords. Initial patch by JP St. Pierre.
-
-- Issue #7231: urllib2 cannot handle https with proxy requiring auth.  Patch by
-  Tatsuhiro Tsujikawa.
-
-- Issue #4757: `zlib.compress` and other methods in the zlib module now raise a
-  TypeError when given an `str` object (rather than a `bytes`-like object).
-  Patch by Victor Stinner and Florent Xicluna.
-
-- Issue #7349: Make methods of file objects in the io module accept None as an
-  argument where file-like objects (ie StringIO and BytesIO) accept them to mean
-  the same as passing no argument.
-
-- Issue #7357: tarfile no longer suppresses fatal extraction errors by default.
-
-- Issue #5949: added check for correct lineends in input from IMAP server in
-  imaplib.
-
-- Add count() and reverse() methods to collections.deque().
-
-- Fix variations of extending deques:  d.extend(d)  d.extendleft(d)  d+=d
-
-- Issue #6986: Fix crash in the JSON C accelerator when called with the wrong
-  parameter types.  Patch by Victor Stinner.
-
-- Issue #7457: added a read_pkg_file method to
-  distutils.dist.DistributionMetadata.
-
-- logging: Added optional `secure` parameter to SMTPHandler, to enable use of
-  TLS with authentication credentials.
-
-- Issue #1923: Fixed the removal of meaningful spaces when PKG-INFO is generated
-  in Distutils.  Patch by Stephen Emslie.
-
-- Issue #4120: Drop reference to CRT from manifest when building extensions with
-  msvc9compiler.
-
-- Issue #7333: The `posix` module gains an `initgroups()` function providing
-  access to the initgroups(3) C library call on Unix systems which implement it.
-  Patch by Jean-Paul Calderone.
-
-- Issue #7408: Fixed distutils.tests.sdist so it doesn't check for group
-  ownership when the group is not forced, because the group may be different
-  from the user's group and inherit from its container when the test is run.
-
-- Issue #4486: When an exception has an explicit cause, do not print its
-  implicit context too.  This affects the `traceback` module as well as built-in
-  exception printing.
-
-- Issue #1515: Enable use of deepcopy() with instance methods.  Patch by Robert
-  Collins.
-
-- Issue #7403: logging: Fixed possible race condition in lock creation.
-
-- Issue #6845: Add restart support for binary upload in ftplib.  The
-  `storbinary()` method of FTP and FTP_TLS objects gains an optional `rest`
-  argument.  Patch by Pablo Mouzo.
-
-- Issue #5788: `datetime.timedelta` objects get a new `total_seconds()` method
-  returning the total number of seconds in the duration.  Patch by Brian
-  Quinlan.
-
-- Issue #7133: SSL objects now support the new buffer API.
-
-- Issue #1488943: difflib.Differ() doesn't always add hints for tab characters.
-
-- Issue #6123: tarfile now opens empty archives correctly and consistently
-  raises ReadError on empty files.
-
-- Issue #7354: distutils.tests.test_msvc9compiler - dragfullwindows can be 2.
-
-- Issue #5037: Proxy the __bytes__ special method instead to __bytes__ instead
-  of __str__.
-
-- Issue #7341: Close the internal file object in the TarFile constructor in case
-  of an error.
-
-- Issue #7293: distutils.test_msvc9compiler is fixed to work on any fresh
-  Windows box. Help provided by David Bolen.
-
-- Issue #2054: ftplib now provides an FTP_TLS class to do secure FTP using TLS
-  or SSL.  Patch by Giampaolo Rodola'.
-
-- Issue #7328: pydoc no longer corrupts sys.path when run with the '-m' switch.
-
-- Issue #4969: The mimetypes module now reads the MIME database from the
-  registry under Windows.  Patch by Gabriel Genellina.
-
-- Issue #6816: runpy now provides a run_path function that allows Python code to
-  execute file paths that refer to source or compiled Python files as well as
-  zipfiles, directories and other valid sys.path entries that contain a
-  __main__.py file.  This allows applications that run other Python scripts to
-  support the same flexibility as the CPython command line itself.
-
-- Issue #7318: multiprocessing now uses a timeout when it fails to establish a
-  connection with another process, rather than looping endlessly.  The default
-  timeout is 20 seconds, which should be amply sufficient for local connections.
-
-- Issue #7197: Allow unittest.TextTestRunner objects to be pickled and
-  unpickled.  This fixes crashes under Windows when trying to run
-  test_multiprocessing in verbose mode.
-
-- Issue #7893: ``unittest.TextTestResult`` is made public and a ``resultclass``
-  argument added to the TextTestRunner constructor allowing a different result
-  class to be used without having to subclass.
-
-- Issue #7588: ``unittest.TextTestResult.getDescription`` now includes the test
-  name in failure reports even if the test has a docstring.
-
-- Issue #3001: Add a C implementation of recursive locks which is used by
-  default when instantiating a `threading.RLock` object. This makes recursive
-  locks as fast as regular non-recursive locks (previously, they were slower by
-  10x to 15x).
-
-- Issue #7282: Fix a memory leak when an RLock was used in a thread other than
-  those started through `threading.Thread` (for example, using
-  `_thread.start_new_thread()`).
-
-- Issue #7187: Importlib would not silence the IOError raised when trying to
-  write new bytecode when it was made read-only.
-
-- Issue #7264: Fix a possible deadlock when deallocating thread-local objects
-  which are part of a reference cycle.
-
-- Issue #7211: Allow 64-bit values for the `ident` and `data` fields of kevent
-  objects on 64-bit systems.  Patch by Michael Broghton.
-
-- Issue #6896: mailbox.Maildir now invalidates its internal cache each time a
-  modification is done through it.  This fixes inconsistencies and test failures
-  on systems with slightly bogus mtime behaviour.
-
-- Issue #7246 & Issue #7208: getpass now properly flushes input before reading
-  from stdin so that existing input does not confuse it and lead to incorrect
-  entry or an IOError.  It also properly flushes it afterwards to avoid the
-  terminal echoing the input afterwards on OSes such as Solaris.
-
-- Issue #7233: Fix a number of two-argument Decimal methods to make sure that
-  they accept an int or long as the second argument.  Also fix buggy handling of
-  large arguments (those with coefficient longer than the current precision) in
-  shift and rotate.
-
-- Issue #4750: Store the basename of the original filename in the gzip FNAME
-  header as required by RFC 1952.
-
-- Issue #1180: Added a new global option to ignore ~/.pydistutils.cfg in
-  Distutils.
-
-- Issue #7218: Fix test_site for win32, the directory comparison was done with
-  an uppercase.
-
-- Issue #7205: Fix a possible deadlock when using a BZ2File object from
-  several threads at once.
-
-- Issue #7077: logging: SysLogHandler now treats Unicode as per RFC 5424.
-
-- Issue #7099: Decimal.is_normal now returns True for numbers with exponent
-  larger than emax.
-
-- Issue #7080: locale.strxfrm() raises a MemoryError on 64-bit non-Windows
-  platforms, and assorted locale fixes by Derk Drukker.
-
-- Issue #5833: Fix extra space character in readline completion with the GNU
-  readline library version 6.0.
-
-- Issue #6894: Fixed the issue urllib2 doesn't respect "no_proxy" environment.
-
-- Issue #7086: Added TCP support to SysLogHandler, and tidied up some
-  anachronisms in the code which were a relic of 1.5.2 compatibility.
-
-- Issue #7082: When falling back to the MIME 'name' parameter, the correct place
-  to look for it is the Content-Type header.
-
-- Make tokenize.detect_coding() normalize utf-8 and iso-8859-1 variants like the
-  builtin tokenizer.
-
-- Issue #7048: Force Decimal.logb to round its result when that result is too
-  large to fit in the current precision.
-
-- Issue #6236, #6348: Fix various failures in the I/O library under AIX and
-  other platforms, when using a non-gcc compiler. Patch by Derk Drukker.
-
-- Issue #4606: Passing 'None' if ctypes argtype is set to POINTER(...)  does now
-  always result in NULL.
-
-- Issue #5042: Structure sub-subclass does now initialize correctly with base
-  class positional arguments.
-
-- Issue #6882: Import uuid creates zombies processes.
-
-- Issue #6635: Fix profiler printing usage message.
-
-- Issue #6856: Add a filter keyword argument to TarFile.add().
-
-- Issue #6888: pdb's alias command was broken when no arguments were given.
-
-- Issue #6857: Default format() alignment should be '>' for Decimal instances.
-
-- Issue #6795: int(Decimal('nan')) now raises ValueError instead of returning
-  NaN or raising InvalidContext.  Also, fix infinite recursion in
-  long(Decimal('nan')).
-
-- Issue #6850: Fix bug in Decimal._parse_format_specifier for formats with no
-  type specifier.
-
-- Issue #6239: ctypes.c_char_p return value must return bytes.
-
-- Issue #6838: Use a list to accumulate the value instead of repeatedly
-  concatenating strings in http.client's HTTPResponse._read_chunked providing a
-  significant speed increase when downloading large files servend with a
-  Transfer-Encoding of 'chunked'.
-
-- Trying to import a submodule from a module that is not a package, ImportError
-  should be raised, not AttributeError.
-
-- When the globals past to importlib.__import__() has __package__ set to None,
-  fall back to computing what __package__ should be instead of giving up.
-
-- Raise a TypeError when the name of a module to be imported for
-  importlib.__import__ is not a string (was raising an AttributeError before).
-
-- Allow the fromlist passed into importlib.__import__ to be any iterable.
-
-- Have importlib raise ImportError if None is found in sys.modules.
-
-- Issue #6054: Do not normalize stored pathnames in tarfile.
-
-- Issue #6794: Fix Decimal.compare_total and Decimal.compare_total_mag: NaN
-  payloads are now ordered by integer value rather than lexicographically.
-
-- Issue #1356969: Add missing info methods in tix.HList.
-
-- Issue #1522587: New constants and methods for the tix.Grid widget.
-
-- Issue #1250469: Fix the return value of tix.PanedWindow.panes.
-
-- Issue #1119673: Do not override tkinter.Text methods when creating a
-  ScrolledText.
-
-- Issue #6665: Fix fnmatch to properly match filenames with newlines in them.
-
-- Issue #1135: Add the XView and YView mix-ins to avoid duplicating the xview*
-  and yview* methods.
-
-- Issue #6629: Fix a data corruption issue in the new I/O library, which could
-  occur when writing to a BufferedRandom object (e.g. a file opened in "rb+" or
-  "wb+" mode) after having buffered a certain amount of data for reading. This
-  bug was not present in the pure Python implementation.
-
-- Issue #6622: Fix "local variable 'secret' referenced before assignment" bug in
-  POP3.apop.
-
-- Issue #2715: Remove remnants of Carbon.File from binhex module.
-
-- Issue #6595: The Decimal constructor now allows arbitrary Unicode decimal
-  digits in input, as recommended by the standard.  Previously it was restricted
-  to accepting [0-9].
-
-- Issue #6106: telnetlib.Telnet.process_rawq doesn't handle default WILL/WONT
-  DO/DONT correctly.
-
-- Issue #1424152: Fix for http.client, urllib.request to support SSL while
-  working through proxy.  Original patch by Christopher Li, changes made by
-  Senthil Kumaran.
-
-- Add importlib.abc.ExecutionLoader to represent the PEP 302 protocol for
-  loaders that allow for modules to be executed. Both importlib.abc.PyLoader and
-  PyPycLoader inherit from this class and provide implementations in relation to
-  other methods required by the ABCs.
-
-- importlib.abc.PyLoader did not inherit from importlib.abc.ResourceLoader like
-  the documentation said it did even though the code in PyLoader relied on the
-  abstract method required by ResourceLoader.
-
-- Issue #6431: Make Fraction type return NotImplemented when it doesn't know how
-  to handle a comparison without loss of precision.  Also add correct handling
-  of infinities and nans for comparisons with float.
-
-- Issue #6415: Fixed warnings.warn segfault on bad formatted string.
-
-- Issue #6358: The exit status of a command started with os.popen() was reported
-  differently than it did with python 2.x.
-
-- Issue #6323: The pdb debugger did not exit when running a script with a syntax
-  error.
-
-- Issue #3392: The subprocess communicate() method no longer fails in select()
-  when file descriptors are large; communicate() now uses poll() when possible.
-
-- Issue #6369: Fix an RLE decompression bug in the binhex module.
-
-- Issue #6344: Fixed a crash of mmap.read() when passed a negative argument.
-
-- The deprecated function string.maketrans has been removed.
-
-- Issue #4005: Fixed a crash of pydoc when there was a zip file present in
-  sys.path.
-
-- Issue #6218: io.StringIO and io.BytesIO instances are now picklable.
-
-- The os.get_exec_path() function to return the list of directories that will be
-  searched for an executable when launching a subprocess was added.
-
-- Issue #7481: When a threading.Thread failed to start it would leave the
-  instance stuck in initial state and present in threading.enumerate().
-
-- Issue #1068268: The subprocess module now handles EINTR in internal os.waitpid
-  and os.read system calls where appropriate.
-
-- Issue #6729: Added ctypes.c_ssize_t to represent ssize_t.
-
-- Issue #6247: The argparse module has been added to the standard library.
-
-- Issue #8235: _socket: Add the constant ``SO_SETFIB``.  SO_SETFIB is a socket
-  option available on FreeBSD 7.1 and newer.
-
-- Issue #9315: Fix for the trace module to record correct class name
-  for tracing methods.
-
-Extension Modules
------------------
-
-- Issue #9959: Tweak formula used for computing math.log of an integer,
-  making it marginally more accurate for exact powers of 2.
-
-- Issue #9422: Fix memory leak when re-initializing a struct.Struct object.
-
-- Issue #7900: The getgroups(2) system call on MacOSX behaves rather oddly
-  compared to other unix systems. In particular, os.getgroups() does not reflect
-  any changes made using os.setgroups() but basicly always returns the same
-  information as the id command. os.getgroups() can now return more than 16
-  groups on MacOSX.
-
-- Issue #6095: Make directory argument to os.listdir optional.
-
-- Issue #9277: Fix bug in struct.pack for bools in standard mode (e.g.,
-  struct.pack('>?')): if conversion to bool raised an exception then that
-  exception wasn't properly propagated on machines where char is unsigned.
-
-- Issue #5180: Fixed a bug that prevented loading 2.x pickles in 3.x python when
-  they contain instances of old-style classes.
-
-- Issue #9165: Add new functions math.isfinite and cmath.isfinite, to accompany
-  existing isinf and isnan functions.
-
-- Issue #1578269: Implement os.symlink for Windows 6.0+.  Patch by Jason
-  R. Coombs.
-
-- In struct.pack, correctly propogate exceptions from computing the truth of an
-  object in the '?' format.
-
-- Issue #9000: datetime.timezone objects now have eval-friendly repr.
-
-- In the math module, correctly lookup __trunc__, __ceil__, and __floor__ as
-  special methods.
-
-- Issue #9005: Prevent utctimetuple() from producing year 0 or year 10,000.
-  Prior to this change, timezone adjustment in utctimetuple() could produce
-  tm_year value of 0 or 10,000.  Now an OverflowError is raised in these edge
-  cases.
-
-- Issue #6641: The ``datetime.strptime`` method now supports the ``%z``
-  directive.  When the ``%z`` directive is present in the format string, an
-  aware ``datetime`` object is returned with ``tzinfo`` bound to a
-  ``datetime.timezone`` instance constructed from the parsed offset.  If both
-  ``%z`` and ``%Z`` are present, the data in ``%Z`` field is used for timezone
-  name, but ``%Z`` data without ``%z`` is discarded.
-
-- Issue #5094: The ``datetime`` module now has a simple concrete class
-  implementing ``datetime.tzinfo`` interface.  Instances of the new class,
-  ``datetime.timezone``, return fixed name and UTC offset from their
-  ``tzname(dt)`` and ``utcoffset(dt)`` methods.  The ``dst(dt)`` method always
-  returns ``None``.  A class attribute, ``utc`` contains an instance
-  representing the UTC timezone.  Original patch by Rafe Kaplan.
-
-- Issue #8973: Add __all__ to struct module; this ensures that help(struct)
-  includes documentation for the struct.Struct class.
-
-- Issue #3129: Trailing digits in struct format string are no longer ignored.
-  For example, "1" or "ilib123" are now invalid formats and cause
-  ``struct.error`` to be raised.  Patch by Caleb Deveraux.
-
-- Issue #7384: If the system readline library is linked against ncurses, the
-  curses module must be linked against ncurses as well. Otherwise it is not safe
-  to load both the readline and curses modules in an application.
-
-- Issue #2810: Fix cases where the Windows registry API returns ERROR_MORE_DATA,
-  requiring a re-try in order to get the complete result.
-
-- Issue #8692: Optimize math.factorial: replace the previous naive algorithm
-  with an improved 'binary-split' algorithm that uses fewer multiplications and
-  allows many of the multiplications to be performed using plain C integer
-  arithmetic instead of PyLong arithmetic.  Also uses a lookup table for small
-  arguments.
-
-- Issue #8674: Fixed a number of incorrect or undefined-behaviour-inducing
-  overflow checks in the audioop module.
-
-- Issue #8644: The accuracy of td.total_seconds() has been improved (by
-  calculating with integer arithmetic instead of float arithmetic internally):
-  the result is now always correctly rounded, and is equivalent to ``td /
-  timedelta(seconds=1)``.
-
-- Issue #2706: Allow division of a timedelta by another timedelta: timedelta /
-  timedelta, timedelta % timedelta, timedelta // timedelta and divmod(timedelta,
-  timedelta) are all supported.
-
-- Issue #8314: Fix unsigned long long bug in libffi on Sparc v8.
-
-- Issue #8300: When passing a non-integer argument to struct.pack with any
-  integer format code, struct.pack first attempts to convert the non-integer
-  using its __index__ method.  If that method is non-existent or raises
-  TypeError it goes on to try the __int__ method, as described below.
-
-- Issue #8142: Update libffi to the 3.0.9 release.
-
-- Issue #6949: Allow the _dbm extension to be built with db 4.8.x.
-
-- Issue #6544: Fix a reference leak in the kqueue implementation's error
-  handling.
-
-- Stop providing crtassem.h symbols when compiling with Visual Studio 2010, as
-  msvcr100.dll is not a platform assembly anymore.
-
-- Issue #6508: Add posix.{getresuid,getresgid,setresuid,setresgid}.
-
-- Issue #7078: Set struct.__doc__ from _struct.__doc__.
-
-- Issue #3366: Add erf, erfc, expm1, gamma, lgamma functions to math module.
-
-- Issue #6877: It is now possible to link the readline extension to the libedit
-  readline emulation on OSX 10.5 or later.
-
-- Issue #6848: Fix curses module build failure on OS X 10.6.
-
-- Fix a segfault that could be triggered by expat with specially formed input.
-
-- Issue #6561: '\d' in a regex now matches only characters with Unicode category
-  'Nd' (Number, Decimal Digit).  Previously it also matched characters with
-  category 'No'.
-
-- Issue #4509: Array objects are no longer modified after an operation failing
-  due to the resize restriction in-place when the object has exported buffers.
-
-- Issue #2389: Array objects are now pickled in a portable manner.
-
-- Expat: Fix DoS via XML document with malformed UTF-8 sequences
-  (CVE_2009_3560).
-
-- Issue #7242: On Solaris 9 and earlier calling os.fork() from within a thread
-  could raise an incorrect RuntimeError about not holding the import lock.  The
-  import lock is now reinitialized after fork.
-
-- Issue #7999: os.setreuid() and os.setregid() would refuse to accept a -1
-  parameter on some platforms such as OS X.
-
-- Build the ossaudio extension on GNU/kFreeBSD.
-
-- Issue #7347: winreg: Add CreateKeyEx and DeleteKeyEx, as well as fix a bug in
-  the return value of QueryReflectionKey.
-
-- Issue #7567: PyCurses_setupterm: Don't call ``setupterm`` twice.
-
-Build
------
-
-- Use OpenSSL 1.0.0a on Windows.
-
-- Issue #9280: Make sharedinstall depend on sharedmods.
-
-- Issue #9189: Make a user-specified CFLAGS, CPPFLAGS, or LDFLAGS setting
-  override the configure and makefile defaults, without deleting options the
-  user didn't intend to override.  Developers should no longer need to specify
-  OPT or EXTRA_CFLAGS, although those variables are still present for
-  backward-compatibility.
-
-- Issue #8854: Fix finding Visual Studio 2008 on Windows x64.
-
-- Issue #1759169, #8864: Drop _XOPEN_SOURCE on Solaris, define it for
-  multiprocessing only.
-
-- Issue #8625: Turn off optimization in --with-pydebug builds with gcc.
-  (Optimization was unintentionally turned on in gcc --with-pydebug builds as a
-  result of the issue #1628484 fix, combined with autoconf's strange choice of
-  default CFLAGS produced by AC_PROG_CC for gcc.)
-
-- Issue #3646: It is now easily possible to install a Python framework into your
-  home directory on MacOSX, see Mac/README for more information.
-
-- Issue #3928: os.mknod() now available in Solaris, also.
-
-- Issue #3326: Build Python without -fno-strict-aliasing when the gcc does not
-  give false warnings.
-
-- Issue #1628484: The Makefile doesn't ignore the CFLAGS environment variable
-  anymore.  It also forwards the LDFLAGS settings to the linker when building a
-  shared library.
-
-- Issue #6716: Quote -x arguments of compileall in MSI installer.  Exclude 2to3
-  tests from compileall.
-
-- Issue #3920, #7903: Define _BSD_SOURCE on OpenBSD 4.4 through 4.9.
-
-- Issue #7632: When Py_USING_MEMORY_DEBUGGER is defined, disable the private
-  memory allocation scheme in dtoa.c and use PyMem_Malloc and PyMem_Free
-  instead.  Also disable caching of powers of 5.
-
-- Issue #6491: Allow --with-dbmliborder to specify that no dbms will be built.
-
-- Issue #6943: Use pkg-config to find the libffi headers when the
-  --with-system-ffi flag is used.
-
-- Issue #7609: Add a --with-system-expat option that causes the system's expat
-  library to be used for the pyexpat module instead of the one included with
-  Python.
-
-- Issue #7589: Only build the nis module when the correct header files are
-  found.
-
-- Switch to OpenSSL 0.9.8l and sqlite 3.6.21 on Windows.
-
-- Issue #5792: Extend the short float repr support to x86 systems using
-  icc or suncc.
-
-- Issue #6603: Change READ_TIMESTAMP macro in ceval.c so that it compiles
-  correctly under gcc on x86-64.  This fixes a reported problem with the
-  --with-tsc build on x86-64.
-
-- Issue #6802: Fix build issues on MacOSX 10.6.
-
-- Issue #6244: Allow detect_tkinter to look for Tcl/Tk 8.6.
-
-- Issue #4601: 'make install' did not set the appropriate permissions on
-  directories.
-
-- Issue #5390: Add uninstall icon independent of whether file extensions are
-  installed.
-
-- Issue #7541: When using ``python-config`` with a framework install the
-  compiler might use the wrong library.
-
-- python-config now supports multiple options on the same command line.
-
-- Issue #8509: Fix quoting in help strings and code snippets in configure.in.
-
-- Issue #8510: Update to autoconf2.65.
-
-Documentation
--------------
-
-- Issue #9817: Add expat COPYING file; add expat, libffi and expat licenses
-  to Doc/license.rst.
-
-- Issue #9524: Document that two CTRL* signals are meant for use only
-  with os.kill.
-
-- Issue #9255: Document that the 'test' package is meant for internal Python use
-  only.
-
-- A small WSGI server was added as Tools/scripts/serve.py, and is used to
-  implement a local documentation server via 'make serve' in the doc directory.
-
-- Updating `Using Python` documentation to include description of CPython's -J
-  and -X options.
-
-- Document that importing a module that has None in sys.modules triggers an
-  ImportError.
-
-- Issue #6556: Fixed the Distutils configuration files location explanation for
-  Windows.
-
-- Update python manual page (options -B, -O0, -s, environment variables
-  PYTHONDONTWRITEBYTECODE, PYTHONNOUSERSITE).
-
-- Issue #8909: Added the size of the bitmap used in the installer created by
-  distutils' bdist_wininst. Patch by Anatoly Techtonik.
-
-Tests
------
-
-- Issue #9251: test_threaded_import didn't fail when run through regrtest if the
-  import lock was disabled.
-
-- Issue #8605: Skip test_gdb if Python is compiled with optimizations.
-
-- Issue #7449: Skip test_socketserver if threading support is disabled.
-
-- Issue #8672: Add a zlib test ensuring that an incomplete stream can be handled
-  by a decompressor object without errors (it returns incomplete uncompressed
-  data).
-
-- Issue #8533: regrtest uses backslashreplace error handler for stdout to avoid
-  UnicodeEncodeError (write non-ASCII character to stdout using ASCII encoding).
-
-- Issue #8576: Remove use of find_unused_port() in test_smtplib and
-  test_multiprocessing.  Patch by Paul Moore.
-
-- Issue #7449: Fix many tests to support Python compiled without thread
-  support. Patches written by Jerry Seutter.
-
-- Issue #8108: test_ftplib's non-blocking SSL server now has proper handling of
-  SSL shutdowns.
-
-- Issues #8279, #8330, #8437, #8480, #8495: Fix test_gdb failures, patch written
-  by Dave Malcolm.
-
-- Issue #3864: Skip three test_signal tests on freebsd6 because they fail if any
-  thread was previously started, most likely due to a platform bug.
-
-- Issue #8193: Fix test_zlib failure with zlib 1.2.4.
-
-- Issue #8248: Add some tests for the bool type.  Patch by Gregory Nofi.
-
-- Issue #8263: Now regrtest.py will report a failure if it receives a
-  KeyboardInterrupt (SIGINT).
-
-- Issue #8180 and #8207: Fix test_pep277 on OS X and add more tests for special
-  Unicode normalization cases.
-
-- Issue #7783: test.support.open_urlresource invalidates the outdated files from
-  the local cache.
-
-- Issue #7849: Now the utility ``check_warnings`` verifies if the warnings are
-  effectively raised.
-
-- The four path modules (genericpath, macpath, ntpath, posixpath) share a common
-  TestCase for some tests: test_genericpath.CommonTest.
-
-- Print platform information when running the whole test suite, or using the
-  --verbose flag.
-
-- Issue #767675: enable test_pep277 on POSIX platforms with Unicode-friendly
-  filesystem encoding.
-
-- Issue #6292: for the moment at least, the test suite runs cleanly if python is
-  run with the -OO flag.  Tests requiring docstrings are skipped.
-
-- Issue #7712: test.support gained a new `temp_cwd` context manager which is now
-  also used by regrtest to run all the tests in a temporary directory.  The
-  original CWD is saved in `support.SAVEDCWD`.  Thanks to Florent Xicluna who
-  helped with the patch.
-
-- Issue #7924: Fix an intermittent 'XXX undetected error' failure in test_capi
-  (only seen so far on platforms where the curses module wasn't built), due to
-  an uncleared exception.
-
-- Issue #7728: test_timeout was changed to use support.bind_port instead of a
-  hard coded port.
-
-- Issue #7376: Instead of running a self-test (which was failing) when called
-  with no arguments, doctest.py now gives a usage message.
-
-- Issue #7396: fix regrtest -s, which was broken by the -j enhancement.
-
-- Issue #7498: test_multiprocessing now uses test.support.find_unused_port
-  instead of a hardcoded port number in test_rapid_restart.
-
-- Issue #7431: Use TESTFN in test_linecache instead of trying to create a file
-  in the Lib/test directory, which might be read-only for the user running the
-  tests.
-
-- Issue #7324: Add a sanity check to regrtest argument parsing to catch the case
-  of an option with no handler.
-
-- Issue #7312: Add a -F flag to run the selected tests in a loop until a test
-  fails.  Can be combined with -j.
-
-- Issue #6551: test_zipimport could import and then destroy some modules of the
-  encodings package, which would make other tests fail further down the road
-  because the internally cached encoders and decoders would point to empty
-  global variables.
-
-- Issue #7295: Do not use a hardcoded file name in test_tarfile.
-
-- Issue #7270: Add some dedicated unit tests for multi-thread synchronization
-  primitives such as Lock, RLock, Condition, Event and Semaphore.
-
-- Issue #7248 (part 2): Use a unique temporary directory for importlib source
-  tests instead of tempfile.tempdir. This prevents the tests from sharing state
-  between concurrent executions on the same system.
-
-- Issue #7248: In importlib.test.source.util a try/finally block did not make
-  sure that some referenced objects actually were created in the block before
-  calling methods on the object.
-
-- Issue #7222: Make thread "reaping" more reliable so that reference
-  leak-chasing test runs give sensible results.  The previous method of reaping
-  threads could return successfully while some Thread objects were still
-  referenced.  This also introduces a new private function:
-  ``_thread._count()``.
-
-- Issue #7151: Fixed regrtest -j so that output to stderr from a test no longer
-  runs the risk of causing the worker thread to fail.
-
-- Issue #7055: test___all__ now greedily detects all modules which have an
-  __all__ attribute, rather than using a hardcoded and incomplete list.
-
-- Issue #7058: Added save/restore for things like sys.argv and cwd to
-  runtest_inner in regrtest, with warnings if the called test modifies them, and
-  a new section in the summary report at the end.
-
-- Issue #7042: Fix test_signal (test_itimer_virtual) failure on OS X 10.6.
-
-- Fixed tests in importlib.test.source.test_abc_loader that were masking the
-  proper exceptions that should be raised for missing or improper code object
-  bytecode.
-
-- Removed importlib's custom test discovery code and switched to
-  unittest.TestLoader.discover().
-
-Tools/Demos
------------
-
-- Issue #5464, #8974: Implement plural forms in msgfmt.py.
-
-- iobench (a file I/O benchmark) and ccbench (a concurrency benchmark) were
-  added to the `Tools/` directory.  They were previously living in the sandbox.
-
-
-What's New in Python 3.1?
-=========================
-
-*Release date: 27-June-2009*
-
-Core and Builtins
------------------
-
-- Issue #6334: Fix bug in range length calculation for ranges with
-  large arguments.
-
-- Issue #6329: Fixed iteration for memoryview objects (it was being blocked
-  because it wasn't recognized as a sequence).
-
-Library
--------
-
-- Issue #6126: Fixed pdb command-line usage.
-
-- Issue #6314: logging: performs extra checks on the "level" argument.
-
-- Issue #6274: Fixed possible file descriptors leak in subprocess.py
-
-- Accessing io.StringIO.buffer now raises an AttributeError instead of
-  io.UnsupportedOperation.
-
-- Issue #6271: mmap tried to close invalid file handle (-1) when anonymous.
-  (On Unix)
-
-- Issue #1202: zipfile module would cause a struct.error when attempting to
-  store files with a CRC32 > 2**31-1.
-
-Extension Modules
------------------
-
-- Issue #5590: Remove unused global variable in pyexpat extension.
-
-
-What's New in Python 3.1 Release Candidate 2?
-=============================================
-
-*Release date: 13-June-2009*
-
-Core and Builtins
------------------
-
-- Fixed SystemError triggered by "range([], 1, -1)".
-
-- Issue #5924: On Windows, a large PYTHONPATH environment variable
-  (more than 255 characters) would be completely ignored.
-
-- Issue #4547: When debugging a very large function, it was not always
-  possible to update the lineno attribute of the current frame.
-
-- Issue #5330: C functions called with keyword arguments were not reported by
-  the various profiling modules (profile, cProfile). Patch by Hagen Fürstenau.
-
-Library
--------
-
-- Issue #6438: Fixed distutils.cygwinccompiler.get_versions : the regular
-  expression string pattern was trying to match against a bytes returned by
-  Popen. Tested under win32 to build the py-postgresql project.
-
-- Issue #6258: Support AMD64 in bdist_msi.
-
-- Issue #6195: fixed doctest to no longer try to read 'source' data from
-  binary files.
-
-- Issue #5262: Fixed bug in next rollover time computation in
-  TimedRotatingFileHandler.
-
-- Issue #6217: The C implementation of io.TextIOWrapper didn't include the
-  errors property.  Additionally, the errors and encoding properties of StringIO
-  are always None now.
-
-- Issue #6137: The pickle module now translates module names when loading
-  or dumping pickles with a 2.x-compatible protocol, in order to make data
-  sharing and migration easier. This behaviour can be disabled using the
-  new `fix_imports` optional argument.
-
-- Removed the ipaddr module.
-
-- Issue #3613: base64.{encode,decode}string are now called
-  base64.{encode,decode}bytes which reflects what type they accept and return.
-  The old names are still there as deprecated aliases.
-
-- Issue #5767: Remove sgmlop support from xmlrpc.client.
-
-- Issue #6150: Fix test_unicode on wide-unicode builds.
-
-- Issue #6149: Fix initialization of WeakValueDictionary objects from non-empty
-  parameters.
-
-Windows
--------
-
-- Issue #6221: Delete test registry key before running the test.
-
-- Issue #6158: Package Sine-1000Hz-300ms.aif in MSI file.
-
-C-API
------
-
-- Issue #5735: Python compiled with --with-pydebug should throw an
-  ImportError when trying to import modules compiled without
-  --with-pydebug, and vice-versa.
-
-
-Build
------
-
-- Issue #6154: Make sure the intl library is added to LIBS if needed. Also
-  added LIBS to OS X framework builds.
-
-- Issue #5809: Specifying both --enable-framework and --enable-shared is
-  an error. Configure now explicity tells you about this.
-
-
-
-What's New in Python 3.1 release candidate 1?
-=============================================
-
-*Release date: 2009-05-30*
-
-Core and Builtins
------------------
-
-- Issue #6097: Escape UTF-8 surrogates resulting from mbstocs conversion
-  of the command line.
-
-- Issue #6012: Add cleanup support to O& argument parsing.
-
-- Issue #6089: Fixed str.format with certain invalid field specifiers
-  that would raise SystemError.
-
-- Issue #5982: staticmethod and classmethod now expose the wrapped
-  function with __func__.
-
-- Added support for multiple context managers in the same with-statement.
-  Deprecated contextlib.nested() which is no longer needed.
-
-- Issue #5829: complex("1e500") no longer raises OverflowError.  This
-  makes it consistent with float("1e500") and interpretation of real
-  and imaginary literals.
-
-- Issue #3527: Removed Py_WIN_WIDE_FILENAMES which is not used any more.
-
-- Issue #5994: the marshal module now has docstrings.
-
-- Issue #5981: Fix three minor inf/nan issues in float.fromhex:
-  (1) inf and nan strings with trailing whitespace were incorrectly
-  rejected;  (2) parsing of strings representing infinities and nans
-  was locale aware; and (3) the interpretation of fromhex('-nan')
-  didn't match that of float('-nan').
-
-Library
--------
-
-- Issue #4859: Implement PEP 383 for pwd, spwd, and grp.
-
-- smtplib 'login' and 'cram-md5' login are also fixed (see Issue #5259).
-
-- Issue #6121: pydoc now ignores leading and trailing spaces in the
-  argument to the 'help' function.
-
-- Issue #6118: urllib.parse.quote_plus ignored the encoding and errors
-  arguments for strings with a space in them.
-
-- collections.namedtuple() was not working with the following field
-  names:  cls, self, tuple, itemgetter, and property.
-
-- In unittest, using a skipping decorator on a class is now equivalent to
-  skipping every test on the class.  The ClassTestSuite class has been removed.
-
-- Issue #6050: Don't fail extracting a directory from a zipfile if
-  the directory already exists.
-
-- Issue #1309352: fcntl now converts its third arguments to a C `long` rather
-  than an int, which makes some operations possible under 64-bit Linux (e.g.
-  DN_MULTISHOT with F_NOTIFY).
-
-- Issue #5761: Add the name of the underlying file to the repr() of various
-  IO objects.
-
-- Issue #5259: smtplib plain auth login no longer gives a traceback.  Fix
-  by Musashi Tamura, tests by Marcin Bachry.
-
-- Issue #1983: Fix functions taking or returning a process identifier to use
-  the dedicated C type ``pid_t`` instead of a C ``int``. Some platforms have
-  a process identifier type wider than the standard C integer type.
-
-- Issue #4066: smtplib.SMTP_SSL._get_socket now correctly returns the socket.
-  Patch by Farhan Ahmad, test by Marcin Bachry.
-
-- Issue #2116: Weak references and weak dictionaries now support copy()ing and
-  deepcopy()ing.
-
-- Issue #1655: Make imaplib IPv6-capable. Patch by Derek Morr.
-
-- Issue #5918: Fix a crash in the parser module.
-
-- Issue #1664: Make nntplib IPv6-capable. Patch by Derek Morr.
-
-- Issue #5006: Better handling of unicode byte-order marks (BOM) in the io
-  library. This means, for example, that opening an UTF-16 text file in
-  append mode doesn't add a BOM at the end of the file if the file isn't
-  empty.
-
-- Issue #4050: inspect.findsource/getsource now raise an IOError if the 'source'
-  file is a binary.  Patch by Brodie Rao, tests by Daniel Diniz.  This fix
-  corrects a pydoc regression.
-
-- Issue #5955: aifc's close method did not close the file it wrapped,
-  now it does.  This also means getfp method now returns the real fp.
-
-Installation
-------------
-
-- Issue #6047: fullinstall has been removed because Python 3's executable will
-  now be known as python3.
-
-- Lib/smtpd.py is no longer installed as a script.
-
-Extension Modules
------------------
-
-- Issue #3061: Use wcsftime for time.strftime where available.
-
-- Issue #4873: Fix resource leaks in error cases of pwd and grp.
-
-- Issue #6093: Fix off-by-one error in locale.strxfrm.
-
-- The _functools and _locale modules are now built into the libpython shared
-  library instead of as extension modules.
-
-Build
------
-
-- Issue #3585: Add pkg-config support. It creates a python-2.7.pc file
-  and a python3.pc symlink in the $(LIBDIR)/pkgconfig directory. Patch by
-  Clinton Roy.
-
-Tests
------
-
-- Issue #5442: Tests for importlib were not properly skipping case-sensitivity
-  tests on darwin even when the OS was installed on a case-sensitive
-  filesystem. Also fixed tests that should not be run when
-  sys.dont_write_bytecode is true.
-
-
-What's New in Python 3.1 beta 1?
-================================
-
-*Release date: 2009-05-06*
-
-Core and Builtins
------------------
-
-- Issue #5914: Add new C API function PyOS_string_to_double, and
-  deprecate PyOS_ascii_strtod and PyOS_ascii_atof.
-
-- Issue #3382: float.__format__, complex.__format__, and %-formatting
-  no longer map 'F' to 'f'. Because of issue #5859 (below), this only
-  affects nan -> NAN and inf -> INF.
-
-- Issue #5799: ntpath (ie, os.path on Windows) fully supports UNC pathnames
-  in all operations, including splitdrive, split, etc.  splitunc() now issues
-  a PendingDeprecation warning.
-
-- Issue #5920: For float.__format__, change the behavior with the
-  empty presentation type (that is, not one of 'e', 'f', 'g', or 'n')
-  to be like 'g' but with at least one decimal point and with a
-  default precision of 12. Previously, the behavior the same but with
-  a default precision of 6.  This more closely matches str(), and
-  reduces surprises when adding alignment flags to the empty
-  presentation type. This also affects the new complex.__format__ in
-  the same way.
-
-- Implement PEP 383, Non-decodable Bytes in System Character Interfaces.
-
-- Issue #5890: in subclasses of 'property' the __doc__ attribute was
-  shadowed by classtype's, even if it was None.  property now
-  inserts the __doc__ into the subclass instance __dict__.
-
-- Issue #4426: The UTF-7 decoder was too strict and didn't accept some legal
-  sequences. Patch by Nick Barnes and Victor Stinner.
-
-- Issue #3672: Reject surrogates in utf-8 codec; add surrogatepass error handler.
-
-- Issue #5883: In the io module, the BufferedIOBase and TextIOBase ABCs have
-  received a new method, detach().  detach() disconnects the underlying stream
-  from the buffer or text IO and returns it.
-
-- Issue #5859: Remove switch from '%f' to '%g'-style formatting for
-  floats with absolute value over 1e50.  Also remove length
-  restrictions for float formatting: '%.67f' % 12.34 and '%.120e' %
-  12.34 no longer raise an exception.
-
-- Issue #1588: Add complex.__format__. For example,
-  format(complex(1, 2./3), '.5') now produces a sensible result.
-
-- Issue #5864: Fix empty format code formatting for floats so that it
-  never gives more than the requested number of significant digits.
-
-- Issue #5793: Rationalize isdigit / isalpha / tolower, etc. Includes
-  new Py_ISDIGIT / Py_ISALPHA / Py_TOLOWER, etc. in pctypes.h.
-
-- Issue #5835: Deprecate PyOS_ascii_formatd.
-
-- Issue #4971: Fix titlecase for characters that are their own
-  titlecase, but not their own uppercase.
-
-- Issue #5283: Setting __class__ in __del__ caused a segfault.
-
-- Issue #5816: complex(repr(z)) now recovers z exactly, even when
-  z involves nans, infs or negative zeros.
-
-- Issue #3166: Make int -> float conversions correctly rounded.
-
-- Issue #1869 (and many duplicates): make round(x, n) correctly
-  rounded for a float x, by using the decimal <-> binary conversions
-  from Python/dtoa.c.  As a consequence, (e.g.) round(x, 2) now
-  consistently agrees with format(x, '.2f').
-
-- Issue #5787: object.__getattribute__(some_type, "__bases__") segfaulted on
-  some builtin types.
-
-- Issue #5772: format(1e100, '<') produces '1e+100', not '1.0e+100'.
-
-- Issue #5515: str.format() type 'n' combined with commas and leading
-  zeros no longer gives odd results with ints and floats.
-
-- Implement PEP 378, Format Specifier for Thousands Separator, for
-  floats.
-
-- The str function switches to exponential notation at
-  1e11, not 1e12.  This avoids printing 13 significant digits in
-  situations where only 12 of them are correct.  Example problem
-  value: str(1e11 + 0.5).  (This minor issue has existed in 2.x for a
-  long time.)
-
-- Issue #1580: On most platforms, use a 'short' float repr: for a
-  finite float x, repr(x) now outputs a string based on the shortest
-  sequence of decimal digits that rounds to x.  Previous behaviour was
-  to output 17 significant digits and then strip trailing zeros.
-  Another minor difference is that the new repr switches to
-  exponential notation at 1e16 instead of the previous 1e17; this
-  avoids misleading output in some cases.
-
-  There's a new sys attribute sys.float_repr_style, which takes
-  the value 'short' to indicate that we're using short float repr,
-  and 'legacy' if the short float repr isn't available for one
-  reason or another.
-
-  The float repr change involves incorporating David Gay's 'perfect
-  rounding' code into the Python core (it's in Python/dtoa.c).  As a
-  secondary consequence, all string-to-float and float-to-string
-  conversions (including all float formatting operations) will be
-  correctly rounded on these platforms.
-
-  See issue #1580 discussions for details of platforms for which
-  this change does not apply.
-
-- Issue #5759: float() didn't call __float__ on str subclasses.
-
-- The string.maketrans() function is deprecated; there is a new static method
-  maketrans() on the bytes and bytearray classes.  This removes confusion about
-  the types string.maketrans() is supposed to work with, and mirrors the
-  methods available on the str class.
-
-- Issue #2170: refactored xml.dom.minidom.normalize, increasing both
-  its clarity and its speed.
-
-- Issue #1113244: Py_XINCREF, Py_DECREF, Py_XDECREF: Add ``do { ... } while (0)``
-  to avoid compiler warnings.
-
-- Issue #3739: The unicode-internal encoder now reports the number of characters
-  consumed like any other encoder (instead of the number of bytes).
-
-Installation
-------------
-
-- Issue #5756: Install idle and pydoc with a 3 suffix.
-
-Library
--------
-
-- Issue #8203: Fix IDLE Credits dialog: view_file() uses its encoding argument.
-
-- Issue #5311: bdist_msi can now build packages that do not depend on a
-  specific Python version.
-
-- Issue #5150: IDLE's format menu now has an option to strip trailing
-  whitespace.
-
-- Issue #5940: distutils.command.build_clib.check_library_list was not doing
-  the right type checkings anymore.
-
-- Issue #4875: On win32, ctypes.util.find_library does no longer
-  return directories.
-
-- Issue #5142: Add the ability to skip modules while stepping to pdb.
-
-- Issue #1309567: Fix linecache behavior of stripping subdirectories when
-  looking for files given by a relative filename.
-
-- Issue #5923: Update the ``turtle`` module to version 1.1, add two new
-  turtle demos in Demo/turtle.
-
-- Issue #5692: In ``zipfile.Zipfile``, fix wrong path calculation when
-  extracting a file to the root directory.
-
-- Issue #5913: os.listdir() should fail for empty path on windows.
-
-- Issue #5084: unpickling now interns the attribute names of pickled objects,
-  saving memory and avoiding growth in size of subsequent pickles. Proposal
-  and original patch by Jake McGuire.
-
-- The json module now works exclusively with str and not bytes.
-
-- Issue #3959: The ipaddr module has been added to the standard library.
-  Contributed by Google.
-
-- Issue #3002: ``shutil.copyfile()`` and ``shutil.copytree()`` now raise an
-  error when a named pipe is encountered, rather than blocking infinitely.
-
-- Issue #5857: tokenize.tokenize() now returns named tuples.
-
-- Issue #4305: ctypes should now build again on mipsel-linux-gnu
-
-- Issue #1734234: Massively speedup ``unicodedata.normalize()`` when the
-  string is already in normalized form, by performing a quick check beforehand.
-  Original patch by Rauli Ruohonen.
-
-- Issue #5853: calling a function of the mimetypes module from several threads
-  at once could hit the recursion limit if the mimetypes database hadn't been
-  initialized before.
-
-- Issue #5854: Updated __all__ to include some missing names and remove some
-  names which should not be exported.
-
-- Issue #3102:  All global symbols that the _ctypes extension defines
-  are now prefixed with 'Py' or '_ctypes'.
-
-- Issue #5041: ctypes does now allow pickling wide character.
-
-- Issue #5812: For the two-argument form of the Fraction constructor,
-  Fraction(m, n), m and n are permitted to be arbitrary Rational
-  instances.
-
-- Issue #5812: Fraction('1e6') is valid: more generally, any string
-  that's valid for float() is now valid for Fraction(), with the
-  exception of strings representing NaNs and infinities.
-
-- Issue #5734: BufferedRWPair was poorly tested and had several glaring
-  bugs. Patch by Brian Quinlan.
-
-- Issue #1161031: fix readwrite select flag handling: POLLPRI now
-  results in a handle_expt_event call, not handle_read_event, and POLLERR
-  and POLLNVAL now call handle_close, not handle_expt_event.  Also,
-  dispatcher now has an 'ignore_log_types' attribute for suppressing
-  log messages, which is set to 'warning' by default.
-
-- Issue #2703: SimpleXMLRPCDispatcher.__init__: Provide default values for
-  new arguments introduced in 2.5.
-
-- Issue #5828 (Invalid behavior of unicode.lower): Fixed bogus logic in
-  makeunicodedata.py and regenerated the Unicode database (This fixes
-  u'\u1d79'.lower() == '\x00').
-
-Extension Modules
------------------
-
-- Issue #5881: Remove old undocumented compatibility interfaces in hashlib and
-  pwd.
-
-- Issue #5463: In struct module, remove deprecated float coercion
-  for integer type codes: struct.pack('L', 0.3) should now raise
-  an error.  The _PY_STRUCT_FLOAT_COERCE constant has been removed.
-  The version number has been bumped to 0.3.
-
-- Issue #5359: Readd the Berkeley DB detection code to allow _dbm be built
-  using Berkeley DB.
-
-Tests
------
-
-- Issue #5354: New test support function import_fresh_module() makes
-  it easy to import both normal and optimised versions of modules.
-  test_heapq and test_warnings have been adjusted to use it, tests for
-  other modules with both C and Python implementations in the stdlib
-  can be adjusted to use it over time.
-
-- Issue #5837: Certain sequences of calls to set() and unset() for
-  support.EnvironmentVarGuard objects restored the environment variables
-  incorrectly on __exit__.
-
-C-API
------
-
-- Issue #5630: A replacement PyCObject API, PyCapsule, has been added.
-
-
-What's New in Python 3.1 alpha 2?
-=================================
-
-*Release date: 2009-4-4*
-
-Core and Builtins
------------------
-
-- Implement PEP 378, Format Specifier for Thousands Separator, for
-  integers.
-
-- Issue #5666: Py_BuildValue's 'c' code should create byte strings.
-
-- Issue #5499: The 'c' code for argument parsing functions now only accepts a
-  byte, and the 'C' code only accepts a unicode character.
-
-- Fix a problem in PyErr_NormalizeException that leads to "undetected errors"
-  when hitting the recursion limit under certain circumstances.
-
-- Issue #1665206: Remove the last eager import in _warnings.c and make it lazy.
-
-- Fix a segfault when running test_exceptions with coverage, caused by
-  insufficient checks in accessors of Exception.__context__.
-
-- Issue #5604: non-ASCII characters in module name passed to
-  imp.find_module() were converted to UTF-8 while the path is
-  converted to the default filesystem encoding, causing nonsense.
-
-- Issue #5126: str.isprintable() returned False for space characters.
-
-- Issue #4865: On MacOSX /Library/Python/2.7/site-packages is added to
-  the end sys.path, for compatibility with the system install of Python.
-
-- Issue #4688: Add a heuristic so that tuples and dicts containing only
-  untrackable objects are not tracked by the garbage collector. This can
-  reduce the size of collections and therefore the garbage collection overhead
-  on long-running programs, depending on their particular use of datatypes.
-
-- Issue #5512: Rewrite PyLong long division algorithm (x_divrem) to
-  improve its performance.  Long divisions and remainder operations
-  are now between 50% and 150% faster.
-
-- Issue #4258: Make it possible to use base 2**30 instead of base
-  2**15 for the internal representation of integers, for performance
-  reasons.  Base 2**30 is enabled by default on 64-bit machines.  Add
-  --enable-big-digits option to configure, which overrides the
-  default.  Add sys.int_info structseq to provide information about
-  the internal format.
-
-- Issue #4474: PyUnicode_FromWideChar now converts characters outside
-  the BMP to surrogate pairs, on systems with sizeof(wchar_t) == 4
-  and sizeof(Py_UNICODE) == 2.
-
-- Issue #5237: Allow auto-numbered fields in str.format(). For
-  example: '{} {}'.format(1, 2) == '1 2'.
-
-- Issue #5392: when a very low recursion limit was set, the interpreter would
-  abort with a fatal error after the recursion limit was hit twice.
-
-- Issue #3845: In PyRun_SimpleFileExFlags avoid invalid memory access with
-  short file names.
-
-Library
--------
-
-- Issue #2625: added missing items() call to the for loop in
-  mailbox.MH.get_message().
-
-- Issue #5640: Fix _multibytecodec so that CJK codecs don't repeat
-  error substitutions from non-strict codec error callbacks in
-  incrementalencoder and StreamWriter.
-
-- Issue #5656: Fix the coverage reporting when running the test suite with
-  the -T argument.
-
-- Issue #5647: MutableSet.__iand__() no longer mutates self during iteration.
-
-- Issue #5624: Fix the _winreg module name still used in several modules.
-
-- Issue #5628: Fix io.TextIOWrapper.read() with a unreadable buffer.
-
-- Issue #5619: Multiprocessing children disobey the debug flag and causes
-  popups on windows buildbots. Patch applied to work around this issue.
-
-- Issue #5400: Added patch for multiprocessing on netbsd compilation/support
-
-- Issue #5387: Fixed mmap.move crash by integer overflow.
-
-- Issue #5261: Patch multiprocessing's semaphore.c to support context
-  manager use: "with multiprocessing.Lock()" works now.
-
-- Issue #5236: Change time.strptime() to only take strings. Didn't work with
-  bytes already but the failure was non-obvious.
-
-- Issue #5177: Multiprocessing's SocketListener class now uses
-  socket.SO_REUSEADDR on all connections so that the user no longer needs
-  to wait 120 seconds for the socket to expire.
-
-- Issue #5595: Fix UnboundedLocalError in ntpath.ismount().
-
-- Issue #1174606: Calling read() without arguments of an unbounded file
-  (typically /dev/zero under Unix) could crash the interpreter.
-
-- The max_buffer_size arguments of io.BufferedWriter, io.BufferedRWPair, and
-  io.BufferedRandom have been deprecated for removal in Python 3.2.
-
-- Issue #5068: Fixed the tarfile._BZ2Proxy.read() method that would loop
-  forever on incomplete input. That caused tarfile.open() to hang when used
-  with mode 'r' or 'r:bz2' and a fileobj argument that contained no data or
-  partial bzip2 compressed data.
-
-- Issue #2110: Add support for thousands separator and 'n' type
-  specifier to Decimal.__format__
-
-- Fix Decimal.__format__ bug that swapped the meanings of the '<' and
-  '>' alignment characters.
-
-- The error detection code in FileIO.close() could fail to reflect the `errno`
-  value, and report it as -1 instead.
-
-- Issue #5016: FileIO.seekable() could return False if the file position
-  was negative when truncated to a C int. Patch by Victor Stinner.
-
-Extension Modules
------------------
-
-- Issue #5391: mmap now deals exclusively with bytes.
-
-- Issue #5463: In struct module, remove deprecated overflow wrapping
-  when packing an integer: struct.pack('=L', -1) now raises
-  struct.error instead of returning b'\xff\xff\xff\xff'.  The
-  _PY_STRUCT_RANGE_CHECKING and _PY_STRUCT_OVERFLOW_MASKING constants
-  have been removed from the struct module.
-
-
-What's New in Python 3.1 alpha 1
-================================
-
-*Release date: 2009-03-07*
-
-Core and Builtins
------------------
-
-- The io module has been reimplemented in C for speed.
-
-- Give dict views an informative __repr__.
-
-- Issue #5247: Improve error message when unknown format codes are
-  used when using str.format() with str, int, and float arguments.
-
-- Issue #5249: time.strftime returned malformed string when format string
-  contained non ascii character on windows.
-
-- Issue #4626: compile(), exec(), and eval() ignore the coding cookie if the
-  source has already been decoded into str.
-
-- Issue #5186: Reduce hash collisions for objects with no __hash__ method by
-  rotating the object pointer by 4 bits to the right.
-
-- Issue #4575: Fix Py_IS_INFINITY macro to work correctly on x87 FPUs:
-  it now forces its argument to double before testing for infinity.
-
-- Issue #5137: Make len() correctly raise a TypeError when a __len__ method
-  returns a non-number type.
-
-- Issue #5182: Removed memoryview.__str__.
-
-- Issue #1717: Removed builtin cmp() function, dropped tp_compare
-  slot, the C API functions PyObject_Compare and PyUnicode_Compare and
-  the type definition cmpfunc.  The tp_compare slot has been renamed
-  to tp_reserved, and is reserved for future usage.
-
-- Issue #1242657: the __len__() and __length_hint__() calls in several tools
-  were suppressing all exceptions.  These include list() and bytearray().
-
-- Issue #4707: round(x, n) now returns an integer if x is an integer.
-  Previously it returned a float.
-
-- Issue #4753: By enabling a configure option named '--with-computed-gotos'
-  on compilers that support it (notably: gcc, SunPro, icc), the bytecode
-  evaluation loop is compiled with a new dispatch mechanism which gives
-  speedups of up to 20%, depending on the system, on various benchmarks.
-
-- Issue #4874: Most builtin decoders now reject unicode input.
-
-- Issue #4842: Don't allow trailing 'L' when constructing an integer
-  from a string.
-
-- Issue #4991: os.fdopen now raises an OSError for invalid file descriptors.
-
-- Issue #4838: When a module is deallocated, free the memory backing the
-  optional module state data.
-
-- Issue #4910: Rename nb_long slot to nb_reserved, and change its
-  type to ``(void *)``.
-
-- Issue #4935: The overflow checking code in the expandtabs() method common
-  to str, bytes and bytearray could be optimized away by the compiler, letting
-  the interpreter segfault instead of raising an error.
-
-- Issue #3720: Fix a crash when an iterator modifies its class and removes its
-  __next__ method.
-
-- Issue #4910: Builtin int() function and PyNumber_Long/PyNumber_Int API
-  function no longer attempt to call the __long__ slot to convert an object
-  to an integer.  Only the __int__ and __trunc__ slots are examined.
-
-- Issue #4893: Use NT threading on CE.
-
-- Issue #4915: Port sysmodule to Windows CE.
-
-- Issue #4868: utf-8, utf-16 and latin1 decoding are now 2x to 4x faster. The
-  common cases are optimized thanks to a dedicated fast path and a moderate
-  amount of loop unrolling.
-
-- Issue #4074: Change the criteria for doing a full garbage collection (i.e.
-  collecting the oldest generation) so that allocating lots of objects without
-  destroying them does not show quadratic performance. Based on a proposal by
-  Martin von Löwis at
-  http://mail.python.org/pipermail/python-dev/2008-June/080579.html.
-
-- Issue #4604: Some objects of the I/O library could still be used after
-  having been closed (for instance, a read() call could return some
-  previously buffered data). Patch by Dmitry Vasiliev.
-
-- Issue #4705: Fix the -u ("unbuffered binary stdout and stderr") command-line
-  flag to work properly. Furthermore, when specifying -u, the text stdout
-  and stderr streams have line-by-line buffering enabled (the default being
-  to buffer arbitrary chunks of data).
-
-- The internal table, _PyLong_DigitValue, is now an array of unsigned chars
-  instead of ints (reducing its size from 4 to 8 times thereby reducing
-  Python's overall memory).
-
-- Issue #1180193: When importing a module from a .pyc (or .pyo) file with
-  an existing .py counterpart, override the co_filename attributes of all
-  code objects if the original filename is obsolete (which can happen if the
-  file has been renamed, moved, or if it is accessed through different paths).
-  Patch by Ziga Seilnacht and Jean-Paul Calderone.
-
-- Issue #4580: Fix slicing of memoryviews when the item size is greater than
-  one byte. Also fixes the meaning of len() so that it returns the number of
-  items, rather than the size in bytes.
-
-- Issue #4075: Use OutputDebugStringW in Py_FatalError.
-
-- Issue #4747: When the terminal does not use utf-8, executing a script with
-  non-ascii characters in its name could fail with a "SyntaxError: None" error.
-
-- Issue #4797: IOError.filename was not set when ``_fileio.FileIO`` failed
-  to open file with a bytes filename on Windows.
-
-- Issue #3680: Reference cycles created through a dict, set or deque iterator
-  did not get collected.
-
-- Issue #4701: PyObject_Hash now implicitly calls PyType_Ready on types
-  where the tp_hash and tp_dict slots are both NULL.
-
-- Issue #4759: None is now allowed as the first argument of
-  bytearray.translate().  It was always allowed for bytes.translate().
-
-- Added test case to ensure attempts to read from a file opened for writing
-  fail.
-
-- Issue #3106: Speedup some comparisons (str/str and int/int).
-
-- Issue #2183: Simplify and optimize bytecode for list, dict and set
-  comprehensions. Original patch for list comprehensions by Neal Norwitz.
-
-- Issue #2467: gc.DEBUG_STATS reported invalid elapsed times. Also, always
-  print elapsed times, not only when some objects are uncollectable /
-  unreachable. Original patch by Neil Schemenauer.
-
-- Issue #3439: Add a bit_length method to int.
-
-- Issue #2173: When getting device encoding, check that return value of
-  nl_langinfo is not the empty string.  This was causing silent build
-  failures on OS X.
-
-- Issue #4597: Fixed several opcodes that weren't always propagating
-  exceptions.
-
-- Issue #4589: Fixed exception handling when the __exit__ function of a
-  context manager returns a value that cannot be converted to a bool.
-
-- Issue #4445: Replace "sizeof(PyBytesObject)" with
-  "offsetof(PyBytesObject, ob_sval) + 1" when allocating memory for
-  bytes instances.  On a typical machine this saves 3 bytes of memory
-  (on average) per allocation of a bytes instance.
-
-- Issue #4533: File read operation was dreadfully slow due to a slowly
-  growing read buffer. Fixed by using the same growth rate algorithm as
-  Python 2.x.
-
-- Issue #4509: Various issues surrounding resize of bytearray objects to
-  which there are buffer exports (e.g. memoryview instances).
-
-- Issue #4233: Changed semantic of ``_fileio.FileIO``'s ``close()``
-  method on file objects with closefd=False. The file descriptor is still
-  kept open but the file object behaves like a closed file. The ``FileIO``
-  object also got a new readonly attribute ``closefd``.
-
-- Issue #4569: Interpreter crash when mutating a memoryview with an item size
-  larger than 1.
-
-- Issue #4748: Lambda generators no longer return a value.
-
-- The re.sub(), re.subn() and re.split() functions now accept a flags parameter.
-
-- Issue #5108: Handle %s like %S, %R and %A in PyUnicode_FromFormatV(): Call
-  PyUnicode_DecodeUTF8() once, remember the result and output it in a second
-  step. This avoids problems with counting UTF-8 bytes that ignores the effect
-  of using the replace error handler in PyUnicode_DecodeUTF8().
-
-Library
--------
-
-- Issue #7071: byte-compilation in Distutils is now done with respect to
-  sys.dont_write_bytecode.
-
-- Issue #7066: archive_util.make_archive now restores the cwd if an error is
-  raised. Initial patch by Ezio Melotti.
-
-- Issue #6516: Added owner/group support when creating tar archives in
-  Distutils.
-
-- Issue #6954: Fixed crash when using DISTUTILS_DEBUG flag in Distutils.
-
-- Issue #6163: Fixed HP-UX runtime library dir options in
-  distutils.unixcompiler. Initial patch by Sridhar Ratnakumar and
-  Michael Haubenwallner.
-
-- Issue #6693: New functions in site.py to get user/global site packages paths.
-
-- Issue #6511: ZipFile now raises BadZipfile (instead of an IOError) when
-  opening an empty or very small file.
-
-- Issue #6545: Removed assert statements in distutils.Extension, so the
-  behavior is similar when used with -O.
-
-- unittest has been split up into a package.  All old names should still work.
-
-- Issue #6466: now distutils.cygwinccompiler and distutils.emxccompiler
-  uses the same refactored function to get gcc/ld/dllwrap versions numbers.
-  It's `distutils.util.get_compiler_versions`. Added deprecation warnings
-  for the obsolete get_versions() functions.
-
-- Issue #6433: fixed issues with multiprocessing.pool.map hanging on empty list
-
-- Issue #6314: logging: Extra checks on the "level" argument in more places.
-
-- Issue #2622: Fixed an ImportError when importing email.message from a
-  standalone application built with py2exe or py2app.
-
-- Issue #6455: Fixed test_build_ext under win32.
-
-- Issue #6377: Enabled the compiler option, and deprecate its usage as an
-  attribute.
-
-- Issue #6413: Fixed the log level in distutils.dist for announce.
-
-- Issue #6403: Fixed package path usage in build_ext.
-
-- Issues #5155, 5313, 5331: multiprocessing.Process._bootstrap was
-  unconditionally calling "os.close(sys.stdin.fileno())" resulting in file
-  descriptor errors
-
-- Issue #6365: Distutils build_ext inplace mode was copying the compiled
-  extension in a subdirectory if the extension name had dots.
-
-- Issue #6164: Added an AIX specific linker argument in Distutils
-  unixcompiler. Original patch by Sridhar Ratnakumar.
-
-- Issue #6286: Now Distutils upload command is based on urllib2 instead of
-  httplib, allowing the usage of http_proxy.
-
-- Issue #6287: Added the license field in Distutils documentation.
-
-- Issue #6263: Fixed syntax error in distutils.cygwincompiler.
-
-- Issue #5201: distutils.sysconfig.parse_makefile() now understands `$$`
-  in Makefiles. This prevents compile errors when using syntax like:
-  `LDFLAGS='-rpath=\$$LIB:/some/other/path'`. Patch by Floris Bruynooghe.
-
-- Issue #6131: test_modulefinder leaked when run after test_distutils.
-  Patch by Hirokazu Yamamoto.
-
-- Issue #6048: Now Distutils uses the tarfile module in archive_util.
-
-- Issue #6062: In distutils, fixed the package option of build_ext. Feedback
-  and tests on pywin32 by Tim Golden.
-
-- Issue #6053: Fixed distutils tests on win32. patch by Hirokazu Yamamoto.
-
-- Issue #6046: Fixed the library extension when distutils build_ext is used
-  inplace. Initial patch by Roumen Petrov.
-
-- Issue #6041: Now distutils `sdist` and `register` commands use `check` as a
-  subcommand.
-
-- Issue #6022: a test file was created in the current working directory by
-  test_get_outputs in Distutils.
-
-- Issue #5977: distutils build_ext.get_outputs was not taking into account the
-  inplace option. Initial patch by kxroberto.
-
-- Issue #5984: distutils.command.build_ext.check_extensions_list checks were broken
-  for old-style extensions.
-
-- Issue #5976: Fixed Distutils test_check_environ.
-
-- Issue #5941: Distutils build_clib command was not working anymore because
-  of an incomplete costumization of the archiver command. Added ARFLAGS in the
-  Makefile besides AR and make Distutils use it. Original patch by David
-  Cournapeau.
-
-- Issue #2245: aifc now skips chunk types it doesn't recognize, per spec.
-
-- Issue #5874: distutils.tests.test_config_cmd is not locale-sensitive
-  anymore.
-
-- Issue #5810: Fixed Distutils test_build_scripts so it uses
-  sysconfig.get_config_vars.
-
-- Issue #4951: Fixed failure in test_httpservers.
-
-- Issue #5795: Fixed test_distutils failure on Debian ppc.
-
-- Issue #5607: fixed Distutils test_get_platform for Mac OS X fat binaries.
-
-- Issue #5741: don't disallow "%%" (which is an escape for "%") when setting
-  a value in SafeConfigParser.
-
-- Issue #5732: added a new command in Distutils: check.
-
-- Issue #5731: Distutils bdist_wininst no longer worked on non-Windows
-  platforms. Initial patch by Paul Moore.
-
-- Issue #5095: Added bdist_msi to the list of bdist supported formats.
-  Initial fix by Steven Bethard.
-
-- Issue #1491431: Fixed distutils.filelist.glob_to_re for edge cases.
-  Initial fix by Wayne Davison.
-
-- Issue #5694: removed spurious test output in Distutils (test_clean).
-
-- Issue #1326077: fix the formatting of SyntaxErrors by the traceback module.
-
-- Issue #1665206 (partially): Move imports in cgitb to the top of the module
-  instead of performing them in functions. Helps prevent import deadlocking in
-  threads.
-
-- Issue #2522: locale.format now checks its first argument to ensure it has
-  been passed only one pattern, avoiding mysterious errors where it appeared
-  that it was failing to do localization.
-
-- Issue #5583: Added optional Extensions in Distutils. Initial patch by Georg
-  Brandl.
-
-- Issue #1222: locale.format() bug when the thousands separator is a space
-  character.
-
-- Issue #5472: Fixed distutils.test_util tear down. Original patch by
-  Tim Golden.
-
-- collections.deque() objects now have a read-only attribute called maxlen.
-
-- Issue #2638: Show a window constructed with tkSimpleDialog.Dialog only after
-  it is has been populated and properly configured in order to prevent
-  window flashing.
-
-- Issue #4792: Prevent a segfault in _tkinter by using the
-  guaranteed to be safe interp argument given to the PythonCmd in place of
-  the Tcl interpreter taken from a PythonCmd_ClientData.
-
-- Issue #5193: Guarantee that tkinter.Text.search returns a string.
-
-- Issue #5394: removed > 2.3 syntax from distutils.msvc9compiler.
-  Original patch by Akira Kitada.
-
-- Issue #5334: array.fromfile() failed to insert values when EOFError was raised.
-
-- Issue #5385: Fixed mmap crash after resize failure on windows.
-
-- Issue #5179: Fixed subprocess handle leak on failure on windows.
-
-- PEP 372:  Added collections.OrderedDict().
-
-- The _asdict() for method for namedtuples now returns an OrderedDict().
-
-- configparser now defaults to using an ordered dictionary.
-
-- Issue #5401: Fixed a performance problem in mimetypes when ``from mimetypes
-  import guess_extension`` was used.
-
-- Issue #1733986: Fixed mmap crash in accessing elements of second map object
-  with same tagname but larger size than first map. (Windows)
-
-- Issue #5386: mmap.write_byte didn't check map size, so it could cause buffer
-  overrun.
-
-- Issue #1533164: Installed but not listed ``*.pyo`` was breaking Distutils
-  bdist_rpm command.
-
-- Issue #5378: added --quiet option to Distutils bdist_rpm command.
-
-- Issue #5052: make Distutils compatible with 2.3 again.
-
-- Issue #5316: Fixed buildbot failures introduced by multiple inheritance
-  in Distutils tests.
-
-- Issue #5287: Add exception handling around findCaller() call to help out
-  IronPython.
-
-- Issue #5282: Fixed mmap resize on 32bit windows and unix. When offset > 0,
-  The file was resized to wrong size.
-
-- Issue #5292: Fixed mmap crash on its boundary access m[len(m)].
-
-- Issue #2279: distutils.sdist.add_defaults now add files
-  from the package_data and the data_files metadata.
-
-- Issue #5257: refactored all tests in distutils, so they use
-  support.TempdirManager, to avoid writing in the tests directory.
-
-- Issue #4524: distutils build_script command failed with --with-suffix=3.
-  Initial patch by Amaury Forgeot d'Arc.
-
-- Issue #2461: added tests for distutils.util
-
-- Issue #4998: The memory saving effect of __slots__ had been lost on Fractions
-  which inherited from numbers.py which did not have __slots__ defined.  The
-  numbers hierarchy now has its own __slots__ declarations.
-
-- Issue #4631: Fix urlopen() result when an HTTP response uses chunked
-  encoding.
-
-- Issue #5203: Fixed ctypes segfaults when passing a unicode string to a
-  function without argtypes (only occurs if HAVE_USABLE_WCHAR_T is false).
-
-- Issue #3386: distutils.sysconfig.get_python_lib prefix argument was ignored
-  under NT and OS2. Patch by Philip Jenvey.
-
-- Issue #5128: Make compileall properly inspect bytecode to determine if needs
-  to be recreated. This avoids a timing hole thanks to the old reliance on the
-  ctime of the files involved.
-
-- Issue #5122: Synchronize tk load failure check to prevent a potential
-  deadlock.
-
-- Issue #1818: collections.namedtuple() now supports a keyword argument
-  'rename' which lets invalid fieldnames be automatically converted to
-  positional names in the form, _1, _2, ...
-
-- Issue #4890: Handle empty text search pattern in Tkinter.Text.search.
-
-- Issue #4512 (part 2): Promote ``ZipImporter._get_filename()`` to be a
-  public documented method ``ZipImporter.get_filename()``.
-
-- Issue #4195: The ``runpy`` module (and the ``-m`` switch) now support
-  the execution of packages by looking for and executing a ``__main__``
-  submodule when a package name is supplied. Initial patch by Andi
-  Vajda.
-
-- Issue #1731706: Call Tcl_ConditionFinalize for Tcl_Conditions that will
-  not be used again (this requires Tcl/Tk 8.3.1), also fix a memory leak in
-  Tkapp_Call when calling from a thread different than the one that created
-  the Tcl interpreter. Patch by Robert Hancock.
-
-- Issue #4285: Change sys.version_info to be a named tuple. Patch by
-  Ross Light.
-
-- Issue #1520877: Now distutils.sysconfig reads $AR from the
-  environment/Makefile. Patch by Douglas Greiman.
-
-- Issue #1276768: The verbose option was not used in the code of
-  distutils.file_util and distutils.dir_util.
-
-- Issue #5132: Fixed trouble building extensions under Solaris with
-  --enabled-shared activated. Initial patch by Dave Peterson.
-
-- Issue #1581476: Always use the Tcl global namespace when calling into Tcl.
-
-- The shelve module now defaults to pickle protocol 3.
-
-- Fix a bug in the trace module where a bytes object from co_lnotab had its
-  items being passed through ord().
-
-- Issue #2047: shutil.move() could believe that its destination path was
-  inside its source path if it began with the same letters (e.g. "src" vs.
-  "src.new").
-
-- Added the ttk module. See issue #2983: Ttk support for Tkinter.
-
-- Removed isSequenceType(), isMappingType, and isNumberType() from the
-  operator module; use the abstract base classes instead.  Also removed
-  the repeat() function; use mul() instead.
-
-- Issue #5021:  doctest.testfile() did not create __name__ and
-  collections.namedtuple() relied on __name__ being defined.
-
-- Backport importlib from Python 3.1. Only the import_module() function has
-  been backported to help facilitate transitions from 2.7 to 3.1.
-
-- Issue #1885: distutils. When running sdist with --formats=tar,gztar
-  the tar file was overriden by the gztar one.
-
-- Issue #4863: distutils.mwerkscompiler has been removed.
-
-- Added a new itertools functions:  combinations_with_replacement()
-  and compress().
-
-- Issue #5032:  added a step argument to itertools.count() and
-  allowed non-integer arguments.
-
-- Fix and properly document the multiprocessing module's logging
-  support, expose the internal levels and provide proper usage
-  examples.
-
-- Issue #1672332: fix unpickling of subnormal floats, which was
-  producing a ValueError on some platforms.
-
-- Issue #3881: Help Tcl to load even when started through the
-  unreadable local symlink to "Program Files" on Vista.
-
-- Issue #4710: Extract directories properly in the zipfile module;
-  allow adding directories to a zipfile.
-
-- Issue #3807: _multiprocessing build fails when configure is passed
-  --without-threads argument. When this occurs, _multiprocessing will
-  be disabled, and not compiled.
-
-- Issue #5008: When a file is opened in append mode with the new IO library,
-  do an explicit seek to the end of file (so that e.g. tell() returns the
-  file size rather than 0). This is consistent with the behaviour of the
-  traditional 2.x file object.
-
-- Issue #5013: Fixed a bug in FileHandler which occurred when the delay
-  parameter was set.
-
-- Issue #4842: Always append a trailing 'L' when pickling longs using
-  pickle protocol 0.  When reading, the 'L' is optional.
-
-- Add the importlib package.
-
-- Issue #4301: Patch the logging module to add processName support, remove
-  _check_logger_class from multiprocessing.
-
-- Issue #3325: Remove python2.x try: except: imports for old cPickle from
-  multiprocessing.
-
-- Issue #4959: inspect.formatargspec now works for keyword only arguments
-  without defaults.
-
-- Issue #3321: ``_multiprocessing.Connection()`` doesn't check handle; added checks
-  for Unix machines for negative handles and large int handles. Without this check
-  it is possible to segfault the interpreter.
-
-- Issue #4449: AssertionError in mp_benchmarks.py, caused by an underlying issue
-  in sharedctypes.py.
-
-- Issue #1225107: inspect.isclass() returned True for instances with a custom
-  __getattr__.
-
-- Issue #3826 and #4791: The socket module now closes the underlying socket
-  appropriately when it is being used via socket.makefile() objects
-  rather than delaying the close by waiting for garbage collection to do it.
-
-- Issue #1696199:  Add collections.Counter() for rapid and convenient
-  counting.
-
-- Issue #3860: GzipFile and BZ2File now support the context manager protocol.
-
-- Issue #4867: Fixed a crash in ctypes when passing a string to a
-  function without defining argtypes.
-
-- Issue #4272: Add an optional argument to the GzipFile constructor to override
-  the timestamp in the gzip stream. The default value remains the current time.
-  The information can be used by e.g. gunzip when decompressing. Patch by
-  Jacques Frechet.
-
-- Restore Python 2.3 compatibility for decimal.py.
-
-- Issue #3638: Remove functions from _tkinter module level that depend on
-  TkappObject to work with multiple threads.
-
-- Issue #4718: Adapt the wsgiref package so that it actually works with
-  Python 3.x, in accordance with the `official amendments of the spec
-  <http://www.wsgi.org/wsgi/Amendments_1.0>`_.
-
-- Issue #4796: Added Decimal.from_float() and Context.create_decimal_from_float()
-  to the decimal module.
-
-- Fractions.from_float() no longer loses precision for integers too big to
-  cast as floats.
-
-- Issue #4812: add missing underscore prefix to some internal-use-only
-  constants in the decimal module.  (Dec_0 becomes _Dec_0, etc.)
-
-- Issue #4790: The nsmallest() and nlargest() functions in the heapq module
-  did unnecessary work in the common case where no key function was specified.
-
-- Issue #4795: inspect.isgeneratorfunction() returns False instead of None when
-  the function is not a generator.
-
-- Issue #4702: Throwing a DistutilsPlatformError instead of IOError in case
-  no MSVC compiler is found under Windows. Original patch by Philip Jenvey.
-
-- Issue #4646: distutils was choking on empty options arg in the setup
-  function. Original patch by Thomas Heller.
-
-- Issue #3767: Convert Tk object to string in tkColorChooser.
-
-- Issue #3248: Allow placing ScrolledText in a PanedWindow.
-
-- Issue #4444: Allow assertRaises() to be used as a context handler, so that
-  the code under test can be written inline if more practical.
-
-- Issue #4739: Add pydoc help topics for symbols, so that e.g. help('@')
-  works as expected in the interactive environment.
-
-- Issue #4756: zipfile.is_zipfile() now supports file-like objects. Patch by
-  Gabriel Genellina.
-
-- Issue #4574: reading an UTF16-encoded text file crashes if \r on 64-char
-  boundary.
-
-- Issue #4223: inspect.getsource() will now correctly display source code
-  for packages loaded via zipimport (or any other conformant PEP 302
-  loader). Original patch by Alexander Belopolsky.
-
-- Issue #4201: pdb can now access and display source code loaded via
-  zipimport (or any other conformant PEP 302 loader). Original patch by
-  Alexander Belopolsky.
-
-- Issue #4197: doctests in modules loaded via zipimport (or any other PEP
-  302 conformant loader) will now work correctly in most cases (they
-  are still subject to the constraints that exist for all code running
-  from inside a module loaded via a PEP 302 loader and attempting to
-  perform IO operations based on __file__). Original patch by
-  Alexander Belopolsky.
-
-- Issues #4082 and #4512: Add runpy support to zipimport in a manner that
-  allows backporting to maintenance branches. Original patch by
-  Alexander Belopolsky.
-
-- Issue #4163: textwrap module: allow word splitting on a hyphen preceded by
-  a non-ASCII letter.
-
-- Issue #4616: TarFile.utime(): Restore directory times on Windows.
-
-- Issue #4021: tokenize.detect_encoding() now raises a SyntaxError when the
-  codec cannot be found.  This is for compatibility with the builtin behavior.
-
-- Issue #4084: Fix max, min, max_mag and min_mag Decimal methods to
-  give correct results in the case where one argument is a quiet NaN
-  and the other is a finite number that requires rounding.
-
-- Issue #4483: _dbm module now builds on systems with gdbm & gdbm_compat
-  libs.
-
-- Added the subprocess.check_call_output() convenience function to get output
-  from a subprocess on success or raise an exception on error.
-
-- Issue #1055234: cgi.parse_header(): Fixed parsing of header parameters to
-  support unusual filenames (such as those containing semi-colons) in
-  Content-Disposition headers.
-
-- Issue #4384: Added logging integration with warnings module using
-  captureWarnings(). This change includes a NullHandler which does nothing;
-  it will be of use to library developers who want to avoid the "No handlers
-  could be found for logger XXX" message which can appear if the library user
-  doesn't configure logging.
-
-- Issue #3741: DISTUTILS_USE_SDK set causes msvc9compiler.py to raise an
-  exception.
-
-- Issue #4529: fix the parser module's validation of try-except-finally
-  statements.
-
-- Issue #4458: getopt.gnu_getopt() now recognizes a single "-" as an argument,
-  not a malformed option.
-
-- Added the subprocess.check_output() convenience function to get output
-  from a subprocess on success or raise an exception on error.
-
-- Issue #4542: On Windows, binascii.crc32 still accepted str as binary input;
-  the corresponding tests now pass.
-
-- Issue #4537: webbrowser.UnixBrowser would fail to open the browser because
-  it was calling the wrong open() function.
-
-- Issue #1055234: cgi.parse_header(): Fixed parsing of header parameters to
-  support unusual filenames (such as those containing semi-colons) in
-  Content-Disposition headers.
-
-- Issue #4861: ctypes.util.find_library(): Robustify. Fix library detection on
-  biarch systems. Try to rely on ldconfig only, without using objdump and gcc.
-
-- Issue #5104: The socket module now raises OverflowError when 16-bit port and
-  protocol numbers are supplied outside the allowed 0-65536 range on bind()
-  and getservbyport().
-
-- Windows locale mapping updated to Vista.
-
-Tools/Demos
------------
-
-- Issue #4704: remove use of cmp() in pybench, bump its version number to 2.1,
-  and make it 2.6-compatible.
-
-- Ttk demos added in Demo/tkinter/ttk/
-
-- Issue #4677: add two list comprehension tests to pybench.
-
-
-Build
------
-
-- Issue #6094: Build correctly with Subversion 1.7.
-
-- Issue #5847: Remove -n switch on "Edit with IDLE" menu item.
-
-- Issue #5726: Make Modules/ld_so_aix return the actual exit code of the
-  linker, rather than always exit successfully. Patch by Floris Bruynooghe.
-
-- Issue #4587: Add configure option --with-dbmliborder=db1:db2:... to specify
-  the order that backends for the dbm extension are checked.
-
-- Link the shared python library with $(MODLIBS).
-
-- Issue #5134: Silence compiler warnings when compiling sqlite with VC++.
-
-- Issue #4494: Fix build with Py_NO_ENABLE_SHARED on Windows.
-
-- Issue #4895: Use _strdup on Windows CE.
-
-- Issue #4472: "configure --enable-shared" now works on OSX
-
-- Issues #4728 and #4060: WORDS_BIGEDIAN is now correct in Universal builds.
-
-- Issue #4389: Add icon to the uninstall entry in "add-and-remove-programs".
-
-- Issue #4289: Remove Cancel button from AdvancedDlg.
-
-- Issue #1656675: Register a drop handler for .py* files on Windows.
-
-- Issue #4120: Exclude manifest from extension modules in VS2008.
-
-- Issue #4091: Install pythonxy.dll in system32 again.
-
-- Issue #4018: Disable "for me" installations on Vista.
-
-- Issue #3758: Add ``patchcheck`` build target to .PHONY.
-
-- Issue #4204: Fixed module build errors on FreeBSD 4.
-
-
-C-API
------
-
-- Issue #6624: yArg_ParseTuple with "s" format when parsing argument with
-  NUL: Bogus TypeError detail string.
-
-- Issue #5175: PyLong_AsUnsignedLongLong now raises OverflowError
-  for negative arguments.  Previously, it raised TypeError.
-
-- Issue #4720: The format for PyArg_ParseTupleAndKeywords can begin with '|'.
-
-- Issue #3632: from the gdb debugger, the 'pyo' macro can now be called when
-  the GIL is released, or owned by another thread.
-
-- Issue #4122: On Windows, fix a compilation error when using the
-  Py_UNICODE_ISSPACE macro in an extension module.
-
-
-Extension Modules
------------------
-
-- Issue #3745: Fix hashlib to always reject unicode and non buffer-api
-  supporting objects as input no matter how it was compiled (built in
-  implementations or external openssl library).
-
-- Issue #4397: Fix occasional test_socket failure on OS X.
-
-- Issue #4279: Fix build of parsermodule under Cygwin.
-
-- Issue #4751: hashlib now releases the GIL when hashing large buffers
-  (with a hardwired threshold of 2048 bytes), allowing better parallelization
-  on multi-CPU systems. Contributed by Lukas Lueg (ebfe) and Victor Stinner.
-
-- Issue #4051: Prevent conflict of UNICODE macros in cPickle.
-
-- Issue #4738: Each zlib object now has a separate lock, allowing to compress
-  or decompress several streams at once on multi-CPU systems. Also, the GIL
-  is now released when computing the CRC of a large buffer. Patch by ebfe.
-
-- Issue #4228: Pack negative values the same way as 2.4 in struct's L format.
-
-- Issue #1040026: Fix os.times result on systems where HZ is incorrect.
-
-- Issues #3167, #3682: Fix test_math failures for log, log10 on Solaris,
-  OpenBSD.
-
-- Issue #4583: array.array would not always prohibit resizing when a buffer
-  has been exported, resulting in an interpreter crash when accessing the
-  buffer.
-
-
-- Issue #5228: Make functools.partial objects can now be pickled.
-
-Tests
------
-
-- Issue #6152: New option '-j'/'--multiprocess' for regrtest allows running
-  regression tests in parallel, shortening the total runtime.
-
-- Issue #5450: Moved tests involving loading tk from Lib/test/test_tcl to
-  Lib/tkinter/test/test_tkinter/test_loadtk. With this, these tests demonstrate
-  the same behaviour as test_ttkguionly (and now also test_tk) which is to
-  skip the tests if DISPLAY is defined but can't be used.
-
-- regrtest no longer treats ImportError as equivalent to SkipTest.  Imports
-  that should cause a test to be skipped are now done using import_module
-  from test support, which does the conversion.
-
-- Issue #5083: New 'gui' resource for regrtest.
-
-
-Docs
-----
-
-
 **(For information about older versions, consult the HISTORY file.)**
diff -r bd8afb90ebf2 Modules/_bz2module.c
--- a/Modules/_bz2module.c
+++ b/Modules/_bz2module.c
@@ -123,7 +123,14 @@
        giving us amortized linear-time behavior. Use a less-than-double
        growth factor to avoid excessive allocation. */
     size_t size = PyBytes_GET_SIZE(*buf);
-    return _PyBytes_Resize(buf, size + (size >> 3) + 6);
+    size_t new_size = size + (size >> 3) + 6;
+    if (new_size > size) {
+        return _PyBytes_Resize(buf, new_size);
+    } else {  /* overflow */
+        PyErr_SetString(PyExc_OverflowError,
+                        "Unable to allocate buffer - output too large");
+        return -1;
+    }
 }
 
 
@@ -169,10 +176,14 @@
             break;
 
         if (c->bzs.avail_out == 0) {
-            if (grow_buffer(&result) < 0)
-                goto error;
-            c->bzs.next_out = PyBytes_AS_STRING(result) + data_size;
-            c->bzs.avail_out = PyBytes_GET_SIZE(result) - data_size;
+            size_t buffer_left = PyBytes_GET_SIZE(result) - data_size;
+            if (buffer_left == 0) {
+                if (grow_buffer(&result) < 0)
+                    goto error;
+                c->bzs.next_out = PyBytes_AS_STRING(result) + data_size;
+                buffer_left = PyBytes_GET_SIZE(result) - data_size;
+            }
+            c->bzs.avail_out = MIN(buffer_left, UINT_MAX);
         }
     }
     if (data_size != PyBytes_GET_SIZE(result))
@@ -390,10 +401,14 @@
             len -= d->bzs.avail_in;
         }
         if (d->bzs.avail_out == 0) {
-            if (grow_buffer(&result) < 0)
-                goto error;
-            d->bzs.next_out = PyBytes_AS_STRING(result) + data_size;
-            d->bzs.avail_out = PyBytes_GET_SIZE(result) - data_size;
+            size_t buffer_left = PyBytes_GET_SIZE(result) - data_size;
+            if (buffer_left == 0) {
+                if (grow_buffer(&result) < 0)
+                    goto error;
+                d->bzs.next_out = PyBytes_AS_STRING(result) + data_size;
+                buffer_left = PyBytes_GET_SIZE(result) - data_size;
+            }
+            d->bzs.avail_out = MIN(buffer_left, UINT_MAX);
         }
     }
     if (data_size != PyBytes_GET_SIZE(result))
diff -r bd8afb90ebf2 Modules/_codecsmodule.c
--- a/Modules/_codecsmodule.c
+++ b/Modules/_codecsmodule.c
@@ -177,12 +177,12 @@
         return NULL;
 
     size = PyBytes_GET_SIZE(str);
-    newsize = 4*size;
-    if (newsize > PY_SSIZE_T_MAX || newsize / 4 != size) {
+    if (size > PY_SSIZE_T_MAX / 4) {
         PyErr_SetString(PyExc_OverflowError,
             "string is too large to encode");
             return NULL;
     }
+    newsize = 4*size;
     v = PyBytes_FromStringAndSize(NULL, newsize);
 
     if (v == NULL) {
diff -r bd8afb90ebf2 Modules/_collectionsmodule.c
--- a/Modules/_collectionsmodule.c
+++ b/Modules/_collectionsmodule.c
@@ -1019,7 +1019,7 @@
 };
 
 PyDoc_STRVAR(deque_doc,
-"deque(iterable[, maxlen]) --> deque object\n\
+"deque([iterable[, maxlen]]) --> deque object\n\
 \n\
 Build an ordered collection with optimized access from its endpoints.");
 
diff -r bd8afb90ebf2 Modules/_csv.c
--- a/Modules/_csv.c
+++ b/Modules/_csv.c
@@ -13,8 +13,6 @@
 #include "Python.h"
 #include "structmember.h"
 
-#define IS_BASESTRING(o) \
-    PyUnicode_Check(o)
 
 typedef struct {
     PyObject *error_obj;   /* CSV exception */
@@ -248,6 +246,7 @@
                     name);
                 return -1;
             }
+            /* PyUnicode_READY() is called in PyUnicode_GetLength() */
             if (len > 0)
                 *target = PyUnicode_READ_CHAR(src, 0);
         }
@@ -263,12 +262,14 @@
     else {
         if (src == Py_None)
             *target = NULL;
-        else if (!IS_BASESTRING(src)) {
+        else if (!PyUnicode_Check(src)) {
             PyErr_Format(PyExc_TypeError,
                          "\"%s\" must be a string", name);
             return -1;
         }
         else {
+            if (PyUnicode_READY(src) == -1)
+                return -1;
             Py_XDECREF(*target);
             Py_INCREF(src);
             *target = src;
@@ -357,7 +358,7 @@
         return NULL;
 
     if (dialect != NULL) {
-        if (IS_BASESTRING(dialect)) {
+        if (PyUnicode_Check(dialect)) {
             dialect = get_dialect_from_registry(dialect);
             if (dialect == NULL)
                 return NULL;
@@ -788,9 +789,14 @@
         lineobj = PyIter_Next(self->input_iter);
         if (lineobj == NULL) {
             /* End of input OR exception */
-            if (!PyErr_Occurred() && self->field_len != 0)
-                PyErr_Format(_csvstate_global->error_obj,
-                             "newline inside string");
+            if (!PyErr_Occurred() && (self->field_len != 0 ||
+                                      self->state == IN_QUOTED_FIELD)) {
+                if (self->dialect->strict)
+                    PyErr_SetString(_csvstate_global->error_obj,
+                                    "unexpected end of data");
+                else if (parse_save_field(self) >= 0)
+                    break;
+            }
             return NULL;
         }
         if (!PyUnicode_Check(lineobj)) {
@@ -803,6 +809,10 @@
             Py_DECREF(lineobj);
             return NULL;
         }
+        if (PyUnicode_READY(lineobj) == -1) {
+            Py_DECREF(lineobj);
+            return NULL;
+        }
         ++self->line_num;
         kind = PyUnicode_KIND(lineobj);
         data = PyUnicode_DATA(lineobj);
@@ -1103,6 +1113,8 @@
     Py_ssize_t rec_len;
 
     if (field != NULL) {
+        if (PyUnicode_READY(field) == -1)
+            return 0;
         field_kind = PyUnicode_KIND(field);
         field_data = PyUnicode_DATA(field);
         field_len = PyUnicode_GET_LENGTH(field);
@@ -1398,11 +1410,13 @@
 
     if (!PyArg_UnpackTuple(args, "", 1, 2, &name_obj, &dialect_obj))
         return NULL;
-    if (!IS_BASESTRING(name_obj)) {
+    if (!PyUnicode_Check(name_obj)) {
         PyErr_SetString(PyExc_TypeError,
-                        "dialect name must be a string or unicode");
+                        "dialect name must be a string");
         return NULL;
     }
+    if (PyUnicode_READY(name_obj) == -1)
+        return NULL;
     dialect = _call_dialect(dialect_obj, kwargs);
     if (dialect == NULL)
         return NULL;
diff -r bd8afb90ebf2 Modules/_ctypes/_ctypes.c
--- a/Modules/_ctypes/_ctypes.c
+++ b/Modules/_ctypes/_ctypes.c
@@ -2442,11 +2442,9 @@
 static int
 PyCData_clear(CDataObject *self)
 {
-    StgDictObject *dict = PyObject_stgdict((PyObject *)self);
-    assert(dict); /* Cannot be NULL for CDataObject instances */
     Py_CLEAR(self->b_objects);
     if ((self->b_needsfree)
-        && ((size_t)dict->size > sizeof(self->b_value)))
+        && _CDataObject_HasExternalBuffer(self))
         PyMem_Free(self->b_ptr);
     self->b_ptr = NULL;
     Py_CLEAR(self->b_base);
diff -r bd8afb90ebf2 Modules/_ctypes/callproc.c
--- a/Modules/_ctypes/callproc.c
+++ b/Modules/_ctypes/callproc.c
@@ -1658,7 +1658,7 @@
         obj->b_size = size;
         goto done;
     }
-    if (obj->b_size <= sizeof(obj->b_value)) {
+    if (!_CDataObject_HasExternalBuffer(obj)) {
         /* We are currently using the objects default buffer, but it
            isn't large enough any more. */
         void *ptr = PyMem_Malloc(size);
diff -r bd8afb90ebf2 Modules/_ctypes/ctypes.h
--- a/Modules/_ctypes/ctypes.h
+++ b/Modules/_ctypes/ctypes.h
@@ -116,6 +116,7 @@
 extern PyTypeObject PyCData_Type;
 #define CDataObject_CheckExact(v)       ((v)->ob_type == &PyCData_Type)
 #define CDataObject_Check(v)            PyObject_TypeCheck(v, &PyCData_Type)
+#define _CDataObject_HasExternalBuffer(v)  ((v)->b_ptr != (char *)&(v)->b_value)
 
 extern PyTypeObject PyCSimpleType_Type;
 #define PyCSimpleTypeObject_CheckExact(v)       ((v)->ob_type == &PyCSimpleType_Type)
diff -r bd8afb90ebf2 Modules/_cursesmodule.c
--- a/Modules/_cursesmodule.c
+++ b/Modules/_cursesmodule.c
@@ -1938,6 +1938,7 @@
     if (ascii == NULL)
         return -1;
     encoding = strdup(PyBytes_AS_STRING(ascii));
+    Py_DECREF(ascii);
     if (encoding == NULL) {
         PyErr_NoMemory();
         return -1;
diff -r bd8afb90ebf2 Modules/_datetimemodule.c
--- a/Modules/_datetimemodule.c
+++ b/Modules/_datetimemodule.c
@@ -1265,14 +1265,13 @@
         assert(ptoappend != NULL);
         assert(ntoappend > 0);
         while (usednew + ntoappend > totalnew) {
-            size_t bigger = totalnew << 1;
-            if ((bigger >> 1) != totalnew) { /* overflow */
+            if (totalnew > (PY_SSIZE_T_MAX >> 1)) { /* overflow */
                 PyErr_NoMemory();
                 goto Done;
             }
-            if (_PyBytes_Resize(&newfmt, bigger) < 0)
+            totalnew <<= 1;
+            if (_PyBytes_Resize(&newfmt, totalnew) < 0)
                 goto Done;
-            totalnew = bigger;
             pnew = PyBytes_AsString(newfmt) + usednew;
         }
         memcpy(pnew, ptoappend, ntoappend);
diff -r bd8afb90ebf2 Modules/_decimal/_decimal.c
--- a/Modules/_decimal/_decimal.c
+++ b/Modules/_decimal/_decimal.c
@@ -1241,50 +1241,53 @@
       "prec", "rounding", "Emin", "Emax", "capitals", "clamp",
       "flags", "traps", NULL
     };
-    PyObject *rounding = NULL;
-    PyObject *traps = NULL;
-    PyObject *status = NULL;
-    mpd_context_t *ctx, t;
-    int capitals = 1;
+    PyObject *prec = Py_None;
+    PyObject *rounding = Py_None;
+    PyObject *emin = Py_None;
+    PyObject *emax = Py_None;
+    PyObject *capitals = Py_None;
+    PyObject *clamp = Py_None;
+    PyObject *status = Py_None;
+    PyObject *traps = Py_None;
     int ret;
 
     assert(PyTuple_Check(args));
-    ctx = CTX(self);
-
-    t = *ctx;
+
     if (!PyArg_ParseTupleAndKeywords(
             args, kwds,
-            "|nOnniiOO", kwlist,
-            &t.prec, &rounding, &t.emin, &t.emax, &capitals, &t.clamp,
-            &status, &traps
+            "|OOOOOOOO", kwlist,
+            &prec, &rounding, &emin, &emax, &capitals, &clamp, &status, &traps
          )) {
         return -1;
     }
-    if (rounding != NULL) {
-        t.round = getround(rounding);
-        if (t.round < 0) {
+
+    if (prec != Py_None && context_setprec(self, prec, NULL) < 0) {
+        return -1;
+    }
+    if (emin != Py_None && context_setemin(self, emin, NULL) < 0) {
+        return -1;
+    }
+    if (emax != Py_None && context_setemax(self, emax, NULL) < 0) {
+        return -1;
+    }
+    if (capitals != Py_None && context_setcapitals(self, capitals, NULL) < 0) {
+        return -1;
+    }
+    if (clamp != Py_None && context_setclamp(self, clamp, NULL) < 0) {
+       return -1;
+    }
+
+    if (rounding != Py_None) {
+        int x = getround(rounding);
+        if (x < 0) {
             return -1;
         }
-    }
-
-    if (!mpd_qsetprec(ctx, t.prec) ||
-        !mpd_qsetemin(ctx, t.emin) ||
-        !mpd_qsetemax(ctx, t.emax) ||
-        !mpd_qsetclamp(ctx, t.clamp)) {
-        return value_error_int("invalid context");
-    }
-    if (!mpd_qsetround(ctx, t.round) ||
-        !mpd_qsettraps(ctx, t.traps) ||
-        !mpd_qsetstatus(ctx, t.status)) {
-        return type_error_int("invalid context");
-    }
-
-    if (capitals != 0 && capitals != 1) {
-        return value_error_int("invalid context");
-    }
-    CtxCaps(self) = capitals;
-
-    if (traps != NULL) {
+        if (!mpd_qsetround(CTX(self), x)) {
+            return type_error_int(invalid_rounding_err);
+        }
+    }
+
+    if (traps != Py_None) {
         if (PyList_Check(traps)) {
             ret = context_settraps_list(self, traps);
         }
@@ -1300,7 +1303,7 @@
             return ret;
         }
     }
-    if (status != NULL) {
+    if (status != Py_None) {
         if (PyList_Check(status)) {
             ret = context_setstatus_list(self, status);
         }
@@ -1486,7 +1489,10 @@
     }
 
 #define CONTEXT_CHECK_VA(obj) \
-    if (!PyDecContext_Check(obj)) {                 \
+    if (obj == Py_None) {                           \
+        CURRENT_CONTEXT(obj);                       \
+    }                                               \
+    else if (!PyDecContext_Check(obj)) {            \
         PyErr_SetString(PyExc_TypeError,            \
             "optional argument must be a context"); \
         return NULL;                                \
@@ -1715,18 +1721,25 @@
  * owns one reference to the global (outer) context and one
  * to the local (inner) context. */
 static PyObject *
-ctxmanager_new(PyTypeObject *type UNUSED, PyObject *args)
+ctxmanager_new(PyTypeObject *type UNUSED, PyObject *args, PyObject *kwds)
 {
+    static char *kwlist[] = {"ctx", NULL};
     PyDecContextManagerObject *self;
-    PyObject *local;
+    PyObject *local = Py_None;
     PyObject *global;
 
     CURRENT_CONTEXT(global);
-    local = global;
-    if (!PyArg_ParseTuple(args, "|O", &local)) {
+    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist, &local)) {
         return NULL;
     }
-    CONTEXT_CHECK_VA(local);
+    if (local == Py_None) {
+        local = global;
+    }
+    else if (!PyDecContext_Check(local)) {
+        PyErr_SetString(PyExc_TypeError,
+            "optional argument must be a context");
+        return NULL;
+    }
 
     self = PyObject_New(PyDecContextManagerObject,
                         &PyDecContextManager_Type);
@@ -1892,7 +1905,9 @@
     Py_ssize_t j, len;
     int d;
 
-    assert(PyUnicode_IS_READY(u));
+    if (PyUnicode_READY(u) == -1) {
+        return NULL;
+    }
 
     kind = PyUnicode_KIND(u);
     data = PyUnicode_DATA(u);
@@ -2338,6 +2353,32 @@
     return dec;
 }
 
+/* Return a new PyDecObject or a subtype from a Decimal. */
+static PyObject *
+PyDecType_FromDecimalExact(PyTypeObject *type, PyObject *v, PyObject *context)
+{
+    PyObject *dec;
+    uint32_t status = 0;
+
+    if (type == &PyDec_Type && PyDec_CheckExact(v)) {
+        Py_INCREF(v);
+        return v;
+    }
+
+    dec = PyDecType_New(type);
+    if (dec == NULL) {
+        return NULL;
+    }
+
+    mpd_qcopy(MPD(dec), MPD(v), &status);
+    if (dec_addstatus(context, status)) {
+        Py_DECREF(dec);
+        return NULL;
+    }
+
+    return dec;
+}
+
 static PyObject *
 sequence_as_tuple(PyObject *v, PyObject *ex, const char *mesg)
 {
@@ -2642,8 +2683,7 @@
         return PyDecType_FromSsizeExact(type, 0, context);
     }
     else if (PyDec_Check(v)) {
-        Py_INCREF(v);
-        return v;
+        return PyDecType_FromDecimalExact(type, v, context);
     }
     else if (PyUnicode_Check(v)) {
         return PyDecType_FromUnicodeExactWS(type, v, context);
@@ -2722,9 +2762,8 @@
 {
     static char *kwlist[] = {"value", "context", NULL};
     PyObject *v = NULL;
-    PyObject *context;
-
-    CURRENT_CONTEXT(context);
+    PyObject *context = Py_None;
+
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO", kwlist,
                                      &v, &context)) {
         return NULL;
@@ -3288,20 +3327,23 @@
 {
     static char *kwlist[] = {"rounding", "context", NULL};
     PyObject *result;
-    PyObject *context;
+    PyObject *rounding = Py_None;
+    PyObject *context = Py_None;
     uint32_t status = 0;
     mpd_context_t workctx;
-    int round = -1;
-
-    CURRENT_CONTEXT(context);
-    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|iO", kwlist,
-                                     &round, &context)) {
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO", kwlist,
+                                     &rounding, &context)) {
         return NULL;
     }
     CONTEXT_CHECK_VA(context);
 
     workctx = *CTX(context);
-    if (round >= 0) {
+    if (rounding != Py_None) {
+        int round = getround(rounding);
+        if (round < 0) {
+            return NULL;
+        }
         if (!mpd_qsetround(&workctx, round)) {
             return type_error_ptr(invalid_rounding_err);
         }
@@ -3326,20 +3368,23 @@
 {
     static char *kwlist[] = {"rounding", "context", NULL};
     PyObject *result;
-    PyObject *context;
+    PyObject *rounding = Py_None;
+    PyObject *context = Py_None;
     uint32_t status = 0;
     mpd_context_t workctx;
-    int round = -1;
-
-    CURRENT_CONTEXT(context);
-    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|iO", kwlist,
-                                     &round, &context)) {
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO", kwlist,
+                                     &rounding, &context)) {
         return NULL;
     }
     CONTEXT_CHECK_VA(context);
 
     workctx = *CTX(context);
-    if (round >= 0) {
+    if (rounding != Py_None) {
+        int round = getround(rounding);
+        if (round < 0) {
+            return NULL;
+        }
         if (!mpd_qsetround(&workctx, round)) {
             return type_error_ptr(invalid_rounding_err);
         }
@@ -3606,9 +3651,8 @@
 dec_##MPDFUNC(PyObject *self, PyObject *args, PyObject *kwds)             \
 {                                                                         \
     static char *kwlist[] = {"context", NULL};                            \
-    PyObject *context;                                                    \
+    PyObject *context = Py_None;                                          \
                                                                           \
-    CURRENT_CONTEXT(context);                                             \
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist,            \
                                      &context)) {                         \
         return NULL;                                                      \
@@ -3625,10 +3669,9 @@
 {                                                              \
     static char *kwlist[] = {"context", NULL};                 \
     PyObject *result;                                          \
-    PyObject *context;                                         \
+    PyObject *context = Py_None;                               \
     uint32_t status = 0;                                       \
                                                                \
-    CURRENT_CONTEXT(context);                                  \
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist, \
                                      &context)) {              \
         return NULL;                                           \
@@ -3648,49 +3691,18 @@
     return result;                                             \
 }
 
-/* Unary function with an optional context arg. The actual MPDFUNC
-   only takes a status parameter. */
-#define Dec_UnaryFuncVA_NO_CTX(MPDFUNC) \
-static PyObject *                                              \
-dec_##MPDFUNC(PyObject *self, PyObject *args, PyObject *kwds)  \
-{                                                              \
-    static char *kwlist[] = {"context", NULL};                 \
-    PyObject *result;                                          \
-    PyObject *context;                                         \
-    uint32_t status = 0;                                       \
-                                                               \
-    CURRENT_CONTEXT(context);                                  \
-    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist, \
-                                     &context)) {              \
-        return NULL;                                           \
-    }                                                          \
-    CONTEXT_CHECK_VA(context);                                 \
-                                                               \
-    if ((result = dec_alloc()) == NULL) {                      \
-        return NULL;                                           \
-    }                                                          \
-                                                               \
-    MPDFUNC(MPD(result), MPD(self), &status);                  \
-    if (dec_addstatus(context, status)) {                      \
-        Py_DECREF(result);                                     \
-        return NULL;                                           \
-    }                                                          \
-                                                               \
-    return result;                                             \
-}
-
 /* Binary function with an optional context arg. */
 #define Dec_BinaryFuncVA(MPDFUNC) \
 static PyObject *                                                \
 dec_##MPDFUNC(PyObject *self, PyObject *args, PyObject *kwds)    \
 {                                                                \
     static char *kwlist[] = {"other", "context", NULL};          \
-    PyObject *other, *context;                                   \
+    PyObject *other;                                             \
     PyObject *a, *b;                                             \
     PyObject *result;                                            \
+    PyObject *context = Py_None;                                 \
     uint32_t status = 0;                                         \
                                                                  \
-    CURRENT_CONTEXT(context);                                    \
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O", kwlist,  \
                                      &other, &context)) {        \
         return NULL;                                             \
@@ -3723,11 +3735,11 @@
 dec_##MPDFUNC(PyObject *self, PyObject *args, PyObject *kwds)   \
 {                                                               \
     static char *kwlist[] = {"other", "context", NULL};         \
-    PyObject *other, *context;                                  \
+    PyObject *context = Py_None;                                \
+    PyObject *other;                                            \
     PyObject *a, *b;                                            \
     PyObject *result;                                           \
                                                                 \
-    CURRENT_CONTEXT(context);                                   \
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O", kwlist, \
                                      &other, &context)) {       \
         return NULL;                                            \
@@ -3754,12 +3766,12 @@
 dec_##MPDFUNC(PyObject *self, PyObject *args, PyObject *kwds)            \
 {                                                                        \
     static char *kwlist[] = {"other", "third", "context", NULL};         \
-    PyObject *other, *third, *context;                                   \
+    PyObject *other, *third;                                             \
     PyObject *a, *b, *c;                                                 \
     PyObject *result;                                                    \
+    PyObject *context = Py_None;                                         \
     uint32_t status = 0;                                                 \
                                                                          \
-    CURRENT_CONTEXT(context);                                            \
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO|O", kwlist,         \
                                      &other, &third, &context)) {        \
         return NULL;                                                     \
@@ -3992,9 +4004,45 @@
     return result;
 }
 
-/* Unary functions, optional context arg for conversion errors */
-Dec_UnaryFuncVA_NO_CTX(mpd_qcopy_abs)
-Dec_UnaryFuncVA_NO_CTX(mpd_qcopy_negate)
+static PyObject *
+dec_mpd_qcopy_abs(PyObject *self, PyObject *dummy UNUSED)
+{
+    PyObject *result;
+    uint32_t status = 0;
+
+    if ((result = dec_alloc()) == NULL) {
+        return NULL;
+    }
+
+    mpd_qcopy_abs(MPD(result), MPD(self), &status);
+    if (status & MPD_Malloc_error) {
+        Py_DECREF(result);
+        PyErr_NoMemory();
+        return NULL;
+    }
+
+    return result;
+}
+
+static PyObject *
+dec_mpd_qcopy_negate(PyObject *self, PyObject *dummy UNUSED)
+{
+    PyObject *result;
+    uint32_t status = 0;
+
+    if ((result = dec_alloc()) == NULL) {
+        return NULL;
+    }
+
+    mpd_qcopy_negate(MPD(result), MPD(self), &status);
+    if (status & MPD_Malloc_error) {
+        Py_DECREF(result);
+        PyErr_NoMemory();
+        return NULL;
+    }
+
+    return result;
+}
 
 /* Unary functions, optional context arg */
 Dec_UnaryFuncVA(mpd_qinvert)
@@ -4004,10 +4052,9 @@
 dec_mpd_class(PyObject *self, PyObject *args, PyObject *kwds)
 {
     static char *kwlist[] = {"context", NULL};
-    PyObject *context;
+    PyObject *context = Py_None;
     const char *cp;
 
-    CURRENT_CONTEXT(context);
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist,
                                      &context)) {
         return NULL;
@@ -4023,11 +4070,10 @@
 {
     static char *kwlist[] = {"context", NULL};
     PyObject *result;
-    PyObject *context;
+    PyObject *context = Py_None;
     mpd_ssize_t size;
     char *s;
 
-    CURRENT_CONTEXT(context);
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", kwlist,
                                      &context)) {
         return NULL;
@@ -4054,12 +4100,12 @@
 dec_mpd_qcopy_sign(PyObject *self, PyObject *args, PyObject *kwds)
 {
     static char *kwlist[] = {"other", "context", NULL};
-    PyObject *other, *context;
+    PyObject *other;
     PyObject *a, *b;
     PyObject *result;
+    PyObject *context = Py_None;
     uint32_t status = 0;
 
-    CURRENT_CONTEXT(context);
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O", kwlist,
                                      &other, &context)) {
         return NULL;
@@ -4089,11 +4135,11 @@
 dec_mpd_same_quantum(PyObject *self, PyObject *args, PyObject *kwds)
 {
     static char *kwlist[] = {"other", "context", NULL};
-    PyObject *other, *context;
+    PyObject *other;
     PyObject *a, *b;
     PyObject *result;
-
-    CURRENT_CONTEXT(context);
+    PyObject *context = Py_None;
+
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O", kwlist,
                                      &other, &context)) {
         return NULL;
@@ -4121,22 +4167,25 @@
 dec_mpd_qquantize(PyObject *v, PyObject *args, PyObject *kwds)
 {
     static char *kwlist[] = {"exp", "rounding", "context", NULL};
-    PyObject *w, *context;
-    PyObject *a, *b;
+    PyObject *rounding = Py_None;
+    PyObject *context = Py_None;
+    PyObject *w, *a, *b;
     PyObject *result;
     uint32_t status = 0;
     mpd_context_t workctx;
-    int round = -1;
-
-    CURRENT_CONTEXT(context);
-    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|iO", kwlist,
-                                     &w, &round, &context)) {
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|OO", kwlist,
+                                     &w, &rounding, &context)) {
         return NULL;
     }
     CONTEXT_CHECK_VA(context);
 
     workctx = *CTX(context);
-    if (round >= 0) {
+    if (rounding != Py_None) {
+        int round = getround(rounding);
+        if (round < 0) {
+            return NULL;
+        }
         if (!mpd_qsetround(&workctx, round)) {
             return type_error_ptr(invalid_rounding_err);
         }
@@ -4558,8 +4607,8 @@
   { "radix", dec_mpd_radix, METH_NOARGS, doc_radix },
 
   /* Unary functions, optional context arg for conversion errors */
-  { "copy_abs", (PyCFunction)dec_mpd_qcopy_abs, METH_VARARGS|METH_KEYWORDS, doc_copy_abs },
-  { "copy_negate", (PyCFunction)dec_mpd_qcopy_negate, METH_VARARGS|METH_KEYWORDS, doc_copy_negate },
+  { "copy_abs", dec_mpd_qcopy_abs, METH_NOARGS, doc_copy_abs },
+  { "copy_negate", dec_mpd_qcopy_negate, METH_NOARGS, doc_copy_negate },
 
   /* Unary functions, optional context arg */
   { "logb", (PyCFunction)dec_mpd_qlogb, METH_VARARGS|METH_KEYWORDS, doc_logb },
@@ -4889,7 +4938,7 @@
 ctx_mpd_qpow(PyObject *context, PyObject *args, PyObject *kwds)
 {
     static char *kwlist[] = {"a", "b", "modulo", NULL};
-    PyObject *base, *exp, *mod = NULL;
+    PyObject *base, *exp, *mod = Py_None;
     PyObject *a, *b, *c = NULL;
     PyObject *result;
     uint32_t status = 0;
@@ -4901,7 +4950,7 @@
 
     CONVERT_BINOP_RAISE(&a, &b, base, exp, context);
 
-    if (mod != NULL) {
+    if (mod != Py_None) {
         if (!convert_op(TYPE_ERR, &c, mod, context)) {
             Py_DECREF(a);
             Py_DECREF(b);
@@ -5334,7 +5383,7 @@
 {
   { "getcontext", (PyCFunction)PyDec_GetCurrentContext, METH_NOARGS, doc_getcontext},
   { "setcontext", (PyCFunction)PyDec_SetCurrentContext, METH_O, doc_setcontext},
-  { "localcontext", (PyCFunction)ctxmanager_new, METH_VARARGS, doc_localcontext},
+  { "localcontext", (PyCFunction)ctxmanager_new, METH_VARARGS|METH_KEYWORDS, doc_localcontext},
 #ifdef EXTRA_FUNCTIONALITY
   { "IEEEContext", (PyCFunction)ieee_context, METH_O, doc_ieee_context},
 #endif
diff -r bd8afb90ebf2 Modules/_decimal/docstrings.h
--- a/Modules/_decimal/docstrings.h
+++ b/Modules/_decimal/docstrings.h
@@ -28,10 +28,10 @@
 \n");
 
 PyDoc_STRVAR(doc_localcontext,"\n\
-localcontext(c) - Return a context manager that will set the default context\n\
-to a copy of c on entry to the with-statement and restore the previous default\n\
-context when exiting the with-statement. If no context is specified, a copy of\n\
-the current default context is used.\n\
+localcontext(ctx=None) - Return a context manager that will set the default\n\
+context to a copy of ctx on entry to the with-statement and restore the\n\
+previous default context when exiting the with-statement. If no context is\n\
+specified, a copy of the current default context is used.\n\
 \n");
 
 #ifdef EXTRA_FUNCTIONALITY
@@ -49,8 +49,7 @@
 /******************************************************************************/
 
 PyDoc_STRVAR(doc_decimal,"\n\
-Decimal([value[, context]]): Construct a new Decimal object from value.\n\
-\n\
+Decimal(value=\"0\", context=None): Construct a new Decimal object.\n\
 value can be an integer, string, tuple, or another Decimal object.\n\
 If no value is given, return Decimal('0'). The context does not affect\n\
 the conversion and is only passed to determine if the InvalidOperation\n\
@@ -74,7 +73,7 @@
 \n");
 
 PyDoc_STRVAR(doc_compare,"\n\
-compare(other[, context]) - Compare self to other. Return a decimal value:\n\
+compare(other, context=None) - Compare self to other. Return a decimal value:\n\
 \n\
     a or b is a NaN ==> Decimal('NaN')\n\
     a < b           ==> Decimal('-1')\n\
@@ -83,16 +82,16 @@
 \n");
 
 PyDoc_STRVAR(doc_compare_signal,"\n\
-compare_signal(other[, context]) - Identical to compare, except that\n\
+compare_signal(other, context=None) - Identical to compare, except that\n\
 all NaNs signal.\n\
 \n");
 
 PyDoc_STRVAR(doc_compare_total,"\n\
-compare_total(other) - Compare two operands using their abstract representation\n\
-rather than their numerical value. Similar to the compare() method, but the\n\
-result gives a total ordering on Decimal instances. Two Decimal instances with\n\
-the same numeric value but different representations compare unequal in this\n\
-ordering:\n\
+compare_total(other, context=None) - Compare two operands using their\n\
+abstract representation rather than their numerical value. Similar to the\n\
+compare() method, but the result gives a total ordering on Decimal instances.\n\
+Two Decimal instances with the same numeric value but different representations\n\
+compare unequal in this ordering:\n\
 \n\
     >>> Decimal('12.0').compare_total(Decimal('12'))\n\
     Decimal('-1')\n\
@@ -102,13 +101,21 @@
 Decimal('-1') if the first operand is lower in the total order than the second,\n\
 and Decimal('1') if the first operand is higher in the total order than the\n\
 second operand. See the specification for details of the total order.\n\
+\n\
+This operation is unaffected by context and is quiet: no flags are changed\n\
+and no rounding is performed. As an exception, the C version may raise\n\
+InvalidOperation if the second operand cannot be converted exactly.\n\
 \n");
 
 PyDoc_STRVAR(doc_compare_total_mag,"\n\
-compare_total_mag(other) - Compare two operands using their abstract\n\
-representation rather than their value as in compare_total(), but\n\
-ignoring the sign of each operand.  x.compare_total_mag(y) is\n\
-equivalent to x.copy_abs().compare_total(y.copy_abs()).\n\
+compare_total_mag(other, context=None) - Compare two operands using their\n\
+abstract representation rather than their value as in compare_total(), but\n\
+ignoring the sign of each operand. x.compare_total_mag(y) is equivalent to\n\
+x.copy_abs().compare_total(y.copy_abs()).\n\
+\n\
+This operation is unaffected by context and is quiet: no flags are changed\n\
+and no rounding is performed. As an exception, the C version may raise\n\
+InvalidOperation if the second operand cannot be converted exactly.\n\
 \n");
 
 PyDoc_STRVAR(doc_conjugate,"\n\
@@ -117,31 +124,32 @@
 
 PyDoc_STRVAR(doc_copy_abs,"\n\
 copy_abs() - Return the absolute value of the argument. This operation\n\
-is unaffected by the context and is quiet: no flags are changed and no\n\
-rounding is performed.\n\
+is unaffected by context and is quiet: no flags are changed and no rounding\n\
+is performed.\n\
 \n");
 
 PyDoc_STRVAR(doc_copy_negate,"\n\
 copy_negate() - Return the negation of the argument. This operation is\n\
-unaffected by the context and is quiet: no flags are changed and no\n\
-rounding is performed.\n\
+unaffected by context and is quiet: no flags are changed and no rounding\n\
+is performed.\n\
 \n");
 
 PyDoc_STRVAR(doc_copy_sign,"\n\
-copy_sign(other) - Return a copy of the first operand with the sign set\n\
-to be the same as the sign of the second operand. For example:\n\
+copy_sign(other, context=None) - Return a copy of the first operand with\n\
+the sign set to be the same as the sign of the second operand. For example:\n\
 \n\
     >>> Decimal('2.3').copy_sign(Decimal('-1.5'))\n\
     Decimal('-2.3')\n\
 \n\
-This operation is unaffected by the context and is quiet: no flags are\n\
-changed and no rounding is performed.\n\
+This operation is unaffected by context and is quiet: no flags are changed\n\
+and no rounding is performed. As an exception, the C version may raise\n\
+InvalidOperation if the second operand cannot be converted exactly.\n\
 \n");
 
 PyDoc_STRVAR(doc_exp,"\n\
-exp([context]) - Return the value of the (natural) exponential function e**x\n\
-at the given number. The function always uses the ROUND_HALF_EVEN mode and\n\
-the result is correctly rounded.\n\
+exp(context=None) - Return the value of the (natural) exponential function\n\
+e**x at the given number. The function always uses the ROUND_HALF_EVEN mode\n\
+and the result is correctly rounded.\n\
 \n");
 
 PyDoc_STRVAR(doc_from_float,"\n\
@@ -161,7 +169,7 @@
 \n");
 
 PyDoc_STRVAR(doc_fma,"\n\
-fma(other, third[, context]) - Fused multiply-add. Return self*other+third\n\
+fma(other, third, context=None) - Fused multiply-add. Return self*other+third\n\
 with no rounding of the intermediate product self*other.\n\
 \n\
     >>> Decimal(2).fma(3, 5)\n\
@@ -191,9 +199,9 @@
 \n");
 
 PyDoc_STRVAR(doc_is_normal,"\n\
-is_normal([context]) - Return True if the argument is a normal finite non-zero\n\
-number with an adjusted exponent greater than or equal to Emin. Return False\n\
-if the argument is zero, subnormal, infinite or a NaN.\n\
+is_normal(context=None) - Return True if the argument is a normal finite\n\
+non-zero number with an adjusted exponent greater than or equal to Emin.\n\
+Return False if the argument is zero, subnormal, infinite or a NaN.\n\
 \n");
 
 PyDoc_STRVAR(doc_is_qnan,"\n\
@@ -210,8 +218,8 @@
 \n");
 
 PyDoc_STRVAR(doc_is_subnormal,"\n\
-is_subnormal([context]) - Return True if the argument is subnormal, and False\n\
-otherwise. A number is subnormal if it is non-zero, finite, and has an\n\
+is_subnormal(context=None) - Return True if the argument is subnormal, and\n\
+False otherwise. A number is subnormal if it is non-zero, finite, and has an\n\
 adjusted exponent less than Emin.\n\
 \n");
 
@@ -221,94 +229,94 @@
 \n");
 
 PyDoc_STRVAR(doc_ln,"\n\
-ln([context]) - Return the natural (base e) logarithm of the operand.\n\
+ln(context=None) - Return the natural (base e) logarithm of the operand.\n\
 The function always uses the ROUND_HALF_EVEN mode and the result is\n\
 correctly rounded.\n\
 \n");
 
 PyDoc_STRVAR(doc_log10,"\n\
-log10([context]) - Return the base ten logarithm of the operand.\n\
+log10(context=None) - Return the base ten logarithm of the operand.\n\
 The function always uses the ROUND_HALF_EVEN mode and the result is\n\
 correctly rounded.\n\
 \n");
 
 PyDoc_STRVAR(doc_logb,"\n\
-logb([context]) - For a non-zero number, return the adjusted exponent\n\
+logb(context=None) - For a non-zero number, return the adjusted exponent\n\
 of the operand as a Decimal instance. If the operand is a zero, then\n\
 Decimal('-Infinity') is returned and the DivisionByZero condition is\n\
 raised. If the operand is an infinity then Decimal('Infinity') is returned.\n\
 \n");
 
 PyDoc_STRVAR(doc_logical_and,"\n\
-logical_and(other[, context]) - Return the digit-wise and of the two\n\
+logical_and(other, context=None) - Return the digit-wise and of the two\n\
 (logical) operands.\n\
 \n");
 
 PyDoc_STRVAR(doc_logical_invert,"\n\
-logical_invert([context]) - Return the digit-wise inversion of the\n\
+logical_invert(context=None) - Return the digit-wise inversion of the\n\
 (logical) operand.\n\
 \n");
 
 PyDoc_STRVAR(doc_logical_or,"\n\
-logical_or(other[, context]) - Return the digit-wise or of the two\n\
+logical_or(other, context=None) - Return the digit-wise or of the two\n\
 (logical) operands.\n\
 \n");
 
 PyDoc_STRVAR(doc_logical_xor,"\n\
-logical_xor(other[, context]) - Return the digit-wise exclusive or of the\n\
+logical_xor(other, context=None) - Return the digit-wise exclusive or of the\n\
 two (logical) operands.\n\
 \n");
 
 PyDoc_STRVAR(doc_max,"\n\
-max(other[, context]) - Maximum of self and other. If one operand is a quiet\n\
-NaN and the other is numeric, the numeric operand is returned.\n\
+max(other, context=None) - Maximum of self and other. If one operand is a\n\
+quiet NaN and the other is numeric, the numeric operand is returned.\n\
 \n");
 
 PyDoc_STRVAR(doc_max_mag,"\n\
-max_mag(other[, context]) - Similar to the max() method, but the comparison is\n\
-done using the absolute values of the operands.\n\
+max_mag(other, context=None) - Similar to the max() method, but the\n\
+comparison is done using the absolute values of the operands.\n\
 \n");
 
 PyDoc_STRVAR(doc_min,"\n\
-min(other[, context]) - Minimum of self and other. If one operand is a quiet\n\
-NaN and the other is numeric, the numeric operand is returned.\n\
+min(other, context=None) - Minimum of self and other. If one operand is a\n\
+quiet NaN and the other is numeric, the numeric operand is returned.\n\
 \n");
 
 PyDoc_STRVAR(doc_min_mag,"\n\
-min_mag(other[, context]) - Similar to the min() method, but the comparison is\n\
-done using the absolute values of the operands.\n\
+min_mag(other, context=None) - Similar to the min() method, but the\n\
+comparison is done using the absolute values of the operands.\n\
 \n");
 
 PyDoc_STRVAR(doc_next_minus,"\n\
-next_minus([context]) - Return the largest number representable in the given\n\
-context (or in the current default context if no context is given) that is\n\
-smaller than the given operand.\n\
+next_minus(context=None) - Return the largest number representable in the\n\
+given context (or in the current default context if no context is given) that\n\
+is smaller than the given operand.\n\
 \n");
 
 PyDoc_STRVAR(doc_next_plus,"\n\
-next_plus([context]) - Return the smallest number representable in the given\n\
-context (or in the current default context if no context is given) that is\n\
-larger than the given operand.\n\
+next_plus(context=None) - Return the smallest number representable in the\n\
+given context (or in the current default context if no context is given) that\n\
+is larger than the given operand.\n\
 \n");
 
 PyDoc_STRVAR(doc_next_toward,"\n\
-next_toward(other[, context]) - If the two operands are unequal, return the\n\
-number closest to the first operand in the direction of the second operand.\n\
+next_toward(other, context=None) - If the two operands are unequal, return\n\
+the number closest to the first operand in the direction of the second operand.\n\
 If both operands are numerically equal, return a copy of the first operand\n\
 with the sign set to be the same as the sign of the second operand.\n\
 \n");
 
 PyDoc_STRVAR(doc_normalize,"\n\
-normalize([context]) - Normalize the number by stripping the rightmost trailing\n\
-zeros and converting any result equal to Decimal('0') to Decimal('0e0'). Used\n\
-for producing canonical values for members of an equivalence class. For example,\n\
-Decimal('32.100') and Decimal('0.321000e+2') both normalize to the equivalent\n\
-value Decimal('32.1').\n\
+normalize(context=None) - Normalize the number by stripping the rightmost\n\
+trailing zeros and converting any result equal to Decimal('0') to Decimal('0e0').\n\
+Used for producing canonical values for members of an equivalence class. For\n\
+example, Decimal('32.100') and Decimal('0.321000e+2') both normalize to the\n\
+equivalent value Decimal('32.1').\n\
 \n");
 
 PyDoc_STRVAR(doc_number_class,"\n\
-number_class([context]) - Return a string describing the class of the operand.\n\
-The returned value is one of the following ten strings:\n\
+number_class(context=None) - Return a string describing the class of the\n\
+operand. The returned value is one of the following ten strings:\n\
 \n\
     * '-Infinity', indicating that the operand is negative infinity.\n\
     * '-Normal', indicating that the operand is a negative normal number.\n\
@@ -324,8 +332,8 @@
 \n");
 
 PyDoc_STRVAR(doc_quantize,"\n\
-quantize(exp[, rounding[, context]]) - Return a value equal to the first\n\
-operand after rounding and having the exponent of the second operand.\n\
+quantize(exp, rounding=None, context=None) - Return a value equal to the\n\
+first operand after rounding and having the exponent of the second operand.\n\
 \n\
     >>> Decimal('1.41421356').quantize(Decimal('1.000'))\n\
     Decimal('1.414')\n\
@@ -350,16 +358,18 @@
 \n");
 
 PyDoc_STRVAR(doc_remainder_near,"\n\
-remainder_near(other[, context]) - Compute the modulo as either a positive\n\
-or negative value depending on which is closest to zero. For instance,\n\
-Decimal(10).remainder_near(6) returns Decimal('-2'), which is closer to zero\n\
-than Decimal('4').\n\
+remainder_near(other, context=None) - Return the remainder from dividing\n\
+self by other. This differs from self % other in that the sign of the\n\
+remainder is chosen so as to minimize its absolute value. More precisely, the\n\
+return value is self - n * other where n is the integer nearest to the exact\n\
+value of self / other, and if two integers are equally near then the even one\n\
+is chosen.\n\
 \n\
-If both are equally close, the one chosen will have the same sign as self.\n\
+If the result is zero then its sign will be the sign of self.\n\
 \n");
 
 PyDoc_STRVAR(doc_rotate,"\n\
-rotate(other[, context]) - Return the result of rotating the digits of the\n\
+rotate(other, context=None) - Return the result of rotating the digits of the\n\
 first operand by an amount specified by the second operand. The second operand\n\
 must be an integer in the range -precision through precision. The absolute\n\
 value of the second operand gives the number of places to rotate. If the second\n\
@@ -370,18 +380,22 @@
 \n");
 
 PyDoc_STRVAR(doc_same_quantum,"\n\
-same_quantum(other[, context]) - Test whether self and other have the\n\
+same_quantum(other, context=None) - Test whether self and other have the\n\
 same exponent or whether both are NaN.\n\
+\n\
+This operation is unaffected by context and is quiet: no flags are changed\n\
+and no rounding is performed. As an exception, the C version may raise\n\
+InvalidOperation if the second operand cannot be converted exactly.\n\
 \n");
 
 PyDoc_STRVAR(doc_scaleb,"\n\
-scaleb(other[, context]) - Return the first operand with the exponent adjusted\n\
-the second. Equivalently, return the first operand multiplied by 10**other.\n\
-The second operand must be an integer.\n\
+scaleb(other, context=None) - Return the first operand with the exponent\n\
+adjusted the second. Equivalently, return the first operand multiplied by\n\
+10**other. The second operand must be an integer.\n\
 \n");
 
 PyDoc_STRVAR(doc_shift,"\n\
-shift(other[, context]) - Return the result of shifting the digits of\n\
+shift(other, context=None) - Return the result of shifting the digits of\n\
 the first operand by an amount specified by the second operand. The second\n\
 operand must be an integer in the range -precision through precision. The\n\
 absolute value of the second operand gives the number of places to shift.\n\
@@ -391,36 +405,40 @@
 \n");
 
 PyDoc_STRVAR(doc_sqrt,"\n\
-sqrt([context]) - Return the square root of the argument to full precision.\n\
+sqrt(context=None) - Return the square root of the argument to full precision.\n\
 The result is correctly rounded using the ROUND_HALF_EVEN rounding mode.\n\
 \n");
 
 PyDoc_STRVAR(doc_to_eng_string,"\n\
-to_eng_string([context]) - Convert to an engineering-type string.\n\
-Engineering notation has an exponent which is a multiple of 3, so\n\
-there are up to 3 digits left of the decimal place. For example,\n\
-Decimal('123E+1') is converted to Decimal('1.23E+3')\n\
+to_eng_string(context=None) - Convert to an engineering-type string.\n\
+Engineering notation has an exponent which is a multiple of 3, so there\n\
+are up to 3 digits left of the decimal place. For example, Decimal('123E+1')\n\
+is converted to Decimal('1.23E+3').\n\
+\n\
+The value of context.capitals determines whether the exponent sign is lower\n\
+or upper case. Otherwise, the context does not affect the operation.\n\
 \n");
 
 PyDoc_STRVAR(doc_to_integral,"\n\
-to_integral([rounding[, context]]) - Identical to the to_integral_value()\n\
-method. The to_integral name has been kept for compatibility with older\n\
-versions.\n\
+to_integral(rounding=None, context=None) - Identical to the\n\
+to_integral_value() method. The to_integral() name has been kept\n\
+for compatibility with older versions.\n\
 \n");
 
 PyDoc_STRVAR(doc_to_integral_exact,"\n\
-to_integral_exact([rounding[, context]]) - Round to the nearest integer,\n\
-signaling Inexact or Rounded as appropriate if rounding occurs. The rounding\n\
-mode is determined by the rounding parameter if given, else by the given\n\
-context. If neither parameter is given, then the rounding mode of the current\n\
-default context is used.\n\
+to_integral_exact(rounding=None, context=None) - Round to the nearest\n\
+integer, signaling Inexact or Rounded as appropriate if rounding occurs.\n\
+The rounding mode is determined by the rounding parameter if given, else\n\
+by the given context. If neither parameter is given, then the rounding mode\n\
+of the current default context is used.\n\
 \n");
 
 PyDoc_STRVAR(doc_to_integral_value,"\n\
-to_integral_value([rounding[, context]]) - Round to the nearest integer without\n\
-signaling Inexact or Rounded. The rounding mode is determined by the rounding\n\
-parameter if given, else by the given context. If neither parameter is given,\n\
-then the rounding mode of the current default context is used.\n\
+to_integral_value(rounding=None, context=None) - Round to the nearest\n\
+integer without signaling Inexact or Rounded. The rounding mode is determined\n\
+by the rounding parameter if given, else by the given context. If neither\n\
+parameter is given, then the rounding mode of the current default context is\n\
+used.\n\
 \n");
 
 
diff -r bd8afb90ebf2 Modules/_decimal/libmpdec/typearith.h
--- a/Modules/_decimal/libmpdec/typearith.h
+++ b/Modules/_decimal/libmpdec/typearith.h
@@ -207,10 +207,10 @@
 {
     mpd_uint_t h, l;
 
-    asm ( "mulq %3\n\t"
-          : "=d" (h), "=a" (l)
-          : "%a" (a), "rm" (b)
-          : "cc"
+    __asm__ ( "mulq %3\n\t"
+              : "=d" (h), "=a" (l)
+              : "%a" (a), "rm" (b)
+              : "cc"
     );
 
     *hi = h;
@@ -223,10 +223,10 @@
 {
     mpd_uint_t qq, rr;
 
-    asm ( "divq %4\n\t"
-          : "=a" (qq), "=d" (rr)
-          : "a" (lo), "d" (hi), "rm" (d)
-          : "cc"
+    __asm__ ( "divq %4\n\t"
+              : "=a" (qq), "=d" (rr)
+              : "a" (lo), "d" (hi), "rm" (d)
+              : "cc"
     );
 
     *q = qq;
@@ -464,10 +464,10 @@
 {
     mpd_uint_t h, l;
 
-    asm ( "mull %3\n\t"
-          : "=d" (h), "=a" (l)
-          : "%a" (a), "rm" (b)
-          : "cc"
+    __asm__ ( "mull %3\n\t"
+              : "=d" (h), "=a" (l)
+              : "%a" (a), "rm" (b)
+              : "cc"
     );
 
     *hi = h;
@@ -480,10 +480,10 @@
 {
     mpd_uint_t qq, rr;
 
-    asm ( "divl %4\n\t"
-          : "=a" (qq), "=d" (rr)
-          : "a" (lo), "d" (hi), "rm" (d)
-          : "cc"
+    __asm__ ( "divl %4\n\t"
+              : "=a" (qq), "=d" (rr)
+              : "a" (lo), "d" (hi), "rm" (d)
+              : "cc"
     );
 
     *q = qq;
diff -r bd8afb90ebf2 Modules/_decimal/libmpdec/umodarith.h
--- a/Modules/_decimal/libmpdec/umodarith.h
+++ b/Modules/_decimal/libmpdec/umodarith.h
@@ -402,22 +402,22 @@
 {
     mpd_uint_t retval;
 
-    asm (
-        "fildl  %2\n\t"
-        "fildl  %1\n\t"
-        "fmulp  %%st, %%st(1)\n\t"
-        "fldt   (%4)\n\t"
-        "fmul   %%st(1), %%st\n\t"
-        "flds   %5\n\t"
-        "fadd   %%st, %%st(1)\n\t"
-        "fsubrp %%st, %%st(1)\n\t"
-        "fldl   (%3)\n\t"
-        "fmulp  %%st, %%st(1)\n\t"
-        "fsubrp %%st, %%st(1)\n\t"
-        "fistpl %0\n\t"
-        : "=m" (retval)
-        : "m" (a), "m" (b), "r" (dmod), "r" (dinvmod), "m" (MPD_TWO63)
-        : "st", "memory"
+    __asm__ (
+            "fildl  %2\n\t"
+            "fildl  %1\n\t"
+            "fmulp  %%st, %%st(1)\n\t"
+            "fldt   (%4)\n\t"
+            "fmul   %%st(1), %%st\n\t"
+            "flds   %5\n\t"
+            "fadd   %%st, %%st(1)\n\t"
+            "fsubrp %%st, %%st(1)\n\t"
+            "fldl   (%3)\n\t"
+            "fmulp  %%st, %%st(1)\n\t"
+            "fsubrp %%st, %%st(1)\n\t"
+            "fistpl %0\n\t"
+            : "=m" (retval)
+            : "m" (a), "m" (b), "r" (dmod), "r" (dinvmod), "m" (MPD_TWO63)
+            : "st", "memory"
     );
 
     return retval;
@@ -432,33 +432,33 @@
 ppro_mulmod2c(mpd_uint_t *a0, mpd_uint_t *a1, mpd_uint_t w,
               double *dmod, uint32_t *dinvmod)
 {
-    asm (
-        "fildl  %2\n\t"
-        "fildl  (%1)\n\t"
-        "fmul   %%st(1), %%st\n\t"
-        "fxch   %%st(1)\n\t"
-        "fildl  (%0)\n\t"
-        "fmulp  %%st, %%st(1) \n\t"
-        "fldt   (%4)\n\t"
-        "flds   %5\n\t"
-        "fld    %%st(2)\n\t"
-        "fmul   %%st(2)\n\t"
-        "fadd   %%st(1)\n\t"
-        "fsub   %%st(1)\n\t"
-        "fmull  (%3)\n\t"
-        "fsubrp %%st, %%st(3)\n\t"
-        "fxch   %%st(2)\n\t"
-        "fistpl (%0)\n\t"
-        "fmul   %%st(2)\n\t"
-        "fadd   %%st(1)\n\t"
-        "fsubp  %%st, %%st(1)\n\t"
-        "fmull  (%3)\n\t"
-        "fsubrp %%st, %%st(1)\n\t"
-        "fistpl (%1)\n\t"
-        : : "r" (a0), "r" (a1), "m" (w),
-            "r" (dmod), "r" (dinvmod),
-            "m" (MPD_TWO63)
-        : "st", "memory"
+    __asm__ (
+            "fildl  %2\n\t"
+            "fildl  (%1)\n\t"
+            "fmul   %%st(1), %%st\n\t"
+            "fxch   %%st(1)\n\t"
+            "fildl  (%0)\n\t"
+            "fmulp  %%st, %%st(1) \n\t"
+            "fldt   (%4)\n\t"
+            "flds   %5\n\t"
+            "fld    %%st(2)\n\t"
+            "fmul   %%st(2)\n\t"
+            "fadd   %%st(1)\n\t"
+            "fsub   %%st(1)\n\t"
+            "fmull  (%3)\n\t"
+            "fsubrp %%st, %%st(3)\n\t"
+            "fxch   %%st(2)\n\t"
+            "fistpl (%0)\n\t"
+            "fmul   %%st(2)\n\t"
+            "fadd   %%st(1)\n\t"
+            "fsubp  %%st, %%st(1)\n\t"
+            "fmull  (%3)\n\t"
+            "fsubrp %%st, %%st(1)\n\t"
+            "fistpl (%1)\n\t"
+            : : "r" (a0), "r" (a1), "m" (w),
+                "r" (dmod), "r" (dinvmod),
+                "m" (MPD_TWO63)
+            : "st", "memory"
     );
 }
 
@@ -471,41 +471,41 @@
 ppro_mulmod2(mpd_uint_t *a0, mpd_uint_t b0, mpd_uint_t *a1, mpd_uint_t b1,
              double *dmod, uint32_t *dinvmod)
 {
-    asm (
-        "fildl  %3\n\t"
-        "fildl  (%2)\n\t"
-        "fmulp  %%st, %%st(1)\n\t"
-        "fildl  %1\n\t"
-        "fildl  (%0)\n\t"
-        "fmulp  %%st, %%st(1)\n\t"
-        "fldt   (%5)\n\t"
-        "fld    %%st(2)\n\t"
-        "fmul   %%st(1), %%st\n\t"
-        "fxch   %%st(1)\n\t"
-        "fmul   %%st(2), %%st\n\t"
-        "flds   %6\n\t"
-        "fldl   (%4)\n\t"
-        "fxch   %%st(3)\n\t"
-        "fadd   %%st(1), %%st\n\t"
-        "fxch   %%st(2)\n\t"
-        "fadd   %%st(1), %%st\n\t"
-        "fxch   %%st(2)\n\t"
-        "fsub   %%st(1), %%st\n\t"
-        "fxch   %%st(2)\n\t"
-        "fsubp  %%st, %%st(1)\n\t"
-        "fxch   %%st(1)\n\t"
-        "fmul   %%st(2), %%st\n\t"
-        "fxch   %%st(1)\n\t"
-        "fmulp  %%st, %%st(2)\n\t"
-        "fsubrp %%st, %%st(3)\n\t"
-        "fsubrp %%st, %%st(1)\n\t"
-        "fxch   %%st(1)\n\t"
-        "fistpl (%2)\n\t"
-        "fistpl (%0)\n\t"
-        : : "r" (a0), "m" (b0), "r" (a1), "m" (b1),
-            "r" (dmod), "r" (dinvmod),
-            "m" (MPD_TWO63)
-        : "st", "memory"
+    __asm__ (
+            "fildl  %3\n\t"
+            "fildl  (%2)\n\t"
+            "fmulp  %%st, %%st(1)\n\t"
+            "fildl  %1\n\t"
+            "fildl  (%0)\n\t"
+            "fmulp  %%st, %%st(1)\n\t"
+            "fldt   (%5)\n\t"
+            "fld    %%st(2)\n\t"
+            "fmul   %%st(1), %%st\n\t"
+            "fxch   %%st(1)\n\t"
+            "fmul   %%st(2), %%st\n\t"
+            "flds   %6\n\t"
+            "fldl   (%4)\n\t"
+            "fxch   %%st(3)\n\t"
+            "fadd   %%st(1), %%st\n\t"
+            "fxch   %%st(2)\n\t"
+            "fadd   %%st(1), %%st\n\t"
+            "fxch   %%st(2)\n\t"
+            "fsub   %%st(1), %%st\n\t"
+            "fxch   %%st(2)\n\t"
+            "fsubp  %%st, %%st(1)\n\t"
+            "fxch   %%st(1)\n\t"
+            "fmul   %%st(2), %%st\n\t"
+            "fxch   %%st(1)\n\t"
+            "fmulp  %%st, %%st(2)\n\t"
+            "fsubrp %%st, %%st(3)\n\t"
+            "fsubrp %%st, %%st(1)\n\t"
+            "fxch   %%st(1)\n\t"
+            "fistpl (%2)\n\t"
+            "fistpl (%0)\n\t"
+            : : "r" (a0), "m" (b0), "r" (a1), "m" (b1),
+                "r" (dmod), "r" (dinvmod),
+                "m" (MPD_TWO63)
+            : "st", "memory"
     );
 }
 /* END PPRO GCC ASM */
diff -r bd8afb90ebf2 Modules/_decimal/tests/bench.py
--- a/Modules/_decimal/tests/bench.py
+++ b/Modules/_decimal/tests/bench.py
@@ -10,13 +10,21 @@
 
 import time
 from math import log, ceil
-from test.support import import_fresh_module
+try:
+    from test.support import import_fresh_module
+except ImportError:
+    from test.test_support import import_fresh_module
 
 C = import_fresh_module('decimal', fresh=['_decimal'])
 P = import_fresh_module('decimal', blocked=['_decimal'])
 
-
-# Pi function from the decimal.py documentation
+#
+# NOTE: This is the pi function from the decimal documentation, modified
+# for benchmarking purposes. Since floats do not have a context, the higher
+# intermediate precision from the original is NOT used, so the modified
+# algorithm only gives an approximation to the correctly rounded result.
+# For serious use, refer to the documentation or the appropriate literature.
+#
 def pi_float():
     """native float"""
     lasts, t, s, n, na, d, da = 0, 3.0, 3, 1, 0, 0, 24
@@ -67,11 +75,16 @@
 print("#                   Calculating pi, 10000 iterations")
 print("# ======================================================================\n")
 
+to_benchmark = [pi_float, pi_decimal]
+if C is not None:
+    to_benchmark.insert(1, pi_cdecimal)
+
 for prec in [9, 19]:
     print("\nPrecision: %d decimal digits\n" % prec)
-    for func in [pi_float, pi_cdecimal, pi_decimal]:
+    for func in to_benchmark:
         start = time.time()
-        C.getcontext().prec = prec
+        if C is not None:
+            C.getcontext().prec = prec
         P.getcontext().prec = prec
         for i in range(10000):
             x = func()
@@ -84,25 +97,27 @@
 print("#                               Factorial")
 print("# ======================================================================\n")
 
-c = C.getcontext()
-c.prec = C.MAX_PREC
-c.Emax = C.MAX_EMAX
-c.Emin = C.MIN_EMIN
+if C is not None:
+    c = C.getcontext()
+    c.prec = C.MAX_PREC
+    c.Emax = C.MAX_EMAX
+    c.Emin = C.MIN_EMIN
 
 for n in [100000, 1000000]:
 
     print("n = %d\n" % n)
 
-    # C version of decimal
-    start_calc = time.time()
-    x = factorial(C.Decimal(n), 0)
-    end_calc = time.time()
-    start_conv = time.time()
-    sx = str(x)
-    end_conv = time.time()
-    print("cdecimal:")
-    print("calculation time: %fs" % (end_calc-start_calc))
-    print("conversion time: %fs\n" % (end_conv-start_conv))
+    if C is not None:
+        # C version of decimal
+        start_calc = time.time()
+        x = factorial(C.Decimal(n), 0)
+        end_calc = time.time()
+        start_conv = time.time()
+        sx = str(x)
+        end_conv = time.time()
+        print("cdecimal:")
+        print("calculation time: %fs" % (end_calc-start_calc))
+        print("conversion time: %fs\n" % (end_conv-start_conv))
 
     # Python integers
     start_calc = time.time()
@@ -116,4 +131,5 @@
     print("calculation time: %fs" % (end_calc-start_calc))
     print("conversion time: %fs\n\n" % (end_conv-start_conv))
 
-    assert(sx == sy)
+    if C is not None:
+        assert(sx == sy)
diff -r bd8afb90ebf2 Modules/_decimal/tests/deccheck.py
--- a/Modules/_decimal/tests/deccheck.py
+++ b/Modules/_decimal/tests/deccheck.py
@@ -36,6 +36,7 @@
 from collections import defaultdict
 from test.support import import_fresh_module
 from randdec import randfloat, all_unary, all_binary, all_ternary
+from randdec import unary_optarg, binary_optarg, ternary_optarg
 from formathelper import rand_format, rand_locale
 
 C = import_fresh_module('decimal', fresh=['_decimal'])
@@ -834,6 +835,17 @@
         except VerifyError as err:
             log(err)
 
+    if not method.startswith('__'):
+        for op in unary_optarg(prec, exp_range, itr):
+            t = TestSet(method, op)
+            try:
+                if not convert(t):
+                    continue
+                callfuncs(t)
+                verify(t, stat)
+            except VerifyError as err:
+                log(err)
+
 def test_binary(method, prec, exp_range, restricted_range, itr, stat):
     """Iterate a binary function through many test cases."""
     if method in BinaryRestricted:
@@ -848,6 +860,17 @@
         except VerifyError as err:
             log(err)
 
+    if not method.startswith('__'):
+        for op in binary_optarg(prec, exp_range, itr):
+            t = TestSet(method, op)
+            try:
+                if not convert(t):
+                    continue
+                callfuncs(t)
+                verify(t, stat)
+            except VerifyError as err:
+                log(err)
+
 def test_ternary(method, prec, exp_range, restricted_range, itr, stat):
     """Iterate a ternary function through many test cases."""
     if method in TernaryRestricted:
@@ -862,6 +885,17 @@
         except VerifyError as err:
             log(err)
 
+    if not method.startswith('__'):
+        for op in ternary_optarg(prec, exp_range, itr):
+            t = TestSet(method, op)
+            try:
+                if not convert(t):
+                    continue
+                callfuncs(t)
+                verify(t, stat)
+            except VerifyError as err:
+                log(err)
+
 def test_format(method, prec, exp_range, restricted_range, itr, stat):
     """Iterate the __format__ method through many test cases."""
     for op in all_unary(prec, exp_range, itr):
diff -r bd8afb90ebf2 Modules/_decimal/tests/randdec.py
--- a/Modules/_decimal/tests/randdec.py
+++ b/Modules/_decimal/tests/randdec.py
@@ -527,6 +527,11 @@
     for _ in range(100):
         yield (randtuple(prec, exp_range),)
 
+def unary_optarg(prec, exp_range, itr):
+    for _ in range(100):
+        yield randdec(prec, exp_range), None
+        yield randdec(prec, exp_range), None, None
+
 def all_binary(prec, exp_range, itr):
     for a, b in bin_close_to_pow10(prec, exp_range, itr):
         yield a, b
@@ -543,6 +548,11 @@
     for _ in range(100):
         yield randdec(prec, exp_range), randdec(prec, exp_range)
 
+def binary_optarg(prec, exp_range, itr):
+    for _ in range(100):
+        yield randdec(prec, exp_range), randdec(prec, exp_range), None
+        yield randdec(prec, exp_range), randdec(prec, exp_range), None, None
+
 def all_ternary(prec, exp_range, itr):
     for a, b, c in tern_close_numbers(prec, exp_range, -exp_range, itr):
         yield a, b, c
@@ -557,3 +567,11 @@
         b = randdec(prec, 2*exp_range)
         c = randdec(prec, 2*exp_range)
         yield a, b, c
+
+def ternary_optarg(prec, exp_range, itr):
+    for _ in range(100):
+        a = randdec(prec, 2*exp_range)
+        b = randdec(prec, 2*exp_range)
+        c = randdec(prec, 2*exp_range)
+        yield a, b, c, None
+        yield a, b, c, None, None
diff -r bd8afb90ebf2 Modules/_elementtree.c
--- a/Modules/_elementtree.c
+++ b/Modules/_elementtree.c
@@ -98,7 +98,7 @@
    info. */
 #define JOIN_GET(p) ((Py_uintptr_t) (p) & 1)
 #define JOIN_SET(p, flag) ((void*) ((Py_uintptr_t) (JOIN_OBJ(p)) | (flag)))
-#define JOIN_OBJ(p) ((PyObject*) ((Py_uintptr_t) (p) & ~1))
+#define JOIN_OBJ(p) ((PyObject*) ((Py_uintptr_t) (p) & ~(Py_uintptr_t)1))
 
 /* glue functions (see the init function for details) */
 static PyObject* elementtree_parseerror_obj;
@@ -123,17 +123,11 @@
         return NULL;
     }
 
-    args = PyTuple_New(2);
+    args = PyTuple_Pack(2, object, memo);
     if (!args)
         return NULL;
-
-    Py_INCREF(object); PyTuple_SET_ITEM(args, 0, (PyObject*) object);
-    Py_INCREF(memo);   PyTuple_SET_ITEM(args, 1, (PyObject*) memo);
-
     result = PyObject_CallObject(elementtree_deepcopy_obj, args);
-
     Py_DECREF(args);
-
     return result;
 }
 
@@ -141,48 +135,16 @@
 list_join(PyObject* list)
 {
     /* join list elements (destroying the list in the process) */
-
     PyObject* joiner;
-    PyObject* function;
-    PyObject* args;
     PyObject* result;
 
-    switch (PyList_GET_SIZE(list)) {
-    case 0:
-        Py_DECREF(list);
-        return PyBytes_FromString("");
-    case 1:
-        result = PyList_GET_ITEM(list, 0);
-        Py_INCREF(result);
-        Py_DECREF(list);
-        return result;
-    }
-
-    /* two or more elements: slice out a suitable separator from the
-       first member, and use that to join the entire list */
-
-    joiner = PySequence_GetSlice(PyList_GET_ITEM(list, 0), 0, 0);
+    joiner = PyUnicode_FromStringAndSize("", 0);
     if (!joiner)
         return NULL;
-
-    function = PyObject_GetAttrString(joiner, "join");
-    if (!function) {
-        Py_DECREF(joiner);
-        return NULL;
-    }
-
-    args = PyTuple_New(1);
-    if (!args)
-        return NULL;
-
-    PyTuple_SET_ITEM(args, 0, list);
-
-    result = PyObject_CallObject(function, args);
-
-    Py_DECREF(args); /* also removes list */
-    Py_DECREF(function);
+    result = PyUnicode_Join(joiner, list);
     Py_DECREF(joiner);
-
+    if (result)
+        Py_DECREF(list);
     return result;
 }
 
@@ -399,6 +361,7 @@
             return -1;
         if (kwds) {
             if (PyDict_Update(attrib, kwds) < 0) {
+                Py_DECREF(attrib);
                 return -1;
             }
         }
@@ -407,38 +370,34 @@
         attrib = get_attrib_from_keywords(kwds);
         if (!attrib)
             return -1;
-    } else {
-        /* no attrib arg, no kwds, so no attributes */
-        Py_INCREF(Py_None);
-        attrib = Py_None;
     }
 
     self_elem = (ElementObject *)self;
 
-    if (attrib != Py_None && !is_empty_dict(attrib)) {
+    if (attrib != NULL && !is_empty_dict(attrib)) {
         if (create_extra(self_elem, attrib) < 0) {
-            PyObject_Del(self_elem);
+            Py_DECREF(attrib);
             return -1;
         }
     }
 
     /* We own a reference to attrib here and it's no longer needed. */
-    Py_DECREF(attrib);
+    Py_XDECREF(attrib);
 
     /* Replace the objects already pointed to by tag, text and tail. */
     tmp = self_elem->tag;
+    Py_INCREF(tag);
     self_elem->tag = tag;
-    Py_INCREF(tag);
     Py_DECREF(tmp);
 
     tmp = self_elem->text;
+    Py_INCREF(Py_None);
     self_elem->text = Py_None;
+    Py_DECREF(JOIN_OBJ(tmp));
+
+    tmp = self_elem->tail;
     Py_INCREF(Py_None);
-    Py_DECREF(JOIN_OBJ(tmp));
-
-    tmp = self_elem->tail;
     self_elem->tail = Py_None;
-    Py_INCREF(Py_None);
     Py_DECREF(JOIN_OBJ(tmp));
 
     return 0;
@@ -520,11 +479,11 @@
     PyObject* res = self->extra->attrib;
 
     if (res == Py_None) {
-        Py_DECREF(res);
         /* create missing dictionary */
         res = PyDict_New();
         if (!res)
             return NULL;
+        Py_DECREF(Py_None);
         self->extra->attrib = res;
     }
 
@@ -824,7 +783,7 @@
     }
 
     /* add object to memo dictionary (so deepcopy won't visit it again) */
-    id = PyLong_FromLong((Py_uintptr_t) self);
+    id = PyLong_FromSsize_t((Py_uintptr_t) self);
     if (!id)
         goto error;
 
@@ -2038,8 +1997,8 @@
 
     PyObject *root; /* root node (first created node) */
 
-    ElementObject *this; /* current node */
-    ElementObject *last; /* most recently created node */
+    PyObject *this; /* current node */
+    PyObject *last; /* most recently created node */
 
     PyObject *data; /* data collector (string or list), or NULL */
 
@@ -2071,9 +2030,9 @@
         t->root = NULL;
 
         Py_INCREF(Py_None);
-        t->this = (ElementObject *)Py_None;
+        t->this = Py_None;
         Py_INCREF(Py_None);
-        t->last = (ElementObject *)Py_None;
+        t->last = Py_None;
 
         t->data = NULL;
         t->element_factory = NULL;
@@ -2081,6 +2040,7 @@
         if (!t->stack) {
             Py_DECREF(t->this);
             Py_DECREF(t->last);
+            Py_DECREF((PyObject *) t);
             return NULL;
         }
         t->index = 0;
@@ -2098,6 +2058,7 @@
     static char *kwlist[] = {"element_factory", 0};
     PyObject *element_factory = NULL;
     TreeBuilderObject *self_tb = (TreeBuilderObject *)self;
+    PyObject *tmp;
 
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O:TreeBuilder", kwlist,
                                      &element_factory)) {
@@ -2106,8 +2067,9 @@
 
     if (element_factory) {
         Py_INCREF(element_factory);
-        Py_XDECREF(self_tb->element_factory);
+        tmp = self_tb->element_factory;
         self_tb->element_factory = element_factory;
+        Py_XDECREF(tmp);
     }
 
     return 0;
@@ -2128,17 +2090,17 @@
 static int
 treebuilder_gc_clear(TreeBuilderObject *self)
 {
-    Py_XDECREF(self->end_ns_event_obj);
-    Py_XDECREF(self->start_ns_event_obj);
-    Py_XDECREF(self->end_event_obj);
-    Py_XDECREF(self->start_event_obj);
-    Py_XDECREF(self->events);
-    Py_DECREF(self->stack);
-    Py_XDECREF(self->data);
-    Py_DECREF(self->last);
-    Py_DECREF(self->this);
+    Py_CLEAR(self->end_ns_event_obj);
+    Py_CLEAR(self->start_ns_event_obj);
+    Py_CLEAR(self->end_event_obj);
+    Py_CLEAR(self->start_event_obj);
+    Py_CLEAR(self->events);
+    Py_CLEAR(self->stack);
+    Py_CLEAR(self->data);
+    Py_CLEAR(self->last);
+    Py_CLEAR(self->this);
     Py_CLEAR(self->element_factory);
-    Py_XDECREF(self->root);
+    Py_CLEAR(self->root);
     return 0;
 }
 
@@ -2151,6 +2113,64 @@
 }
 
 /* -------------------------------------------------------------------- */
+/* helpers for handling of arbitrary element-like objects */
+
+static int
+treebuilder_set_element_text_or_tail(PyObject *element, PyObject *data,
+                                     PyObject **dest, _Py_Identifier *name)
+{
+    if (Element_CheckExact(element)) {
+        Py_DECREF(JOIN_OBJ(*dest));
+        *dest = JOIN_SET(data, PyList_CheckExact(data));
+        return 0;
+    }
+    else {
+        PyObject *joined = list_join(data);
+        int r;
+        if (joined == NULL)
+            return -1;
+        r = _PyObject_SetAttrId(element, name, joined);
+        Py_DECREF(joined);
+        return r;
+    }
+}
+
+/* These two functions steal a reference to data */
+static int
+treebuilder_set_element_text(PyObject *element, PyObject *data)
+{
+    _Py_IDENTIFIER(text);
+    return treebuilder_set_element_text_or_tail(
+        element, data, &((ElementObject *) element)->text, &PyId_text);
+}
+
+static int
+treebuilder_set_element_tail(PyObject *element, PyObject *data)
+{
+    _Py_IDENTIFIER(tail);
+    return treebuilder_set_element_text_or_tail(
+        element, data, &((ElementObject *) element)->tail, &PyId_tail);
+}
+
+static int
+treebuilder_add_subelement(PyObject *element, PyObject *child)
+{
+    _Py_IDENTIFIER(append);
+    if (Element_CheckExact(element)) {
+        ElementObject *elem = (ElementObject *) element;
+        return element_add_subelement(elem, child);
+    }
+    else {
+        PyObject *res;
+        res = _PyObject_CallMethodId(element, &PyId_append, "O", child);
+        if (res == NULL)
+            return -1;
+        Py_DECREF(res);
+        return 0;
+    }
+}
+
+/* -------------------------------------------------------------------- */
 /* handlers */
 
 LOCAL(PyObject*)
@@ -2162,15 +2182,12 @@
 
     if (self->data) {
         if (self->this == self->last) {
-            Py_DECREF(JOIN_OBJ(self->last->text));
-            self->last->text = JOIN_SET(
-                self->data, PyList_CheckExact(self->data)
-                );
-        } else {
-            Py_DECREF(JOIN_OBJ(self->last->tail));
-            self->last->tail = JOIN_SET(
-                self->data, PyList_CheckExact(self->data)
-                );
+            if (treebuilder_set_element_text(self->last, self->data))
+                return NULL;
+        }
+        else {
+            if (treebuilder_set_element_tail(self->last, self->data))
+                return NULL;
         }
         self->data = NULL;
     }
@@ -2184,10 +2201,10 @@
         return NULL;
     }
 
-    this = (PyObject*) self->this;
+    this = self->this;
 
     if (this != Py_None) {
-        if (element_add_subelement((ElementObject*) this, node) < 0)
+        if (treebuilder_add_subelement(this, node) < 0)
             goto error;
     } else {
         if (self->root) {
@@ -2213,19 +2230,17 @@
 
     Py_DECREF(this);
     Py_INCREF(node);
-    self->this = (ElementObject*) node;
+    self->this = node;
 
     Py_DECREF(self->last);
     Py_INCREF(node);
-    self->last = (ElementObject*) node;
+    self->last = node;
 
     if (self->start_event_obj) {
         PyObject* res;
         PyObject* action = self->start_event_obj;
-        res = PyTuple_New(2);
+        res = PyTuple_Pack(2, action, node);
         if (res) {
-            Py_INCREF(action); PyTuple_SET_ITEM(res, 0, (PyObject*) action);
-            Py_INCREF(node);   PyTuple_SET_ITEM(res, 1, (PyObject*) node);
             PyList_Append(self->events, res);
             Py_DECREF(res);
         } else
@@ -2243,7 +2258,7 @@
 treebuilder_handle_data(TreeBuilderObject* self, PyObject* data)
 {
     if (!self->data) {
-        if (self->last == (ElementObject*) Py_None) {
+        if (self->last == Py_None) {
             /* ignore calls to data before the first call to start */
             Py_RETURN_NONE;
         }
@@ -2253,6 +2268,7 @@
         /* more than one item; use a list to collect items */
         if (PyBytes_CheckExact(self->data) && Py_REFCNT(self->data) == 1 &&
             PyBytes_CheckExact(data) && PyBytes_GET_SIZE(data) == 1) {
+            /* XXX this code path unused in Python 3? */
             /* expat often generates single character data sections; handle
                the most common case by resizing the existing string... */
             Py_ssize_t size = PyBytes_GET_SIZE(self->data);
@@ -2282,15 +2298,11 @@
 
     if (self->data) {
         if (self->this == self->last) {
-            Py_DECREF(JOIN_OBJ(self->last->text));
-            self->last->text = JOIN_SET(
-                self->data, PyList_CheckExact(self->data)
-                );
+            if (treebuilder_set_element_text(self->last, self->data))
+                return NULL;
         } else {
-            Py_DECREF(JOIN_OBJ(self->last->tail));
-            self->last->tail = JOIN_SET(
-                self->data, PyList_CheckExact(self->data)
-                );
+            if (treebuilder_set_element_tail(self->last, self->data))
+                return NULL;
         }
         self->data = NULL;
     }
@@ -2310,17 +2322,15 @@
 
     Py_DECREF(self->last);
 
-    self->last = (ElementObject*) self->this;
-    self->this = (ElementObject*) item;
+    self->last = self->this;
+    self->this = item;
 
     if (self->end_event_obj) {
         PyObject* res;
         PyObject* action = self->end_event_obj;
         PyObject* node = (PyObject*) self->last;
-        res = PyTuple_New(2);
+        res = PyTuple_Pack(2, action, node);
         if (res) {
-            Py_INCREF(action); PyTuple_SET_ITEM(res, 0, (PyObject*) action);
-            Py_INCREF(node);   PyTuple_SET_ITEM(res, 1, (PyObject*) node);
             PyList_Append(self->events, res);
             Py_DECREF(res);
         } else
@@ -2366,8 +2376,12 @@
         PyTuple_SET_ITEM(res, 1, parcel);
         PyList_Append(self->events, res);
         Py_DECREF(res);
-    } else
+    }
+    else {
+        Py_DECREF(action);
+        Py_DECREF(parcel);
         PyErr_Clear(); /* FIXME: propagate error */
+    }
 }
 
 /* -------------------------------------------------------------------- */
@@ -2526,7 +2540,7 @@
     /* convert a UTF-8 tag/attribute name from the expat parser
        to a universal name string */
 
-    int size = strlen(string);
+    Py_ssize_t size = (Py_ssize_t) strlen(string);
     PyObject* key;
     PyObject* value;
 
@@ -2545,7 +2559,7 @@
 
         PyObject* tag;
         char* p;
-        int i;
+        Py_ssize_t i;
 
         /* look for namespace separator */
         for (i = 0; i < size; i++)
@@ -2717,13 +2731,7 @@
             attrib_in += 2;
         }
     } else {
-        Py_INCREF(Py_None);
-        attrib = Py_None;
-    }
-
-    /* If we get None, pass an empty dictionary on */
-    if (attrib == Py_None) {
-        Py_DECREF(attrib);
+        /* Pass an empty dictionary on */
         attrib = PyDict_New();
         if (!attrib)
             return;
@@ -3015,14 +3023,14 @@
 
     self_xp->names = PyDict_New();
     if (!self_xp->names) {
-        Py_XDECREF(self_xp->entity);
+        Py_CLEAR(self_xp->entity);
         return -1;
     }
 
     self_xp->parser = EXPAT(ParserCreate_MM)(encoding, &ExpatMemoryHandler, "}");
     if (!self_xp->parser) {
-        Py_XDECREF(self_xp->entity);
-        Py_XDECREF(self_xp->names);
+        Py_CLEAR(self_xp->entity);
+        Py_CLEAR(self_xp->names);
         PyErr_NoMemory();
         return -1;
     }
@@ -3032,8 +3040,8 @@
     } else {
         target = treebuilder_new(&TreeBuilder_Type, NULL, NULL);
         if (!target) {
-            Py_XDECREF(self_xp->entity);
-            Py_XDECREF(self_xp->names);
+            Py_CLEAR(self_xp->entity);
+            Py_CLEAR(self_xp->names);
             EXPAT(ParserFree)(self_xp->parser);
             return -1;
         }
@@ -3109,17 +3117,17 @@
 {
     EXPAT(ParserFree)(self->parser);
 
-    Py_XDECREF(self->handle_close);
-    Py_XDECREF(self->handle_pi);
-    Py_XDECREF(self->handle_comment);
-    Py_XDECREF(self->handle_end);
-    Py_XDECREF(self->handle_data);
-    Py_XDECREF(self->handle_start);
-    Py_XDECREF(self->handle_doctype);
-
-    Py_XDECREF(self->target);
-    Py_XDECREF(self->entity);
-    Py_XDECREF(self->names);
+    Py_CLEAR(self->handle_close);
+    Py_CLEAR(self->handle_pi);
+    Py_CLEAR(self->handle_comment);
+    Py_CLEAR(self->handle_end);
+    Py_CLEAR(self->handle_data);
+    Py_CLEAR(self->handle_start);
+    Py_CLEAR(self->handle_doctype);
+
+    Py_CLEAR(self->target);
+    Py_CLEAR(self->entity);
+    Py_CLEAR(self->names);
 
     return 0;
 }
@@ -3227,17 +3235,12 @@
                 break;
             }
             temp = PyUnicode_AsEncodedString(buffer, "utf-8", "surrogatepass");
+            Py_DECREF(buffer);
             if (!temp) {
                 /* Propagate exception from PyUnicode_AsEncodedString */
-                Py_DECREF(buffer);
                 Py_DECREF(reader);
                 return NULL;
             }
-
-            /* Here we no longer need the original buffer since it contains
-             * unicode. Make it point to the encoded bytes object.
-            */
-            Py_DECREF(buffer);
             buffer = temp;
         }
         else if (!PyBytes_CheckExact(buffer) || PyBytes_GET_SIZE(buffer) == 0) {
@@ -3307,10 +3310,10 @@
     target->events = events;
 
     /* clear out existing events */
-    Py_XDECREF(target->start_event_obj); target->start_event_obj = NULL;
-    Py_XDECREF(target->end_event_obj); target->end_event_obj = NULL;
-    Py_XDECREF(target->start_ns_event_obj); target->start_ns_event_obj = NULL;
-    Py_XDECREF(target->end_ns_event_obj); target->end_ns_event_obj = NULL;
+    Py_CLEAR(target->start_event_obj);
+    Py_CLEAR(target->end_event_obj);
+    Py_CLEAR(target->start_ns_event_obj);
+    Py_CLEAR(target->end_ns_event_obj);
 
     if (event_set == Py_None) {
         /* default is "end" only */
diff -r bd8afb90ebf2 Modules/_io/_iomodule.c
--- a/Modules/_io/_iomodule.c
+++ b/Modules/_io/_iomodule.c
@@ -60,7 +60,7 @@
 "At the top of the I/O hierarchy is the abstract base class IOBase. It\n"
 "defines the basic interface to a stream. Note, however, that there is no\n"
 "separation between reading and writing to streams; implementations are\n"
-"allowed to throw an IOError if they do not support a given operation.\n"
+"allowed to raise an IOError if they do not support a given operation.\n"
 "\n"
 "Extending IOBase is RawIOBase which deals simply with the reading and\n"
 "writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide\n"
@@ -185,7 +185,7 @@
 "\n"
 "* On output, if newline is None, any '\\n' characters written are\n"
 "  translated to the system default line separator, os.linesep. If\n"
-"  newline is '' or '\n', no translation takes place. If newline is any\n"
+"  newline is '' or '\\n', no translation takes place. If newline is any\n"
 "  of the other legal values, any '\\n' characters written are translated\n"
 "  to the given string.\n"
 "\n"
diff -r bd8afb90ebf2 Modules/_io/bytesio.c
--- a/Modules/_io/bytesio.c
+++ b/Modules/_io/bytesio.c
@@ -121,7 +121,7 @@
 }
 
 /* Internal routine for writing a string of bytes to the buffer of a BytesIO
-   object. Returns the number of bytes wrote, or -1 on error. */
+   object. Returns the number of bytes written, or -1 on error. */
 static Py_ssize_t
 write_bytes(bytesio *self, const char *bytes, Py_ssize_t len)
 {
@@ -171,10 +171,20 @@
     }
 }
 
+PyDoc_STRVAR(readable_doc,
+"readable() -> bool. Returns True if the IO object can be read.");
+
+PyDoc_STRVAR(writable_doc,
+"writable() -> bool. Returns True if the IO object can be written.");
+
+PyDoc_STRVAR(seekable_doc,
+"seekable() -> bool. Returns True if the IO object can be seeked.");
+
 /* Generic getter for the writable, readable and seekable properties */
 static PyObject *
-return_true(bytesio *self)
+return_not_closed(bytesio *self)
 {
+    CHECK_CLOSED(self);
     Py_RETURN_TRUE;
 }
 
@@ -682,8 +692,10 @@
     }
     else {
         dict = PyDict_Copy(self->dict);
-        if (dict == NULL)
+        if (dict == NULL) {
+            Py_DECREF(initvalue);
             return NULL;
+        }
     }
 
     state = Py_BuildValue("(OnN)", initvalue, self->pos, dict);
@@ -867,9 +879,9 @@
 };
 
 static struct PyMethodDef bytesio_methods[] = {
-    {"readable",   (PyCFunction)return_true,        METH_NOARGS, NULL},
-    {"seekable",   (PyCFunction)return_true,        METH_NOARGS, NULL},
-    {"writable",   (PyCFunction)return_true,        METH_NOARGS, NULL},
+    {"readable",   (PyCFunction)return_not_closed,  METH_NOARGS, readable_doc},
+    {"seekable",   (PyCFunction)return_not_closed,  METH_NOARGS, seekable_doc},
+    {"writable",   (PyCFunction)return_not_closed,  METH_NOARGS, writable_doc},
     {"close",      (PyCFunction)bytesio_close,      METH_NOARGS, close_doc},
     {"flush",      (PyCFunction)bytesio_flush,      METH_NOARGS, flush_doc},
     {"isatty",     (PyCFunction)bytesio_isatty,     METH_NOARGS, isatty_doc},
diff -r bd8afb90ebf2 Modules/_io/iobase.c
--- a/Modules/_io/iobase.c
+++ b/Modules/_io/iobase.c
@@ -442,7 +442,7 @@
     "\n"
     "If limit is specified, at most limit bytes will be read.\n"
     "\n"
-    "The line terminator is always b'\n' for binary files; for text\n"
+    "The line terminator is always b'\\n' for binary files; for text\n"
     "files, the newlines argument to open can be used to select the line\n"
     "terminator(s) recognized.\n");
 
diff -r bd8afb90ebf2 Modules/_io/stringio.c
--- a/Modules/_io/stringio.c
+++ b/Modules/_io/stringio.c
@@ -760,10 +760,21 @@
 }
 
 /* Properties and pseudo-properties */
+
+PyDoc_STRVAR(stringio_readable_doc,
+"readable() -> bool. Returns True if the IO object can be read.");
+
+PyDoc_STRVAR(stringio_writable_doc,
+"writable() -> bool. Returns True if the IO object can be written.");
+
+PyDoc_STRVAR(stringio_seekable_doc,
+"seekable() -> bool. Returns True if the IO object can be seeked.");
+
 static PyObject *
 stringio_seekable(stringio *self, PyObject *args)
 {
     CHECK_INITIALIZED(self);
+    CHECK_CLOSED(self);
     Py_RETURN_TRUE;
 }
 
@@ -771,6 +782,7 @@
 stringio_readable(stringio *self, PyObject *args)
 {
     CHECK_INITIALIZED(self);
+    CHECK_CLOSED(self);
     Py_RETURN_TRUE;
 }
 
@@ -778,6 +790,7 @@
 stringio_writable(stringio *self, PyObject *args)
 {
     CHECK_INITIALIZED(self);
+    CHECK_CLOSED(self);
     Py_RETURN_TRUE;
 }
 
@@ -956,9 +969,9 @@
     {"seek",     (PyCFunction)stringio_seek,     METH_VARARGS, stringio_seek_doc},
     {"write",    (PyCFunction)stringio_write,    METH_O,       stringio_write_doc},
 
-    {"seekable", (PyCFunction)stringio_seekable, METH_NOARGS},
-    {"readable", (PyCFunction)stringio_readable, METH_NOARGS},
-    {"writable", (PyCFunction)stringio_writable, METH_NOARGS},
+    {"seekable", (PyCFunction)stringio_seekable, METH_NOARGS, stringio_seekable_doc},
+    {"readable", (PyCFunction)stringio_readable, METH_NOARGS, stringio_readable_doc},
+    {"writable", (PyCFunction)stringio_writable, METH_NOARGS, stringio_writable_doc},
 
     {"__getstate__", (PyCFunction)stringio_getstate, METH_NOARGS},
     {"__setstate__", (PyCFunction)stringio_setstate, METH_O},
diff -r bd8afb90ebf2 Modules/_io/textio.c
--- a/Modules/_io/textio.c
+++ b/Modules/_io/textio.c
@@ -648,7 +648,7 @@
     "\n"
     "* On output, if newline is None, any '\\n' characters written are\n"
     "  translated to the system default line separator, os.linesep. If\n"
-    "  newline is '' or '\n', no translation takes place. If newline is any\n"
+    "  newline is '' or '\\n', no translation takes place. If newline is any\n"
     "  of the other legal values, any '\\n' characters written are translated\n"
     "  to the given string.\n"
     "\n"
diff -r bd8afb90ebf2 Modules/_json.c
--- a/Modules/_json.c
+++ b/Modules/_json.c
@@ -1660,8 +1660,6 @@
     static PyObject *empty_array = NULL;
     PyObject *ident = NULL;
     PyObject *s_fast = NULL;
-    Py_ssize_t num_items;
-    PyObject **seq_items;
     Py_ssize_t i;
 
     if (open_array == NULL || close_array == NULL || empty_array == NULL) {
@@ -1675,8 +1673,7 @@
     s_fast = PySequence_Fast(seq, "_iterencode_list needs a sequence");
     if (s_fast == NULL)
         return -1;
-    num_items = PySequence_Fast_GET_SIZE(s_fast);
-    if (num_items == 0) {
+    if (PySequence_Fast_GET_SIZE(s_fast) == 0) {
         Py_DECREF(s_fast);
         return _PyAccu_Accumulate(acc, empty_array);
     }
@@ -1697,7 +1694,6 @@
         }
     }
 
-    seq_items = PySequence_Fast_ITEMS(s_fast);
     if (_PyAccu_Accumulate(acc, open_array))
         goto bail;
     if (s->indent != Py_None) {
@@ -1709,8 +1705,8 @@
             buf += newline_indent
         */
     }
-    for (i = 0; i < num_items; i++) {
-        PyObject *obj = seq_items[i];
+    for (i = 0; i < PySequence_Fast_GET_SIZE(s_fast); i++) {
+        PyObject *obj = PySequence_Fast_GET_ITEM(s_fast, i);
         if (i) {
             if (_PyAccu_Accumulate(acc, s->item_separator))
                 goto bail;
diff -r bd8afb90ebf2 Modules/_pickle.c
--- a/Modules/_pickle.c
+++ b/Modules/_pickle.c
@@ -1589,7 +1589,7 @@
          * byte at the start, and cut it back later if possible.
          */
         nbytes = (nbits >> 3) + 1;
-        if (nbytes > INT_MAX) {
+        if (nbytes > 0x7fffffffL) {
             PyErr_SetString(PyExc_OverflowError,
                             "long too large to pickle");
             goto error;
diff -r bd8afb90ebf2 Modules/_posixsubprocess.c
--- a/Modules/_posixsubprocess.c
+++ b/Modules/_posixsubprocess.c
@@ -356,7 +356,7 @@
            PyObject *preexec_fn,
            PyObject *preexec_fn_args_tuple)
 {
-    int i, saved_errno, unused;
+    int i, saved_errno, unused, reached_preexec = 0;
     PyObject *result;
     const char* err_msg = "";
     /* Buffer large enough to hold a hex integer.  We can't malloc. */
@@ -440,6 +440,7 @@
         POSIX_CALL(setsid());
 #endif
 
+    reached_preexec = 1;
     if (preexec_fn != Py_None && preexec_fn_args_tuple) {
         /* This is where the user has asked us to deadlock their program. */
         result = PyObject_Call(preexec_fn, preexec_fn_args_tuple, NULL);
@@ -489,6 +490,10 @@
         }
         unused = write(errpipe_write, cur, hex_errno + sizeof(hex_errno) - cur);
         unused = write(errpipe_write, ":", 1);
+        if (!reached_preexec) {
+            /* Indicate to the parent that the error happened before exec(). */
+            unused = write(errpipe_write, "noexec", 6);
+        }
         /* We can't call strerror(saved_errno).  It is not async signal safe.
          * The parent process will look the error message up. */
     } else {
diff -r bd8afb90ebf2 Modules/_randommodule.c
--- a/Modules/_randommodule.c
+++ b/Modules/_randommodule.c
@@ -284,7 +284,8 @@
         n = newn;
         if (keyused >= keymax) {
             unsigned long bigger = keymax << 1;
-            if ((bigger >> 1) != keymax) {
+            if ((bigger >> 1) != keymax ||
+                bigger > PY_SSIZE_T_MAX / sizeof(*key)) {
                 PyErr_NoMemory();
                 goto Done;
             }
diff -r bd8afb90ebf2 Modules/_sre.c
--- a/Modules/_sre.c
+++ b/Modules/_sre.c
@@ -427,7 +427,7 @@
             }
             else {
                 /* <CHARSET> <bitmap> (32 bits per code word) */
-                if (ch < 256 && (set[ch >> 5] & (1 << (ch & 31))))
+                if (ch < 256 && (set[ch >> 5] & (1u << (ch & 31))))
                     return ok;
                 set += 8;
             }
@@ -466,7 +466,7 @@
                     block = -1;
                 set += 64;
                 if (block >=0 &&
-                    (set[block*8 + ((ch & 255)>>5)] & (1 << (ch & 31))))
+                    (set[block*8 + ((ch & 255)>>5)] & (1u << (ch & 31))))
                     return ok;
                 set += count*8;
             }
@@ -1618,7 +1618,7 @@
 static PyObject *
 sre_codesize(PyObject* self, PyObject *unused)
 {
-    return Py_BuildValue("l", sizeof(SRE_CODE));
+    return PyLong_FromSize_t(sizeof(SRE_CODE));
 }
 
 static PyObject *
@@ -2435,7 +2435,7 @@
         return NULL;
 
     if (subn)
-        return Py_BuildValue("Ni", item, n);
+        return Py_BuildValue("Nn", item, n);
 
     return item;
 
@@ -3387,7 +3387,7 @@
     }
 
     /* mark is -1 if group is undefined */
-    return Py_BuildValue("i", self->mark[index*2]);
+    return PyLong_FromSsize_t(self->mark[index*2]);
 }
 
 static PyObject*
@@ -3410,7 +3410,7 @@
     }
 
     /* mark is -1 if group is undefined */
-    return Py_BuildValue("i", self->mark[index*2+1]);
+    return PyLong_FromSsize_t(self->mark[index*2+1]);
 }
 
 LOCAL(PyObject*)
@@ -3560,7 +3560,7 @@
 match_lastindex_get(MatchObject *self)
 {
     if (self->lastindex >= 0)
-        return Py_BuildValue("i", self->lastindex);
+        return PyLong_FromSsize_t(self->lastindex);
     Py_INCREF(Py_None);
     return Py_None;
 }
diff -r bd8afb90ebf2 Modules/_ssl.c
--- a/Modules/_ssl.c
+++ b/Modules/_ssl.c
@@ -2488,7 +2488,7 @@
     PyObject *path;
     int bytes;
 
-    if (!PyArg_ParseTuple(args, "O&|i:RAND_egd",
+    if (!PyArg_ParseTuple(args, "O&:RAND_egd",
                           PyUnicode_FSConverter, &path))
         return NULL;
 
diff -r bd8afb90ebf2 Modules/_struct.c
--- a/Modules/_struct.c
+++ b/Modules/_struct.c
@@ -1662,7 +1662,7 @@
     if (PyTuple_GET_SIZE(args) != soself->s_len)
     {
         PyErr_Format(StructError,
-            "pack requires exactly %zd arguments", soself->s_len);
+            "pack expected %zd items for packing (got %zd)", soself->s_len, PyTuple_GET_SIZE(args));
         return NULL;
     }
 
@@ -1701,9 +1701,19 @@
     assert(soself->s_codes != NULL);
     if (PyTuple_GET_SIZE(args) != (soself->s_len + 2))
     {
-        PyErr_Format(StructError,
-                     "pack_into requires exactly %zd arguments",
-                     (soself->s_len + 2));
+        if (PyTuple_GET_SIZE(args) == 0) {
+            PyErr_Format(StructError,
+                        "pack_into expected buffer argument");
+        }
+        else if (PyTuple_GET_SIZE(args) == 1) {
+            PyErr_Format(StructError,
+                        "pack_into expected offset argument");
+        }
+        else {
+            PyErr_Format(StructError,
+                        "pack_into expected %zd items for packing (got %zd)",
+                        soself->s_len, (PyTuple_GET_SIZE(args) - 2));
+        }
         return NULL;
     }
 
diff -r bd8afb90ebf2 Modules/_testbuffer.c
--- a/Modules/_testbuffer.c
+++ b/Modules/_testbuffer.c
@@ -16,6 +16,7 @@
 static const char *simple_fmt = "B";
 PyObject *simple_format = NULL;
 #define SIMPLE_FORMAT(fmt) (fmt == NULL || strcmp(fmt, "B") == 0)
+#define FIX_FORMAT(fmt) (fmt == NULL ? "B" : fmt)
 
 
 /**************************************************************************/
@@ -513,10 +514,8 @@
 cmp_structure(Py_buffer *dest, Py_buffer *src)
 {
     Py_ssize_t i;
-    int same_fmt = ((dest->format == NULL && src->format == NULL) || \
-                    (strcmp(dest->format, src->format) == 0));
-
-    if (!same_fmt ||
+
+    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||
         dest->itemsize != src->itemsize ||
         dest->ndim != src->ndim)
         return -1;
diff -r bd8afb90ebf2 Modules/_testcapimodule.c
--- a/Modules/_testcapimodule.c
+++ b/Modules/_testcapimodule.c
@@ -1238,7 +1238,7 @@
         o = PySequence_Fast_GET_ITEM(sub_keywords, i);
         if (!PyUnicode_FSConverter(o, (void *)(converted + i))) {
             PyErr_Format(PyExc_ValueError,
-                "parse_tuple_and_keywords: could not convert keywords[%s] to narrow string", i);
+                "parse_tuple_and_keywords: could not convert keywords[%zd] to narrow string", i);
             goto exit;
         }
         keywords[i] = PyBytes_AS_STRING(converted[i]);
@@ -1521,6 +1521,29 @@
 }
 
 static PyObject *
+unicode_legacy_string(PyObject *self, PyObject *args)
+{
+    Py_UNICODE *data;
+    Py_ssize_t len;
+    PyObject *u;
+
+    if (!PyArg_ParseTuple(args, "u#", &data, &len))
+        return NULL;
+
+    u = PyUnicode_FromUnicode(NULL, len);
+    if (u == NULL)
+        return NULL;
+
+    memcpy(PyUnicode_AS_UNICODE(u), data, len * sizeof(Py_UNICODE));
+
+    if (len > 0) { /* The empty string is always ready. */
+        assert(!PyUnicode_IS_READY(u));
+    }
+
+    return u;
+}
+
+static PyObject *
 getargs_w_star(PyObject *self, PyObject *args)
 {
     Py_buffer buffer;
@@ -2506,6 +2529,7 @@
     {"unicode_aswidecharstring",unicode_aswidecharstring,        METH_VARARGS},
     {"unicode_encodedecimal",   unicode_encodedecimal,           METH_VARARGS},
     {"unicode_transformdecimaltoascii", unicode_transformdecimaltoascii, METH_VARARGS},
+    {"unicode_legacy_string",   unicode_legacy_string,           METH_VARARGS},
 #ifdef WITH_THREAD
     {"_test_thread_state",      test_thread_state,               METH_VARARGS},
     {"_pending_threadfunc",     pending_threadfunc,              METH_VARARGS},
diff -r bd8afb90ebf2 Modules/arraymodule.c
--- a/Modules/arraymodule.c
+++ b/Modules/arraymodule.c
@@ -483,11 +483,11 @@
         return NULL;
     }
 
-    nbytes = size * descr->itemsize;
     /* Check for overflow */
-    if (nbytes / descr->itemsize != (size_t)size) {
+    if (size > PY_SSIZE_T_MAX / descr->itemsize) {
         return PyErr_NoMemory();
     }
+    nbytes = size * descr->itemsize;
     op = (arrayobject *) type->tp_alloc(type, 0);
     if (op == NULL) {
         return NULL;
@@ -1251,11 +1251,15 @@
     if (!PyArg_ParseTuple(args, "On:fromfile", &f, &n))
         return NULL;
 
-    nbytes = n * itemsize;
-    if (nbytes < 0 || nbytes/itemsize != n) {
+    if (n < 0) {
+        PyErr_SetString(PyExc_ValueError, "negative count");
+        return NULL;
+    }
+    if (n > PY_SSIZE_T_MAX / itemsize) {
         PyErr_NoMemory();
         return NULL;
     }
+    nbytes = n * itemsize;
 
     b = _PyObject_CallMethodId(f, &PyId_read, "n", nbytes);
     if (b == NULL)
@@ -1518,7 +1522,7 @@
     if (!PyArg_ParseTuple(args, "u#:fromunicode", &ustr, &n))
         return NULL;
     typecode = self->ob_descr->typecode;
-    if ((typecode != 'u')) {
+    if (typecode != 'u') {
         PyErr_SetString(PyExc_ValueError,
             "fromunicode() may only be called on "
             "unicode type arrays");
@@ -1550,7 +1554,7 @@
 {
     char typecode;
     typecode = self->ob_descr->typecode;
-    if ((typecode != 'u')) {
+    if (typecode != 'u') {
         PyErr_SetString(PyExc_ValueError,
              "tounicode() may only be called on unicode type arrays");
         return NULL;
@@ -2173,10 +2177,11 @@
     if (len == 0) {
         return PyUnicode_FromFormat("array('%c')", (int)typecode);
     }
-    if (typecode == 'u')
+    if (typecode == 'u') {
         v = array_tounicode(a, NULL);
-    else
+    } else {
         v = array_tolist(a, NULL);
+    }
 
     s = PyUnicode_FromFormat("array('%c', %R)", (int)typecode, v);
     Py_DECREF(v);
diff -r bd8afb90ebf2 Modules/audioop.c
--- a/Modules/audioop.c
+++ b/Modules/audioop.c
@@ -1108,8 +1108,7 @@
         PyErr_SetString(AudioopError, "# of channels should be >= 1");
         return NULL;
     }
-    bytes_per_frame = size * nchannels;
-    if (bytes_per_frame / nchannels != size) {
+    if (size > INT_MAX / nchannels) {
         /* This overflow test is rigorously correct because
            both multiplicands are >= 1.  Use the argument names
            from the docs for the error msg. */
@@ -1117,6 +1116,7 @@
                         "width * nchannels too big for a C int");
         return NULL;
     }
+    bytes_per_frame = size * nchannels;
     if (weightA < 1 || weightB < 0) {
         PyErr_SetString(AudioopError,
             "weightA should be >= 1, weightB should be >= 0");
diff -r bd8afb90ebf2 Modules/cjkcodecs/multibytecodec.c
--- a/Modules/cjkcodecs/multibytecodec.c
+++ b/Modules/cjkcodecs/multibytecodec.c
@@ -316,15 +316,15 @@
         goto errorexit;
 
     if (!PyTuple_Check(retobj) || PyTuple_GET_SIZE(retobj) != 2 ||
-        !PyUnicode_Check((tobj = PyTuple_GET_ITEM(retobj, 0))) ||
+        (!PyUnicode_Check((tobj = PyTuple_GET_ITEM(retobj, 0))) && !PyBytes_Check(tobj)) ||
         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {
         PyErr_SetString(PyExc_TypeError,
                         "encoding error handler must return "
-                        "(unicode, int) tuple");
+                        "(str, int) tuple");
         goto errorexit;
     }
 
-    {
+    if (PyUnicode_Check(tobj)) {
         const Py_UNICODE *uraw = PyUnicode_AS_UNICODE(tobj);
 
         retstr = multibytecodec_encode(codec, state, &uraw,
@@ -333,6 +333,10 @@
         if (retstr == NULL)
             goto errorexit;
     }
+    else {
+        Py_INCREF(tobj);
+        retstr = tobj;
+    }
 
     assert(PyBytes_Check(retstr));
     retstrsize = PyBytes_GET_SIZE(retstr);
@@ -439,7 +443,7 @@
         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {
         PyErr_SetString(PyExc_TypeError,
                         "decoding error handler must return "
-                        "(unicode, int) tuple");
+                        "(str, int) tuple");
         goto errorexit;
     }
 
@@ -760,7 +764,7 @@
             return NULL;
         else if (!PyUnicode_Check(unistr)) {
             PyErr_SetString(PyExc_TypeError,
-                "couldn't convert the object to unicode.");
+                "couldn't convert the object to str.");
             Py_DECREF(ucvt);
             return NULL;
         }
diff -r bd8afb90ebf2 Modules/main.c
--- a/Modules/main.c
+++ b/Modules/main.c
@@ -338,6 +338,7 @@
 
     /* Hash randomization needed early for all string operations
        (including -W and -X options). */
+    _PyOS_opterr = 0;  /* prevent printing the error in 1st pass */
     while ((c = _PyOS_GetOpt(argc, argv, PROGRAM_OPTS)) != EOF) {
         if (c == 'm' || c == 'c') {
             /* -c / -m is the last option: following arguments are
diff -r bd8afb90ebf2 Modules/mathmodule.c
--- a/Modules/mathmodule.c
+++ b/Modules/mathmodule.c
@@ -1381,14 +1381,13 @@
         Py_DECREF(outer);
         outer = tmp;
     }
-
-    goto done;
+    Py_DECREF(inner);
+    return outer;
 
   error:
     Py_DECREF(outer);
-  done:
     Py_DECREF(inner);
-    return outer;
+    return NULL;
 }
 
 /* Lookup table for small factorial values */
diff -r bd8afb90ebf2 Modules/mmapmodule.c
--- a/Modules/mmapmodule.c
+++ b/Modules/mmapmodule.c
@@ -1163,6 +1163,11 @@
     if (fd != -1 && fstat(fd, &st) == 0 && S_ISREG(st.st_mode)) {
         if (map_size == 0) {
             off_t calc_size;
+            if (st.st_size == 0) {
+                PyErr_SetString(PyExc_ValueError,
+                                "cannot mmap an empty file");
+                return NULL;
+            }
             if (offset >= st.st_size) {
                 PyErr_SetString(PyExc_ValueError,
                                 "mmap offset is greater than file size");
@@ -1359,6 +1364,12 @@
             }
 
             size = (((PY_LONG_LONG) high) << 32) + low;
+            if (size == 0) {
+                PyErr_SetString(PyExc_ValueError,
+                                "cannot mmap an empty file");
+                Py_DECREF(m_obj);
+                return NULL;
+            }
             if (offset >= size) {
                 PyErr_SetString(PyExc_ValueError,
                                 "mmap offset is greater than file size");
diff -r bd8afb90ebf2 Modules/parsermodule.c
--- a/Modules/parsermodule.c
+++ b/Modules/parsermodule.c
@@ -696,7 +696,7 @@
             err_string("parse tree does not use a valid start symbol");
         }
     }
-    /*  Make sure we throw an exception on all errors.  We should never
+    /*  Make sure we raise an exception on all errors.  We should never
      *  get this, but we'd do well to be sure something is done.
      */
     if (st == NULL && !PyErr_Occurred())
@@ -802,7 +802,7 @@
         else if (!ISNONTERMINAL(type)) {
             /*
              *  It has to be one or the other; this is an error.
-             *  Throw an exception.
+             *  Raise an exception.
              */
             PyObject *err = Py_BuildValue("os", elem, "unknown node type.");
             PyErr_SetObject(parser_error, err);
@@ -854,7 +854,7 @@
     if (ISTERMINAL(num)) {
         /*
          *  The tuple is simple, but it doesn't start with a start symbol.
-         *  Throw an exception now and be done with it.
+         *  Raise an exception now and be done with it.
          */
         tuple = Py_BuildValue("os", tuple,
                     "Illegal syntax-tree; cannot start with terminal symbol.");
diff -r bd8afb90ebf2 Modules/posixmodule.c
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -414,7 +414,14 @@
 
 
 #ifdef AT_FDCWD
-#define DEFAULT_DIR_FD AT_FDCWD
+/*
+ * Why the (int) cast?  Solaris 10 defines AT_FDCWD as 0xffd19553 (-3041965);
+ * without the int cast, the value gets interpreted as uint (4291925331),
+ * which doesn't play nicely with all the initializer lines in this file that
+ * look like this:
+ *      int dir_fd = DEFAULT_DIR_FD;
+ */
+#define DEFAULT_DIR_FD (int)AT_FDCWD
 #else
 #define DEFAULT_DIR_FD (-100)
 #endif
@@ -791,7 +798,7 @@
 
 #if defined _MSC_VER && _MSC_VER >= 1400
 /* Microsoft CRT in VS2005 and higher will verify that a filehandle is
- * valid and throw an assertion if it isn't.
+ * valid and raise an assertion if it isn't.
  * Normally, an invalid fd is likely to be a C program error and therefore
  * an assertion can be useful, but it does contradict the POSIX standard
  * which for write(2) states:
@@ -2561,7 +2568,7 @@
         result = win32_wchdir(path.wide);
     else
         result = win32_chdir(path.narrow);
-	result = !result; /* on unix, success = 0, on windows, success = !0 */
+    result = !result; /* on unix, success = 0, on windows, success = !0 */
 #elif defined(PYOS_OS2) && defined(PYCC_GCC)
     result = _chdir2(path.narrow);
 #else
@@ -7109,12 +7116,12 @@
     if (!check_CreateSymbolicLink()) {
         PyErr_SetString(PyExc_NotImplementedError,
             "CreateSymbolicLink functions not found");
-		return NULL;
-	}
+                return NULL;
+        }
     if (!win32_can_symlink) {
         PyErr_SetString(PyExc_OSError, "symbolic link privilege not held");
-		return NULL;
-	}
+                return NULL;
+        }
 #endif
 
     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O&O&|i$O&:symlink",
@@ -7190,7 +7197,7 @@
     DWORD n_bytes_returned;
     DWORD io_result;
     PyObject *po, *result;
-	int dir_fd;
+        int dir_fd;
     HANDLE reparse_point_handle;
 
     char target_buffer[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
diff -r bd8afb90ebf2 Modules/python.c
--- a/Modules/python.c
+++ b/Modules/python.c
@@ -15,10 +15,6 @@
 }
 #else
 
-#ifdef __APPLE__
-extern wchar_t* _Py_DecodeUTF8_surrogateescape(const char *s, Py_ssize_t size);
-#endif
-
 int
 main(int argc, char **argv)
 {
@@ -45,11 +41,7 @@
     oldloc = strdup(setlocale(LC_ALL, NULL));
     setlocale(LC_ALL, "");
     for (i = 0; i < argc; i++) {
-#ifdef __APPLE__
-        argv_copy[i] = _Py_DecodeUTF8_surrogateescape(argv[i], strlen(argv[i]));
-#else
         argv_copy[i] = _Py_char2wchar(argv[i], NULL);
-#endif
         if (!argv_copy[i]) {
             free(oldloc);
             fprintf(stderr, "Fatal Python error: "
diff -r bd8afb90ebf2 Modules/selectmodule.c
--- a/Modules/selectmodule.c
+++ b/Modules/selectmodule.c
@@ -89,7 +89,7 @@
 {
     int max = -1;
     int index = 0;
-    Py_ssize_t i, len = -1;
+    Py_ssize_t i;
     PyObject* fast_seq = NULL;
     PyObject* o = NULL;
 
@@ -100,9 +100,7 @@
     if (!fast_seq)
         return -1;
 
-    len = PySequence_Fast_GET_SIZE(fast_seq);
-
-    for (i = 0; i < len; i++)  {
+    for (i = 0; i < PySequence_Fast_GET_SIZE(fast_seq); i++)  {
         SOCKET v;
 
         /* any intervening fileno() calls could decr this refcnt */
@@ -239,7 +237,7 @@
 #else
         /* 64-bit OS X has struct timeval.tv_usec as an int (and thus still 4
            bytes as required), but no longer defined by a long. */
-        long tv_usec = tv.tv_usec;
+        long tv_usec;
         if (_PyTime_ObjectToTimeval(tout, &tv.tv_sec, &tv_usec) == -1)
             return NULL;
         tv.tv_usec = tv_usec;
diff -r bd8afb90ebf2 Modules/signalmodule.c
--- a/Modules/signalmodule.c
+++ b/Modules/signalmodule.c
@@ -1394,9 +1394,25 @@
     return 0;
 }
 
+static void
+_clear_pending_signals(void)
+{
+    int i;
+    if (!is_tripped)
+        return;
+    is_tripped = 0;
+    for (i = 1; i < NSIG; ++i) {
+        Handlers[i].tripped = 0;
+    }
+}
+
 void
 PyOS_AfterFork(void)
 {
+    /* Clear the signal flags after forking so that they aren't handled
+     * in both processes if they came in just before the fork() but before
+     * the interpreter had an opportunity to call the handlers.  issue9535. */
+    _clear_pending_signals();
 #ifdef WITH_THREAD
     /* PyThread_ReInitTLS() must be called early, to make sure that the TLS API
      * can be called safely. */
diff -r bd8afb90ebf2 Modules/socketmodule.c
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -1674,7 +1674,8 @@
             if (len == 0) {
                 ifr.ifr_ifindex = 0;
             } else if (len < sizeof(ifr.ifr_name)) {
-                strcpy(ifr.ifr_name, PyBytes_AS_STRING(interfaceName));
+                strncpy(ifr.ifr_name, PyBytes_AS_STRING(interfaceName), sizeof(ifr.ifr_name));
+                ifr.ifr_name[(sizeof(ifr.ifr_name))-1] = '\0';
                 if (ioctl(s->sock_fd, SIOCGIFINDEX, &ifr) < 0) {
                     s->errorhandler();
                     Py_DECREF(interfaceName);
diff -r bd8afb90ebf2 Modules/symtablemodule.c
--- a/Modules/symtablemodule.c
+++ b/Modules/symtablemodule.c
@@ -63,6 +63,9 @@
 {
     PyObject *m;
 
+    if (PyType_Ready(&PySTEntry_Type) < 0)
+        return NULL;
+
     m = PyModule_Create(&symtablemodule);
     if (m == NULL)
         return NULL;
diff -r bd8afb90ebf2 Modules/unicodedata.c
--- a/Modules/unicodedata.c
+++ b/Modules/unicodedata.c
@@ -273,7 +273,7 @@
 PyDoc_STRVAR(unicodedata_bidirectional__doc__,
 "bidirectional(unichr)\n\
 \n\
-Returns the bidirectional category assigned to the Unicode character\n\
+Returns the bidirectional class assigned to the Unicode character\n\
 unichr as string. If no such value is defined, an empty string is\n\
 returned.");
 
diff -r bd8afb90ebf2 Modules/zipimport.c
--- a/Modules/zipimport.c
+++ b/Modules/zipimport.c
@@ -236,12 +236,16 @@
         return NULL;
     }
 
-    if (!PyUnicode_AsUCS4(prefix, p, len, 0))
+    if (!PyUnicode_AsUCS4(prefix, p, len, 0)) {
+        PyMem_Free(buf);
         return NULL;
+    }
     p += PyUnicode_GET_LENGTH(prefix);
     len -= PyUnicode_GET_LENGTH(prefix);
-    if (!PyUnicode_AsUCS4(name, p, len, 1))
+    if (!PyUnicode_AsUCS4(name, p, len, 1)) {
+        PyMem_Free(buf);
         return NULL;
+    }
     for (; *p; p++) {
         if (*p == '.')
             *p = SEP;
@@ -871,7 +875,12 @@
             PyErr_Format(ZipImportError, "can't open Zip file: %R", archive);
         return NULL;
     }
-    fseek(fp, -22, SEEK_END);
+
+    if (fseek(fp, -22, SEEK_END) == -1) {
+        fclose(fp);
+        PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);
+        return NULL;
+    }
     header_position = ftell(fp);
     if (fread(endof_central_dir, 1, 22, fp) != 22) {
         fclose(fp);
@@ -900,11 +909,13 @@
         PyObject *t;
         int err;
 
-        fseek(fp, header_offset, 0);  /* Start of file header */
+        if (fseek(fp, header_offset, 0) == -1)  /* Start of file header */
+            goto fseek_error;
         l = PyMarshal_ReadLongFromFile(fp);
         if (l != 0x02014B50)
             break;              /* Bad: Central Dir File Header */
-        fseek(fp, header_offset + 8, 0);
+        if (fseek(fp, header_offset + 8, 0) == -1)
+            goto fseek_error;
         flags = (unsigned short)PyMarshal_ReadShortFromFile(fp);
         compress = PyMarshal_ReadShortFromFile(fp);
         time = PyMarshal_ReadShortFromFile(fp);
@@ -916,7 +927,8 @@
         header_size = 46 + name_size +
            PyMarshal_ReadShortFromFile(fp) +
            PyMarshal_ReadShortFromFile(fp);
-        fseek(fp, header_offset + 42, 0);
+        if (fseek(fp, header_offset + 42, 0) == -1)
+            goto fseek_error;
         file_offset = PyMarshal_ReadLongFromFile(fp) + arc_offset;
         if (name_size > MAXPATHLEN)
             name_size = MAXPATHLEN;
@@ -976,6 +988,12 @@
         PySys_FormatStderr("# zipimport: found %ld names in %R\n",
                            count, archive);
     return files;
+fseek_error:
+    fclose(fp);
+    Py_XDECREF(files);
+    Py_XDECREF(nameobj);
+    PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);
+    return NULL;
 error:
     fclose(fp);
     Py_XDECREF(files);
@@ -1046,7 +1064,12 @@
     }
 
     /* Check to make sure the local file header is correct */
-    fseek(fp, file_offset, 0);
+    if (fseek(fp, file_offset, 0) == -1) {
+        fclose(fp);
+        PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);
+        return NULL;
+    }
+
     l = PyMarshal_ReadLongFromFile(fp);
     if (l != 0x04034B50) {
         /* Bad: Local File Header */
@@ -1056,7 +1079,12 @@
         fclose(fp);
         return NULL;
     }
-    fseek(fp, file_offset + 26, 0);
+    if (fseek(fp, file_offset + 26, 0) == -1) {
+        fclose(fp);
+        PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);
+        return NULL;
+    }
+
     l = 30 + PyMarshal_ReadShortFromFile(fp) +
         PyMarshal_ReadShortFromFile(fp);        /* local header size */
     file_offset += l;           /* Start of file data */
@@ -1073,8 +1101,13 @@
     buf = PyBytes_AsString(raw_data);
 
     err = fseek(fp, file_offset, 0);
-    if (err == 0)
+    if (err == 0) {
         bytes_read = fread(buf, 1, data_size, fp);
+    } else {
+        fclose(fp);
+        PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);
+        return NULL;
+    }
     fclose(fp);
     if (err || bytes_read != data_size) {
         PyErr_SetString(PyExc_IOError,
diff -r bd8afb90ebf2 Modules/zlibmodule.c
--- a/Modules/zlibmodule.c
+++ b/Modules/zlibmodule.c
@@ -139,7 +139,7 @@
 PyDoc_STRVAR(compress__doc__,
 "compress(string[, level]) -- Returned compressed string.\n"
 "\n"
-"Optional arg level is the compression level, in 1-9.");
+"Optional arg level is the compression level, in 0-9.");
 
 static PyObject *
 PyZlib_compress(PyObject *self, PyObject *args)
@@ -561,6 +561,49 @@
     return RetVal;
 }
 
+/* Helper for objdecompress() and unflush(). Saves any unconsumed input data in
+   self->unused_data or self->unconsumed_tail, as appropriate. */
+static int
+save_unconsumed_input(compobject *self, int err)
+{
+    if (err == Z_STREAM_END) {
+        /* The end of the compressed data has been reached. Store the leftover
+           input data in self->unused_data. */
+        if (self->zst.avail_in > 0) {
+            Py_ssize_t old_size = PyBytes_GET_SIZE(self->unused_data);
+            Py_ssize_t new_size;
+            PyObject *new_data;
+            if (self->zst.avail_in > PY_SSIZE_T_MAX - old_size) {
+                PyErr_NoMemory();
+                return -1;
+            }
+            new_size = old_size + self->zst.avail_in;
+            new_data = PyBytes_FromStringAndSize(NULL, new_size);
+            if (new_data == NULL)
+                return -1;
+            Py_MEMCPY(PyBytes_AS_STRING(new_data),
+                      PyBytes_AS_STRING(self->unused_data), old_size);
+            Py_MEMCPY(PyBytes_AS_STRING(new_data) + old_size,
+                      self->zst.next_in, self->zst.avail_in);
+            Py_DECREF(self->unused_data);
+            self->unused_data = new_data;
+            self->zst.avail_in = 0;
+        }
+    }
+    if (self->zst.avail_in > 0 || PyBytes_GET_SIZE(self->unconsumed_tail)) {
+        /* This code handles two distinct cases:
+           1. Output limit was reached. Save leftover input in unconsumed_tail.
+           2. All input data was consumed. Clear unconsumed_tail. */
+        PyObject *new_data = PyBytes_FromStringAndSize(
+                (char *)self->zst.next_in, self->zst.avail_in);
+        if (new_data == NULL)
+            return -1;
+        Py_DECREF(self->unconsumed_tail);
+        self->unconsumed_tail = new_data;
+    }
+    return 0;
+}
+
 PyDoc_STRVAR(decomp_decompress__doc__,
 "decompress(data, max_length) -- Return a string containing the decompressed\n"
 "version of the data.\n"
@@ -668,44 +711,21 @@
         Py_END_ALLOW_THREADS
     }
 
-    if(max_length) {
-        /* Not all of the compressed data could be accommodated in a buffer of
-           the specified size. Return the unconsumed tail in an attribute. */
-        Py_DECREF(self->unconsumed_tail);
-        self->unconsumed_tail = PyBytes_FromStringAndSize((char *)self->zst.next_in,
-                                                           self->zst.avail_in);
-    }
-    else if (PyBytes_GET_SIZE(self->unconsumed_tail) > 0) {
-        /* All of the compressed data was consumed. Clear unconsumed_tail. */
-        Py_DECREF(self->unconsumed_tail);
-        self->unconsumed_tail = PyBytes_FromStringAndSize("", 0);
-    }
-    if (self->unconsumed_tail == NULL) {
+    if (save_unconsumed_input(self, err) < 0) {
         Py_DECREF(RetVal);
         RetVal = NULL;
         goto error;
     }
 
-    /* The end of the compressed data has been reached, so set the
-       unused_data attribute to a string containing the remainder of the
-       data in the string.  Note that this is also a logical place to call
-       inflateEnd, but the old behaviour of only calling it on flush() is
-       preserved.
-    */
     if (err == Z_STREAM_END) {
-        Py_XDECREF(self->unused_data);  /* Free original empty string */
-        self->unused_data = PyBytes_FromStringAndSize(
-            (char *)self->zst.next_in, self->zst.avail_in);
-        if (self->unused_data == NULL) {
-            Py_DECREF(RetVal);
-            goto error;
-        }
+        /* This is the logical place to call inflateEnd, but the old behaviour
+           of only calling it on flush() is preserved. */
         self->eof = 1;
+    } else if (err != Z_OK && err != Z_BUF_ERROR) {
         /* We will only get Z_BUF_ERROR if the output buffer was full
            but there wasn't more output when we tried again, so it is
            not an error condition.
         */
-    } else if (err != Z_OK && err != Z_BUF_ERROR) {
         zlib_error(self->zst, err, "while decompressing data");
         Py_DECREF(RetVal);
         RetVal = NULL;
@@ -955,6 +975,8 @@
     ENTER_ZLIB(self);
 
     start_total_out = self->zst.total_out;
+    self->zst.avail_in = PyBytes_GET_SIZE(self->unconsumed_tail);
+    self->zst.next_in = (Byte *)PyBytes_AS_STRING(self->unconsumed_tail);
     self->zst.avail_out = length;
     self->zst.next_out = (Byte *)PyBytes_AS_STRING(retval);
 
@@ -979,6 +1001,12 @@
         Py_END_ALLOW_THREADS
     }
 
+    if (save_unconsumed_input(self, err) < 0) {
+        Py_DECREF(retval);
+        retval = NULL;
+        goto error;
+    }
+
     /* If at end of stream, clean up any memory allocated by zlib. */
     if (err == Z_STREAM_END) {
         self->eof = 1;
@@ -991,6 +1019,7 @@
             goto error;
         }
     }
+
     if (_PyBytes_Resize(&retval, self->zst.total_out - start_total_out) < 0) {
         Py_DECREF(retval);
         retval = NULL;
@@ -1198,7 +1227,7 @@
 "zlib library, which is based on GNU zip.\n"
 "\n"
 "adler32(string[, start]) -- Compute an Adler-32 checksum.\n"
-"compress(string[, level]) -- Compress string, with compression level in 1-9.\n"
+"compress(string[, level]) -- Compress string, with compression level in 0-9.\n"
 "compressobj([level[, ...]]) -- Return a compressor object.\n"
 "crc32(string[, start]) -- Compute a CRC-32 checksum.\n"
 "decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.\n"
diff -r bd8afb90ebf2 Objects/bytearrayobject.c
--- a/Objects/bytearrayobject.c
+++ b/Objects/bytearrayobject.c
@@ -589,8 +589,14 @@
         needed = 0;
     }
     else if (values == (PyObject *)self || !PyByteArray_Check(values)) {
+        int err;
+        if (PyNumber_Check(values) || PyUnicode_Check(values)) {
+            PyErr_SetString(PyExc_TypeError,
+                            "can assign only bytes, buffers, or iterables "
+                            "of ints in range(0, 256)");
+            return -1;
+        }
         /* Make a copy and call this function recursively */
-        int err;
         values = PyByteArray_FromObject(values);
         if (values == NULL)
             return -1;
diff -r bd8afb90ebf2 Objects/bytesobject.c
--- a/Objects/bytesobject.c
+++ b/Objects/bytesobject.c
@@ -2505,8 +2505,10 @@
     const char *encoding = NULL;
     const char *errors = NULL;
     PyObject *new = NULL;
+    PyObject *func;
     Py_ssize_t size;
     static char *kwlist[] = {"source", "encoding", "errors", 0};
+    _Py_IDENTIFIER(__bytes__);
 
     if (type != &PyBytes_Type)
         return str_subtype_new(type, args, kwds);
@@ -2536,6 +2538,28 @@
         assert(PyBytes_Check(new));
         return new;
     }
+
+    /* We'd like to call PyObject_Bytes here, but we need to check for an
+       integer argument before deferring to PyBytes_FromObject, something
+       PyObject_Bytes doesn't do. */
+    func = _PyObject_LookupSpecial(x, &PyId___bytes__);
+    if (func != NULL) {
+        new = PyObject_CallFunctionObjArgs(func, NULL);
+        Py_DECREF(func);
+        if (new == NULL)
+            return NULL;
+        if (!PyBytes_Check(new)) {
+            PyErr_Format(PyExc_TypeError,
+                         "__bytes__ returned non-bytes (type %.200s)",
+                         Py_TYPE(new)->tp_name);
+            Py_DECREF(new);
+            return NULL;
+        }
+        return new;
+    }
+    else if (PyErr_Occurred())
+        return NULL;
+
     /* Is it an integer? */
     size = PyNumber_AsSsize_t(x, PyExc_OverflowError);
     if (size == -1 && PyErr_Occurred()) {
@@ -2549,12 +2573,10 @@
     }
     else {
         new = PyBytes_FromStringAndSize(NULL, size);
-        if (new == NULL) {
+        if (new == NULL)
             return NULL;
-        }
-        if (size > 0) {
+        if (size > 0)
             memset(((PyBytesObject*)new)->ob_sval, 0, size);
-        }
         return new;
     }
 
@@ -2564,7 +2586,8 @@
             "encoding or errors without a string argument");
         return NULL;
     }
-    return PyObject_Bytes(x);
+
+    return PyBytes_FromObject(x);
 }
 
 PyObject *
diff -r bd8afb90ebf2 Objects/classobject.c
--- a/Objects/classobject.c
+++ b/Objects/classobject.c
@@ -219,7 +219,7 @@
 {
     PyObject *self = a->im_self;
     PyObject *func = a->im_func;
-    PyObject *klass = (PyObject*)Py_TYPE(self);
+    PyObject *klass;
     PyObject *funcname = NULL ,*klassname = NULL, *result = NULL;
     char *defname = "?";
 
@@ -227,6 +227,7 @@
         PyErr_BadInternalCall();
         return NULL;
     }
+    klass = (PyObject*)Py_TYPE(self);
 
     funcname = _PyObject_GetAttrId(func, &PyId___name__);
     if (funcname == NULL) {
diff -r bd8afb90ebf2 Objects/dictobject.c
--- a/Objects/dictobject.c
+++ b/Objects/dictobject.c
@@ -1707,45 +1707,46 @@
     if (d == NULL)
         return NULL;
 
-    if (PyDict_CheckExact(d) && PyDict_CheckExact(seq)) {
-        PyDictObject *mp = (PyDictObject *)d;
-        PyObject *oldvalue;
-        Py_ssize_t pos = 0;
-        PyObject *key;
-        Py_hash_t hash;
-
-        if (dictresize(mp, Py_SIZE(seq))) {
-            Py_DECREF(d);
-            return NULL;
-        }
-
-        while (_PyDict_Next(seq, &pos, &key, &oldvalue, &hash)) {
-            if (insertdict(mp, key, hash, value)) {
+    if (PyDict_CheckExact(d) && ((PyDictObject *)d)->ma_used == 0) {
+        if (PyDict_CheckExact(seq)) {
+            PyDictObject *mp = (PyDictObject *)d;
+            PyObject *oldvalue;
+            Py_ssize_t pos = 0;
+            PyObject *key;
+            Py_hash_t hash;
+
+            if (dictresize(mp, Py_SIZE(seq))) {
                 Py_DECREF(d);
                 return NULL;
             }
+
+            while (_PyDict_Next(seq, &pos, &key, &oldvalue, &hash)) {
+                if (insertdict(mp, key, hash, value)) {
+                    Py_DECREF(d);
+                    return NULL;
+                }
+            }
+            return d;
         }
-        return d;
-    }
-
-    if (PyDict_CheckExact(d) && PyAnySet_CheckExact(seq)) {
-        PyDictObject *mp = (PyDictObject *)d;
-        Py_ssize_t pos = 0;
-        PyObject *key;
-        Py_hash_t hash;
-
-        if (dictresize(mp, PySet_GET_SIZE(seq))) {
-            Py_DECREF(d);
-            return NULL;
-        }
-
-        while (_PySet_NextEntry(seq, &pos, &key, &hash)) {
-            if (insertdict(mp, key, hash, value)) {
+        if (PyAnySet_CheckExact(seq)) {
+            PyDictObject *mp = (PyDictObject *)d;
+            Py_ssize_t pos = 0;
+            PyObject *key;
+            Py_hash_t hash;
+
+            if (dictresize(mp, PySet_GET_SIZE(seq))) {
                 Py_DECREF(d);
                 return NULL;
             }
+
+            while (_PySet_NextEntry(seq, &pos, &key, &hash)) {
+                if (insertdict(mp, key, hash, value)) {
+                    Py_DECREF(d);
+                    return NULL;
+                }
+            }
+            return d;
         }
-        return d;
     }
 
     it = PyObject_GetIter(seq);
diff -r bd8afb90ebf2 Objects/longobject.c
--- a/Objects/longobject.c
+++ b/Objects/longobject.c
@@ -30,7 +30,7 @@
 */
 static PyLongObject small_ints[NSMALLNEGINTS + NSMALLPOSINTS];
 #ifdef COUNT_ALLOCS
-int quick_int_allocs, quick_neg_int_allocs;
+Py_ssize_t quick_int_allocs, quick_neg_int_allocs;
 #endif
 
 static PyObject *
@@ -668,10 +668,9 @@
     assert(ndigits == 0 || v->ob_digit[ndigits - 1] != 0);
     if (ndigits > 0) {
         digit msd = v->ob_digit[ndigits - 1];
-
-        result = (ndigits - 1) * PyLong_SHIFT;
-        if (result / PyLong_SHIFT != (size_t)(ndigits - 1))
+        if ((size_t)(ndigits - 1) > PY_SIZE_MAX / (size_t)PyLong_SHIFT)
             goto Overflow;
+        result = (size_t)(ndigits - 1) * (size_t)PyLong_SHIFT;
         do {
             ++result;
             if (result == 0)
@@ -936,6 +935,13 @@
 PyObject *
 PyLong_FromVoidPtr(void *p)
 {
+#if SIZEOF_VOID_P <= SIZEOF_LONG
+    /* special-case null pointer */
+    if (!p)
+        return PyLong_FromLong(0);
+    return PyLong_FromUnsignedLong((unsigned long)(Py_uintptr_t)p);
+#else
+
 #ifndef HAVE_LONG_LONG
 #   error "PyLong_FromVoidPtr: sizeof(void*) > sizeof(long), but no long long"
 #endif
@@ -946,6 +952,7 @@
     if (!p)
         return PyLong_FromLong(0);
     return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)(Py_uintptr_t)p);
+#endif /* SIZEOF_VOID_P <= SIZEOF_LONG */
 
 }
 
@@ -1628,8 +1635,10 @@
         strlen++;
     }
     if (writer) {
-        if (_PyUnicodeWriter_Prepare(writer, strlen, '9') == -1)
+        if (_PyUnicodeWriter_Prepare(writer, strlen, '9') == -1) {
+            Py_DECREF(scratch);
             return -1;
+        }
         kind = writer->kind;
         str = NULL;
     }
@@ -4283,8 +4292,8 @@
             string = PyByteArray_AS_STRING(x);
         else
             string = PyBytes_AS_STRING(x);
-        if (strlen(string) != (size_t)size) {
-            /* We only see this if there's a null byte in x,
+        if (strlen(string) != (size_t)size || !size) {
+            /* We only see this if there's a null byte in x or x is empty,
                x is a bytes or buffer, *and* a base is given. */
             PyErr_Format(PyExc_ValueError,
                          "invalid literal for int() with base %d: %R",
@@ -4847,13 +4856,20 @@
 };
 
 PyDoc_STRVAR(long_doc,
-"int(x[, base]) -> integer\n\
+"int(x=0) -> integer\n\
+int(x, base=10) -> integer\n\
 \n\
-Convert a string or number to an integer, if possible.  A floating\n\
-point argument will be truncated towards zero (this does not include a\n\
-string representation of a floating point number!)  When converting a\n\
-string, use the optional base.  It is an error to supply a base when\n\
-converting a non-string.");
+Convert a number or string to an integer, or return 0 if no arguments\n\
+are given.  If x is a number, return x.__int__().  For floating point\n\
+numbers, this truncates towards zero.\n\
+\n\
+If x is not a number or if base is given, then x must be a string,\n\
+bytes, or bytearray instance representing an integer literal in the\n\
+given base.  The literal can be preceded by '+' or '-' and be surrounded\n\
+by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n\
+Base 0 means to interpret the base from the string as an integer literal.\n\
+>>> int('0b100', base=0)\n\
+4");
 
 static PyNumberMethods long_as_number = {
     (binaryfunc)long_add,       /*nb_add*/
diff -r bd8afb90ebf2 Objects/memoryobject.c
--- a/Objects/memoryobject.c
+++ b/Objects/memoryobject.c
@@ -2707,6 +2707,8 @@
     if (self->hash == -1) {
         Py_buffer *view = &self->view;
         char *mem = view->buf;
+        Py_ssize_t ret;
+        char fmt;
 
         CHECK_RELEASED_INT(self);
 
@@ -2715,6 +2717,12 @@
                 "cannot hash writable memoryview object");
             return -1;
         }
+        ret = get_native_fmtchar(&fmt, view->format);
+        if (ret < 0 || !IS_BYTE_FORMAT(fmt)) {
+            PyErr_SetString(PyExc_ValueError,
+                "memoryview: hashing is restricted to formats 'B', 'b' or 'c'");
+            return -1;
+        }
         if (view->obj != NULL && PyObject_Hash(view->obj) == -1) {
             /* Keep the original error message */
             return -1;
@@ -2861,28 +2869,74 @@
     return PyBool_FromLong(MV_ANY_CONTIGUOUS(self->flags));
 }
 
+PyDoc_STRVAR(memory_obj_doc,
+             "The underlying object of the memoryview.");
+PyDoc_STRVAR(memory_nbytes_doc,
+             "The amount of space in bytes that the array would use in\n"
+             " a contiguous representation.");
+PyDoc_STRVAR(memory_readonly_doc,
+             "A bool indicating whether the memory is read only.");
+PyDoc_STRVAR(memory_itemsize_doc,
+             "The size in bytes of each element of the memoryview.");
+PyDoc_STRVAR(memory_format_doc,
+             "A string containing the format (in struct module style)\n"
+             " for each element in the view.");
+PyDoc_STRVAR(memory_ndim_doc,
+             "An integer indicating how many dimensions of a multi-dimensional\n"
+             " array the memory represents.");
+PyDoc_STRVAR(memory_shape_doc,
+             "A tuple of ndim integers giving the shape of the memory\n"
+             " as an N-dimensional array.");
+PyDoc_STRVAR(memory_strides_doc,
+             "A tuple of ndim integers giving the size in bytes to access\n"
+             " each element for each dimension of the array.");
+PyDoc_STRVAR(memory_suboffsets_doc,
+             "A tuple of integers used internally for PIL-style arrays.");
+PyDoc_STRVAR(memory_c_contiguous_doc,
+             "A bool indicating whether the memory is C contiguous.");
+PyDoc_STRVAR(memory_f_contiguous_doc,
+             "A bool indicating whether the memory is Fortran contiguous.");
+PyDoc_STRVAR(memory_contiguous_doc,
+             "A bool indicating whether the memory is contiguous.");
+
 static PyGetSetDef memory_getsetlist[] = {
-    {"obj",             (getter)memory_obj_get,        NULL, NULL},
-    {"nbytes",          (getter)memory_nbytes_get,     NULL, NULL},
-    {"readonly",        (getter)memory_readonly_get,   NULL, NULL},
-    {"itemsize",        (getter)memory_itemsize_get,   NULL, NULL},
-    {"format",          (getter)memory_format_get,     NULL, NULL},
-    {"ndim",            (getter)memory_ndim_get,       NULL, NULL},
-    {"shape",           (getter)memory_shape_get,      NULL, NULL},
-    {"strides",         (getter)memory_strides_get,    NULL, NULL},
-    {"suboffsets",      (getter)memory_suboffsets_get, NULL, NULL},
-    {"c_contiguous",    (getter)memory_c_contiguous,   NULL, NULL},
-    {"f_contiguous",    (getter)memory_f_contiguous,   NULL, NULL},
-    {"contiguous",      (getter)memory_contiguous,     NULL, NULL},
+    {"obj",             (getter)memory_obj_get,        NULL, memory_obj_doc},
+    {"nbytes",          (getter)memory_nbytes_get,     NULL, memory_nbytes_doc},
+    {"readonly",        (getter)memory_readonly_get,   NULL, memory_readonly_doc},
+    {"itemsize",        (getter)memory_itemsize_get,   NULL, memory_itemsize_doc},
+    {"format",          (getter)memory_format_get,     NULL, memory_format_doc},
+    {"ndim",            (getter)memory_ndim_get,       NULL, memory_ndim_doc},
+    {"shape",           (getter)memory_shape_get,      NULL, memory_shape_doc},
+    {"strides",         (getter)memory_strides_get,    NULL, memory_strides_doc},
+    {"suboffsets",      (getter)memory_suboffsets_get, NULL, memory_suboffsets_doc},
+    {"c_contiguous",    (getter)memory_c_contiguous,   NULL, memory_c_contiguous_doc},
+    {"f_contiguous",    (getter)memory_f_contiguous,   NULL, memory_f_contiguous_doc},
+    {"contiguous",      (getter)memory_contiguous,     NULL, memory_contiguous_doc},
     {NULL, NULL, NULL, NULL},
 };
 
+PyDoc_STRVAR(memory_release_doc,
+"M.release() -> None\n\
+\n\
+Release the underlying buffer exposed by the memoryview object.");
+PyDoc_STRVAR(memory_tobytes_doc,
+"M.tobytes() -> bytes\n\
+\n\
+Return the data in the buffer as a byte string.");
+PyDoc_STRVAR(memory_tolist_doc,
+"M.tolist() -> list\n\
+\n\
+Return the data in the buffer as a list of elements.");
+PyDoc_STRVAR(memory_cast_doc,
+"M.cast(format[, shape]) -> memoryview\n\
+\n\
+Cast a memoryview to a new format or shape.");
 
 static PyMethodDef memory_methods[] = {
-    {"release",     (PyCFunction)memory_release, METH_NOARGS, NULL},
-    {"tobytes",     (PyCFunction)memory_tobytes, METH_NOARGS, NULL},
-    {"tolist",      (PyCFunction)memory_tolist, METH_NOARGS, NULL},
-    {"cast",        (PyCFunction)memory_cast, METH_VARARGS|METH_KEYWORDS, NULL},
+    {"release",     (PyCFunction)memory_release, METH_NOARGS, memory_release_doc},
+    {"tobytes",     (PyCFunction)memory_tobytes, METH_NOARGS, memory_tobytes_doc},
+    {"tolist",      (PyCFunction)memory_tolist, METH_NOARGS, memory_tolist_doc},
+    {"cast",        (PyCFunction)memory_cast, METH_VARARGS|METH_KEYWORDS, memory_cast_doc},
     {"__enter__",   memory_enter, METH_NOARGS, NULL},
     {"__exit__",    memory_exit, METH_VARARGS, NULL},
     {NULL,          NULL}
diff -r bd8afb90ebf2 Objects/namespaceobject.c
--- a/Objects/namespaceobject.c
+++ b/Objects/namespaceobject.c
@@ -21,19 +21,19 @@
 static PyObject *
 namespace_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
 {
-    _PyNamespaceObject *ns;
-    ns = PyObject_GC_New(_PyNamespaceObject, &_PyNamespace_Type);
-    if (ns == NULL)
-        return NULL;
+    PyObject *self;
 
-    ns->ns_dict = PyDict_New();
-    if (ns->ns_dict == NULL) {
-        Py_DECREF(ns);
-        return NULL;
+    assert(type != NULL && type->tp_alloc != NULL);
+    self = type->tp_alloc(type, 0);
+    if (self != NULL) {
+        _PyNamespaceObject *ns = (_PyNamespaceObject *)self;
+        ns->ns_dict = PyDict_New();
+        if (ns->ns_dict == NULL) {
+            Py_DECREF(ns);
+            return NULL;
+        }
     }
-
-    PyObject_GC_Track(ns);
-    return (PyObject *)ns;
+    return self;
 }
 
 
diff -r bd8afb90ebf2 Objects/object.c
--- a/Objects/object.c
+++ b/Objects/object.c
@@ -1710,6 +1710,30 @@
 
     if (PyType_Ready(&_PyNamespace_Type) < 0)
         Py_FatalError("Can't initialize namespace type");
+
+    if (PyType_Ready(&PyCapsule_Type) < 0)
+        Py_FatalError("Can't initialize capsule type");
+
+    if (PyType_Ready(&PyLongRangeIter_Type) < 0)
+        Py_FatalError("Can't initialize long range iterator type");
+
+    if (PyType_Ready(&PyCell_Type) < 0)
+        Py_FatalError("Can't initialize cell type");
+
+    if (PyType_Ready(&PyInstanceMethod_Type) < 0)
+        Py_FatalError("Can't initialize instance method type");
+
+    if (PyType_Ready(&PyClassMethodDescr_Type) < 0)
+        Py_FatalError("Can't initialize class method descr type");
+
+    if (PyType_Ready(&PyMethodDescr_Type) < 0)
+        Py_FatalError("Can't initialize method descr type");
+
+    if (PyType_Ready(&PyCallIter_Type) < 0)
+        Py_FatalError("Can't initialize call iter type");
+
+    if (PyType_Ready(&PySeqIter_Type) < 0)
+        Py_FatalError("Can't initialize sequence iterator type");
 }
 
 
diff -r bd8afb90ebf2 Objects/obmalloc.c
--- a/Objects/obmalloc.c
+++ b/Objects/obmalloc.c
@@ -138,7 +138,6 @@
  */
 #define ALIGNMENT               8               /* must be 2^N */
 #define ALIGNMENT_SHIFT         3
-#define ALIGNMENT_MASK          (ALIGNMENT - 1)
 
 /* Return the number of bytes in size class I, as a uint. */
 #define INDEX2SIZE(I) (((uint)(I) + 1) << ALIGNMENT_SHIFT)
@@ -314,14 +313,12 @@
     struct arena_object* prevarena;
 };
 
-#undef  ROUNDUP
-#define ROUNDUP(x)              (((x) + ALIGNMENT_MASK) & ~ALIGNMENT_MASK)
-#define POOL_OVERHEAD           ROUNDUP(sizeof(struct pool_header))
+#define POOL_OVERHEAD   _Py_SIZE_ROUND_UP(sizeof(struct pool_header), ALIGNMENT)
 
 #define DUMMY_SIZE_IDX          0xffff  /* size class of newly cached pools */
 
 /* Round pointer P down to the closest pool-aligned address <= P, as a poolp */
-#define POOL_ADDR(P) ((poolp)((uptr)(P) & ~(uptr)POOL_SIZE_MASK))
+#define POOL_ADDR(P) ((poolp)_Py_ALIGN_DOWN((P), POOL_SIZE))
 
 /* Return total number of blocks in pool of size index I, as a uint. */
 #define NUMBLOCKS(I) ((uint)(POOL_SIZE - POOL_OVERHEAD) / INDEX2SIZE(I))
diff -r bd8afb90ebf2 Objects/rangeobject.c
--- a/Objects/rangeobject.c
+++ b/Objects/rangeobject.c
@@ -136,7 +136,8 @@
 }
 
 PyDoc_STRVAR(range_doc,
-"range([start,] stop[, step]) -> range object\n\
+"range(stop) -> range object\n\
+range(start, stop[, step]) -> range object\n\
 \n\
 Returns a virtual sequence of numbers from start to stop by step.");
 
@@ -330,11 +331,11 @@
         if (PyIndex_Check(obj)) {
             result = PyNumber_Index(obj);
         }
-    }
-    if (result == NULL) {
-        PyErr_SetString(PyExc_TypeError,
-                        "slice indices must be integers or "
-                        "None or have an __index__ method");
+        else {
+            PyErr_SetString(PyExc_TypeError,
+                            "slice indices must be integers or "
+                            "None or have an __index__ method");
+        }
     }
     return result;
 }
@@ -969,7 +970,7 @@
 {
     PyObject *start=NULL, *stop=NULL, *step=NULL;
     PyObject *range;
-    
+
     /* create a range object for pickling */
     start = PyLong_FromLong(r->start);
     if (start == NULL)
diff -r bd8afb90ebf2 Objects/setobject.c
--- a/Objects/setobject.c
+++ b/Objects/setobject.c
@@ -77,7 +77,7 @@
 static setentry *
 set_lookkey(PySetObject *so, PyObject *key, register Py_hash_t hash)
 {
-    register size_t i;
+    register size_t i;  /* Unsigned for defined overflow behavior. */
     register size_t perturb;
     register setentry *freeslot;
     register size_t mask = so->mask;
@@ -159,7 +159,7 @@
 static setentry *
 set_lookkey_unicode(PySetObject *so, PyObject *key, register Py_hash_t hash)
 {
-    register size_t i;
+    register size_t i;  /* Unsigned for defined overflow behavior. */
     register size_t perturb;
     register setentry *freeslot;
     register size_t mask = so->mask;
@@ -760,7 +760,7 @@
 frozenset_hash(PyObject *self)
 {
     PySetObject *so = (PySetObject *)self;
-    Py_uhash_t h, hash = 1927868237U;
+    Py_uhash_t h, hash = 1927868237UL;
     setentry *entry;
     Py_ssize_t pos = 0;
 
@@ -775,11 +775,11 @@
            hashes so that many distinct combinations collapse to only
            a handful of distinct hash values. */
         h = entry->hash;
-        hash ^= (h ^ (h << 16) ^ 89869747U)  * 3644798167U;
+        hash ^= (h ^ (h << 16) ^ 89869747UL)  * 3644798167UL;
     }
-    hash = hash * 69069U + 907133923U;
+    hash = hash * 69069U + 907133923UL;
     if (hash == -1)
-        hash = 590923713U;
+        hash = 590923713UL;
     so->hash = hash;
     return hash;
 }
@@ -831,10 +831,10 @@
     if (!list)
         return NULL;
 
-    /* copy the itertor state */
+    /* copy the iterator state */
     tmp = *si;
     Py_XINCREF(tmp.si_set);
-    
+
     /* iterate the temporary into a list */
     for(;;) {
         PyObject *element = setiter_iternext(&tmp);
diff -r bd8afb90ebf2 Objects/sliceobject.c
--- a/Objects/sliceobject.c
+++ b/Objects/sliceobject.c
@@ -269,7 +269,8 @@
 }
 
 PyDoc_STRVAR(slice_doc,
-"slice([start,] stop[, step])\n\
+"slice(stop)\n\
+slice(start, stop[, step])\n\
 \n\
 Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).");
 
diff -r bd8afb90ebf2 Objects/stringlib/codecs.h
--- a/Objects/stringlib/codecs.h
+++ b/Objects/stringlib/codecs.h
@@ -2,9 +2,6 @@
 
 #if STRINGLIB_IS_UNICODE
 
-/* Mask to check or force alignment of a pointer to C 'long' boundaries */
-#define LONG_PTR_MASK (size_t) (SIZEOF_LONG - 1)
-
 /* Mask to quickly check whether a C 'long' contains a
    non-ASCII, UTF8-encoded char. */
 #if (SIZEOF_LONG == 8)
@@ -25,7 +22,7 @@
 {
     Py_UCS4 ch;
     const char *s = *inptr;
-    const char *aligned_end = (const char *) ((size_t) end & ~LONG_PTR_MASK);
+    const char *aligned_end = (const char *) _Py_ALIGN_DOWN(end, SIZEOF_LONG);
     STRINGLIB_CHAR *p = dest + *outpos;
 
     while (s < end) {
@@ -39,7 +36,7 @@
                First, check if we can do an aligned read, as most CPUs have
                a penalty for unaligned reads.
             */
-            if (!((size_t) s & LONG_PTR_MASK)) {
+            if (_Py_IS_ALIGNED(s, SIZEOF_LONG)) {
                 /* Help register allocation */
                 register const char *_s = s;
                 register STRINGLIB_CHAR *_p = p;
@@ -94,16 +91,15 @@
             }
         }
 
-        if (ch < 0xC2) {
-            /* invalid sequence
-               \x80-\xBF -- continuation byte
-               \xC0-\xC1 -- fake 0000-007F */
-            goto InvalidStart;
-        }
-
         if (ch < 0xE0) {
             /* \xC2\x80-\xDF\xBF -- 0080-07FF */
             Py_UCS4 ch2;
+            if (ch < 0xC2) {
+                /* invalid sequence
+                \x80-\xBF -- continuation byte
+                \xC0-\xC1 -- fake 0000-007F */
+                goto InvalidStart;
+            }
             if (end - s < 2) {
                 /* unexpected end of data: the caller will decide whether
                    it's an error or not */
@@ -112,14 +108,15 @@
             ch2 = (unsigned char)s[1];
             if (!IS_CONTINUATION_BYTE(ch2))
                 /* invalid continuation byte */
-                goto InvalidContinuation;
+                goto InvalidContinuation1;
             ch = (ch << 6) + ch2 -
                  ((0xC0 << 6) + 0x80);
             assert ((ch > 0x007F) && (ch <= 0x07FF));
             s += 2;
             if (STRINGLIB_MAX_CHAR <= 0x007F ||
                 (STRINGLIB_MAX_CHAR < 0x07FF && ch > STRINGLIB_MAX_CHAR))
-                goto Overflow;
+                /* Out-of-range */
+                goto Return;
             *p++ = ch;
             continue;
         }
@@ -130,28 +127,37 @@
             if (end - s < 3) {
                 /* unexpected end of data: the caller will decide whether
                    it's an error or not */
+                if (end - s < 2)
+                    break;
+                ch2 = (unsigned char)s[1];
+                if (!IS_CONTINUATION_BYTE(ch2) ||
+                    (ch2 < 0xA0 ? ch == 0xE0 : ch == 0xED))
+                    /* for clarification see comments below */
+                    goto InvalidContinuation1;
                 break;
             }
             ch2 = (unsigned char)s[1];
             ch3 = (unsigned char)s[2];
-            if (!IS_CONTINUATION_BYTE(ch2) ||
-                !IS_CONTINUATION_BYTE(ch3)) {
+            if (!IS_CONTINUATION_BYTE(ch2)) {
                 /* invalid continuation byte */
-                goto InvalidContinuation;
+                goto InvalidContinuation1;
             }
             if (ch == 0xE0) {
                 if (ch2 < 0xA0)
                     /* invalid sequence
                        \xE0\x80\x80-\xE0\x9F\xBF -- fake 0000-0800 */
-                    goto InvalidContinuation;
-            }
-            else if (ch == 0xED && ch2 > 0x9F) {
+                    goto InvalidContinuation1;
+            } else if (ch == 0xED && ch2 >= 0xA0) {
                 /* Decoding UTF-8 sequences in range \xED\xA0\x80-\xED\xBF\xBF
                    will result in surrogates in range D800-DFFF. Surrogates are
                    not valid UTF-8 so they are rejected.
                    See http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf
                    (table 3-7) and http://www.rfc-editor.org/rfc/rfc3629.txt */
-                goto InvalidContinuation;
+                goto InvalidContinuation1;
+            }
+            if (!IS_CONTINUATION_BYTE(ch3)) {
+                /* invalid continuation byte */
+                goto InvalidContinuation2;
             }
             ch = (ch << 12) + (ch2 << 6) + ch3 -
                  ((0xE0 << 12) + (0x80 << 6) + 0x80);
@@ -159,7 +165,8 @@
             s += 3;
             if (STRINGLIB_MAX_CHAR <= 0x07FF ||
                 (STRINGLIB_MAX_CHAR < 0xFFFF && ch > STRINGLIB_MAX_CHAR))
-                goto Overflow;
+                /* Out-of-range */
+                goto Return;
             *p++ = ch;
             continue;
         }
@@ -170,27 +177,44 @@
             if (end - s < 4) {
                 /* unexpected end of data: the caller will decide whether
                    it's an error or not */
+                if (end - s < 2)
+                    break;
+                ch2 = (unsigned char)s[1];
+                if (!IS_CONTINUATION_BYTE(ch2) ||
+                    (ch2 < 0x90 ? ch == 0xF0 : ch == 0xF4))
+                    /* for clarification see comments below */
+                    goto InvalidContinuation1;
+                if (end - s < 3)
+                    break;
+                ch3 = (unsigned char)s[2];
+                if (!IS_CONTINUATION_BYTE(ch3))
+                    goto InvalidContinuation2;
                 break;
             }
             ch2 = (unsigned char)s[1];
             ch3 = (unsigned char)s[2];
             ch4 = (unsigned char)s[3];
-            if (!IS_CONTINUATION_BYTE(ch2) ||
-                !IS_CONTINUATION_BYTE(ch3) ||
-                !IS_CONTINUATION_BYTE(ch4)) {
+            if (!IS_CONTINUATION_BYTE(ch2)) {
                 /* invalid continuation byte */
-                goto InvalidContinuation;
+                goto InvalidContinuation1;
             }
             if (ch == 0xF0) {
                 if (ch2 < 0x90)
                     /* invalid sequence
-                       \xF0\x80\x80\x80-\xF0\x80\xBF\xBF -- fake 0000-FFFF */
-                    goto InvalidContinuation;
-            }
-            else if (ch == 0xF4 && ch2 > 0x8F) {
+                       \xF0\x80\x80\x80-\xF0\x8F\xBF\xBF -- fake 0000-FFFF */
+                    goto InvalidContinuation1;
+            } else if (ch == 0xF4 && ch2 >= 0x90) {
                 /* invalid sequence
                    \xF4\x90\x80\80- -- 110000- overflow */
-                goto InvalidContinuation;
+                goto InvalidContinuation1;
+            }
+            if (!IS_CONTINUATION_BYTE(ch3)) {
+                /* invalid continuation byte */
+                goto InvalidContinuation2;
+            }
+            if (!IS_CONTINUATION_BYTE(ch4)) {
+                /* invalid continuation byte */
+                goto InvalidContinuation3;
             }
             ch = (ch << 18) + (ch2 << 12) + (ch3 << 6) + ch4 -
                  ((0xF0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80);
@@ -198,14 +222,14 @@
             s += 4;
             if (STRINGLIB_MAX_CHAR <= 0xFFFF ||
                 (STRINGLIB_MAX_CHAR < 0x10FFFF && ch > STRINGLIB_MAX_CHAR))
-                goto Overflow;
+                /* Out-of-range */
+                goto Return;
             *p++ = ch;
             continue;
         }
         goto InvalidStart;
     }
     ch = 0;
-Overflow:
 Return:
     *inptr = s;
     *outpos = p - dest;
@@ -213,13 +237,18 @@
 InvalidStart:
     ch = 1;
     goto Return;
-InvalidContinuation:
+InvalidContinuation1:
     ch = 2;
     goto Return;
+InvalidContinuation2:
+    ch = 3;
+    goto Return;
+InvalidContinuation3:
+    ch = 4;
+    goto Return;
 }
 
 #undef ASCII_CHAR_MASK
-#undef IS_CONTINUATION_BYTE
 
 
 /* UTF-8 encoder specialized for a Unicode kind to avoid the slow
@@ -453,7 +482,7 @@
 {
     Py_UCS4 ch;
     const unsigned char *aligned_end =
-            (const unsigned char *) ((size_t) e & ~LONG_PTR_MASK);
+            (const unsigned char *) _Py_ALIGN_DOWN(e, SIZEOF_LONG);
     const unsigned char *q = *inptr;
     STRINGLIB_CHAR *p = dest + *outpos;
     /* Offsets from q for retrieving byte pairs in the right order. */
@@ -468,7 +497,7 @@
         Py_UCS4 ch2;
         /* First check for possible aligned read of a C 'long'. Unaligned
            reads are more expensive, better to defer to another iteration. */
-        if (!((size_t) q & LONG_PTR_MASK)) {
+        if (_Py_IS_ALIGNED(q, SIZEOF_LONG)) {
             /* Fast path for runs of in-range non-surrogate chars. */
             register const unsigned char *_q = q;
             while (_q < aligned_end) {
@@ -565,7 +594,6 @@
 #undef FAST_CHAR_MASK
 #undef STRIPPED_MASK
 #undef SWAB
-#undef LONG_PTR_MASK
 
 
 Py_LOCAL_INLINE(void)
@@ -588,7 +616,7 @@
         _PyUnicode_CONVERT_BYTES(STRINGLIB_CHAR, unsigned short, in, end, out);
 # endif
     } else {
-        const STRINGLIB_CHAR *unrolled_end = in + (len & ~ (Py_ssize_t) 3);
+        const STRINGLIB_CHAR *unrolled_end = in + _Py_SIZE_ROUND_DOWN(len, 4);
         while (in < unrolled_end) {
             out[0] = SWAB2(in[0]);
             out[1] = SWAB2(in[1]);
diff -r bd8afb90ebf2 Objects/stringlib/fastsearch.h
--- a/Objects/stringlib/fastsearch.h
+++ b/Objects/stringlib/fastsearch.h
@@ -43,8 +43,7 @@
 
 #define DO_MEMCHR(memchr, s, needle, nchars) do { \
     candidate = memchr((const void *) (s), (needle), (nchars) * sizeof(STRINGLIB_CHAR)); \
-    found = (const STRINGLIB_CHAR *) \
-        ((Py_ssize_t) candidate & (~ ((Py_ssize_t) sizeof(STRINGLIB_CHAR) - 1))); \
+    found = (const STRINGLIB_CHAR *) _Py_ALIGN_DOWN(candidate, sizeof(STRINGLIB_CHAR)); \
     } while (0)
 
     if (mode == FAST_SEARCH) {
diff -r bd8afb90ebf2 Objects/stringlib/find_max_char.h
--- a/Objects/stringlib/find_max_char.h
+++ b/Objects/stringlib/find_max_char.h
@@ -2,9 +2,6 @@
 
 #if STRINGLIB_IS_UNICODE
 
-/* Mask to check or force alignment of a pointer to C 'long' boundaries */
-#define LONG_PTR_MASK (size_t) (SIZEOF_LONG - 1)
-
 /* Mask to quickly check whether a C 'long' contains a
    non-ASCII, UTF8-encoded char. */
 #if (SIZEOF_LONG == 8)
@@ -21,10 +18,11 @@
 STRINGLIB(find_max_char)(const STRINGLIB_CHAR *begin, const STRINGLIB_CHAR *end)
 {
     const unsigned char *p = (const unsigned char *) begin;
-    const unsigned char *aligned_end = (const unsigned char *) ((size_t) end & ~LONG_PTR_MASK);
+    const unsigned char *aligned_end =
+            (const unsigned char *) _Py_ALIGN_DOWN(end, SIZEOF_LONG);
 
     while (p < end) {
-        if (!((size_t) p & LONG_PTR_MASK)) {
+        if (_Py_IS_ALIGNED(p, SIZEOF_LONG)) {
             /* Help register allocation */
             register const unsigned char *_p = p;
             while (_p < aligned_end) {
@@ -43,7 +41,6 @@
     return 127;
 }
 
-#undef LONG_PTR_MASK
 #undef ASCII_CHAR_MASK
 
 #else /* STRINGLIB_SIZEOF_CHAR == 1 */
@@ -72,7 +69,7 @@
     register Py_UCS4 mask;
     Py_ssize_t n = end - begin;
     const STRINGLIB_CHAR *p = begin;
-    const STRINGLIB_CHAR *unrolled_end = begin + (n & ~ (Py_ssize_t) 3);
+    const STRINGLIB_CHAR *unrolled_end = begin + _Py_SIZE_ROUND_DOWN(n, 4);
     Py_UCS4 max_char;
 
     max_char = MAX_CHAR_ASCII;
diff -r bd8afb90ebf2 Objects/tupleobject.c
--- a/Objects/tupleobject.c
+++ b/Objects/tupleobject.c
@@ -96,15 +96,11 @@
     else
 #endif
     {
-        Py_ssize_t nbytes = size * sizeof(PyObject *);
         /* Check for overflow */
-        if (nbytes / sizeof(PyObject *) != (size_t)size ||
-            (nbytes > PY_SSIZE_T_MAX - sizeof(PyTupleObject) - sizeof(PyObject *)))
-        {
+        if (size > (PY_SSIZE_T_MAX - sizeof(PyTupleObject) -
+                    sizeof(PyObject *)) / sizeof(PyObject *)) {
             return PyErr_NoMemory();
         }
-        /* nbytes += sizeof(PyTupleObject) - sizeof(PyObject *); */
-
         op = PyObject_GC_NewVar(PyTupleObject, &PyTuple_Type, size);
         if (op == NULL)
             return NULL;
@@ -210,8 +206,10 @@
 
     va_start(vargs, n);
     result = PyTuple_New(n);
-    if (result == NULL)
+    if (result == NULL) {
+        va_end(vargs);
         return NULL;
+    }
     items = ((PyTupleObject *)result)->ob_item;
     for (i = 0; i < n; i++) {
         o = va_arg(vargs, PyObject *);
@@ -329,12 +327,12 @@
 static Py_hash_t
 tuplehash(PyTupleObject *v)
 {
-    register Py_uhash_t x;
+    register Py_uhash_t x;  /* Unsigned for defined overflow behavior. */
     register Py_hash_t y;
     register Py_ssize_t len = Py_SIZE(v);
     register PyObject **p;
     Py_uhash_t mult = _PyHASH_MULTIPLIER;
-    x = 0x345678;
+    x = 0x345678UL;
     p = v->ob_item;
     while (--len >= 0) {
         y = PyObject_Hash(*p++);
@@ -342,9 +340,9 @@
             return -1;
         x = (x ^ y) * mult;
         /* the cast might truncate len; that doesn't change hash stability */
-        mult += (Py_hash_t)(82520L + len + len);
+        mult += (Py_hash_t)(82520UL + len + len);
     }
-    x += 97531L;
+    x += 97531UL;
     if (x == (Py_uhash_t)-1)
         x = -2;
     return x;
@@ -479,9 +477,9 @@
         if (Py_SIZE(a) == 0)
             return PyTuple_New(0);
     }
+    if (n > PY_SSIZE_T_MAX / Py_SIZE(a))
+        return PyErr_NoMemory();
     size = Py_SIZE(a) * n;
-    if (size/Py_SIZE(a) != n)
-        return PyErr_NoMemory();
     np = (PyTupleObject *) PyTuple_New(size);
     if (np == NULL)
         return NULL;
diff -r bd8afb90ebf2 Objects/typeobject.c
--- a/Objects/typeobject.c
+++ b/Objects/typeobject.c
@@ -311,6 +311,8 @@
 {
     PyHeapTypeObject* et;
 
+    if (!check_set_special_type_attr(type, value, "__qualname__"))
+        return -1;
     if (!PyUnicode_Check(value)) {
         PyErr_Format(PyExc_TypeError,
                      "can only assign string to %s.__qualname__, not '%s'",
@@ -691,8 +693,10 @@
         mod = NULL;
     }
     name = type_qualname(type, NULL);
-    if (name == NULL)
+    if (name == NULL) {
+        Py_XDECREF(mod);
         return NULL;
+    }
 
     if (mod != NULL && PyUnicode_CompareWithASCIIString(mod, "builtins"))
         rtn = PyUnicode_FromFormat("<class '%U.%U'>", mod, name);
@@ -2248,11 +2252,10 @@
             goto error;
         }
     }
-    else {
-        qualname = et->ht_name;
-    }
-    Py_INCREF(qualname);
-    et->ht_qualname = qualname;
+    et->ht_qualname = qualname ? qualname : et->ht_name;
+    Py_INCREF(et->ht_qualname);
+    if (qualname != NULL && PyDict_DelItem(dict, PyId___qualname__.object) < 0)
+        goto error;
 
     /* Set tp_doc to a copy of dict['__doc__'], if the latter is there
        and is a string.  The __doc__ accessor will first look for tp_doc;
@@ -3128,8 +3131,10 @@
         mod = NULL;
     }
     name = type_qualname(type, NULL);
-    if (name == NULL)
+    if (name == NULL) {
+        Py_XDECREF(mod);
         return NULL;
+    }
     if (mod != NULL && PyUnicode_CompareWithASCIIString(mod, "builtins"))
         rtn = PyUnicode_FromFormat("<%U.%U object at %p>", mod, name, self);
     else
@@ -5988,7 +5993,7 @@
         descr = _PyType_Lookup(type, p->name_strobj);
         if (descr == NULL) {
             if (ptr == (void**)&type->tp_iternext) {
-                specific = _PyObject_NextNotImplemented;
+                specific = (void *)_PyObject_NextNotImplemented;
             }
             continue;
         }
@@ -6035,7 +6040,7 @@
             /* We specifically allow __hash__ to be set to None
                to prevent inheritance of the default
                implementation from object.__hash__ */
-            specific = PyObject_HashNotImplemented;
+            specific = (void *)PyObject_HashNotImplemented;
         }
         else {
             use_generic = 1;
@@ -6250,7 +6255,7 @@
             continue;
         if (PyDict_GetItem(dict, p->name_strobj))
             continue;
-        if (*ptr == PyObject_HashNotImplemented) {
+        if (*ptr == (void *)PyObject_HashNotImplemented) {
             /* Classes may prevent the inheritance of the tp_hash
                slot by storing PyObject_HashNotImplemented in it. Make it
                visible as a None value for the __hash__ attribute. */
@@ -6502,18 +6507,18 @@
         PyCodeObject *co = f->f_code;
         Py_ssize_t i, n;
         if (co == NULL) {
-            PyErr_SetString(PyExc_SystemError,
+            PyErr_SetString(PyExc_RuntimeError,
                             "super(): no code object");
             return -1;
         }
         if (co->co_argcount == 0) {
-            PyErr_SetString(PyExc_SystemError,
+            PyErr_SetString(PyExc_RuntimeError,
                             "super(): no arguments");
             return -1;
         }
         obj = f->f_localsplus[0];
         if (obj == NULL) {
-            PyErr_SetString(PyExc_SystemError,
+            PyErr_SetString(PyExc_RuntimeError,
                             "super(): arg[0] deleted");
             return -1;
         }
@@ -6532,18 +6537,18 @@
                     PyTuple_GET_SIZE(co->co_cellvars) + i;
                 PyObject *cell = f->f_localsplus[index];
                 if (cell == NULL || !PyCell_Check(cell)) {
-                    PyErr_SetString(PyExc_SystemError,
+                    PyErr_SetString(PyExc_RuntimeError,
                       "super(): bad __class__ cell");
                     return -1;
                 }
                 type = (PyTypeObject *) PyCell_GET(cell);
                 if (type == NULL) {
-                    PyErr_SetString(PyExc_SystemError,
+                    PyErr_SetString(PyExc_RuntimeError,
                       "super(): empty __class__ cell");
                     return -1;
                 }
                 if (!PyType_Check(type)) {
-                    PyErr_Format(PyExc_SystemError,
+                    PyErr_Format(PyExc_RuntimeError,
                       "super(): __class__ is not a type (%s)",
                       Py_TYPE(type)->tp_name);
                     return -1;
@@ -6552,7 +6557,7 @@
             }
         }
         if (type == NULL) {
-            PyErr_SetString(PyExc_SystemError,
+            PyErr_SetString(PyExc_RuntimeError,
                             "super(): __class__ cell not found");
             return -1;
         }
diff -r bd8afb90ebf2 Objects/unicodeobject.c
--- a/Objects/unicodeobject.c
+++ b/Objects/unicodeobject.c
@@ -159,7 +159,7 @@
         const from_type *_end = (end);                  \
         Py_ssize_t n = (_end) - (_iter);                \
         const from_type *_unrolled_end =                \
-            _iter + (n & ~ (Py_ssize_t) 3);             \
+            _iter + _Py_SIZE_ROUND_DOWN(n, 4);          \
         while (_iter < (_unrolled_end)) {               \
             _to[0] = (to_type) _iter[0];                \
             _to[1] = (to_type) _iter[1];                \
@@ -4492,7 +4492,6 @@
     void *data;
     Py_ssize_t len;
     PyObject *v;
-    Py_ssize_t allocated;
     int inShift = 0;
     Py_ssize_t i;
     unsigned int base64bits = 0;
@@ -4510,11 +4509,9 @@
         return PyBytes_FromStringAndSize(NULL, 0);
 
     /* It might be possible to tighten this worst case */
-    allocated = 8 * len;
-    if (allocated / 8 != len)
+    if (len > PY_SSIZE_T_MAX / 8)
         return PyErr_NoMemory();
-
-    v = PyBytes_FromStringAndSize(NULL, allocated);
+    v = PyBytes_FromStringAndSize(NULL, len * 8);
     if (v == NULL)
         return NULL;
 
@@ -4635,9 +4632,6 @@
 #include "stringlib/codecs.h"
 #include "stringlib/undef.h"
 
-/* Mask to check or force alignment of a pointer to C 'long' boundaries */
-#define LONG_PTR_MASK (size_t) (SIZEOF_LONG - 1)
-
 /* Mask to quickly check whether a C 'long' contains a
    non-ASCII, UTF8-encoded char. */
 #if (SIZEOF_LONG == 8)
@@ -4652,11 +4646,11 @@
 ascii_decode(const char *start, const char *end, Py_UCS1 *dest)
 {
     const char *p = start;
-    const char *aligned_end = (const char *) ((size_t) end & ~LONG_PTR_MASK);
+    const char *aligned_end = (const char *) _Py_ALIGN_DOWN(end, SIZEOF_LONG);
 
 #if SIZEOF_LONG <= SIZEOF_VOID_P
-    assert(!((size_t) dest & LONG_PTR_MASK));
-    if (!((size_t) p & LONG_PTR_MASK)) {
+    assert(_Py_IS_ALIGNED(dest, SIZEOF_LONG));
+    if (_Py_IS_ALIGNED(p, SIZEOF_LONG)) {
         /* Fast path, see in STRINGLIB(utf8_decode) for
            an explanation. */
         /* Help register allocation */
@@ -4682,7 +4676,7 @@
     while (p < end) {
         /* Fast path, see in STRINGLIB(utf8_decode) in stringlib/codecs.h
            for an explanation. */
-        if (!((size_t) p & LONG_PTR_MASK)) {
+        if (_Py_IS_ALIGNED(p, SIZEOF_LONG)) {
             /* Help register allocation */
             register const char *_p = p;
             while (_p < aligned_end) {
@@ -4765,9 +4759,7 @@
                 goto End;
             errmsg = "unexpected end of data";
             startinpos = s - starts;
-            endinpos = startinpos + 1;
-            while (endinpos < size && (starts[endinpos] & 0xC0) == 0x80)
-                endinpos++;
+            endinpos = end - starts;
             break;
         case 1:
             errmsg = "invalid start byte";
@@ -4775,11 +4767,11 @@
             endinpos = startinpos + 1;
             break;
         case 2:
+        case 3:
+        case 4:
             errmsg = "invalid continuation byte";
             startinpos = s - starts;
-            endinpos = startinpos + 1;
-            while (endinpos < size && (starts[endinpos] & 0xC0) == 0x80)
-                endinpos++;
+            endinpos = startinpos + ch - 1;
             break;
         default:
             if (unicode_putchar(&unicode, &outpos, ch) < 0)
@@ -4817,7 +4809,10 @@
 #ifdef __APPLE__
 
 /* Simplified UTF-8 decoder using surrogateescape error handler,
-   used to decode the command line arguments on Mac OS X. */
+   used to decode the command line arguments on Mac OS X.
+
+   Return a pointer to a newly allocated wide character string (use
+   PyMem_Free() to free the memory), or NULL on memory allocation error. */
 
 wchar_t*
 _Py_DecodeUTF8_surrogateescape(const char *s, Py_ssize_t size)
@@ -4828,10 +4823,8 @@
 
     /* Note: size will always be longer than the resulting Unicode
        character count */
-    if (PY_SSIZE_T_MAX / sizeof(wchar_t) < (size + 1)) {
-        PyErr_NoMemory();
-        return NULL;
-    }
+    if (PY_SSIZE_T_MAX / sizeof(wchar_t) < (size + 1))
+        return NULL;
     unicode = PyMem_Malloc((size + 1) * sizeof(wchar_t));
     if (!unicode)
         return NULL;
@@ -5095,7 +5088,7 @@
     Py_ssize_t len;
     PyObject *v;
     unsigned char *p;
-    Py_ssize_t nsize, bytesize, i;
+    Py_ssize_t nsize, i;
     /* Offsets from p for storing byte pairs in the right order. */
 #ifdef BYTEORDER_IS_LITTLE_ENDIAN
     int iorder[] = {0, 1, 2, 3};
@@ -5123,10 +5116,9 @@
     len = PyUnicode_GET_LENGTH(str);
 
     nsize = len + (byteorder == 0);
-    bytesize = nsize * 4;
-    if (bytesize / 4 != nsize)
+    if (nsize > PY_SSIZE_T_MAX / 4)
         return PyErr_NoMemory();
-    v = PyBytes_FromStringAndSize(NULL, bytesize);
+    v = PyBytes_FromStringAndSize(NULL, nsize * 4);
     if (v == NULL)
         return NULL;
 
@@ -5390,7 +5382,7 @@
         return NULL;
 
     /* output buffer is 2-bytes aligned */
-    assert(((Py_uintptr_t)PyBytes_AS_STRING(v) & 1) == 0);
+    assert(_Py_IS_ALIGNED(PyBytes_AS_STRING(v), 2));
     out = (unsigned short *)PyBytes_AS_STRING(v);
     if (byteorder == 0)
         *out++ = 0xFEFF;
@@ -5775,18 +5767,12 @@
     void *data;
     Py_ssize_t expandsize = 0;
 
-    /* Initial allocation is based on the longest-possible unichr
+    /* Initial allocation is based on the longest-possible character
        escape.
 
-       In wide (UTF-32) builds '\U00xxxxxx' is 10 chars per source
-       unichr, so in this case it's the longest unichr escape. In
-       narrow (UTF-16) builds this is five chars per source unichr
-       since there are two unichrs in the surrogate pair, so in narrow
-       (UTF-16) builds it's not the longest unichr escape.
-
-       In wide or narrow builds '\uxxxx' is 6 chars per source unichr,
-       so in the narrow (UTF-16) build case it's the longest unichr
-       escape.
+       For UCS1 strings it's '\xxx', 4 bytes per source character.
+       For UCS2 strings it's '\uxxxx', 6 bytes per source character.
+       For UCS4 strings it's '\U00xxxxxx', 10 bytes per source character.
     */
 
     if (!PyUnicode_Check(unicode)) {
@@ -7528,9 +7514,10 @@
             /* Apply mapping */
             if (PyLong_Check(x)) {
                 long value = PyLong_AS_LONG(x);
-                if (value < 0 || value > 65535) {
-                    PyErr_SetString(PyExc_TypeError,
-                                    "character mapping must be in range(65536)");
+                if (value < 0 || value > MAX_UNICODE) {
+                    PyErr_Format(PyExc_TypeError,
+                                 "character mapping must be in range(0x%lx)",
+                                 (unsigned long)MAX_UNICODE + 1);
                     Py_DECREF(x);
                     goto onError;
                 }
@@ -9145,7 +9132,7 @@
             /* We do not need to compare 0 and len(substring)-1 because
                the if statement above ensured already that they are equal
                when we end up here. */
-            // TODO: honor direction and do a forward or backwards search
+            /* TODO: honor direction and do a forward or backwards search */
             for (i = 1; i < end_sub; ++i) {
                 if (PyUnicode_READ(kind_self, data_self, offset + i) !=
                     PyUnicode_READ(kind_sub, data_sub, i))
@@ -10132,6 +10119,7 @@
                 /* widen self and buf1 */
                 rkind = kind2;
                 if (release1) PyMem_Free(buf1);
+                release1 = 0;
                 sbuf = _PyUnicode_AsKind(self, rkind);
                 if (!sbuf) goto error;
                 srelease = 1;
@@ -10167,7 +10155,7 @@
     }
     else {
         Py_ssize_t n, i, j, ires;
-        Py_ssize_t product, new_size;
+        Py_ssize_t new_size;
         int rkind = skind;
         char *res;
 
@@ -10193,25 +10181,25 @@
             if (!sbuf) goto error;
             srelease = 1;
             if (release1) PyMem_Free(buf1);
+            release1 = 0;
             buf1 = _PyUnicode_AsKind(str1, rkind);
             if (!buf1) goto error;
             release1 = 1;
         }
         /* new_size = PyUnicode_GET_LENGTH(self) + n * (PyUnicode_GET_LENGTH(str2) -
            PyUnicode_GET_LENGTH(str1))); */
-        product = n * (len2-len1);
-        if ((product / (len2-len1)) != n) {
+        if (len2 > len1 && len2 - len1 > (PY_SSIZE_T_MAX - slen) / n) {
                 PyErr_SetString(PyExc_OverflowError,
                                 "replace string is too long");
                 goto error;
         }
-        new_size = slen + product;
+        new_size = slen + n * (len2 - len1);
         if (new_size == 0) {
             Py_INCREF(unicode_empty);
             u = unicode_empty;
             goto done;
         }
-        if (new_size < 0 || new_size > (PY_SSIZE_T_MAX >> (rkind-1))) {
+        if (new_size > (PY_SSIZE_T_MAX >> (rkind-1))) {
             PyErr_SetString(PyExc_OverflowError,
                             "replace string is too long");
             goto error;
@@ -11020,7 +11008,7 @@
 unicode_hash(PyObject *self)
 {
     Py_ssize_t len;
-    Py_uhash_t x;
+    Py_uhash_t x;  /* Unsigned for defined overflow behavior. */
 
 #ifdef Py_DEBUG
     assert(_Py_HashSecret_Initialized);
@@ -13444,8 +13432,10 @@
     uformat = PyUnicode_FromObject(format);
     if (uformat == NULL)
         return NULL;
-    if (PyUnicode_READY(uformat) == -1)
+    if (PyUnicode_READY(uformat) == -1) {
         Py_DECREF(uformat);
+        return NULL;
+    }
 
     fmt = PyUnicode_DATA(uformat);
     fmtkind = PyUnicode_KIND(uformat);
@@ -13462,8 +13452,7 @@
         arglen = -1;
         argidx = -2;
     }
-    if (Py_TYPE(args)->tp_as_mapping && !PyTuple_Check(args) &&
-        !PyUnicode_Check(args))
+    if (PyMapping_Check(args) && !PyTuple_Check(args) && !PyUnicode_Check(args))
         dict = args;
 
     while (--fmtcnt >= 0) {
@@ -14086,7 +14075,8 @@
 }
 
 PyDoc_STRVAR(unicode_doc,
-             "str(object[, encoding[, errors]]) -> str\n\
+"str(object='') -> str\n\
+str(bytes_or_buffer[, encoding[, errors]]) -> str\n\
 \n\
 Create a new string object from the given object. If encoding or\n\
 errors is specified, then the object must expose a data buffer\n\
@@ -14178,6 +14168,12 @@
 
     PyType_Ready(&EncodingMapType);
 
+    if (PyType_Ready(&PyFieldNameIter_Type) < 0)
+        Py_FatalError("Can't initialize field name iterator type");
+
+    if (PyType_Ready(&PyFormatterIter_Type) < 0)
+        Py_FatalError("Can't initialize formatter iter type");
+
 #ifdef HAVE_MBCS
     winver.dwOSVersionInfoSize = sizeof(winver);
     if (!GetVersionEx((OSVERSIONINFO*)&winver)) {
diff -r bd8afb90ebf2 Objects/weakrefobject.c
--- a/Objects/weakrefobject.c
+++ b/Objects/weakrefobject.c
@@ -52,9 +52,8 @@
 {
     PyObject *callback = self->wr_callback;
 
-    if (PyWeakref_GET_OBJECT(self) != Py_None) {
-        PyWeakReference **list = GET_WEAKREFS_LISTPTR(
-            PyWeakref_GET_OBJECT(self));
+    if (self->wr_object != Py_None) {
+        PyWeakReference **list = GET_WEAKREFS_LISTPTR(self->wr_object);
 
         if (*list == self)
             /* If 'self' is the end of the list (and thus self->wr_next == NULL)
@@ -198,9 +197,13 @@
     }
     if (PyWeakref_GET_OBJECT(self) == Py_None
         || PyWeakref_GET_OBJECT(other) == Py_None) {
-        PyObject *res = self==other ? Py_True : Py_False;
-        Py_INCREF(res);
-        return res;
+        int res = (self == other);
+        if (op == Py_NE)
+            res = !res;
+        if (res)
+            Py_RETURN_TRUE;
+        else
+            Py_RETURN_FALSE;
     }
     return PyObject_RichCompare(PyWeakref_GET_OBJECT(self),
                                 PyWeakref_GET_OBJECT(other), op);
diff -r bd8afb90ebf2 PC/winreg.c
--- a/PC/winreg.c
+++ b/PC/winreg.c
@@ -50,8 +50,8 @@
 "FlushKey() - Writes all the attributes of the specified key to the registry.\n"
 "LoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and stores\n"
 "            registration information from a specified file into that subkey.\n"
-"OpenKey() - Alias for <om win32api.RegOpenKeyEx>\n"
-"OpenKeyEx() - Opens the specified key.\n"
+"OpenKey() - Opens the specified key.\n"
+"OpenKeyEx() - Alias of OpenKey().\n"
 "QueryValue() - Retrieves the value associated with the unnamed value for a\n"
 "               specified key in the registry.\n"
 "QueryValueEx() - Retrieves the type and data for a specified value name\n"
@@ -72,7 +72,8 @@
 
 
 PyDoc_STRVAR(CloseKey_doc,
-"CloseKey(hkey) - Closes a previously opened registry key.\n"
+"CloseKey(hkey)\n"
+"Closes a previously opened registry key.\n"
 "\n"
 "The hkey argument specifies a previously opened key.\n"
 "\n"
@@ -80,128 +81,145 @@
 "closed when the hkey object is destroyed by Python.");
 
 PyDoc_STRVAR(ConnectRegistry_doc,
-"key = ConnectRegistry(computer_name, key) - "
+"ConnectRegistry(computer_name, key) -> key\n"
 "Establishes a connection to a predefined registry handle on another computer.\n"
 "\n"
 "computer_name is the name of the remote computer, of the form \\\\computername.\n"
-" If None, the local computer is used.\n"
+"              If None, the local computer is used.\n"
 "key is the predefined handle to connect to.\n"
 "\n"
 "The return value is the handle of the opened key.\n"
-"If the function fails, a WindowsError exception is raised.");
+"If the function fails, an OSError exception is raised.");
 
 PyDoc_STRVAR(CreateKey_doc,
-"key = CreateKey(key, sub_key) - Creates or opens the specified key.\n"
+"CreateKey(key, sub_key) -> key\n"
+"Creates or opens the specified key.\n"
+"\n"
+"key is an already open key, or one of the predefined HKEY_* constants.\n"
+"sub_key is a string that names the key this method opens or creates.\n"
+"\n"
+"If key is one of the predefined keys, sub_key may be None. In that case,\n"
+"the handle returned is the same key handle passed in to the function.\n"
+"\n"
+"If the key already exists, this function opens the existing key.\n"
+"\n"
+"The return value is the handle of the opened key.\n"
+"If the function fails, an OSError exception is raised.");
+
+PyDoc_STRVAR(CreateKeyEx_doc,
+"CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE) -> key\n"
+"Creates or opens the specified key.\n"
 "\n"
 "key is an already open key, or one of the predefined HKEY_* constants\n"
 "sub_key is a string that names the key this method opens or creates.\n"
-" If key is one of the predefined keys, sub_key may be None. In that case,\n"
-" the handle returned is the same key handle passed in to the function.\n"
+"reserved is a reserved integer, and must be zero.  Default is zero.\n"
+"access is an integer that specifies an access mask that describes the \n"
+"       desired security access for the key. Default is KEY_WRITE.\n"
+"\n"
+"If key is one of the predefined keys, sub_key may be None. In that case,\n"
+"the handle returned is the same key handle passed in to the function.\n"
 "\n"
 "If the key already exists, this function opens the existing key\n"
 "\n"
 "The return value is the handle of the opened key.\n"
-"If the function fails, an exception is raised.");
-
-PyDoc_STRVAR(CreateKeyEx_doc,
-"key = CreateKeyEx(key, sub_key, res, sam) - Creates or opens the specified key.\n"
-"\n"
-"key is an already open key, or one of the predefined HKEY_* constants\n"
-"sub_key is a string that names the key this method opens or creates.\n"
-"res is a reserved integer, and must be zero.  Default is zero.\n"
-"sam is an integer that specifies an access mask that describes the desired\n"
-" If key is one of the predefined keys, sub_key may be None. In that case,\n"
-" the handle returned is the same key handle passed in to the function.\n"
-"\n"
-"If the key already exists, this function opens the existing key\n"
-"\n"
-"The return value is the handle of the opened key.\n"
-"If the function fails, an exception is raised.");
+"If the function fails, an OSError exception is raised.");
 
 PyDoc_STRVAR(DeleteKey_doc,
-"DeleteKey(key, sub_key) - Deletes the specified key.\n"
+"DeleteKey(key, sub_key)\n"
+"Deletes the specified key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"sub_key is a string that must be a subkey of the key identified by the key parameter.\n"
-" This value must not be None, and the key may not have subkeys.\n"
+"sub_key is a string that must be a subkey of the key identified by the key\n"
+"        parameter. This value must not be None, and the key may not have\n"
+"        subkeys.\n"
 "\n"
 "This method can not delete keys with subkeys.\n"
 "\n"
-"If the method succeeds, the entire key, including all of its values,\n"
-"is removed.  If the method fails, a WindowsError exception is raised.");
+"If the function succeeds, the entire key, including all of its values,\n"
+"is removed.  If the function fails, an OSError exception is raised.");
 
 PyDoc_STRVAR(DeleteKeyEx_doc,
-"DeleteKeyEx(key, sub_key, sam, res) - Deletes the specified key.\n"
+"DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)\n"
+"Deletes the specified key (64-bit OS only).\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"sub_key is a string that must be a subkey of the key identified by the key parameter.\n"
-"res is a reserved integer, and must be zero.  Default is zero.\n"
-"sam is an integer that specifies an access mask that describes the desired\n"
-" This value must not be None, and the key may not have subkeys.\n"
+"sub_key is a string that must be a subkey of the key identified by the key\n"
+"        parameter. This value must not be None, and the key may not have\n"
+"        subkeys.\n"
+"reserved is a reserved integer, and must be zero.  Default is zero.\n"
+"access is an integer that specifies an access mask that describes the \n"
+"       desired security access for the key. Default is KEY_WOW64_64KEY.\n"
 "\n"
 "This method can not delete keys with subkeys.\n"
 "\n"
-"If the method succeeds, the entire key, including all of its values,\n"
-"is removed.  If the method fails, a WindowsError exception is raised.\n"
+"If the function succeeds, the entire key, including all of its values,\n"
+"is removed.  If the function fails, an OSError exception is raised.\n"
 "On unsupported Windows versions, NotImplementedError is raised.");
 
 PyDoc_STRVAR(DeleteValue_doc,
-"DeleteValue(key, value) - Removes a named value from a registry key.\n"
+"DeleteValue(key, value)\n"
+"Removes a named value from a registry key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "value is a string that identifies the value to remove.");
 
 PyDoc_STRVAR(EnumKey_doc,
-"string = EnumKey(key, index) - Enumerates subkeys of an open registry key.\n"
+"EnumKey(key, index) -> string\n"
+"Enumerates subkeys of an open registry key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "index is an integer that identifies the index of the key to retrieve.\n"
 "\n"
 "The function retrieves the name of one subkey each time it is called.\n"
-"It is typically called repeatedly until a WindowsError exception is\n"
+"It is typically called repeatedly until an OSError exception is\n"
 "raised, indicating no more values are available.");
 
 PyDoc_STRVAR(EnumValue_doc,
-"tuple = EnumValue(key, index) - Enumerates values of an open registry key.\n"
+"EnumValue(key, index) -> tuple\n"
+"Enumerates values of an open registry key.\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "index is an integer that identifies the index of the value to retrieve.\n"
 "\n"
 "The function retrieves the name of one subkey each time it is called.\n"
-"It is typically called repeatedly, until a WindowsError exception\n"
+"It is typically called repeatedly, until an OSError exception\n"
 "is raised, indicating no more values.\n"
 "\n"
 "The result is a tuple of 3 items:\n"
 "value_name is a string that identifies the value.\n"
 "value_data is an object that holds the value data, and whose type depends\n"
-" on the underlying registry type.\n"
+"           on the underlying registry type.\n"
 "data_type is an integer that identifies the type of the value data.");
 
 PyDoc_STRVAR(ExpandEnvironmentStrings_doc,
-"string = ExpandEnvironmentStrings(string) - Expand environment vars.\n");
+"ExpandEnvironmentStrings(string) -> string\n"
+"Expand environment vars.\n");
 
 PyDoc_STRVAR(FlushKey_doc,
-"FlushKey(key) - Writes all the attributes of a key to the registry.\n"
+"FlushKey(key)\n"
+"Writes all the attributes of a key to the registry.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "\n"
-"It is not necessary to call RegFlushKey to change a key.\n"
-"Registry changes are flushed to disk by the registry using its lazy flusher.\n"
-"Registry changes are also flushed to disk at system shutdown.\n"
-"Unlike CloseKey(), the FlushKey() method returns only when all the data has\n"
-"been written to the registry.\n"
-"An application should only call FlushKey() if it requires absolute certainty that registry changes are on disk.\n"
-"If you don't know whether a FlushKey() call is required, it probably isn't.");
+"It is not necessary to call FlushKey to change a key.  Registry changes are\n"
+"flushed to disk by the registry using its lazy flusher.  Registry changes are\n"
+"also flushed to disk at system shutdown.  Unlike CloseKey(), the FlushKey()\n"
+"method returns only when all the data has been written to the registry.\n"
+"\n"
+"An application should only call FlushKey() if it requires absolute certainty\n"
+"that registry changes are on disk.  If you don't know whether a FlushKey()\n"
+"call is required, it probably isn't.");
 
 PyDoc_STRVAR(LoadKey_doc,
-"LoadKey(key, sub_key, file_name) - Creates a subkey under the specified key\n"
-"and stores registration information from a specified file into that subkey.\n"
+"LoadKey(key, sub_key, file_name)\n"
+"Creates a subkey under the specified key and stores registration information\n"
+"from a specified file into that subkey.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"sub_key is a string that identifies the sub_key to load\n"
-"file_name is the name of the file to load registry data from.\n"
-" This file must have been created with the SaveKey() function.\n"
-" Under the file allocation table (FAT) file system, the filename may not\n"
-"have an extension.\n"
+"sub_key is a string that identifies the sub_key to load.\n"
+"file_name is the name of the file to load registry data from.  This file must\n"
+"          have been created with the SaveKey() function.  Under the file\n"
+"          allocation table (FAT) file system, the filename may not have an\n"
+"          extension.\n"
 "\n"
 "A call to LoadKey() fails if the calling process does not have the\n"
 "SE_RESTORE_PRIVILEGE privilege.\n"
@@ -212,21 +230,23 @@
 "The docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE tree");
 
 PyDoc_STRVAR(OpenKey_doc,
-"key = OpenKey(key, sub_key, res = 0, sam = KEY_READ) - Opens the specified key.\n"
+"OpenKey(key, sub_key, reserved=0, access=KEY_READ) -> key\n"
+"Opens the specified key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"sub_key is a string that identifies the sub_key to open\n"
-"res is a reserved integer, and must be zero.  Default is zero.\n"
-"sam is an integer that specifies an access mask that describes the desired\n"
-" security access for the key.  Default is KEY_READ\n"
+"sub_key is a string that identifies the sub_key to open.\n"
+"reserved is a reserved integer, and must be zero.  Default is zero.\n"
+"access is an integer that specifies an access mask that describes the desired\n"
+"       security access for the key.  Default is KEY_READ\n"
 "\n"
 "The result is a new handle to the specified key\n"
-"If the function fails, a WindowsError exception is raised.");
+"If the function fails, an OSError exception is raised.");
 
 PyDoc_STRVAR(OpenKeyEx_doc, "See OpenKey()");
 
 PyDoc_STRVAR(QueryInfoKey_doc,
-"tuple = QueryInfoKey(key) - Returns information about a key.\n"
+"QueryInfoKey(key) -> tuple\n"
+"Returns information about a key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "\n"
@@ -237,44 +257,51 @@
 " as 100's of nanoseconds since Jan 1, 1600.");
 
 PyDoc_STRVAR(QueryValue_doc,
-"string = QueryValue(key, sub_key) - retrieves the unnamed value for a key.\n"
+"QueryValue(key, sub_key) -> string\n"
+"Retrieves the unnamed value for a key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "sub_key is a string that holds the name of the subkey with which the value\n"
-" is associated.  If this parameter is None or empty, the function retrieves\n"
-" the value set by the SetValue() method for the key identified by key."
+"        is associated.  If this parameter is None or empty, the function\n"
+"        retrieves the value set by the SetValue() method for the key\n"
+"        identified by key."
 "\n"
 "Values in the registry have name, type, and data components. This method\n"
 "retrieves the data for a key's first value that has a NULL name.\n"
 "But the underlying API call doesn't return the type, Lame Lame Lame, DONT USE THIS!!!");
 
 PyDoc_STRVAR(QueryValueEx_doc,
-"value,type_id = QueryValueEx(key, value_name) - Retrieves the type and data for a specified value name associated with an open registry key.\n"
+"QueryValueEx(key, value_name) -> (value, type_id)\n"
+"Retrieves the type and data for a specified value name associated with an\n"
+"open registry key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "value_name is a string indicating the value to query");
 
 PyDoc_STRVAR(SaveKey_doc,
-"SaveKey(key, file_name) - Saves the specified key, and all its subkeys to the specified file.\n"
+"SaveKey(key, file_name)\n"
+"Saves the specified key, and all its subkeys to the specified file.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"file_name is the name of the file to save registry data to.\n"
-" This file cannot already exist. If this filename includes an extension,\n"
-" it cannot be used on file allocation table (FAT) file systems by the\n"
-" LoadKey(), ReplaceKey() or RestoreKey() methods.\n"
+"file_name is the name of the file to save registry data to.  This file cannot\n"
+"          already exist. If this filename includes an extension, it cannot be\n"
+"          used on file allocation table (FAT) file systems by the LoadKey(),\n"
+"          ReplaceKey() or RestoreKey() methods.\n"
 "\n"
-"If key represents a key on a remote computer, the path described by\n"
-"file_name is relative to the remote computer.\n"
-"The caller of this method must possess the SeBackupPrivilege security privilege.\n"
-"This function passes NULL for security_attributes to the API.");
+"If key represents a key on a remote computer, the path described by file_name\n"
+"is relative to the remote computer.\n"
+"\n"
+"The caller of this method must possess the SeBackupPrivilege security\n"
+"privilege.  This function passes NULL for security_attributes to the API.");
 
 PyDoc_STRVAR(SetValue_doc,
-"SetValue(key, sub_key, type, value) - Associates a value with a specified key.\n"
+"SetValue(key, sub_key, type, value)\n"
+"Associates a value with a specified key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
 "sub_key is a string that names the subkey with which the value is associated.\n"
-"type is an integer that specifies the type of the data.  Currently this\n"
-" must be REG_SZ, meaning only strings are supported.\n"
+"type is an integer that specifies the type of the data.  Currently this must\n"
+"     be REG_SZ, meaning only strings are supported.\n"
 "value is a string that specifies the new value.\n"
 "\n"
 "If the key specified by the sub_key parameter does not exist, the SetValue\n"
@@ -288,10 +315,12 @@
 "KEY_SET_VALUE access.");
 
 PyDoc_STRVAR(SetValueEx_doc,
-"SetValueEx(key, value_name, reserved, type, value) - Stores data in the value field of an open registry key.\n"
+"SetValueEx(key, value_name, reserved, type, value)\n"
+"Stores data in the value field of an open registry key.\n"
 "\n"
 "key is an already open key, or any one of the predefined HKEY_* constants.\n"
-"value_name is a string containing the name of the value to set, or None\n"
+"value_name is a string containing the name of the value to set, or None.\n"
+"reserved can be anything - zero is always passed to the API.\n"
 "type is an integer that specifies the type of the data.  This should be one of:\n"
 "  REG_BINARY -- Binary data in any form.\n"
 "  REG_DWORD -- A 32-bit number.\n"
@@ -306,7 +335,6 @@
 "  REG_NONE -- No defined value type.\n"
 "  REG_RESOURCE_LIST -- A device-driver resource list.\n"
 "  REG_SZ -- A null-terminated string.\n"
-"reserved can be anything - zero is always passed to the API.\n"
 "value is a string that specifies the new value.\n"
 "\n"
 "This method can also set additional value and type information for the\n"
@@ -323,6 +351,7 @@
 "Disables registry reflection for 32-bit processes running on a 64-bit\n"
 "Operating System.  Will generally raise NotImplemented if executed on\n"
 "a 32-bit Operating System.\n"
+"\n"
 "If the key is not on the reflection list, the function succeeds but has no effect.\n"
 "Disabling reflection for a key does not affect reflection of any subkeys.");
 
@@ -332,7 +361,8 @@
 "Restoring reflection for a key does not affect reflection of any subkeys.");
 
 PyDoc_STRVAR(QueryReflectionKey_doc,
-"bool = QueryReflectionKey(hkey) - Determines the reflection state for the specified key.\n"
+"QueryReflectionKey(hkey) -> bool\n"
+"Determines the reflection state for the specified key.\n"
 "Will generally raise NotImplemented if executed on a 32-bit Operating System.\n");
 
 /* PyHKEY docstrings */
@@ -360,12 +390,14 @@
 
 
 PyDoc_STRVAR(PyHKEY_Close_doc,
-"key.Close() - Closes the underlying Windows handle.\n"
+"key.Close()\n"
+"Closes the underlying Windows handle.\n"
 "\n"
 "If the handle is already closed, no error is raised.");
 
 PyDoc_STRVAR(PyHKEY_Detach_doc,
-"int = key.Detach() - Detaches the Windows handle from the handle object.\n"
+"key.Detach() -> int\n"
+"Detaches the Windows handle from the handle object.\n"
 "\n"
 "The result is the value of the handle before it is detached.  If the\n"
 "handle is already detached, this will return zero.\n"
diff -r bd8afb90ebf2 PCbuild/select.vcxproj
--- a/PCbuild/select.vcxproj
+++ b/PCbuild/select.vcxproj
@@ -151,7 +151,7 @@
   </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
@@ -161,14 +161,14 @@
       <TargetEnvironment>X64</TargetEnvironment>
     </Midl>
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
@@ -178,14 +178,14 @@
       <TargetEnvironment>X64</TargetEnvironment>
     </Midl>
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='PGInstrument|Win32'">
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
@@ -195,7 +195,7 @@
       <TargetEnvironment>X64</TargetEnvironment>
     </Midl>
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
       <TargetMachine>MachineX64</TargetMachine>
@@ -203,7 +203,7 @@
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='PGUpdate|Win32'">
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
     </Link>
@@ -213,7 +213,7 @@
       <TargetEnvironment>X64</TargetEnvironment>
     </Midl>
     <Link>
-      <AdditionalDependencies>wsock32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
       <IgnoreSpecificDefaultLibraries>libc;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
       <BaseAddress>0x1D110000</BaseAddress>
       <TargetMachine>MachineX64</TargetMachine>
diff -r bd8afb90ebf2 Parser/Python.asdl
--- a/Parser/Python.asdl
+++ b/Parser/Python.asdl
@@ -60,7 +60,7 @@
          | GeneratorExp(expr elt, comprehension* generators)
          -- the grammar constrains where yield expressions can occur
          | Yield(expr? value)
-             | YieldFrom(expr? value)
+         | YieldFrom(expr value)
          -- need sequences for compare to distinguish between
          -- x < 4 < 3 and (x < 4) < 3
          | Compare(expr left, cmpop* ops, expr* comparators)
diff -r bd8afb90ebf2 Parser/asdl_c.py
--- a/Parser/asdl_c.py
+++ b/Parser/asdl_c.py
@@ -5,7 +5,6 @@
 # handle fields that have a type but no name
 
 import os, sys
-import subprocess
 
 import asdl
 
@@ -1064,7 +1063,7 @@
             self.emit("case %s:" % t.name, 2)
             self.emit("Py_INCREF(%s_singleton);" % t.name, 3)
             self.emit("return %s_singleton;" % t.name, 3)
-        self.emit("default:" % name, 2)
+        self.emit("default:", 2)
         self.emit('/* should never happen, but just in case ... */', 3)
         code = "PyErr_Format(PyExc_SystemError, \"unknown %s found\");" % name
         self.emit(code, 3, reflow=False)
diff -r bd8afb90ebf2 Parser/node.c
--- a/Parser/node.c
+++ b/Parser/node.c
@@ -71,7 +71,7 @@
  * capacity.  The code is tricky to avoid that.
  */
 #define XXXROUNDUP(n) ((n) <= 1 ? (n) :                 \
-               (n) <= 128 ? (((n) + 3) & ~3) :          \
+               (n) <= 128 ? _Py_SIZE_ROUND_UP((n), 4) : \
                fancy_roundup(n))
 
 
diff -r bd8afb90ebf2 Python/Python-ast.c
--- a/Python/Python-ast.c
+++ b/Python/Python-ast.c
@@ -1802,6 +1802,11 @@
 YieldFrom(expr_ty value, int lineno, int col_offset, PyArena *arena)
 {
         expr_ty p;
+        if (!value) {
+                PyErr_SetString(PyExc_ValueError,
+                                "field value is required for YieldFrom");
+                return NULL;
+        }
         p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));
         if (!p)
                 return NULL;
@@ -5431,7 +5436,8 @@
                         Py_XDECREF(tmp);
                         tmp = NULL;
                 } else {
-                        value = NULL;
+                        PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from YieldFrom");
+                        return 1;
                 }
                 *out = YieldFrom(value, lineno, col_offset, arena);
                 if (*out == NULL) goto failed;
diff -r bd8afb90ebf2 Python/ast.c
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -224,8 +224,7 @@
     case Yield_kind:
         return !exp->v.Yield.value || validate_expr(exp->v.Yield.value, Load);
     case YieldFrom_kind:
-        return !exp->v.YieldFrom.value ||
-            validate_expr(exp->v.YieldFrom.value, Load);
+        return validate_expr(exp->v.YieldFrom.value, Load);
     case Compare_kind:
         if (!asdl_seq_LEN(exp->v.Compare.comparators)) {
             PyErr_SetString(PyExc_ValueError, "Compare with no comparators");
@@ -545,9 +544,9 @@
 }
 
 static identifier
-new_identifier(const char* n, struct compiling *c)
+new_identifier(const char *n, struct compiling *c)
 {
-    PyObject* id = PyUnicode_DecodeUTF8(n, strlen(n), NULL);
+    PyObject *id = PyUnicode_DecodeUTF8(n, strlen(n), NULL);
     if (!id)
         return NULL;
     /* PyUnicode_DecodeUTF8 should always return a ready string. */
@@ -574,79 +573,43 @@
 
 #define NEW_IDENTIFIER(n) new_identifier(STR(n), c)
 
-/* This routine provides an invalid object for the syntax error.
-   The outermost routine must unpack this error and create the
-   proper object.  We do this so that we don't have to pass
-   the filename to everything function.
-
-   XXX Maybe we should just pass the filename...
-*/
-
 static int
-ast_error(const node *n, const char *errstr)
+ast_error(struct compiling *c, const node *n, const char *errmsg)
 {
-    PyObject *u = Py_BuildValue("zii", errstr, LINENO(n), n->n_col_offset);
-    if (!u)
-        return 0;
-    PyErr_SetObject(PyExc_SyntaxError, u);
-    Py_DECREF(u);
-    return 0;
-}
-
-static void
-ast_error_finish(const char *filename)
-{
-    PyObject *type, *value, *tback, *errstr, *offset, *loc, *tmp;
+    PyObject *value, *errstr, *loc, *tmp;
     PyObject *filename_obj;
-    long lineno;
-
-    assert(PyErr_Occurred());
-    if (!PyErr_ExceptionMatches(PyExc_SyntaxError))
-        return;
-
-    PyErr_Fetch(&type, &value, &tback);
-    errstr = PyTuple_GetItem(value, 0);
-    if (!errstr)
-        return;
-    Py_INCREF(errstr);
-    lineno = PyLong_AsLong(PyTuple_GetItem(value, 1));
-    if (lineno == -1) {
-        Py_DECREF(errstr);
-        return;
-    }
-    offset = PyTuple_GetItem(value, 2);
-    if (!offset) {
-        Py_DECREF(errstr);
-        return;
-    }
-    Py_DECREF(value);
-
-    loc = PyErr_ProgramText(filename, lineno);
+
+    loc = PyErr_ProgramText(c->c_filename, LINENO(n));
     if (!loc) {
         Py_INCREF(Py_None);
         loc = Py_None;
     }
-    if (filename != NULL)
-        filename_obj = PyUnicode_DecodeFSDefault(filename);
-    else {
+    if (c->c_filename) {
+        filename_obj = PyUnicode_DecodeFSDefault(c->c_filename);
+        if (!filename_obj) {
+            Py_DECREF(loc);
+            return 0;
+        }
+    } else {
         Py_INCREF(Py_None);
         filename_obj = Py_None;
     }
-    if (filename_obj != NULL)
-        tmp = Py_BuildValue("(NlOO)", filename_obj, lineno, offset, loc);
-    else
-        tmp = NULL;
-    Py_DECREF(loc);
-    if (!tmp) {
-        Py_DECREF(errstr);
-        return;
+    tmp = Py_BuildValue("(NiiN)", filename_obj, LINENO(n), n->n_col_offset, loc);
+    if (!tmp)
+        return 0;
+    errstr = PyUnicode_FromString(errmsg);
+    if (!errstr) {
+        Py_DECREF(tmp);
+        return 0;
     }
     value = PyTuple_Pack(2, errstr, tmp);
     Py_DECREF(errstr);
     Py_DECREF(tmp);
-    if (!value)
-        return;
-    PyErr_Restore(type, value, tback);
+    if (value) {
+        PyErr_SetObject(PyExc_SyntaxError, value);
+        Py_DECREF(value);
+    }
+    return 0;
 }
 
 /* num_stmts() returns number of contained statements.
@@ -724,11 +687,14 @@
     struct compiling c;
     mod_ty res = NULL;
 
+    c.c_arena = arena;
+    c.c_filename = filename;
+    c.c_normalize = c.c_normalize_args = NULL;
     if (flags && flags->cf_flags & PyCF_SOURCE_IS_UTF8) {
         c.c_encoding = "utf-8";
         if (TYPE(n) == encoding_decl) {
 #if 0
-            ast_error(n, "encoding declaration in Unicode string");
+            ast_error(c, n, "encoding declaration in Unicode string");
             goto out;
 #endif
             n = CHILD(n, 0);
@@ -740,9 +706,6 @@
         /* PEP 3120 */
         c.c_encoding = "utf-8";
     }
-    c.c_arena = arena;
-    c.c_filename = filename;
-    c.c_normalize = c.c_normalize_args = NULL;
 
     k = 0;
     switch (TYPE(n)) {
@@ -835,8 +798,6 @@
         PyTuple_SET_ITEM(c.c_normalize_args, 1, NULL);
         Py_DECREF(c.c_normalize_args);
     }
-    if (!res)
-        ast_error_finish(filename);
     return res;
 }
 
@@ -882,18 +843,18 @@
 };
 
 static int
-forbidden_name(identifier name, const node *n, int full_checks)
+forbidden_name(struct compiling *c, identifier name, const node *n, int full_checks)
 {
     assert(PyUnicode_Check(name));
     if (PyUnicode_CompareWithASCIIString(name, "__debug__") == 0) {
-        ast_error(n, "assignment to keyword");
+        ast_error(c, n, "assignment to keyword");
         return 1;
     }
     if (full_checks) {
         const char **p;
         for (p = FORBIDDEN; *p; p++) {
             if (PyUnicode_CompareWithASCIIString(name, *p) == 0) {
-                ast_error(n, "assignment to keyword");
+                ast_error(c, n, "assignment to keyword");
                 return 1;
             }
         }
@@ -929,7 +890,7 @@
     switch (e->kind) {
         case Attribute_kind:
             e->v.Attribute.ctx = ctx;
-            if (ctx == Store && forbidden_name(e->v.Attribute.attr, n, 1))
+            if (ctx == Store && forbidden_name(c, e->v.Attribute.attr, n, 1))
                 return 0;
             break;
         case Subscript_kind:
@@ -942,7 +903,7 @@
             break;
         case Name_kind:
             if (ctx == Store) {
-                if (forbidden_name(e->v.Name.id, n, 1))
+                if (forbidden_name(c, e->v.Name.id, n, 1))
                     return 0; /* forbidden_name() calls ast_error() */
             }
             e->v.Name.ctx = ctx;
@@ -1016,7 +977,7 @@
                       "can't %s %s",
                       ctx == Store ? "assign to" : "delete",
                       expr_name);
-        return ast_error(n, buf);
+        return ast_error(c, n, buf);
     }
 
     /* If the LHS is a list or tuple, we need to set the assignment
@@ -1164,7 +1125,7 @@
     name = NEW_IDENTIFIER(ch);
     if (!name)
         return NULL;
-    if (forbidden_name(name, ch, 0))
+    if (forbidden_name(c, name, ch, 0))
         return NULL;
 
     if (NCH(n) == 3 && TYPE(CHILD(n, 1)) == COLON) {
@@ -1194,7 +1155,7 @@
     int j = 0; /* index for kwdefaults and kwonlyargs */
 
     if (kwonlyargs == NULL) {
-        ast_error(CHILD(n, start), "named arguments must follow bare *");
+        ast_error(c, CHILD(n, start), "named arguments must follow bare *");
         return -1;
     }
     assert(kwdefaults != NULL);
@@ -1226,7 +1187,7 @@
                 argname = NEW_IDENTIFIER(ch);
                 if (!argname)
                     goto error;
-                if (forbidden_name(argname, ch, 0))
+                if (forbidden_name(c, argname, ch, 0))
                     goto error;
                 arg = arg(argname, annotation, c->c_arena);
                 if (!arg)
@@ -1237,7 +1198,7 @@
             case DOUBLESTAR:
                 return i;
             default:
-                ast_error(ch, "unexpected node");
+                ast_error(c, ch, "unexpected node");
                 goto error;
         }
     }
@@ -1329,7 +1290,7 @@
         return NULL;
 
     if (nposargs + nkwonlyargs > 255) {
-        ast_error(n, "more than 255 arguments");
+        ast_error(c, n, "more than 255 arguments");
         return NULL;
     }
 
@@ -1357,7 +1318,7 @@
                     found_default = 1;
                 }
                 else if (found_default) {
-                    ast_error(n,
+                    ast_error(c, n,
                              "non-default argument follows default argument");
                     return NULL;
                 }
@@ -1369,7 +1330,7 @@
                 break;
             case STAR:
                 if (i+1 >= NCH(n)) {
-                    ast_error(CHILD(n, i),
+                    ast_error(c, CHILD(n, i),
                         "named arguments must follow bare *");
                     return NULL;
                 }
@@ -1386,7 +1347,7 @@
                     vararg = NEW_IDENTIFIER(CHILD(ch, 0));
                     if (!vararg)
                         return NULL;
-                    if (forbidden_name(vararg, CHILD(ch, 0), 0))
+                    if (forbidden_name(c, vararg, CHILD(ch, 0), 0))
                         return NULL;
                     if (NCH(ch) > 1) {
                         /* there is an annotation on the vararg */
@@ -1417,7 +1378,7 @@
                     if (!kwargannotation)
                         return NULL;
                 }
-                if (forbidden_name(kwarg, CHILD(ch, 0), 0))
+                if (forbidden_name(c, kwarg, CHILD(ch, 0), 0))
                     return NULL;
                 i += 3;
                 break;
@@ -1536,7 +1497,7 @@
     name = NEW_IDENTIFIER(CHILD(n, name_i));
     if (!name)
         return NULL;
-    if (forbidden_name(name, CHILD(n, name_i), 0))
+    if (forbidden_name(c, name, CHILD(n, name_i), 0))
         return NULL;
     args = ast_for_arguments(c, CHILD(n, name_i + 1));
     if (!args)
@@ -1877,10 +1838,10 @@
                     char buf[128];
                     s = _PyUnicode_AsString(errstr);
                     PyOS_snprintf(buf, sizeof(buf), "(unicode error) %s", s);
-                    ast_error(n, buf);
+                    ast_error(c, n, buf);
                     Py_DECREF(errstr);
                 } else {
-                    ast_error(n, "(unicode error) unknown error");
+                    ast_error(c, n, "(unicode error) unknown error");
                 }
                 Py_DECREF(type);
                 Py_DECREF(value);
@@ -2465,14 +2426,14 @@
         }
     }
     if (ngens > 1 || (ngens && (nargs || nkeywords))) {
-        ast_error(n, "Generator expression must be parenthesized "
+        ast_error(c, n, "Generator expression must be parenthesized "
                   "if not sole argument");
         return NULL;
     }
 
     if (nargs + nkeywords + ngens > 255) {
-      ast_error(n, "more than 255 arguments");
-      return NULL;
+        ast_error(c, n, "more than 255 arguments");
+        return NULL;
     }
 
     args = asdl_seq_new(nargs + ngens, c->c_arena);
@@ -2489,12 +2450,12 @@
             expr_ty e;
             if (NCH(ch) == 1) {
                 if (nkeywords) {
-                    ast_error(CHILD(ch, 0),
+                    ast_error(c, CHILD(ch, 0),
                               "non-keyword arg after keyword arg");
                     return NULL;
                 }
                 if (vararg) {
-                    ast_error(CHILD(ch, 0),
+                    ast_error(c, CHILD(ch, 0),
                               "only named arguments may follow *expression");
                     return NULL;
                 }
@@ -2524,19 +2485,19 @@
                  * then is very confusing.
                  */
                 if (e->kind == Lambda_kind) {
-                    ast_error(CHILD(ch, 0), "lambda cannot contain assignment");
+                    ast_error(c, CHILD(ch, 0), "lambda cannot contain assignment");
                     return NULL;
                 } else if (e->kind != Name_kind) {
-                    ast_error(CHILD(ch, 0), "keyword can't be an expression");
+                    ast_error(c, CHILD(ch, 0), "keyword can't be an expression");
                     return NULL;
-                } else if (forbidden_name(e->v.Name.id, ch, 1)) {
+                } else if (forbidden_name(c, e->v.Name.id, ch, 1)) {
                     return NULL;
                 }
                 key = e->v.Name.id;
                 for (k = 0; k < nkeywords; k++) {
                     tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;
                     if (!PyUnicode_Compare(tmp, key)) {
-                        ast_error(CHILD(ch, 0), "keyword argument repeated");
+                        ast_error(c, CHILD(ch, 0), "keyword argument repeated");
                         return NULL;
                     }
                 }
@@ -2629,7 +2590,7 @@
             case Subscript_kind:
                 break;
             default:
-                ast_error(ch, "illegal expression for augmented assignment");
+                ast_error(c, ch, "illegal expression for augmented assignment");
                 return NULL;
         }
 
@@ -2662,7 +2623,7 @@
             expr_ty e;
             node *ch = CHILD(n, i);
             if (TYPE(ch) == yield_expr) {
-                ast_error(ch, "assignment to yield expression not possible");
+                ast_error(c, ch, "assignment to yield expression not possible");
                 return NULL;
             }
             e = ast_for_testlist(c, ch);
@@ -2809,11 +2770,11 @@
                 str = NEW_IDENTIFIER(str_node);
                 if (!str)
                     return NULL;
-                if (store && forbidden_name(str, str_node, 0))
+                if (store && forbidden_name(c, str, str_node, 0))
                     return NULL;
             }
             else {
-                if (forbidden_name(name, name_node, 0))
+                if (forbidden_name(c, name, name_node, 0))
                     return NULL;
             }
             return alias(name, str, c->c_arena);
@@ -2832,7 +2793,7 @@
                 a->asname = NEW_IDENTIFIER(asname_node);
                 if (!a->asname)
                     return NULL;
-                if (forbidden_name(a->asname, asname_node, 0))
+                if (forbidden_name(c, a->asname, asname_node, 0))
                     return NULL;
                 return a;
             }
@@ -2843,7 +2804,7 @@
                 name = NEW_IDENTIFIER(name_node);
                 if (!name)
                     return NULL;
-                if (store && forbidden_name(name, name_node, 0))
+                if (store && forbidden_name(c, name, name_node, 0))
                     return NULL;
                 return alias(name, NULL, c->c_arena);
             }
@@ -2972,13 +2933,13 @@
             n = CHILD(n, idx);
             n_children = NCH(n);
             if (n_children % 2 == 0) {
-                ast_error(n, "trailing comma not allowed without"
+                ast_error(c, n, "trailing comma not allowed without"
                              " surrounding parentheses");
                 return NULL;
             }
             break;
         default:
-            ast_error(n, "Unexpected node-type in from-import");
+            ast_error(c, n, "Unexpected node-type in from-import");
             return NULL;
         }
 
@@ -3384,7 +3345,7 @@
         identifier e = NEW_IDENTIFIER(CHILD(exc, 3));
         if (!e)
             return NULL;
-        if (forbidden_name(e, CHILD(exc, 3), 0))
+        if (forbidden_name(c, e, CHILD(exc, 3), 0))
             return NULL;
         expression = ast_for_expr(c, CHILD(exc, 1));
         if (!expression)
@@ -3443,7 +3404,7 @@
         }
     }
     else if (TYPE(CHILD(n, nch - 3)) != except_clause) {
-        ast_error(n, "malformed 'try' statement");
+        ast_error(c, n, "malformed 'try' statement");
         return NULL;
     }
 
@@ -3535,7 +3496,7 @@
         classname = NEW_IDENTIFIER(CHILD(n, 1));
         if (!classname)
             return NULL;
-        if (forbidden_name(classname, CHILD(n, 3), 0))
+        if (forbidden_name(c, classname, CHILD(n, 3), 0))
             return NULL;
         return ClassDef(classname, NULL, NULL, NULL, NULL, s, decorator_seq,
                         LINENO(n), n->n_col_offset, c->c_arena);
@@ -3548,7 +3509,7 @@
         classname = NEW_IDENTIFIER(CHILD(n, 1));
         if (!classname)
             return NULL;
-        if (forbidden_name(classname, CHILD(n, 3), 0))
+        if (forbidden_name(c, classname, CHILD(n, 3), 0))
             return NULL;
         return ClassDef(classname, NULL, NULL, NULL, NULL, s, decorator_seq,
                         LINENO(n), n->n_col_offset, c->c_arena);
@@ -3573,7 +3534,7 @@
     classname = NEW_IDENTIFIER(CHILD(n, 1));
     if (!classname)
         return NULL;
-    if (forbidden_name(classname, CHILD(n, 1), 0))
+    if (forbidden_name(c, classname, CHILD(n, 1), 0))
         return NULL;
 
     return ClassDef(classname, call->v.Call.args, call->v.Call.keywords,
@@ -3832,10 +3793,10 @@
     }
     if (*bytesmode) {
         /* Disallow non-ascii characters (but not escapes) */
-        const char *c;
-        for (c = s; *c; c++) {
-            if (Py_CHARMASK(*c) >= 0x80) {
-                ast_error(n, "bytes can only contain ASCII "
+        const char *ch;
+        for (ch = s; *ch; ch++) {
+            if (Py_CHARMASK(*ch) >= 0x80) {
+                ast_error(c, n, "bytes can only contain ASCII "
                           "literal characters.");
                 return NULL;
             }
@@ -3883,7 +3844,8 @@
             if (s == NULL)
                 goto onError;
             if (*bytesmode != subbm) {
-                ast_error(n, "cannot mix bytes and nonbytes literals");
+                ast_error(c, n, "cannot mix bytes and nonbytes literals");
+                Py_DECREF(s);
                 goto onError;
             }
             if (PyBytes_Check(v) && PyBytes_Check(s)) {
diff -r bd8afb90ebf2 Python/codecs.c
--- a/Python/codecs.c
+++ b/Python/codecs.c
@@ -791,8 +791,9 @@
         /* Try decoding a single surrogate character. If
            there are more, let the codec call us again. */
         p += start;
-        if ((p[0] & 0xf0) == 0xe0 ||
-            (p[1] & 0xc0) == 0x80 ||
+        if (PyBytes_GET_SIZE(object) - start >= 3 &&
+            (p[0] & 0xf0) == 0xe0 &&
+            (p[1] & 0xc0) == 0x80 &&
             (p[2] & 0xc0) == 0x80) {
             /* it's a three-byte code */
             ch = ((p[0] & 0x0f) << 12) + ((p[1] & 0x3f) << 6) + (p[2] & 0x3f);
diff -r bd8afb90ebf2 Python/compile.c
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -141,6 +141,11 @@
 The u pointer points to the current compilation unit, while units
 for enclosing blocks are stored in c_stack.     The u and c_stack are
 managed by compiler_enter_scope() and compiler_exit_scope().
+
+Note that we don't track recursion levels during compilation - the
+task of detecting and rejecting excessive levels of nesting is
+handled by the symbol analysis pass.
+
 */
 
 struct compiler {
@@ -3336,27 +3341,24 @@
     case DictComp_kind:
         return compiler_dictcomp(c, e);
     case Yield_kind:
-    case YieldFrom_kind: {
-        expr_ty value;
         if (c->u->u_ste->ste_type != FunctionBlock)
             return compiler_error(c, "'yield' outside function");
-        value = (e->kind == YieldFrom_kind) ? e->v.YieldFrom.value : e->v.Yield.value;
-        if (value) {
-            VISIT(c, expr, value);
+        if (e->v.Yield.value) {
+            VISIT(c, expr, e->v.Yield.value);
         }
         else {
             ADDOP_O(c, LOAD_CONST, Py_None, consts);
         }
-        if (e->kind == YieldFrom_kind) {
-            ADDOP(c, GET_ITER);
-            ADDOP_O(c, LOAD_CONST, Py_None, consts);
-            ADDOP(c, YIELD_FROM);
-        }
-        else {
-            ADDOP(c, YIELD_VALUE);
-        }
+        ADDOP(c, YIELD_VALUE);
         break;
-    }
+    case YieldFrom_kind:
+        if (c->u->u_ste->ste_type != FunctionBlock)
+            return compiler_error(c, "'yield' outside function");
+        VISIT(c, expr, e->v.YieldFrom.value);
+        ADDOP(c, GET_ITER);
+        ADDOP_O(c, LOAD_CONST, Py_None, consts);
+        ADDOP(c, YIELD_FROM);
+        break;
     case Compare_kind:
         return compiler_compare(c, e);
     case Call_kind:
diff -r bd8afb90ebf2 Python/fileutils.c
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -1,4 +1,5 @@
 #include "Python.h"
+#include "osdefs.h"
 #ifdef MS_WINDOWS
 #  include <windows.h>
 #endif
@@ -7,6 +8,10 @@
 #include <langinfo.h>
 #endif
 
+#ifdef __APPLE__
+extern wchar_t* _Py_DecodeUTF8_surrogateescape(const char *s, Py_ssize_t size);
+#endif
+
 PyObject *
 _Py_device_encoding(int fd)
 {
@@ -59,6 +64,17 @@
 wchar_t*
 _Py_char2wchar(const char* arg, size_t *size)
 {
+#ifdef __APPLE__
+    wchar_t *wstr;
+    wstr = _Py_DecodeUTF8_surrogateescape(arg, strlen(arg));
+    if (size != NULL) {
+        if (wstr != NULL)
+            *size = wcslen(wstr);
+        else
+            *size = (size_t)-1;
+    }
+    return wstr;
+#else
     wchar_t *res;
 #ifdef HAVE_BROKEN_MBSTOWCS
     /* Some platforms have a broken implementation of
@@ -144,7 +160,7 @@
         argsize -= converted;
         out++;
     }
-#else
+#else   /* HAVE_MBRTOWC */
     /* Cannot use C locale for escaping; manually escape as if charset
        is ASCII (i.e. escape all bytes > 128. This will still roundtrip
        correctly in the locale's charset, which must be an ASCII superset. */
@@ -159,7 +175,7 @@
         else
             *out++ = 0xdc00 + *in++;
     *out = 0;
-#endif
+#endif   /* HAVE_MBRTOWC */
     if (size != NULL)
         *size = out - res;
     return res;
@@ -167,6 +183,7 @@
     if (size != NULL)
         *size = (size_t)-1;
     return NULL;
+#endif   /* __APPLE__ */
 }
 
 /* Encode a (wide) character string to the locale encoding with the
@@ -183,14 +200,42 @@
 char*
 _Py_wchar2char(const wchar_t *text, size_t *error_pos)
 {
+#ifdef __APPLE__
+    Py_ssize_t len;
+    PyObject *unicode, *bytes = NULL;
+    char *cpath;
+
+    unicode = PyUnicode_FromWideChar(text, wcslen(text));
+    if (unicode == NULL)
+        return NULL;
+
+    bytes = _PyUnicode_AsUTF8String(unicode, "surrogateescape");
+    Py_DECREF(unicode);
+    if (bytes == NULL) {
+        PyErr_Clear();
+        if (error_pos != NULL)
+            *error_pos = (size_t)-1;
+        return NULL;
+    }
+
+    len = PyBytes_GET_SIZE(bytes);
+    cpath = PyMem_Malloc(len+1);
+    if (cpath == NULL) {
+        PyErr_Clear();
+        Py_DECREF(bytes);
+        if (error_pos != NULL)
+            *error_pos = (size_t)-1;
+        return NULL;
+    }
+    memcpy(cpath, PyBytes_AsString(bytes), len + 1);
+    Py_DECREF(bytes);
+    return cpath;
+#else   /* __APPLE__ */
     const size_t len = wcslen(text);
     char *result = NULL, *bytes = NULL;
     size_t i, size, converted;
     wchar_t c, buf[2];
 
-    if (error_pos != NULL)
-        *error_pos = (size_t)-1;
-
     /* The function works in two steps:
        1. compute the length of the output buffer in bytes (size)
        2. outputs the bytes */
@@ -237,11 +282,15 @@
 
         size += 1; /* nul byte at the end */
         result = PyMem_Malloc(size);
-        if (result == NULL)
+        if (result == NULL) {
+            if (error_pos != NULL)
+                *error_pos = (size_t)-1;
             return NULL;
+        }
         bytes = result;
     }
     return result;
+#endif   /* __APPLE__ */
 }
 
 /* In principle, this should use HAVE__WSTAT, and _wstat
diff -r bd8afb90ebf2 Python/formatter_unicode.c
--- a/Python/formatter_unicode.c
+++ b/Python/formatter_unicode.c
@@ -1099,7 +1099,7 @@
                          &locale, 0);
 
 done:
-    Py_DECREF(unicode_tmp);
+    Py_XDECREF(unicode_tmp);
     free_locale_info(&locale);
     return result;
 }
diff -r bd8afb90ebf2 Python/getargs.c
--- a/Python/getargs.c
+++ b/Python/getargs.c
@@ -1742,6 +1742,7 @@
     assert(min >= 0);
     assert(min <= max);
     if (!PyTuple_Check(args)) {
+        va_end(vargs);
         PyErr_SetString(PyExc_SystemError,
             "PyArg_UnpackTuple() argument list is not a tuple");
         return 0;
diff -r bd8afb90ebf2 Python/getopt.c
--- a/Python/getopt.c
+++ b/Python/getopt.c
@@ -90,18 +90,18 @@
         opt_ptr = &argv[_PyOS_optind++][1];
     }
 
-    if ( (option = *opt_ptr++) == L'\0')
+    if ((option = *opt_ptr++) == L'\0')
         return -1;
 
     if (option == 'J') {
-        fprintf(stderr, "-J is reserved for Jython\n");
+        if (_PyOS_opterr)
+            fprintf(stderr, "-J is reserved for Jython\n");
         return '_';
     }
 
     if ((ptr = wcschr(optstring, option)) == NULL) {
         if (_PyOS_opterr)
-          fprintf(stderr, "Unknown option: -%c\n", (char)option);
-
+            fprintf(stderr, "Unknown option: -%c\n", (char)option);
         return '_';
     }
 
diff -r bd8afb90ebf2 Python/import.c
--- a/Python/import.c
+++ b/Python/import.c
@@ -169,6 +169,7 @@
         PyThread_acquire_lock(import_lock, 1);
         PyEval_RestoreThread(tstate);
     }
+    assert(import_lock_level == 0);
     import_lock_thread = me;
     import_lock_level = 1;
 }
@@ -182,6 +183,7 @@
     if (import_lock_thread != me)
         return -1;
     import_lock_level--;
+    assert(import_lock_level >= 0);
     if (import_lock_level == 0) {
         import_lock_thread = -1;
         PyThread_release_lock(import_lock);
diff -r bd8afb90ebf2 Python/importlib.h
--- a/Python/importlib.h
+++ b/Python/importlib.h
@@ -787,7 +787,7 @@
     0,0,100,3,0,106,11,0,124,6,0,124,7,0,124,9,
     0,124,3,0,100,4,0,25,103,4,0,131,1,0,125,10,
     0,116,12,0,124,4,0,116,13,0,124,10,0,131,3,0,
-    83,40,6,0,0,0,117,7,2,0,0,71,105,118,101,110,
+    83,40,6,0,0,0,117,244,1,0,0,71,105,118,101,110,
     32,116,104,101,32,112,97,116,104,32,116,111,32,97,32,46,
     112,121,32,102,105,108,101,44,32,114,101,116,117,114,110,32,
     116,104,101,32,112,97,116,104,32,116,111,32,105,116,115,32,
@@ -811,1725 +811,1731 @@
     101,32,105,115,32,110,111,116,32,78,111,110,101,44,32,116,
     104,101,110,32,105,116,32,109,117,115,116,32,98,101,32,97,
     32,98,111,111,108,101,97,110,32,97,110,100,32,105,115,32,
-    116,97,107,101,110,32,97,115,10,32,32,32,32,116,104,101,
-    32,118,97,108,117,101,32,111,102,32,98,111,111,108,40,115,
-    121,115,46,102,108,97,103,115,46,111,112,116,105,109,105,122,
-    101,41,32,105,110,115,116,101,97,100,46,10,10,32,32,32,
-    32,73,102,32,115,121,115,46,105,109,112,108,101,109,101,110,
+    117,115,101,100,32,105,110,10,32,32,32,32,112,108,97,99,
+    101,32,111,102,32,115,121,115,46,102,108,97,103,115,46,111,
+    112,116,105,109,105,122,101,46,10,10,32,32,32,32,73,102,
+    32,115,121,115,46,105,109,112,108,101,109,101,110,116,97,116,
+    105,111,110,46,99,97,99,104,101,95,116,97,103,32,105,115,
+    32,78,111,110,101,32,116,104,101,110,32,78,111,116,73,109,
+    112,108,101,109,101,110,116,101,100,69,114,114,111,114,32,105,
+    115,32,114,97,105,115,101,100,46,10,10,32,32,32,32,117,
+    1,0,0,0,46,117,36,0,0,0,115,121,115,46,105,109,
+    112,108,101,109,101,110,116,97,116,105,111,110,46,99,97,99,
+    104,101,95,116,97,103,32,105,115,32,78,111,110,101,117,0,
+    0,0,0,105,0,0,0,0,78,40,14,0,0,0,117,4,
+    0,0,0,78,111,110,101,117,3,0,0,0,115,121,115,117,
+    5,0,0,0,102,108,97,103,115,117,8,0,0,0,111,112,
+    116,105,109,105,122,101,117,23,0,0,0,68,69,66,85,71,
+    95,66,89,84,69,67,79,68,69,95,83,85,70,70,73,88,
+    69,83,117,27,0,0,0,79,80,84,73,77,73,90,69,68,
+    95,66,89,84,69,67,79,68,69,95,83,85,70,70,73,88,
+    69,83,117,11,0,0,0,95,112,97,116,104,95,115,112,108,
+    105,116,117,9,0,0,0,112,97,114,116,105,116,105,111,110,
+    117,14,0,0,0,105,109,112,108,101,109,101,110,116,97,116,
+    105,111,110,117,9,0,0,0,99,97,99,104,101,95,116,97,
+    103,117,19,0,0,0,78,111,116,73,109,112,108,101,109,101,
+    110,116,101,100,69,114,114,111,114,117,4,0,0,0,106,111,
+    105,110,117,10,0,0,0,95,112,97,116,104,95,106,111,105,
+    110,117,8,0,0,0,95,80,89,67,65,67,72,69,40,11,
+    0,0,0,117,4,0,0,0,112,97,116,104,117,14,0,0,
+    0,100,101,98,117,103,95,111,118,101,114,114,105,100,101,117,
+    5,0,0,0,100,101,98,117,103,117,8,0,0,0,115,117,
+    102,102,105,120,101,115,117,4,0,0,0,104,101,97,100,117,
+    4,0,0,0,116,97,105,108,117,13,0,0,0,98,97,115,
+    101,95,102,105,108,101,110,97,109,101,117,3,0,0,0,115,
+    101,112,117,1,0,0,0,95,117,3,0,0,0,116,97,103,
+    117,8,0,0,0,102,105,108,101,110,97,109,101,40,0,0,
+    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
+    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
+    111,111,116,115,116,114,97,112,62,117,17,0,0,0,99,97,
+    99,104,101,95,102,114,111,109,95,115,111,117,114,99,101,159,
+    1,0,0,115,22,0,0,0,0,13,31,1,6,1,9,2,
+    6,1,18,1,24,1,12,1,12,1,15,1,31,1,117,17,
+    0,0,0,99,97,99,104,101,95,102,114,111,109,95,115,111,
+    117,114,99,101,99,1,0,0,0,0,0,0,0,5,0,0,
+    0,5,0,0,0,67,0,0,0,115,193,0,0,0,116,0,
+    0,106,1,0,106,2,0,100,7,0,107,8,0,114,33,0,
+    116,4,0,100,1,0,131,1,0,130,1,0,110,0,0,116,
+    5,0,124,0,0,131,1,0,92,2,0,125,1,0,125,2,
+    0,116,5,0,124,1,0,131,1,0,92,2,0,125,1,0,
+    125,3,0,124,3,0,116,6,0,107,3,0,114,108,0,116,
+    7,0,100,2,0,106,8,0,116,6,0,124,0,0,131,2,
+    0,131,1,0,130,1,0,110,0,0,124,2,0,106,9,0,
+    100,3,0,131,1,0,100,4,0,107,3,0,114,153,0,116,
+    7,0,100,5,0,106,8,0,124,2,0,131,1,0,131,1,
+    0,130,1,0,110,0,0,124,2,0,106,10,0,100,3,0,
+    131,1,0,100,6,0,25,125,4,0,116,11,0,124,1,0,
+    124,4,0,116,12,0,100,6,0,25,23,131,2,0,83,40,
+    8,0,0,0,117,121,1,0,0,71,105,118,101,110,32,116,
+    104,101,32,112,97,116,104,32,116,111,32,97,32,46,112,121,
+    99,46,47,46,112,121,111,32,102,105,108,101,44,32,114,101,
+    116,117,114,110,32,116,104,101,32,112,97,116,104,32,116,111,
+    32,105,116,115,32,46,112,121,32,102,105,108,101,46,10,10,
+    32,32,32,32,84,104,101,32,46,112,121,99,47,46,112,121,
+    111,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,
+    110,101,101,100,32,116,111,32,101,120,105,115,116,59,32,116,
+    104,105,115,32,115,105,109,112,108,121,32,114,101,116,117,114,
+    110,115,32,116,104,101,32,112,97,116,104,32,116,111,10,32,
+    32,32,32,116,104,101,32,46,112,121,32,102,105,108,101,32,
+    99,97,108,99,117,108,97,116,101,100,32,116,111,32,99,111,
+    114,114,101,115,112,111,110,100,32,116,111,32,116,104,101,32,
+    46,112,121,99,47,46,112,121,111,32,102,105,108,101,46,32,
+    32,73,102,32,112,97,116,104,32,100,111,101,115,10,32,32,
+    32,32,110,111,116,32,99,111,110,102,111,114,109,32,116,111,
+    32,80,69,80,32,51,49,52,55,32,102,111,114,109,97,116,
+    44,32,86,97,108,117,101,69,114,114,111,114,32,119,105,108,
+    108,32,98,101,32,114,97,105,115,101,100,46,32,73,102,10,
+    32,32,32,32,115,121,115,46,105,109,112,108,101,109,101,110,
     116,97,116,105,111,110,46,99,97,99,104,101,95,116,97,103,
     32,105,115,32,78,111,110,101,32,116,104,101,110,32,78,111,
     116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,
     114,32,105,115,32,114,97,105,115,101,100,46,10,10,32,32,
-    32,32,117,1,0,0,0,46,117,36,0,0,0,115,121,115,
-    46,105,109,112,108,101,109,101,110,116,97,116,105,111,110,46,
-    99,97,99,104,101,95,116,97,103,32,105,115,32,78,111,110,
-    101,117,0,0,0,0,105,0,0,0,0,78,40,14,0,0,
-    0,117,4,0,0,0,78,111,110,101,117,3,0,0,0,115,
-    121,115,117,5,0,0,0,102,108,97,103,115,117,8,0,0,
-    0,111,112,116,105,109,105,122,101,117,23,0,0,0,68,69,
-    66,85,71,95,66,89,84,69,67,79,68,69,95,83,85,70,
-    70,73,88,69,83,117,27,0,0,0,79,80,84,73,77,73,
-    90,69,68,95,66,89,84,69,67,79,68,69,95,83,85,70,
-    70,73,88,69,83,117,11,0,0,0,95,112,97,116,104,95,
-    115,112,108,105,116,117,9,0,0,0,112,97,114,116,105,116,
-    105,111,110,117,14,0,0,0,105,109,112,108,101,109,101,110,
-    116,97,116,105,111,110,117,9,0,0,0,99,97,99,104,101,
-    95,116,97,103,117,19,0,0,0,78,111,116,73,109,112,108,
-    101,109,101,110,116,101,100,69,114,114,111,114,117,4,0,0,
-    0,106,111,105,110,117,10,0,0,0,95,112,97,116,104,95,
-    106,111,105,110,117,8,0,0,0,95,80,89,67,65,67,72,
-    69,40,11,0,0,0,117,4,0,0,0,112,97,116,104,117,
-    14,0,0,0,100,101,98,117,103,95,111,118,101,114,114,105,
-    100,101,117,5,0,0,0,100,101,98,117,103,117,8,0,0,
-    0,115,117,102,102,105,120,101,115,117,4,0,0,0,104,101,
-    97,100,117,4,0,0,0,116,97,105,108,117,13,0,0,0,
-    98,97,115,101,95,102,105,108,101,110,97,109,101,117,3,0,
-    0,0,115,101,112,117,1,0,0,0,95,117,3,0,0,0,
-    116,97,103,117,8,0,0,0,102,105,108,101,110,97,109,101,
-    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    32,32,117,36,0,0,0,115,121,115,46,105,109,112,108,101,
+    109,101,110,116,97,116,105,111,110,46,99,97,99,104,101,95,
+    116,97,103,32,105,115,32,78,111,110,101,117,37,0,0,0,
+    123,125,32,110,111,116,32,98,111,116,116,111,109,45,108,101,
+    118,101,108,32,100,105,114,101,99,116,111,114,121,32,105,110,
+    32,123,33,114,125,117,1,0,0,0,46,105,2,0,0,0,
+    117,28,0,0,0,101,120,112,101,99,116,101,100,32,111,110,
+    108,121,32,50,32,100,111,116,115,32,105,110,32,123,33,114,
+    125,105,0,0,0,0,78,40,13,0,0,0,117,3,0,0,
+    0,115,121,115,117,14,0,0,0,105,109,112,108,101,109,101,
+    110,116,97,116,105,111,110,117,9,0,0,0,99,97,99,104,
+    101,95,116,97,103,117,4,0,0,0,78,111,110,101,117,19,
+    0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,
+    100,69,114,114,111,114,117,11,0,0,0,95,112,97,116,104,
+    95,115,112,108,105,116,117,8,0,0,0,95,80,89,67,65,
+    67,72,69,117,10,0,0,0,86,97,108,117,101,69,114,114,
+    111,114,117,6,0,0,0,102,111,114,109,97,116,117,5,0,
+    0,0,99,111,117,110,116,117,9,0,0,0,112,97,114,116,
+    105,116,105,111,110,117,10,0,0,0,95,112,97,116,104,95,
+    106,111,105,110,117,15,0,0,0,83,79,85,82,67,69,95,
+    83,85,70,70,73,88,69,83,40,5,0,0,0,117,4,0,
+    0,0,112,97,116,104,117,4,0,0,0,104,101,97,100,117,
+    16,0,0,0,112,121,99,97,99,104,101,95,102,105,108,101,
+    110,97,109,101,117,7,0,0,0,112,121,99,97,99,104,101,
+    117,13,0,0,0,98,97,115,101,95,102,105,108,101,110,97,
+    109,101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,17,
+    0,0,0,115,111,117,114,99,101,95,102,114,111,109,95,99,
+    97,99,104,101,186,1,0,0,115,24,0,0,0,0,9,18,
+    1,15,1,18,1,18,1,12,1,9,1,18,1,21,1,9,
+    1,15,1,19,1,117,17,0,0,0,115,111,117,114,99,101,
+    95,102,114,111,109,95,99,97,99,104,101,99,1,0,0,0,
+    0,0,0,0,5,0,0,0,13,0,0,0,67,0,0,0,
+    115,164,0,0,0,116,0,0,124,0,0,131,1,0,100,1,
+    0,107,2,0,114,22,0,100,6,0,83,124,0,0,106,2,
+    0,100,2,0,131,1,0,92,3,0,125,1,0,125,2,0,
+    125,3,0,124,1,0,12,115,81,0,124,3,0,106,3,0,
+    131,0,0,100,7,0,100,8,0,133,2,0,25,100,5,0,
+    107,3,0,114,85,0,124,0,0,83,121,16,0,116,4,0,
+    124,0,0,131,1,0,125,4,0,87,110,40,0,4,116,5,
+    0,116,6,0,102,2,0,107,10,0,114,143,0,1,1,1,
+    116,7,0,100,9,0,100,6,0,133,2,0,25,125,4,0,
+    89,110,1,0,88,116,8,0,116,9,0,131,1,0,114,160,
+    0,124,4,0,83,124,0,0,83,40,10,0,0,0,117,188,
+    0,0,0,67,111,110,118,101,114,116,32,97,32,98,121,116,
+    101,99,111,100,101,32,102,105,108,101,32,112,97,116,104,32,
+    116,111,32,97,32,115,111,117,114,99,101,32,112,97,116,104,
+    32,40,105,102,32,112,111,115,115,105,98,108,101,41,46,10,
+    10,32,32,32,32,84,104,105,115,32,102,117,110,99,116,105,
+    111,110,32,101,120,105,115,116,115,32,112,117,114,101,108,121,
+    32,102,111,114,32,98,97,99,107,119,97,114,100,115,45,99,
+    111,109,112,97,116,105,98,105,108,105,116,121,32,102,111,114,
+    10,32,32,32,32,80,121,73,109,112,111,114,116,95,69,120,
+    101,99,67,111,100,101,77,111,100,117,108,101,87,105,116,104,
+    70,105,108,101,110,97,109,101,115,40,41,32,105,110,32,116,
+    104,101,32,67,32,65,80,73,46,10,10,32,32,32,32,105,
+    0,0,0,0,117,1,0,0,0,46,105,3,0,0,0,105,
+    1,0,0,0,117,3,0,0,0,46,112,121,78,105,253,255,
+    255,255,105,255,255,255,255,105,255,255,255,255,40,10,0,0,
+    0,117,3,0,0,0,108,101,110,117,4,0,0,0,78,111,
+    110,101,117,9,0,0,0,114,112,97,114,105,116,105,111,110,
+    117,5,0,0,0,108,111,119,101,114,117,17,0,0,0,115,
+    111,117,114,99,101,95,102,114,111,109,95,99,97,99,104,101,
+    117,19,0,0,0,78,111,116,73,109,112,108,101,109,101,110,
+    116,101,100,69,114,114,111,114,117,10,0,0,0,86,97,108,
+    117,101,69,114,114,111,114,117,12,0,0,0,98,121,116,99,
+    111,100,101,95,112,97,116,104,117,12,0,0,0,95,112,97,
+    116,104,95,105,115,102,105,108,101,117,12,0,0,0,115,111,
+    117,114,99,101,95,115,116,97,116,115,40,5,0,0,0,117,
+    13,0,0,0,98,121,116,101,99,111,100,101,95,112,97,116,
+    104,117,4,0,0,0,114,101,115,116,117,1,0,0,0,95,
+    117,9,0,0,0,101,120,116,101,110,115,105,111,110,117,11,
+    0,0,0,115,111,117,114,99,101,95,112,97,116,104,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,15,0,0,0,95,
+    103,101,116,95,115,111,117,114,99,101,102,105,108,101,209,1,
+    0,0,115,20,0,0,0,0,7,18,1,4,1,24,1,35,
+    1,4,2,3,1,16,1,19,1,21,2,117,15,0,0,0,
+    95,103,101,116,95,115,111,117,114,99,101,102,105,108,101,99,
+    1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,
+    71,0,0,0,115,75,0,0,0,116,0,0,106,1,0,106,
+    2,0,114,71,0,124,0,0,106,3,0,100,6,0,131,1,
+    0,115,40,0,100,3,0,124,0,0,23,125,0,0,110,0,
+    0,116,4,0,124,0,0,106,5,0,124,1,0,140,0,0,
+    100,4,0,116,0,0,106,6,0,131,1,1,1,110,0,0,
+    100,5,0,83,40,7,0,0,0,117,61,0,0,0,80,114,
+    105,110,116,32,116,104,101,32,109,101,115,115,97,103,101,32,
+    116,111,32,115,116,100,101,114,114,32,105,102,32,45,118,47,
+    80,89,84,72,79,78,86,69,82,66,79,83,69,32,105,115,
+    32,116,117,114,110,101,100,32,111,110,46,117,1,0,0,0,
+    35,117,7,0,0,0,105,109,112,111,114,116,32,117,2,0,
+    0,0,35,32,117,4,0,0,0,102,105,108,101,78,40,2,
+    0,0,0,117,1,0,0,0,35,117,7,0,0,0,105,109,
+    112,111,114,116,32,40,7,0,0,0,117,3,0,0,0,115,
+    121,115,117,5,0,0,0,102,108,97,103,115,117,7,0,0,
+    0,118,101,114,98,111,115,101,117,10,0,0,0,115,116,97,
+    114,116,115,119,105,116,104,117,5,0,0,0,112,114,105,110,
+    116,117,6,0,0,0,102,111,114,109,97,116,117,6,0,0,
+    0,115,116,100,101,114,114,40,2,0,0,0,117,7,0,0,
+    0,109,101,115,115,97,103,101,117,4,0,0,0,97,114,103,
+    115,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
+    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,16,0,
+    0,0,95,118,101,114,98,111,115,101,95,109,101,115,115,97,
+    103,101,230,1,0,0,115,8,0,0,0,0,2,12,1,15,
+    1,13,1,117,16,0,0,0,95,118,101,114,98,111,115,101,
+    95,109,101,115,115,97,103,101,99,1,0,0,0,0,0,0,
+    0,2,0,0,0,3,0,0,0,3,0,0,0,115,35,0,
+    0,0,135,0,0,102,1,0,100,1,0,100,2,0,134,0,
+    0,125,1,0,116,0,0,124,1,0,136,0,0,131,2,0,
+    1,124,1,0,83,40,3,0,0,0,117,39,0,0,0,83,
+    101,116,32,95,95,112,97,99,107,97,103,101,95,95,32,111,
+    110,32,116,104,101,32,114,101,116,117,114,110,101,100,32,109,
+    111,100,117,108,101,46,99,0,0,0,0,0,0,0,0,3,
+    0,0,0,4,0,0,0,31,0,0,0,115,101,0,0,0,
+    136,0,0,124,0,0,124,1,0,142,0,0,125,2,0,116,
+    0,0,124,2,0,100,1,0,100,0,0,131,3,0,100,0,
+    0,107,8,0,114,97,0,124,2,0,106,2,0,124,2,0,
+    95,3,0,116,4,0,124,2,0,100,2,0,131,2,0,115,
+    97,0,124,2,0,106,3,0,106,5,0,100,3,0,131,1,
+    0,100,4,0,25,124,2,0,95,3,0,113,97,0,110,0,
+    0,124,2,0,83,40,5,0,0,0,78,117,11,0,0,0,
+    95,95,112,97,99,107,97,103,101,95,95,117,8,0,0,0,
+    95,95,112,97,116,104,95,95,117,1,0,0,0,46,105,0,
+    0,0,0,40,6,0,0,0,117,7,0,0,0,103,101,116,
+    97,116,116,114,117,4,0,0,0,78,111,110,101,117,8,0,
+    0,0,95,95,110,97,109,101,95,95,117,11,0,0,0,95,
+    95,112,97,99,107,97,103,101,95,95,117,7,0,0,0,104,
+    97,115,97,116,116,114,117,10,0,0,0,114,112,97,114,116,
+    105,116,105,111,110,40,3,0,0,0,117,4,0,0,0,97,
+    114,103,115,117,6,0,0,0,107,119,97,114,103,115,117,6,
+    0,0,0,109,111,100,117,108,101,40,1,0,0,0,117,3,
+    0,0,0,102,120,110,40,0,0,0,0,117,29,0,0,0,
+    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,19,0,
+    0,0,115,101,116,95,112,97,99,107,97,103,101,95,119,114,
+    97,112,112,101,114,240,1,0,0,115,12,0,0,0,0,1,
+    15,1,24,1,12,1,15,1,31,1,117,40,0,0,0,115,
+    101,116,95,112,97,99,107,97,103,101,46,60,108,111,99,97,
+    108,115,62,46,115,101,116,95,112,97,99,107,97,103,101,95,
+    119,114,97,112,112,101,114,40,1,0,0,0,117,5,0,0,
+    0,95,119,114,97,112,40,2,0,0,0,117,3,0,0,0,
+    102,120,110,117,19,0,0,0,115,101,116,95,112,97,99,107,
+    97,103,101,95,119,114,97,112,112,101,114,40,0,0,0,0,
+    40,1,0,0,0,117,3,0,0,0,102,120,110,117,29,0,
+    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
+    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
+    11,0,0,0,115,101,116,95,112,97,99,107,97,103,101,238,
+    1,0,0,115,6,0,0,0,0,2,18,7,13,1,117,11,
+    0,0,0,115,101,116,95,112,97,99,107,97,103,101,99,1,
+    0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,
+    0,0,0,115,35,0,0,0,135,0,0,102,1,0,100,1,
+    0,100,2,0,134,0,0,125,1,0,116,0,0,124,1,0,
+    136,0,0,131,2,0,1,124,1,0,83,40,3,0,0,0,
+    117,38,0,0,0,83,101,116,32,95,95,108,111,97,100,101,
+    114,95,95,32,111,110,32,116,104,101,32,114,101,116,117,114,
+    110,101,100,32,109,111,100,117,108,101,46,99,1,0,0,0,
+    0,0,0,0,4,0,0,0,4,0,0,0,31,0,0,0,
+    115,49,0,0,0,136,0,0,124,0,0,124,1,0,124,2,
+    0,142,1,0,125,3,0,116,0,0,124,3,0,100,1,0,
+    131,2,0,115,45,0,124,0,0,124,3,0,95,1,0,110,
+    0,0,124,3,0,83,40,2,0,0,0,78,117,10,0,0,
+    0,95,95,108,111,97,100,101,114,95,95,40,2,0,0,0,
+    117,7,0,0,0,104,97,115,97,116,116,114,117,10,0,0,
+    0,95,95,108,111,97,100,101,114,95,95,40,4,0,0,0,
+    117,4,0,0,0,115,101,108,102,117,4,0,0,0,97,114,
+    103,115,117,6,0,0,0,107,119,97,114,103,115,117,6,0,
+    0,0,109,111,100,117,108,101,40,1,0,0,0,117,3,0,
+    0,0,102,120,110,40,0,0,0,0,117,29,0,0,0,60,
     102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
-    46,95,98,111,111,116,115,116,114,97,112,62,117,17,0,0,
-    0,99,97,99,104,101,95,102,114,111,109,95,115,111,117,114,
-    99,101,159,1,0,0,115,22,0,0,0,0,13,31,1,6,
-    1,9,2,6,1,18,1,24,1,12,1,12,1,15,1,31,
-    1,117,17,0,0,0,99,97,99,104,101,95,102,114,111,109,
-    95,115,111,117,114,99,101,99,1,0,0,0,0,0,0,0,
-    5,0,0,0,5,0,0,0,67,0,0,0,115,193,0,0,
-    0,116,0,0,106,1,0,106,2,0,100,7,0,107,8,0,
-    114,33,0,116,4,0,100,1,0,131,1,0,130,1,0,110,
-    0,0,116,5,0,124,0,0,131,1,0,92,2,0,125,1,
-    0,125,2,0,116,5,0,124,1,0,131,1,0,92,2,0,
-    125,1,0,125,3,0,124,3,0,116,6,0,107,3,0,114,
-    108,0,116,7,0,100,2,0,106,8,0,116,6,0,124,0,
-    0,131,2,0,131,1,0,130,1,0,110,0,0,124,2,0,
-    106,9,0,100,3,0,131,1,0,100,4,0,107,3,0,114,
-    153,0,116,7,0,100,5,0,106,8,0,124,2,0,131,1,
-    0,131,1,0,130,1,0,110,0,0,124,2,0,106,10,0,
-    100,3,0,131,1,0,100,6,0,25,125,4,0,116,11,0,
-    124,1,0,124,4,0,116,12,0,100,6,0,25,23,131,2,
-    0,83,40,8,0,0,0,117,121,1,0,0,71,105,118,101,
-    110,32,116,104,101,32,112,97,116,104,32,116,111,32,97,32,
-    46,112,121,99,46,47,46,112,121,111,32,102,105,108,101,44,
-    32,114,101,116,117,114,110,32,116,104,101,32,112,97,116,104,
-    32,116,111,32,105,116,115,32,46,112,121,32,102,105,108,101,
-    46,10,10,32,32,32,32,84,104,101,32,46,112,121,99,47,
-    46,112,121,111,32,102,105,108,101,32,100,111,101,115,32,110,
-    111,116,32,110,101,101,100,32,116,111,32,101,120,105,115,116,
-    59,32,116,104,105,115,32,115,105,109,112,108,121,32,114,101,
-    116,117,114,110,115,32,116,104,101,32,112,97,116,104,32,116,
-    111,10,32,32,32,32,116,104,101,32,46,112,121,32,102,105,
-    108,101,32,99,97,108,99,117,108,97,116,101,100,32,116,111,
-    32,99,111,114,114,101,115,112,111,110,100,32,116,111,32,116,
-    104,101,32,46,112,121,99,47,46,112,121,111,32,102,105,108,
-    101,46,32,32,73,102,32,112,97,116,104,32,100,111,101,115,
-    10,32,32,32,32,110,111,116,32,99,111,110,102,111,114,109,
-    32,116,111,32,80,69,80,32,51,49,52,55,32,102,111,114,
-    109,97,116,44,32,86,97,108,117,101,69,114,114,111,114,32,
-    119,105,108,108,32,98,101,32,114,97,105,115,101,100,46,32,
-    73,102,10,32,32,32,32,115,121,115,46,105,109,112,108,101,
-    109,101,110,116,97,116,105,111,110,46,99,97,99,104,101,95,
-    116,97,103,32,105,115,32,78,111,110,101,32,116,104,101,110,
-    32,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,
-    114,114,111,114,32,105,115,32,114,97,105,115,101,100,46,10,
-    10,32,32,32,32,117,36,0,0,0,115,121,115,46,105,109,
-    112,108,101,109,101,110,116,97,116,105,111,110,46,99,97,99,
-    104,101,95,116,97,103,32,105,115,32,78,111,110,101,117,37,
-    0,0,0,123,125,32,110,111,116,32,98,111,116,116,111,109,
-    45,108,101,118,101,108,32,100,105,114,101,99,116,111,114,121,
-    32,105,110,32,123,33,114,125,117,1,0,0,0,46,105,2,
-    0,0,0,117,28,0,0,0,101,120,112,101,99,116,101,100,
-    32,111,110,108,121,32,50,32,100,111,116,115,32,105,110,32,
-    123,33,114,125,105,0,0,0,0,78,40,13,0,0,0,117,
-    3,0,0,0,115,121,115,117,14,0,0,0,105,109,112,108,
-    101,109,101,110,116,97,116,105,111,110,117,9,0,0,0,99,
-    97,99,104,101,95,116,97,103,117,4,0,0,0,78,111,110,
-    101,117,19,0,0,0,78,111,116,73,109,112,108,101,109,101,
-    110,116,101,100,69,114,114,111,114,117,11,0,0,0,95,112,
-    97,116,104,95,115,112,108,105,116,117,8,0,0,0,95,80,
-    89,67,65,67,72,69,117,10,0,0,0,86,97,108,117,101,
-    69,114,114,111,114,117,6,0,0,0,102,111,114,109,97,116,
-    117,5,0,0,0,99,111,117,110,116,117,9,0,0,0,112,
-    97,114,116,105,116,105,111,110,117,10,0,0,0,95,112,97,
-    116,104,95,106,111,105,110,117,15,0,0,0,83,79,85,82,
-    67,69,95,83,85,70,70,73,88,69,83,40,5,0,0,0,
-    117,4,0,0,0,112,97,116,104,117,4,0,0,0,104,101,
-    97,100,117,16,0,0,0,112,121,99,97,99,104,101,95,102,
-    105,108,101,110,97,109,101,117,7,0,0,0,112,121,99,97,
-    99,104,101,117,13,0,0,0,98,97,115,101,95,102,105,108,
-    101,110,97,109,101,40,0,0,0,0,40,0,0,0,0,117,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,18,0,0,
+    0,115,101,116,95,108,111,97,100,101,114,95,119,114,97,112,
+    112,101,114,253,1,0,0,115,8,0,0,0,0,1,18,1,
+    15,1,12,1,117,38,0,0,0,115,101,116,95,108,111,97,
+    100,101,114,46,60,108,111,99,97,108,115,62,46,115,101,116,
+    95,108,111,97,100,101,114,95,119,114,97,112,112,101,114,40,
+    1,0,0,0,117,5,0,0,0,95,119,114,97,112,40,2,
+    0,0,0,117,3,0,0,0,102,120,110,117,18,0,0,0,
+    115,101,116,95,108,111,97,100,101,114,95,119,114,97,112,112,
+    101,114,40,0,0,0,0,40,1,0,0,0,117,3,0,0,
+    0,102,120,110,117,29,0,0,0,60,102,114,111,122,101,110,
+    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
+    115,116,114,97,112,62,117,10,0,0,0,115,101,116,95,108,
+    111,97,100,101,114,251,1,0,0,115,6,0,0,0,0,2,
+    18,5,13,1,117,10,0,0,0,115,101,116,95,108,111,97,
+    100,101,114,99,1,0,0,0,0,0,0,0,2,0,0,0,
+    3,0,0,0,3,0,0,0,115,35,0,0,0,135,0,0,
+    102,1,0,100,1,0,100,2,0,134,0,0,125,1,0,116,
+    0,0,124,1,0,136,0,0,131,2,0,1,124,1,0,83,
+    40,3,0,0,0,117,42,3,0,0,68,101,99,111,114,97,
+    116,111,114,32,116,111,32,104,97,110,100,108,101,32,115,101,
+    108,101,99,116,105,110,103,32,116,104,101,32,112,114,111,112,
+    101,114,32,109,111,100,117,108,101,32,102,111,114,32,108,111,
+    97,100,101,114,115,46,10,10,32,32,32,32,84,104,101,32,
+    100,101,99,111,114,97,116,101,100,32,102,117,110,99,116,105,
+    111,110,32,105,115,32,112,97,115,115,101,100,32,116,104,101,
+    32,109,111,100,117,108,101,32,116,111,32,117,115,101,32,105,
+    110,115,116,101,97,100,32,111,102,32,116,104,101,32,109,111,
+    100,117,108,101,10,32,32,32,32,110,97,109,101,46,32,84,
+    104,101,32,109,111,100,117,108,101,32,112,97,115,115,101,100,
+    32,105,110,32,116,111,32,116,104,101,32,102,117,110,99,116,
+    105,111,110,32,105,115,32,101,105,116,104,101,114,32,102,114,
+    111,109,32,115,121,115,46,109,111,100,117,108,101,115,32,105,
+    102,10,32,32,32,32,105,116,32,97,108,114,101,97,100,121,
+    32,101,120,105,115,116,115,32,111,114,32,105,115,32,97,32,
+    110,101,119,32,109,111,100,117,108,101,46,32,73,102,32,116,
+    104,101,32,109,111,100,117,108,101,32,105,115,32,110,101,119,
+    44,32,116,104,101,110,32,95,95,110,97,109,101,95,95,10,
+    32,32,32,32,105,115,32,115,101,116,32,116,104,101,32,102,
+    105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,
+    32,116,104,101,32,109,101,116,104,111,100,44,32,95,95,108,
+    111,97,100,101,114,95,95,32,105,115,32,115,101,116,32,116,
+    111,32,115,101,108,102,44,32,97,110,100,10,32,32,32,32,
+    95,95,112,97,99,107,97,103,101,95,95,32,105,115,32,115,
+    101,116,32,97,99,99,111,114,100,105,110,103,108,121,32,40,
+    105,102,32,115,101,108,102,46,105,115,95,112,97,99,107,97,
+    103,101,40,41,32,105,115,32,100,101,102,105,110,101,100,41,
+    32,119,105,108,108,32,98,101,32,115,101,116,10,32,32,32,
+    32,98,101,102,111,114,101,32,105,116,32,105,115,32,112,97,
+    115,115,101,100,32,116,111,32,116,104,101,32,100,101,99,111,
+    114,97,116,101,100,32,102,117,110,99,116,105,111,110,32,40,
+    105,102,32,115,101,108,102,46,105,115,95,112,97,99,107,97,
+    103,101,40,41,32,100,111,101,115,10,32,32,32,32,110,111,
+    116,32,119,111,114,107,32,102,111,114,32,116,104,101,32,109,
+    111,100,117,108,101,32,105,116,32,119,105,108,108,32,98,101,
+    32,115,101,116,32,112,111,115,116,45,108,111,97,100,41,46,
+    10,10,32,32,32,32,73,102,32,97,110,32,101,120,99,101,
+    112,116,105,111,110,32,105,115,32,114,97,105,115,101,100,32,
+    97,110,100,32,116,104,101,32,100,101,99,111,114,97,116,111,
+    114,32,99,114,101,97,116,101,100,32,116,104,101,32,109,111,
+    100,117,108,101,32,105,116,32,105,115,10,32,32,32,32,115,
+    117,98,115,101,113,117,101,110,116,108,121,32,114,101,109,111,
+    118,101,100,32,102,114,111,109,32,115,121,115,46,109,111,100,
+    117,108,101,115,46,10,10,32,32,32,32,84,104,101,32,100,
+    101,99,111,114,97,116,111,114,32,97,115,115,117,109,101,115,
+    32,116,104,97,116,32,116,104,101,32,100,101,99,111,114,97,
+    116,101,100,32,102,117,110,99,116,105,111,110,32,116,97,107,
+    101,115,32,116,104,101,32,109,111,100,117,108,101,32,110,97,
+    109,101,32,97,115,10,32,32,32,32,116,104,101,32,115,101,
+    99,111,110,100,32,97,114,103,117,109,101,110,116,46,10,10,
+    32,32,32,32,99,2,0,0,0,0,0,0,0,7,0,0,
+    0,25,0,0,0,31,0,0,0,115,254,0,0,0,116,0,
+    0,106,1,0,106,2,0,124,1,0,131,1,0,125,4,0,
+    124,4,0,100,0,0,107,9,0,125,5,0,124,5,0,115,
+    168,0,116,4,0,124,1,0,131,1,0,125,4,0,100,3,
+    0,124,4,0,95,6,0,124,4,0,116,0,0,106,1,0,
+    124,1,0,60,124,0,0,124,4,0,95,7,0,121,19,0,
+    124,0,0,106,8,0,124,1,0,131,1,0,125,6,0,87,
+    110,24,0,4,116,9,0,116,10,0,102,2,0,107,10,0,
+    114,124,0,1,1,1,89,113,177,0,88,124,6,0,114,143,
+    0,124,1,0,124,4,0,95,11,0,113,177,0,124,1,0,
+    106,12,0,100,1,0,131,1,0,100,2,0,25,124,4,0,
+    95,11,0,110,9,0,100,3,0,124,4,0,95,6,0,122,
+    60,0,121,23,0,136,0,0,124,0,0,124,4,0,124,2,
+    0,124,3,0,142,2,0,83,87,110,30,0,1,1,1,124,
+    5,0,115,228,0,116,0,0,106,1,0,124,1,0,61,110,
+    0,0,130,0,0,89,110,1,0,88,87,100,0,0,100,4,
+    0,124,4,0,95,6,0,88,100,0,0,83,40,5,0,0,
+    0,78,117,1,0,0,0,46,105,0,0,0,0,84,70,40,
+    14,0,0,0,117,3,0,0,0,115,121,115,117,7,0,0,
+    0,109,111,100,117,108,101,115,117,3,0,0,0,103,101,116,
+    117,4,0,0,0,78,111,110,101,117,10,0,0,0,110,101,
+    119,95,109,111,100,117,108,101,117,4,0,0,0,84,114,117,
+    101,117,16,0,0,0,95,95,105,110,105,116,105,97,108,105,
+    122,105,110,103,95,95,117,10,0,0,0,95,95,108,111,97,
+    100,101,114,95,95,117,10,0,0,0,105,115,95,112,97,99,
+    107,97,103,101,117,11,0,0,0,73,109,112,111,114,116,69,
+    114,114,111,114,117,14,0,0,0,65,116,116,114,105,98,117,
+    116,101,69,114,114,111,114,117,11,0,0,0,95,95,112,97,
+    99,107,97,103,101,95,95,117,10,0,0,0,114,112,97,114,
+    116,105,116,105,111,110,117,5,0,0,0,70,97,108,115,101,
+    40,7,0,0,0,117,4,0,0,0,115,101,108,102,117,8,
+    0,0,0,102,117,108,108,110,97,109,101,117,4,0,0,0,
+    97,114,103,115,117,6,0,0,0,107,119,97,114,103,115,117,
+    6,0,0,0,109,111,100,117,108,101,117,9,0,0,0,105,
+    115,95,114,101,108,111,97,100,117,10,0,0,0,105,115,95,
+    112,97,99,107,97,103,101,40,1,0,0,0,117,3,0,0,
+    0,102,120,110,40,0,0,0,0,117,29,0,0,0,60,102,
+    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
+    95,98,111,111,116,115,116,114,97,112,62,117,25,0,0,0,
+    109,111,100,117,108,101,95,102,111,114,95,108,111,97,100,101,
+    114,95,119,114,97,112,112,101,114,24,2,0,0,115,44,0,
+    0,0,0,1,18,1,12,1,6,4,12,3,9,1,13,1,
+    9,1,3,1,19,1,19,1,5,2,6,1,12,2,25,2,
+    9,1,6,2,23,1,3,1,6,1,13,1,12,2,117,52,
+    0,0,0,109,111,100,117,108,101,95,102,111,114,95,108,111,
+    97,100,101,114,46,60,108,111,99,97,108,115,62,46,109,111,
+    100,117,108,101,95,102,111,114,95,108,111,97,100,101,114,95,
+    119,114,97,112,112,101,114,40,1,0,0,0,117,5,0,0,
+    0,95,119,114,97,112,40,2,0,0,0,117,3,0,0,0,
+    102,120,110,117,25,0,0,0,109,111,100,117,108,101,95,102,
+    111,114,95,108,111,97,100,101,114,95,119,114,97,112,112,101,
+    114,40,0,0,0,0,40,1,0,0,0,117,3,0,0,0,
+    102,120,110,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,17,0,0,0,109,111,100,117,108,101,
+    95,102,111,114,95,108,111,97,100,101,114,6,2,0,0,115,
+    6,0,0,0,0,18,18,33,13,1,117,17,0,0,0,109,
+    111,100,117,108,101,95,102,111,114,95,108,111,97,100,101,114,
+    99,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,
+    0,3,0,0,0,115,38,0,0,0,100,3,0,135,0,0,
+    102,1,0,100,1,0,100,2,0,134,1,0,125,1,0,116,
+    1,0,124,1,0,136,0,0,131,2,0,1,124,1,0,83,
+    40,4,0,0,0,117,252,0,0,0,68,101,99,111,114,97,
+    116,111,114,32,116,111,32,118,101,114,105,102,121,32,116,104,
+    97,116,32,116,104,101,32,109,111,100,117,108,101,32,98,101,
+    105,110,103,32,114,101,113,117,101,115,116,101,100,32,109,97,
+    116,99,104,101,115,32,116,104,101,32,111,110,101,32,116,104,
+    101,10,32,32,32,32,108,111,97,100,101,114,32,99,97,110,
+    32,104,97,110,100,108,101,46,10,10,32,32,32,32,84,104,
+    101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,
+    32,40,115,101,108,102,41,32,109,117,115,116,32,100,101,102,
+    105,110,101,32,95,110,97,109,101,32,119,104,105,99,104,32,
+    116,104,101,32,115,101,99,111,110,100,32,97,114,103,117,109,
+    101,110,116,32,105,115,10,32,32,32,32,99,111,109,112,97,
+    114,101,100,32,97,103,97,105,110,115,116,46,32,73,102,32,
+    116,104,101,32,99,111,109,112,97,114,105,115,111,110,32,102,
+    97,105,108,115,32,116,104,101,110,32,73,109,112,111,114,116,
+    69,114,114,111,114,32,105,115,32,114,97,105,115,101,100,46,
+    10,10,32,32,32,32,99,2,0,0,0,0,0,0,0,4,
+    0,0,0,5,0,0,0,31,0,0,0,115,83,0,0,0,
+    124,1,0,100,0,0,107,8,0,114,24,0,124,0,0,106,
+    1,0,125,1,0,110,40,0,124,0,0,106,1,0,124,1,
+    0,107,3,0,114,64,0,116,2,0,100,1,0,124,1,0,
+    22,100,2,0,124,1,0,131,1,1,130,1,0,110,0,0,
+    136,0,0,124,0,0,124,1,0,124,2,0,124,3,0,142,
+    2,0,83,40,3,0,0,0,78,117,23,0,0,0,108,111,
+    97,100,101,114,32,99,97,110,110,111,116,32,104,97,110,100,
+    108,101,32,37,115,117,4,0,0,0,110,97,109,101,40,3,
+    0,0,0,117,4,0,0,0,78,111,110,101,117,4,0,0,
+    0,110,97,109,101,117,11,0,0,0,73,109,112,111,114,116,
+    69,114,114,111,114,40,4,0,0,0,117,4,0,0,0,115,
+    101,108,102,117,4,0,0,0,110,97,109,101,117,4,0,0,
+    0,97,114,103,115,117,6,0,0,0,107,119,97,114,103,115,
+    40,1,0,0,0,117,6,0,0,0,109,101,116,104,111,100,
+    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,19,0,0,0,95,99,104,101,
+    99,107,95,110,97,109,101,95,119,114,97,112,112,101,114,69,
+    2,0,0,115,10,0,0,0,0,1,12,1,12,1,15,1,
+    25,1,117,40,0,0,0,95,99,104,101,99,107,95,110,97,
+    109,101,46,60,108,111,99,97,108,115,62,46,95,99,104,101,
+    99,107,95,110,97,109,101,95,119,114,97,112,112,101,114,78,
+    40,2,0,0,0,117,4,0,0,0,78,111,110,101,117,5,
+    0,0,0,95,119,114,97,112,40,2,0,0,0,117,6,0,
+    0,0,109,101,116,104,111,100,117,19,0,0,0,95,99,104,
+    101,99,107,95,110,97,109,101,95,119,114,97,112,112,101,114,
+    40,0,0,0,0,40,1,0,0,0,117,6,0,0,0,109,
+    101,116,104,111,100,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,11,0,0,0,95,99,104,101,
+    99,107,95,110,97,109,101,61,2,0,0,115,6,0,0,0,
+    0,8,21,6,13,1,117,11,0,0,0,95,99,104,101,99,
+    107,95,110,97,109,101,99,1,0,0,0,0,0,0,0,2,
+    0,0,0,3,0,0,0,3,0,0,0,115,35,0,0,0,
+    135,0,0,102,1,0,100,1,0,100,2,0,134,0,0,125,
+    1,0,116,0,0,124,1,0,136,0,0,131,2,0,1,124,
+    1,0,83,40,3,0,0,0,117,49,0,0,0,68,101,99,
+    111,114,97,116,111,114,32,116,111,32,118,101,114,105,102,121,
+    32,116,104,101,32,110,97,109,101,100,32,109,111,100,117,108,
+    101,32,105,115,32,98,117,105,108,116,45,105,110,46,99,2,
+    0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,19,
+    0,0,0,115,58,0,0,0,124,1,0,116,0,0,106,1,
+    0,107,7,0,114,45,0,116,2,0,100,1,0,106,3,0,
+    124,1,0,131,1,0,100,2,0,124,1,0,131,1,1,130,
+    1,0,110,0,0,136,0,0,124,0,0,124,1,0,131,2,
+    0,83,40,3,0,0,0,78,117,27,0,0,0,123,125,32,
+    105,115,32,110,111,116,32,97,32,98,117,105,108,116,45,105,
+    110,32,109,111,100,117,108,101,117,4,0,0,0,110,97,109,
+    101,40,4,0,0,0,117,3,0,0,0,115,121,115,117,20,
+    0,0,0,98,117,105,108,116,105,110,95,109,111,100,117,108,
+    101,95,110,97,109,101,115,117,11,0,0,0,73,109,112,111,
+    114,116,69,114,114,111,114,117,6,0,0,0,102,111,114,109,
+    97,116,40,2,0,0,0,117,4,0,0,0,115,101,108,102,
+    117,8,0,0,0,102,117,108,108,110,97,109,101,40,1,0,
+    0,0,117,3,0,0,0,102,120,110,40,0,0,0,0,117,
     29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
     114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
-    62,117,17,0,0,0,115,111,117,114,99,101,95,102,114,111,
-    109,95,99,97,99,104,101,186,1,0,0,115,24,0,0,0,
-    0,9,18,1,15,1,18,1,18,1,12,1,9,1,18,1,
-    21,1,9,1,15,1,19,1,117,17,0,0,0,115,111,117,
-    114,99,101,95,102,114,111,109,95,99,97,99,104,101,99,1,
-    0,0,0,0,0,0,0,5,0,0,0,13,0,0,0,67,
-    0,0,0,115,164,0,0,0,116,0,0,124,0,0,131,1,
-    0,100,1,0,107,2,0,114,22,0,100,6,0,83,124,0,
-    0,106,2,0,100,2,0,131,1,0,92,3,0,125,1,0,
-    125,2,0,125,3,0,124,1,0,12,115,81,0,124,3,0,
-    106,3,0,131,0,0,100,7,0,100,8,0,133,2,0,25,
-    100,5,0,107,3,0,114,85,0,124,0,0,83,121,16,0,
-    116,4,0,124,0,0,131,1,0,125,4,0,87,110,40,0,
-    4,116,5,0,116,6,0,102,2,0,107,10,0,114,143,0,
-    1,1,1,116,7,0,100,9,0,100,6,0,133,2,0,25,
-    125,4,0,89,110,1,0,88,116,8,0,116,9,0,131,1,
-    0,114,160,0,124,4,0,83,124,0,0,83,40,10,0,0,
-    0,117,188,0,0,0,67,111,110,118,101,114,116,32,97,32,
-    98,121,116,101,99,111,100,101,32,102,105,108,101,32,112,97,
-    116,104,32,116,111,32,97,32,115,111,117,114,99,101,32,112,
-    97,116,104,32,40,105,102,32,112,111,115,115,105,98,108,101,
-    41,46,10,10,32,32,32,32,84,104,105,115,32,102,117,110,
-    99,116,105,111,110,32,101,120,105,115,116,115,32,112,117,114,
-    101,108,121,32,102,111,114,32,98,97,99,107,119,97,114,100,
-    115,45,99,111,109,112,97,116,105,98,105,108,105,116,121,32,
-    102,111,114,10,32,32,32,32,80,121,73,109,112,111,114,116,
-    95,69,120,101,99,67,111,100,101,77,111,100,117,108,101,87,
-    105,116,104,70,105,108,101,110,97,109,101,115,40,41,32,105,
-    110,32,116,104,101,32,67,32,65,80,73,46,10,10,32,32,
-    32,32,105,0,0,0,0,117,1,0,0,0,46,105,3,0,
-    0,0,105,1,0,0,0,117,3,0,0,0,46,112,121,78,
-    105,253,255,255,255,105,255,255,255,255,105,255,255,255,255,40,
-    10,0,0,0,117,3,0,0,0,108,101,110,117,4,0,0,
-    0,78,111,110,101,117,9,0,0,0,114,112,97,114,105,116,
-    105,111,110,117,5,0,0,0,108,111,119,101,114,117,17,0,
-    0,0,115,111,117,114,99,101,95,102,114,111,109,95,99,97,
-    99,104,101,117,19,0,0,0,78,111,116,73,109,112,108,101,
-    109,101,110,116,101,100,69,114,114,111,114,117,10,0,0,0,
-    86,97,108,117,101,69,114,114,111,114,117,12,0,0,0,98,
-    121,116,99,111,100,101,95,112,97,116,104,117,12,0,0,0,
-    95,112,97,116,104,95,105,115,102,105,108,101,117,12,0,0,
-    0,115,111,117,114,99,101,95,115,116,97,116,115,40,5,0,
-    0,0,117,13,0,0,0,98,121,116,101,99,111,100,101,95,
-    112,97,116,104,117,4,0,0,0,114,101,115,116,117,1,0,
-    0,0,95,117,9,0,0,0,101,120,116,101,110,115,105,111,
-    110,117,11,0,0,0,115,111,117,114,99,101,95,112,97,116,
-    104,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,15,0,
-    0,0,95,103,101,116,95,115,111,117,114,99,101,102,105,108,
-    101,209,1,0,0,115,20,0,0,0,0,7,18,1,4,1,
-    24,1,35,1,4,2,3,1,16,1,19,1,21,2,117,15,
-    0,0,0,95,103,101,116,95,115,111,117,114,99,101,102,105,
-    108,101,99,1,0,0,0,0,0,0,0,2,0,0,0,4,
-    0,0,0,71,0,0,0,115,75,0,0,0,116,0,0,106,
-    1,0,106,2,0,114,71,0,124,0,0,106,3,0,100,6,
-    0,131,1,0,115,40,0,100,3,0,124,0,0,23,125,0,
-    0,110,0,0,116,4,0,124,0,0,106,5,0,124,1,0,
-    140,0,0,100,4,0,116,0,0,106,6,0,131,1,1,1,
-    110,0,0,100,5,0,83,40,7,0,0,0,117,61,0,0,
-    0,80,114,105,110,116,32,116,104,101,32,109,101,115,115,97,
-    103,101,32,116,111,32,115,116,100,101,114,114,32,105,102,32,
-    45,118,47,80,89,84,72,79,78,86,69,82,66,79,83,69,
-    32,105,115,32,116,117,114,110,101,100,32,111,110,46,117,1,
-    0,0,0,35,117,7,0,0,0,105,109,112,111,114,116,32,
-    117,2,0,0,0,35,32,117,4,0,0,0,102,105,108,101,
-    78,40,2,0,0,0,117,1,0,0,0,35,117,7,0,0,
-    0,105,109,112,111,114,116,32,40,7,0,0,0,117,3,0,
-    0,0,115,121,115,117,5,0,0,0,102,108,97,103,115,117,
-    7,0,0,0,118,101,114,98,111,115,101,117,10,0,0,0,
-    115,116,97,114,116,115,119,105,116,104,117,5,0,0,0,112,
-    114,105,110,116,117,6,0,0,0,102,111,114,109,97,116,117,
-    6,0,0,0,115,116,100,101,114,114,40,2,0,0,0,117,
-    7,0,0,0,109,101,115,115,97,103,101,117,4,0,0,0,
-    97,114,103,115,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,16,0,0,0,95,118,101,114,98,111,115,101,95,109,101,
-    115,115,97,103,101,230,1,0,0,115,8,0,0,0,0,2,
-    12,1,15,1,13,1,117,16,0,0,0,95,118,101,114,98,
-    111,115,101,95,109,101,115,115,97,103,101,99,1,0,0,0,
-    0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,
-    115,35,0,0,0,135,0,0,102,1,0,100,1,0,100,2,
-    0,134,0,0,125,1,0,116,0,0,124,1,0,136,0,0,
-    131,2,0,1,124,1,0,83,40,3,0,0,0,117,39,0,
-    0,0,83,101,116,32,95,95,112,97,99,107,97,103,101,95,
-    95,32,111,110,32,116,104,101,32,114,101,116,117,114,110,101,
-    100,32,109,111,100,117,108,101,46,99,0,0,0,0,0,0,
-    0,0,3,0,0,0,4,0,0,0,31,0,0,0,115,101,
-    0,0,0,136,0,0,124,0,0,124,1,0,142,0,0,125,
-    2,0,116,0,0,124,2,0,100,1,0,100,0,0,131,3,
-    0,100,0,0,107,8,0,114,97,0,124,2,0,106,2,0,
-    124,2,0,95,3,0,116,4,0,124,2,0,100,2,0,131,
-    2,0,115,97,0,124,2,0,106,3,0,106,5,0,100,3,
-    0,131,1,0,100,4,0,25,124,2,0,95,3,0,113,97,
-    0,110,0,0,124,2,0,83,40,5,0,0,0,78,117,11,
-    0,0,0,95,95,112,97,99,107,97,103,101,95,95,117,8,
-    0,0,0,95,95,112,97,116,104,95,95,117,1,0,0,0,
-    46,105,0,0,0,0,40,6,0,0,0,117,7,0,0,0,
-    103,101,116,97,116,116,114,117,4,0,0,0,78,111,110,101,
-    117,8,0,0,0,95,95,110,97,109,101,95,95,117,11,0,
-    0,0,95,95,112,97,99,107,97,103,101,95,95,117,7,0,
-    0,0,104,97,115,97,116,116,114,117,10,0,0,0,114,112,
-    97,114,116,105,116,105,111,110,40,3,0,0,0,117,4,0,
-    0,0,97,114,103,115,117,6,0,0,0,107,119,97,114,103,
-    115,117,6,0,0,0,109,111,100,117,108,101,40,1,0,0,
-    0,117,3,0,0,0,102,120,110,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,19,0,0,0,115,101,116,95,112,97,99,107,97,103,101,
-    95,119,114,97,112,112,101,114,240,1,0,0,115,12,0,0,
-    0,0,1,15,1,24,1,12,1,15,1,31,1,117,40,0,
-    0,0,115,101,116,95,112,97,99,107,97,103,101,46,60,108,
-    111,99,97,108,115,62,46,115,101,116,95,112,97,99,107,97,
-    103,101,95,119,114,97,112,112,101,114,40,1,0,0,0,117,
-    5,0,0,0,95,119,114,97,112,40,2,0,0,0,117,3,
-    0,0,0,102,120,110,117,19,0,0,0,115,101,116,95,112,
-    97,99,107,97,103,101,95,119,114,97,112,112,101,114,40,0,
-    0,0,0,40,1,0,0,0,117,3,0,0,0,102,120,110,
-    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
-    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
-    112,62,117,11,0,0,0,115,101,116,95,112,97,99,107,97,
-    103,101,238,1,0,0,115,6,0,0,0,0,2,18,7,13,
-    1,117,11,0,0,0,115,101,116,95,112,97,99,107,97,103,
-    101,99,1,0,0,0,0,0,0,0,2,0,0,0,3,0,
-    0,0,3,0,0,0,115,35,0,0,0,135,0,0,102,1,
-    0,100,1,0,100,2,0,134,0,0,125,1,0,116,0,0,
-    124,1,0,136,0,0,131,2,0,1,124,1,0,83,40,3,
-    0,0,0,117,38,0,0,0,83,101,116,32,95,95,108,111,
-    97,100,101,114,95,95,32,111,110,32,116,104,101,32,114,101,
-    116,117,114,110,101,100,32,109,111,100,117,108,101,46,99,1,
-    0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,31,
-    0,0,0,115,49,0,0,0,136,0,0,124,0,0,124,1,
-    0,124,2,0,142,1,0,125,3,0,116,0,0,124,3,0,
-    100,1,0,131,2,0,115,45,0,124,0,0,124,3,0,95,
-    1,0,110,0,0,124,3,0,83,40,2,0,0,0,78,117,
-    10,0,0,0,95,95,108,111,97,100,101,114,95,95,40,2,
-    0,0,0,117,7,0,0,0,104,97,115,97,116,116,114,117,
-    10,0,0,0,95,95,108,111,97,100,101,114,95,95,40,4,
-    0,0,0,117,4,0,0,0,115,101,108,102,117,4,0,0,
-    0,97,114,103,115,117,6,0,0,0,107,119,97,114,103,115,
-    117,6,0,0,0,109,111,100,117,108,101,40,1,0,0,0,
+    62,117,25,0,0,0,95,114,101,113,117,105,114,101,115,95,
+    98,117,105,108,116,105,110,95,119,114,97,112,112,101,114,81,
+    2,0,0,115,8,0,0,0,0,1,15,1,18,1,12,1,
+    117,52,0,0,0,95,114,101,113,117,105,114,101,115,95,98,
+    117,105,108,116,105,110,46,60,108,111,99,97,108,115,62,46,
+    95,114,101,113,117,105,114,101,115,95,98,117,105,108,116,105,
+    110,95,119,114,97,112,112,101,114,40,1,0,0,0,117,5,
+    0,0,0,95,119,114,97,112,40,2,0,0,0,117,3,0,
+    0,0,102,120,110,117,25,0,0,0,95,114,101,113,117,105,
+    114,101,115,95,98,117,105,108,116,105,110,95,119,114,97,112,
+    112,101,114,40,0,0,0,0,40,1,0,0,0,117,3,0,
+    0,0,102,120,110,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,17,0,0,0,95,114,101,113,
+    117,105,114,101,115,95,98,117,105,108,116,105,110,79,2,0,
+    0,115,6,0,0,0,0,2,18,5,13,1,117,17,0,0,
+    0,95,114,101,113,117,105,114,101,115,95,98,117,105,108,116,
+    105,110,99,1,0,0,0,0,0,0,0,2,0,0,0,3,
+    0,0,0,3,0,0,0,115,35,0,0,0,135,0,0,102,
+    1,0,100,1,0,100,2,0,134,0,0,125,1,0,116,0,
+    0,124,1,0,136,0,0,131,2,0,1,124,1,0,83,40,
+    3,0,0,0,117,47,0,0,0,68,101,99,111,114,97,116,
+    111,114,32,116,111,32,118,101,114,105,102,121,32,116,104,101,
+    32,110,97,109,101,100,32,109,111,100,117,108,101,32,105,115,
+    32,102,114,111,122,101,110,46,99,2,0,0,0,0,0,0,
+    0,2,0,0,0,4,0,0,0,19,0,0,0,115,58,0,
+    0,0,116,0,0,106,1,0,124,1,0,131,1,0,115,45,
+    0,116,2,0,100,1,0,106,3,0,124,1,0,131,1,0,
+    100,2,0,124,1,0,131,1,1,130,1,0,110,0,0,136,
+    0,0,124,0,0,124,1,0,131,2,0,83,40,3,0,0,
+    0,78,117,25,0,0,0,123,125,32,105,115,32,110,111,116,
+    32,97,32,102,114,111,122,101,110,32,109,111,100,117,108,101,
+    117,4,0,0,0,110,97,109,101,40,4,0,0,0,117,4,
+    0,0,0,95,105,109,112,117,9,0,0,0,105,115,95,102,
+    114,111,122,101,110,117,11,0,0,0,73,109,112,111,114,116,
+    69,114,114,111,114,117,6,0,0,0,102,111,114,109,97,116,
+    40,2,0,0,0,117,4,0,0,0,115,101,108,102,117,8,
+    0,0,0,102,117,108,108,110,97,109,101,40,1,0,0,0,
     117,3,0,0,0,102,120,110,40,0,0,0,0,117,29,0,
     0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
     108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    18,0,0,0,115,101,116,95,108,111,97,100,101,114,95,119,
-    114,97,112,112,101,114,253,1,0,0,115,8,0,0,0,0,
-    1,18,1,15,1,12,1,117,38,0,0,0,115,101,116,95,
-    108,111,97,100,101,114,46,60,108,111,99,97,108,115,62,46,
-    115,101,116,95,108,111,97,100,101,114,95,119,114,97,112,112,
-    101,114,40,1,0,0,0,117,5,0,0,0,95,119,114,97,
-    112,40,2,0,0,0,117,3,0,0,0,102,120,110,117,18,
-    0,0,0,115,101,116,95,108,111,97,100,101,114,95,119,114,
-    97,112,112,101,114,40,0,0,0,0,40,1,0,0,0,117,
-    3,0,0,0,102,120,110,117,29,0,0,0,60,102,114,111,
-    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
-    111,111,116,115,116,114,97,112,62,117,10,0,0,0,115,101,
-    116,95,108,111,97,100,101,114,251,1,0,0,115,6,0,0,
-    0,0,2,18,5,13,1,117,10,0,0,0,115,101,116,95,
-    108,111,97,100,101,114,99,1,0,0,0,0,0,0,0,2,
-    0,0,0,3,0,0,0,3,0,0,0,115,35,0,0,0,
-    135,0,0,102,1,0,100,1,0,100,2,0,134,0,0,125,
-    1,0,116,0,0,124,1,0,136,0,0,131,2,0,1,124,
-    1,0,83,40,3,0,0,0,117,42,3,0,0,68,101,99,
-    111,114,97,116,111,114,32,116,111,32,104,97,110,100,108,101,
-    32,115,101,108,101,99,116,105,110,103,32,116,104,101,32,112,
-    114,111,112,101,114,32,109,111,100,117,108,101,32,102,111,114,
-    32,108,111,97,100,101,114,115,46,10,10,32,32,32,32,84,
-    104,101,32,100,101,99,111,114,97,116,101,100,32,102,117,110,
-    99,116,105,111,110,32,105,115,32,112,97,115,115,101,100,32,
-    116,104,101,32,109,111,100,117,108,101,32,116,111,32,117,115,
-    101,32,105,110,115,116,101,97,100,32,111,102,32,116,104,101,
-    32,109,111,100,117,108,101,10,32,32,32,32,110,97,109,101,
-    46,32,84,104,101,32,109,111,100,117,108,101,32,112,97,115,
-    115,101,100,32,105,110,32,116,111,32,116,104,101,32,102,117,
-    110,99,116,105,111,110,32,105,115,32,101,105,116,104,101,114,
-    32,102,114,111,109,32,115,121,115,46,109,111,100,117,108,101,
-    115,32,105,102,10,32,32,32,32,105,116,32,97,108,114,101,
-    97,100,121,32,101,120,105,115,116,115,32,111,114,32,105,115,
-    32,97,32,110,101,119,32,109,111,100,117,108,101,46,32,73,
-    102,32,116,104,101,32,109,111,100,117,108,101,32,105,115,32,
-    110,101,119,44,32,116,104,101,110,32,95,95,110,97,109,101,
-    95,95,10,32,32,32,32,105,115,32,115,101,116,32,116,104,
-    101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,
-    32,116,111,32,116,104,101,32,109,101,116,104,111,100,44,32,
-    95,95,108,111,97,100,101,114,95,95,32,105,115,32,115,101,
-    116,32,116,111,32,115,101,108,102,44,32,97,110,100,10,32,
-    32,32,32,95,95,112,97,99,107,97,103,101,95,95,32,105,
-    115,32,115,101,116,32,97,99,99,111,114,100,105,110,103,108,
-    121,32,40,105,102,32,115,101,108,102,46,105,115,95,112,97,
-    99,107,97,103,101,40,41,32,105,115,32,100,101,102,105,110,
-    101,100,41,32,119,105,108,108,32,98,101,32,115,101,116,10,
-    32,32,32,32,98,101,102,111,114,101,32,105,116,32,105,115,
-    32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,100,
-    101,99,111,114,97,116,101,100,32,102,117,110,99,116,105,111,
-    110,32,40,105,102,32,115,101,108,102,46,105,115,95,112,97,
-    99,107,97,103,101,40,41,32,100,111,101,115,10,32,32,32,
-    32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,104,
-    101,32,109,111,100,117,108,101,32,105,116,32,119,105,108,108,
-    32,98,101,32,115,101,116,32,112,111,115,116,45,108,111,97,
-    100,41,46,10,10,32,32,32,32,73,102,32,97,110,32,101,
-    120,99,101,112,116,105,111,110,32,105,115,32,114,97,105,115,
-    101,100,32,97,110,100,32,116,104,101,32,100,101,99,111,114,
-    97,116,111,114,32,99,114,101,97,116,101,100,32,116,104,101,
-    32,109,111,100,117,108,101,32,105,116,32,105,115,10,32,32,
-    32,32,115,117,98,115,101,113,117,101,110,116,108,121,32,114,
-    101,109,111,118,101,100,32,102,114,111,109,32,115,121,115,46,
-    109,111,100,117,108,101,115,46,10,10,32,32,32,32,84,104,
-    101,32,100,101,99,111,114,97,116,111,114,32,97,115,115,117,
-    109,101,115,32,116,104,97,116,32,116,104,101,32,100,101,99,
-    111,114,97,116,101,100,32,102,117,110,99,116,105,111,110,32,
-    116,97,107,101,115,32,116,104,101,32,109,111,100,117,108,101,
-    32,110,97,109,101,32,97,115,10,32,32,32,32,116,104,101,
-    32,115,101,99,111,110,100,32,97,114,103,117,109,101,110,116,
+    24,0,0,0,95,114,101,113,117,105,114,101,115,95,102,114,
+    111,122,101,110,95,119,114,97,112,112,101,114,92,2,0,0,
+    115,8,0,0,0,0,1,15,1,18,1,12,1,117,50,0,
+    0,0,95,114,101,113,117,105,114,101,115,95,102,114,111,122,
+    101,110,46,60,108,111,99,97,108,115,62,46,95,114,101,113,
+    117,105,114,101,115,95,102,114,111,122,101,110,95,119,114,97,
+    112,112,101,114,40,1,0,0,0,117,5,0,0,0,95,119,
+    114,97,112,40,2,0,0,0,117,3,0,0,0,102,120,110,
+    117,24,0,0,0,95,114,101,113,117,105,114,101,115,95,102,
+    114,111,122,101,110,95,119,114,97,112,112,101,114,40,0,0,
+    0,0,40,1,0,0,0,117,3,0,0,0,102,120,110,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,16,0,0,0,95,114,101,113,117,105,114,101,115,95,
+    102,114,111,122,101,110,90,2,0,0,115,6,0,0,0,0,
+    2,18,5,13,1,117,16,0,0,0,95,114,101,113,117,105,
+    114,101,115,95,102,114,111,122,101,110,99,2,0,0,0,0,
+    0,0,0,5,0,0,0,5,0,0,0,67,0,0,0,115,
+    87,0,0,0,124,0,0,106,0,0,124,1,0,131,1,0,
+    92,2,0,125,2,0,125,3,0,124,2,0,100,3,0,107,
+    8,0,114,83,0,116,2,0,124,3,0,131,1,0,114,83,
+    0,100,1,0,125,4,0,116,3,0,106,4,0,124,4,0,
+    106,5,0,124,3,0,100,2,0,25,131,1,0,116,6,0,
+    131,2,0,1,110,0,0,124,2,0,83,40,4,0,0,0,
+    117,86,0,0,0,84,114,121,32,116,111,32,102,105,110,100,
+    32,97,32,108,111,97,100,101,114,32,102,111,114,32,116,104,
+    101,32,115,112,101,99,105,102,105,101,100,32,109,111,100,117,
+    108,101,32,98,121,32,100,101,108,101,103,97,116,105,110,103,
+    32,116,111,10,32,32,32,32,115,101,108,102,46,102,105,110,
+    100,95,108,111,97,100,101,114,40,41,46,117,44,0,0,0,
+    78,111,116,32,105,109,112,111,114,116,105,110,103,32,100,105,
+    114,101,99,116,111,114,121,32,123,125,58,32,109,105,115,115,
+    105,110,103,32,95,95,105,110,105,116,95,95,105,0,0,0,
+    0,78,40,7,0,0,0,117,11,0,0,0,102,105,110,100,
+    95,108,111,97,100,101,114,117,4,0,0,0,78,111,110,101,
+    117,3,0,0,0,108,101,110,117,9,0,0,0,95,119,97,
+    114,110,105,110,103,115,117,4,0,0,0,119,97,114,110,117,
+    6,0,0,0,102,111,114,109,97,116,117,13,0,0,0,73,
+    109,112,111,114,116,87,97,114,110,105,110,103,40,5,0,0,
+    0,117,4,0,0,0,115,101,108,102,117,8,0,0,0,102,
+    117,108,108,110,97,109,101,117,6,0,0,0,108,111,97,100,
+    101,114,117,8,0,0,0,112,111,114,116,105,111,110,115,117,
+    3,0,0,0,109,115,103,40,0,0,0,0,40,0,0,0,
+    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
+    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
+    97,112,62,117,17,0,0,0,95,102,105,110,100,95,109,111,
+    100,117,108,101,95,115,104,105,109,101,2,0,0,115,10,0,
+    0,0,0,6,21,1,24,1,6,1,32,1,117,17,0,0,
+    0,95,102,105,110,100,95,109,111,100,117,108,101,95,115,104,
+    105,109,99,1,0,0,0,0,0,0,0,1,0,0,0,6,
+    0,0,0,66,0,0,0,115,173,0,0,0,124,0,0,69,
+    101,0,0,90,1,0,100,0,0,90,2,0,100,1,0,90,
+    3,0,101,4,0,100,2,0,100,3,0,132,0,0,131,1,
+    0,90,5,0,101,4,0,100,14,0,100,4,0,100,5,0,
+    132,1,0,131,1,0,90,7,0,101,4,0,101,8,0,101,
+    9,0,101,10,0,100,6,0,100,7,0,132,0,0,131,1,
+    0,131,1,0,131,1,0,131,1,0,90,11,0,101,4,0,
+    101,10,0,100,8,0,100,9,0,132,0,0,131,1,0,131,
+    1,0,90,12,0,101,4,0,101,10,0,100,10,0,100,11,
+    0,132,0,0,131,1,0,131,1,0,90,13,0,101,4,0,
+    101,10,0,100,12,0,100,13,0,132,0,0,131,1,0,131,
+    1,0,90,14,0,100,14,0,83,40,15,0,0,0,117,15,
+    0,0,0,66,117,105,108,116,105,110,73,109,112,111,114,116,
+    101,114,117,144,0,0,0,77,101,116,97,32,112,97,116,104,
+    32,105,109,112,111,114,116,32,102,111,114,32,98,117,105,108,
+    116,45,105,110,32,109,111,100,117,108,101,115,46,10,10,32,
+    32,32,32,65,108,108,32,109,101,116,104,111,100,115,32,97,
+    114,101,32,101,105,116,104,101,114,32,99,108,97,115,115,32,
+    111,114,32,115,116,97,116,105,99,32,109,101,116,104,111,100,
+    115,32,116,111,32,97,118,111,105,100,32,116,104,101,32,110,
+    101,101,100,32,116,111,10,32,32,32,32,105,110,115,116,97,
+    110,116,105,97,116,101,32,116,104,101,32,99,108,97,115,115,
     46,10,10,32,32,32,32,99,2,0,0,0,0,0,0,0,
-    7,0,0,0,25,0,0,0,31,0,0,0,115,254,0,0,
-    0,116,0,0,106,1,0,106,2,0,124,1,0,131,1,0,
-    125,4,0,124,4,0,100,0,0,107,9,0,125,5,0,124,
-    5,0,115,168,0,116,4,0,124,1,0,131,1,0,125,4,
-    0,100,3,0,124,4,0,95,6,0,124,4,0,116,0,0,
-    106,1,0,124,1,0,60,124,0,0,124,4,0,95,7,0,
-    121,19,0,124,0,0,106,8,0,124,1,0,131,1,0,125,
-    6,0,87,110,24,0,4,116,9,0,116,10,0,102,2,0,
-    107,10,0,114,124,0,1,1,1,89,113,177,0,88,124,6,
-    0,114,143,0,124,1,0,124,4,0,95,11,0,113,177,0,
-    124,1,0,106,12,0,100,1,0,131,1,0,100,2,0,25,
-    124,4,0,95,11,0,110,9,0,100,3,0,124,4,0,95,
-    6,0,122,60,0,121,23,0,136,0,0,124,0,0,124,4,
-    0,124,2,0,124,3,0,142,2,0,83,87,110,30,0,1,
-    1,1,124,5,0,115,228,0,116,0,0,106,1,0,124,1,
-    0,61,110,0,0,130,0,0,89,110,1,0,88,87,100,0,
-    0,100,4,0,124,4,0,95,6,0,88,100,0,0,83,40,
-    5,0,0,0,78,117,1,0,0,0,46,105,0,0,0,0,
-    84,70,40,14,0,0,0,117,3,0,0,0,115,121,115,117,
-    7,0,0,0,109,111,100,117,108,101,115,117,3,0,0,0,
-    103,101,116,117,4,0,0,0,78,111,110,101,117,10,0,0,
-    0,110,101,119,95,109,111,100,117,108,101,117,4,0,0,0,
-    84,114,117,101,117,16,0,0,0,95,95,105,110,105,116,105,
-    97,108,105,122,105,110,103,95,95,117,10,0,0,0,95,95,
-    108,111,97,100,101,114,95,95,117,10,0,0,0,105,115,95,
-    112,97,99,107,97,103,101,117,11,0,0,0,73,109,112,111,
-    114,116,69,114,114,111,114,117,14,0,0,0,65,116,116,114,
-    105,98,117,116,101,69,114,114,111,114,117,11,0,0,0,95,
-    95,112,97,99,107,97,103,101,95,95,117,10,0,0,0,114,
-    112,97,114,116,105,116,105,111,110,117,5,0,0,0,70,97,
-    108,115,101,40,7,0,0,0,117,4,0,0,0,115,101,108,
-    102,117,8,0,0,0,102,117,108,108,110,97,109,101,117,4,
-    0,0,0,97,114,103,115,117,6,0,0,0,107,119,97,114,
-    103,115,117,6,0,0,0,109,111,100,117,108,101,117,9,0,
-    0,0,105,115,95,114,101,108,111,97,100,117,10,0,0,0,
-    105,115,95,112,97,99,107,97,103,101,40,1,0,0,0,117,
-    3,0,0,0,102,120,110,40,0,0,0,0,117,29,0,0,
-    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
-    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,25,
-    0,0,0,109,111,100,117,108,101,95,102,111,114,95,108,111,
-    97,100,101,114,95,119,114,97,112,112,101,114,24,2,0,0,
-    115,44,0,0,0,0,1,18,1,12,1,6,4,12,3,9,
-    1,13,1,9,1,3,1,19,1,19,1,5,2,6,1,12,
-    2,25,2,9,1,6,2,23,1,3,1,6,1,13,1,12,
-    2,117,52,0,0,0,109,111,100,117,108,101,95,102,111,114,
-    95,108,111,97,100,101,114,46,60,108,111,99,97,108,115,62,
-    46,109,111,100,117,108,101,95,102,111,114,95,108,111,97,100,
-    101,114,95,119,114,97,112,112,101,114,40,1,0,0,0,117,
-    5,0,0,0,95,119,114,97,112,40,2,0,0,0,117,3,
-    0,0,0,102,120,110,117,25,0,0,0,109,111,100,117,108,
-    101,95,102,111,114,95,108,111,97,100,101,114,95,119,114,97,
-    112,112,101,114,40,0,0,0,0,40,1,0,0,0,117,3,
-    0,0,0,102,120,110,117,29,0,0,0,60,102,114,111,122,
-    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
-    111,116,115,116,114,97,112,62,117,17,0,0,0,109,111,100,
-    117,108,101,95,102,111,114,95,108,111,97,100,101,114,6,2,
-    0,0,115,6,0,0,0,0,18,18,33,13,1,117,17,0,
-    0,0,109,111,100,117,108,101,95,102,111,114,95,108,111,97,
-    100,101,114,99,1,0,0,0,0,0,0,0,2,0,0,0,
-    4,0,0,0,3,0,0,0,115,38,0,0,0,100,3,0,
-    135,0,0,102,1,0,100,1,0,100,2,0,134,1,0,125,
-    1,0,116,1,0,124,1,0,136,0,0,131,2,0,1,124,
-    1,0,83,40,4,0,0,0,117,252,0,0,0,68,101,99,
-    111,114,97,116,111,114,32,116,111,32,118,101,114,105,102,121,
-    32,116,104,97,116,32,116,104,101,32,109,111,100,117,108,101,
-    32,98,101,105,110,103,32,114,101,113,117,101,115,116,101,100,
-    32,109,97,116,99,104,101,115,32,116,104,101,32,111,110,101,
-    32,116,104,101,10,32,32,32,32,108,111,97,100,101,114,32,
-    99,97,110,32,104,97,110,100,108,101,46,10,10,32,32,32,
-    32,84,104,101,32,102,105,114,115,116,32,97,114,103,117,109,
-    101,110,116,32,40,115,101,108,102,41,32,109,117,115,116,32,
-    100,101,102,105,110,101,32,95,110,97,109,101,32,119,104,105,
-    99,104,32,116,104,101,32,115,101,99,111,110,100,32,97,114,
-    103,117,109,101,110,116,32,105,115,10,32,32,32,32,99,111,
-    109,112,97,114,101,100,32,97,103,97,105,110,115,116,46,32,
-    73,102,32,116,104,101,32,99,111,109,112,97,114,105,115,111,
-    110,32,102,97,105,108,115,32,116,104,101,110,32,73,109,112,
-    111,114,116,69,114,114,111,114,32,105,115,32,114,97,105,115,
-    101,100,46,10,10,32,32,32,32,99,2,0,0,0,0,0,
-    0,0,4,0,0,0,5,0,0,0,31,0,0,0,115,83,
-    0,0,0,124,1,0,100,0,0,107,8,0,114,24,0,124,
-    0,0,106,1,0,125,1,0,110,40,0,124,0,0,106,1,
-    0,124,1,0,107,3,0,114,64,0,116,2,0,100,1,0,
-    124,1,0,22,100,2,0,124,1,0,131,1,1,130,1,0,
-    110,0,0,136,0,0,124,0,0,124,1,0,124,2,0,124,
-    3,0,142,2,0,83,40,3,0,0,0,78,117,23,0,0,
-    0,108,111,97,100,101,114,32,99,97,110,110,111,116,32,104,
-    97,110,100,108,101,32,37,115,117,4,0,0,0,110,97,109,
-    101,40,3,0,0,0,117,4,0,0,0,78,111,110,101,117,
-    4,0,0,0,110,97,109,101,117,11,0,0,0,73,109,112,
-    111,114,116,69,114,114,111,114,40,4,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,4,0,0,0,110,97,109,101,117,
-    4,0,0,0,97,114,103,115,117,6,0,0,0,107,119,97,
-    114,103,115,40,1,0,0,0,117,6,0,0,0,109,101,116,
-    104,111,100,40,0,0,0,0,117,29,0,0,0,60,102,114,
-    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,19,0,0,0,95,
-    99,104,101,99,107,95,110,97,109,101,95,119,114,97,112,112,
-    101,114,69,2,0,0,115,10,0,0,0,0,1,12,1,12,
-    1,15,1,25,1,117,40,0,0,0,95,99,104,101,99,107,
-    95,110,97,109,101,46,60,108,111,99,97,108,115,62,46,95,
-    99,104,101,99,107,95,110,97,109,101,95,119,114,97,112,112,
-    101,114,78,40,2,0,0,0,117,4,0,0,0,78,111,110,
-    101,117,5,0,0,0,95,119,114,97,112,40,2,0,0,0,
-    117,6,0,0,0,109,101,116,104,111,100,117,19,0,0,0,
-    95,99,104,101,99,107,95,110,97,109,101,95,119,114,97,112,
-    112,101,114,40,0,0,0,0,40,1,0,0,0,117,6,0,
-    0,0,109,101,116,104,111,100,117,29,0,0,0,60,102,114,
-    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,11,0,0,0,95,
-    99,104,101,99,107,95,110,97,109,101,61,2,0,0,115,6,
-    0,0,0,0,8,21,6,13,1,117,11,0,0,0,95,99,
-    104,101,99,107,95,110,97,109,101,99,1,0,0,0,0,0,
-    0,0,2,0,0,0,3,0,0,0,3,0,0,0,115,35,
-    0,0,0,135,0,0,102,1,0,100,1,0,100,2,0,134,
-    0,0,125,1,0,116,0,0,124,1,0,136,0,0,131,2,
-    0,1,124,1,0,83,40,3,0,0,0,117,49,0,0,0,
-    68,101,99,111,114,97,116,111,114,32,116,111,32,118,101,114,
-    105,102,121,32,116,104,101,32,110,97,109,101,100,32,109,111,
-    100,117,108,101,32,105,115,32,98,117,105,108,116,45,105,110,
-    46,99,2,0,0,0,0,0,0,0,2,0,0,0,4,0,
-    0,0,19,0,0,0,115,58,0,0,0,124,1,0,116,0,
-    0,106,1,0,107,7,0,114,45,0,116,2,0,100,1,0,
-    106,3,0,124,1,0,131,1,0,100,2,0,124,1,0,131,
-    1,1,130,1,0,110,0,0,136,0,0,124,0,0,124,1,
-    0,131,2,0,83,40,3,0,0,0,78,117,27,0,0,0,
-    123,125,32,105,115,32,110,111,116,32,97,32,98,117,105,108,
-    116,45,105,110,32,109,111,100,117,108,101,117,4,0,0,0,
-    110,97,109,101,40,4,0,0,0,117,3,0,0,0,115,121,
-    115,117,20,0,0,0,98,117,105,108,116,105,110,95,109,111,
-    100,117,108,101,95,110,97,109,101,115,117,11,0,0,0,73,
-    109,112,111,114,116,69,114,114,111,114,117,6,0,0,0,102,
-    111,114,109,97,116,40,2,0,0,0,117,4,0,0,0,115,
-    101,108,102,117,8,0,0,0,102,117,108,108,110,97,109,101,
-    40,1,0,0,0,117,3,0,0,0,102,120,110,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,25,0,0,0,95,114,101,113,117,105,114,
-    101,115,95,98,117,105,108,116,105,110,95,119,114,97,112,112,
-    101,114,81,2,0,0,115,8,0,0,0,0,1,15,1,18,
-    1,12,1,117,52,0,0,0,95,114,101,113,117,105,114,101,
-    115,95,98,117,105,108,116,105,110,46,60,108,111,99,97,108,
-    115,62,46,95,114,101,113,117,105,114,101,115,95,98,117,105,
-    108,116,105,110,95,119,114,97,112,112,101,114,40,1,0,0,
-    0,117,5,0,0,0,95,119,114,97,112,40,2,0,0,0,
-    117,3,0,0,0,102,120,110,117,25,0,0,0,95,114,101,
-    113,117,105,114,101,115,95,98,117,105,108,116,105,110,95,119,
-    114,97,112,112,101,114,40,0,0,0,0,40,1,0,0,0,
-    117,3,0,0,0,102,120,110,117,29,0,0,0,60,102,114,
-    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,17,0,0,0,95,
-    114,101,113,117,105,114,101,115,95,98,117,105,108,116,105,110,
-    79,2,0,0,115,6,0,0,0,0,2,18,5,13,1,117,
-    17,0,0,0,95,114,101,113,117,105,114,101,115,95,98,117,
-    105,108,116,105,110,99,1,0,0,0,0,0,0,0,2,0,
-    0,0,3,0,0,0,3,0,0,0,115,35,0,0,0,135,
-    0,0,102,1,0,100,1,0,100,2,0,134,0,0,125,1,
-    0,116,0,0,124,1,0,136,0,0,131,2,0,1,124,1,
-    0,83,40,3,0,0,0,117,47,0,0,0,68,101,99,111,
-    114,97,116,111,114,32,116,111,32,118,101,114,105,102,121,32,
-    116,104,101,32,110,97,109,101,100,32,109,111,100,117,108,101,
-    32,105,115,32,102,114,111,122,101,110,46,99,2,0,0,0,
-    0,0,0,0,2,0,0,0,4,0,0,0,19,0,0,0,
-    115,58,0,0,0,116,0,0,106,1,0,124,1,0,131,1,
-    0,115,45,0,116,2,0,100,1,0,106,3,0,124,1,0,
-    131,1,0,100,2,0,124,1,0,131,1,1,130,1,0,110,
-    0,0,136,0,0,124,0,0,124,1,0,131,2,0,83,40,
-    3,0,0,0,78,117,25,0,0,0,123,125,32,105,115,32,
-    110,111,116,32,97,32,102,114,111,122,101,110,32,109,111,100,
-    117,108,101,117,4,0,0,0,110,97,109,101,40,4,0,0,
-    0,117,4,0,0,0,95,105,109,112,117,9,0,0,0,105,
-    115,95,102,114,111,122,101,110,117,11,0,0,0,73,109,112,
-    111,114,116,69,114,114,111,114,117,6,0,0,0,102,111,114,
-    109,97,116,40,2,0,0,0,117,4,0,0,0,115,101,108,
-    102,117,8,0,0,0,102,117,108,108,110,97,109,101,40,1,
-    0,0,0,117,3,0,0,0,102,120,110,40,0,0,0,0,
+    2,0,0,0,2,0,0,0,67,0,0,0,115,16,0,0,
+    0,100,1,0,106,0,0,124,1,0,106,1,0,131,1,0,
+    83,40,2,0,0,0,78,117,24,0,0,0,60,109,111,100,
+    117,108,101,32,39,123,125,39,32,40,98,117,105,108,116,45,
+    105,110,41,62,40,2,0,0,0,117,6,0,0,0,102,111,
+    114,109,97,116,117,8,0,0,0,95,95,110,97,109,101,95,
+    95,40,2,0,0,0,117,3,0,0,0,99,108,115,117,6,
+    0,0,0,109,111,100,117,108,101,40,0,0,0,0,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,11,0,0,0,109,111,100,117,108,101,
+    95,114,101,112,114,127,2,0,0,115,2,0,0,0,0,2,
+    117,27,0,0,0,66,117,105,108,116,105,110,73,109,112,111,
+    114,116,101,114,46,109,111,100,117,108,101,95,114,101,112,114,
+    99,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,
+    0,67,0,0,0,115,39,0,0,0,124,2,0,100,1,0,
+    107,9,0,114,16,0,100,1,0,83,116,1,0,106,2,0,
+    124,1,0,131,1,0,114,35,0,124,0,0,83,100,1,0,
+    83,40,2,0,0,0,117,113,0,0,0,70,105,110,100,32,
+    116,104,101,32,98,117,105,108,116,45,105,110,32,109,111,100,
+    117,108,101,46,10,10,32,32,32,32,32,32,32,32,73,102,
+    32,39,112,97,116,104,39,32,105,115,32,101,118,101,114,32,
+    115,112,101,99,105,102,105,101,100,32,116,104,101,110,32,116,
+    104,101,32,115,101,97,114,99,104,32,105,115,32,99,111,110,
+    115,105,100,101,114,101,100,32,97,32,102,97,105,108,117,114,
+    101,46,10,10,32,32,32,32,32,32,32,32,78,40,3,0,
+    0,0,117,4,0,0,0,78,111,110,101,117,4,0,0,0,
+    95,105,109,112,117,10,0,0,0,105,115,95,98,117,105,108,
+    116,105,110,40,3,0,0,0,117,3,0,0,0,99,108,115,
+    117,8,0,0,0,102,117,108,108,110,97,109,101,117,4,0,
+    0,0,112,97,116,104,40,0,0,0,0,40,0,0,0,0,
     117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
     111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
-    112,62,117,24,0,0,0,95,114,101,113,117,105,114,101,115,
-    95,102,114,111,122,101,110,95,119,114,97,112,112,101,114,92,
-    2,0,0,115,8,0,0,0,0,1,15,1,18,1,12,1,
-    117,50,0,0,0,95,114,101,113,117,105,114,101,115,95,102,
-    114,111,122,101,110,46,60,108,111,99,97,108,115,62,46,95,
-    114,101,113,117,105,114,101,115,95,102,114,111,122,101,110,95,
-    119,114,97,112,112,101,114,40,1,0,0,0,117,5,0,0,
-    0,95,119,114,97,112,40,2,0,0,0,117,3,0,0,0,
-    102,120,110,117,24,0,0,0,95,114,101,113,117,105,114,101,
-    115,95,102,114,111,122,101,110,95,119,114,97,112,112,101,114,
-    40,0,0,0,0,40,1,0,0,0,117,3,0,0,0,102,
-    120,110,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,16,0,0,0,95,114,101,113,117,105,114,
-    101,115,95,102,114,111,122,101,110,90,2,0,0,115,6,0,
-    0,0,0,2,18,5,13,1,117,16,0,0,0,95,114,101,
-    113,117,105,114,101,115,95,102,114,111,122,101,110,99,2,0,
-    0,0,0,0,0,0,5,0,0,0,5,0,0,0,67,0,
-    0,0,115,87,0,0,0,124,0,0,106,0,0,124,1,0,
-    131,1,0,92,2,0,125,2,0,125,3,0,124,2,0,100,
-    3,0,107,8,0,114,83,0,116,2,0,124,3,0,131,1,
-    0,114,83,0,100,1,0,125,4,0,116,3,0,106,4,0,
-    124,4,0,106,5,0,124,3,0,100,2,0,25,131,1,0,
-    116,6,0,131,2,0,1,110,0,0,124,2,0,83,40,4,
-    0,0,0,117,86,0,0,0,84,114,121,32,116,111,32,102,
-    105,110,100,32,97,32,108,111,97,100,101,114,32,102,111,114,
-    32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,109,
-    111,100,117,108,101,32,98,121,32,100,101,108,101,103,97,116,
-    105,110,103,32,116,111,10,32,32,32,32,115,101,108,102,46,
-    102,105,110,100,95,108,111,97,100,101,114,40,41,46,117,44,
-    0,0,0,78,111,116,32,105,109,112,111,114,116,105,110,103,
-    32,100,105,114,101,99,116,111,114,121,32,123,125,58,32,109,
-    105,115,115,105,110,103,32,95,95,105,110,105,116,95,95,105,
-    0,0,0,0,78,40,7,0,0,0,117,11,0,0,0,102,
-    105,110,100,95,108,111,97,100,101,114,117,4,0,0,0,78,
-    111,110,101,117,3,0,0,0,108,101,110,117,9,0,0,0,
-    95,119,97,114,110,105,110,103,115,117,4,0,0,0,119,97,
-    114,110,117,6,0,0,0,102,111,114,109,97,116,117,13,0,
-    0,0,73,109,112,111,114,116,87,97,114,110,105,110,103,40,
-    5,0,0,0,117,4,0,0,0,115,101,108,102,117,8,0,
-    0,0,102,117,108,108,110,97,109,101,117,6,0,0,0,108,
-    111,97,100,101,114,117,8,0,0,0,112,111,114,116,105,111,
-    110,115,117,3,0,0,0,109,115,103,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,17,0,0,0,95,102,105,110,100,
-    95,109,111,100,117,108,101,95,115,104,105,109,101,2,0,0,
-    115,10,0,0,0,0,6,21,1,24,1,6,1,32,1,117,
-    17,0,0,0,95,102,105,110,100,95,109,111,100,117,108,101,
-    95,115,104,105,109,99,1,0,0,0,0,0,0,0,1,0,
-    0,0,6,0,0,0,66,0,0,0,115,173,0,0,0,124,
-    0,0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,
-    1,0,90,3,0,101,4,0,100,2,0,100,3,0,132,0,
-    0,131,1,0,90,5,0,101,4,0,100,14,0,100,4,0,
-    100,5,0,132,1,0,131,1,0,90,7,0,101,4,0,101,
-    8,0,101,9,0,101,10,0,100,6,0,100,7,0,132,0,
-    0,131,1,0,131,1,0,131,1,0,131,1,0,90,11,0,
-    101,4,0,101,10,0,100,8,0,100,9,0,132,0,0,131,
-    1,0,131,1,0,90,12,0,101,4,0,101,10,0,100,10,
-    0,100,11,0,132,0,0,131,1,0,131,1,0,90,13,0,
-    101,4,0,101,10,0,100,12,0,100,13,0,132,0,0,131,
-    1,0,131,1,0,90,14,0,100,14,0,83,40,15,0,0,
-    0,117,15,0,0,0,66,117,105,108,116,105,110,73,109,112,
-    111,114,116,101,114,117,144,0,0,0,77,101,116,97,32,112,
-    97,116,104,32,105,109,112,111,114,116,32,102,111,114,32,98,
-    117,105,108,116,45,105,110,32,109,111,100,117,108,101,115,46,
-    10,10,32,32,32,32,65,108,108,32,109,101,116,104,111,100,
-    115,32,97,114,101,32,101,105,116,104,101,114,32,99,108,97,
-    115,115,32,111,114,32,115,116,97,116,105,99,32,109,101,116,
-    104,111,100,115,32,116,111,32,97,118,111,105,100,32,116,104,
-    101,32,110,101,101,100,32,116,111,10,32,32,32,32,105,110,
-    115,116,97,110,116,105,97,116,101,32,116,104,101,32,99,108,
-    97,115,115,46,10,10,32,32,32,32,99,2,0,0,0,0,
-    0,0,0,2,0,0,0,2,0,0,0,67,0,0,0,115,
-    16,0,0,0,100,1,0,106,0,0,124,1,0,106,1,0,
-    131,1,0,83,40,2,0,0,0,78,117,24,0,0,0,60,
-    109,111,100,117,108,101,32,39,123,125,39,32,40,98,117,105,
-    108,116,45,105,110,41,62,40,2,0,0,0,117,6,0,0,
-    0,102,111,114,109,97,116,117,8,0,0,0,95,95,110,97,
-    109,101,95,95,40,2,0,0,0,117,3,0,0,0,99,108,
-    115,117,6,0,0,0,109,111,100,117,108,101,40,0,0,0,
-    0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
-    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
-    111,116,115,116,114,97,112,62,117,11,0,0,0,109,111,100,
-    117,108,101,95,114,101,112,114,127,2,0,0,115,2,0,0,
-    0,0,2,117,27,0,0,0,66,117,105,108,116,105,110,73,
-    109,112,111,114,116,101,114,46,109,111,100,117,108,101,95,114,
-    101,112,114,99,3,0,0,0,0,0,0,0,3,0,0,0,
-    2,0,0,0,67,0,0,0,115,39,0,0,0,124,2,0,
-    100,1,0,107,9,0,114,16,0,100,1,0,83,116,1,0,
-    106,2,0,124,1,0,131,1,0,114,35,0,124,0,0,83,
-    100,1,0,83,40,2,0,0,0,117,113,0,0,0,70,105,
-    110,100,32,116,104,101,32,98,117,105,108,116,45,105,110,32,
-    109,111,100,117,108,101,46,10,10,32,32,32,32,32,32,32,
-    32,73,102,32,39,112,97,116,104,39,32,105,115,32,101,118,
-    101,114,32,115,112,101,99,105,102,105,101,100,32,116,104,101,
-    110,32,116,104,101,32,115,101,97,114,99,104,32,105,115,32,
-    99,111,110,115,105,100,101,114,101,100,32,97,32,102,97,105,
-    108,117,114,101,46,10,10,32,32,32,32,32,32,32,32,78,
-    40,3,0,0,0,117,4,0,0,0,78,111,110,101,117,4,
-    0,0,0,95,105,109,112,117,10,0,0,0,105,115,95,98,
+    112,62,117,11,0,0,0,102,105,110,100,95,109,111,100,117,
+    108,101,131,2,0,0,115,6,0,0,0,0,7,12,1,4,
+    1,117,27,0,0,0,66,117,105,108,116,105,110,73,109,112,
+    111,114,116,101,114,46,102,105,110,100,95,109,111,100,117,108,
+    101,99,2,0,0,0,0,0,0,0,3,0,0,0,9,0,
+    0,0,67,0,0,0,115,88,0,0,0,124,1,0,116,0,
+    0,106,1,0,107,6,0,125,2,0,121,20,0,116,2,0,
+    116,3,0,106,4,0,124,1,0,131,2,0,83,87,110,46,
+    0,1,1,1,124,2,0,12,114,76,0,124,1,0,116,0,
+    0,106,1,0,107,6,0,114,76,0,116,0,0,106,1,0,
+    124,1,0,61,110,0,0,130,0,0,89,110,1,0,88,100,
+    1,0,83,40,2,0,0,0,117,23,0,0,0,76,111,97,
+    100,32,97,32,98,117,105,108,116,45,105,110,32,109,111,100,
+    117,108,101,46,78,40,5,0,0,0,117,3,0,0,0,115,
+    121,115,117,7,0,0,0,109,111,100,117,108,101,115,117,25,
+    0,0,0,95,99,97,108,108,95,119,105,116,104,95,102,114,
+    97,109,101,115,95,114,101,109,111,118,101,100,117,4,0,0,
+    0,95,105,109,112,117,12,0,0,0,105,110,105,116,95,98,
     117,105,108,116,105,110,40,3,0,0,0,117,3,0,0,0,
     99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,101,
-    117,4,0,0,0,112,97,116,104,40,0,0,0,0,40,0,
-    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
-    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
-    116,114,97,112,62,117,11,0,0,0,102,105,110,100,95,109,
-    111,100,117,108,101,131,2,0,0,115,6,0,0,0,0,7,
-    12,1,4,1,117,27,0,0,0,66,117,105,108,116,105,110,
-    73,109,112,111,114,116,101,114,46,102,105,110,100,95,109,111,
-    100,117,108,101,99,2,0,0,0,0,0,0,0,3,0,0,
-    0,9,0,0,0,67,0,0,0,115,88,0,0,0,124,1,
-    0,116,0,0,106,1,0,107,6,0,125,2,0,121,20,0,
-    116,2,0,116,3,0,106,4,0,124,1,0,131,2,0,83,
-    87,110,46,0,1,1,1,124,2,0,12,114,76,0,124,1,
-    0,116,0,0,106,1,0,107,6,0,114,76,0,116,0,0,
-    106,1,0,124,1,0,61,110,0,0,130,0,0,89,110,1,
-    0,88,100,1,0,83,40,2,0,0,0,117,23,0,0,0,
-    76,111,97,100,32,97,32,98,117,105,108,116,45,105,110,32,
-    109,111,100,117,108,101,46,78,40,5,0,0,0,117,3,0,
-    0,0,115,121,115,117,7,0,0,0,109,111,100,117,108,101,
-    115,117,25,0,0,0,95,99,97,108,108,95,119,105,116,104,
-    95,102,114,97,109,101,115,95,114,101,109,111,118,101,100,117,
-    4,0,0,0,95,105,109,112,117,12,0,0,0,105,110,105,
-    116,95,98,117,105,108,116,105,110,40,3,0,0,0,117,3,
-    0,0,0,99,108,115,117,8,0,0,0,102,117,108,108,110,
-    97,109,101,117,9,0,0,0,105,115,95,114,101,108,111,97,
-    100,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,0,
-    0,0,108,111,97,100,95,109,111,100,117,108,101,142,2,0,
-    0,115,14,0,0,0,0,6,15,1,3,1,20,1,3,1,
-    22,1,13,1,117,27,0,0,0,66,117,105,108,116,105,110,
-    73,109,112,111,114,116,101,114,46,108,111,97,100,95,109,111,
-    100,117,108,101,99,2,0,0,0,0,0,0,0,2,0,0,
-    0,1,0,0,0,67,0,0,0,115,4,0,0,0,100,1,
-    0,83,40,2,0,0,0,117,57,0,0,0,82,101,116,117,
-    114,110,32,78,111,110,101,32,97,115,32,98,117,105,108,116,
-    45,105,110,32,109,111,100,117,108,101,115,32,100,111,32,110,
-    111,116,32,104,97,118,101,32,99,111,100,101,32,111,98,106,
-    101,99,116,115,46,78,40,1,0,0,0,117,4,0,0,0,
-    78,111,110,101,40,2,0,0,0,117,3,0,0,0,99,108,
-    115,117,8,0,0,0,102,117,108,108,110,97,109,101,40,0,
+    117,9,0,0,0,105,115,95,114,101,108,111,97,100,40,0,
     0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
     111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,8,0,0,0,103,
-    101,116,95,99,111,100,101,156,2,0,0,115,2,0,0,0,
-    0,4,117,24,0,0,0,66,117,105,108,116,105,110,73,109,
-    112,111,114,116,101,114,46,103,101,116,95,99,111,100,101,99,
-    2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,
-    67,0,0,0,115,4,0,0,0,100,1,0,83,40,2,0,
-    0,0,117,56,0,0,0,82,101,116,117,114,110,32,78,111,
-    110,101,32,97,115,32,98,117,105,108,116,45,105,110,32,109,
-    111,100,117,108,101,115,32,100,111,32,110,111,116,32,104,97,
-    118,101,32,115,111,117,114,99,101,32,99,111,100,101,46,78,
-    40,1,0,0,0,117,4,0,0,0,78,111,110,101,40,2,
-    0,0,0,117,3,0,0,0,99,108,115,117,8,0,0,0,
-    102,117,108,108,110,97,109,101,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,10,0,0,0,103,101,116,95,115,111,117,
-    114,99,101,162,2,0,0,115,2,0,0,0,0,4,117,26,
-    0,0,0,66,117,105,108,116,105,110,73,109,112,111,114,116,
-    101,114,46,103,101,116,95,115,111,117,114,99,101,99,2,0,
-    0,0,0,0,0,0,2,0,0,0,1,0,0,0,67,0,
-    0,0,115,4,0,0,0,100,1,0,83,40,2,0,0,0,
-    117,52,0,0,0,82,101,116,117,114,110,32,70,97,108,115,
-    101,32,97,115,32,98,117,105,108,116,45,105,110,32,109,111,
-    100,117,108,101,115,32,97,114,101,32,110,101,118,101,114,32,
-    112,97,99,107,97,103,101,115,46,70,40,1,0,0,0,117,
-    5,0,0,0,70,97,108,115,101,40,2,0,0,0,117,3,
-    0,0,0,99,108,115,117,8,0,0,0,102,117,108,108,110,
-    97,109,101,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    10,0,0,0,105,115,95,112,97,99,107,97,103,101,168,2,
-    0,0,115,2,0,0,0,0,4,117,26,0,0,0,66,117,
-    105,108,116,105,110,73,109,112,111,114,116,101,114,46,105,115,
-    95,112,97,99,107,97,103,101,78,40,15,0,0,0,117,8,
-    0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,0,
-    95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,95,
-    95,113,117,97,108,110,97,109,101,95,95,117,7,0,0,0,
-    95,95,100,111,99,95,95,117,11,0,0,0,99,108,97,115,
-    115,109,101,116,104,111,100,117,11,0,0,0,109,111,100,117,
-    108,101,95,114,101,112,114,117,4,0,0,0,78,111,110,101,
-    117,11,0,0,0,102,105,110,100,95,109,111,100,117,108,101,
-    117,11,0,0,0,115,101,116,95,112,97,99,107,97,103,101,
-    117,10,0,0,0,115,101,116,95,108,111,97,100,101,114,117,
-    17,0,0,0,95,114,101,113,117,105,114,101,115,95,98,117,
-    105,108,116,105,110,117,11,0,0,0,108,111,97,100,95,109,
-    111,100,117,108,101,117,8,0,0,0,103,101,116,95,99,111,
-    100,101,117,10,0,0,0,103,101,116,95,115,111,117,114,99,
-    101,117,10,0,0,0,105,115,95,112,97,99,107,97,103,101,
-    40,1,0,0,0,117,10,0,0,0,95,95,108,111,99,97,
-    108,115,95,95,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,15,0,0,0,66,117,105,108,116,105,110,73,109,112,111,
-    114,116,101,114,118,2,0,0,115,28,0,0,0,16,7,6,
-    2,18,4,3,1,18,10,3,1,3,1,3,1,27,11,3,
-    1,21,5,3,1,21,5,3,1,117,15,0,0,0,66,117,
-    105,108,116,105,110,73,109,112,111,114,116,101,114,99,1,0,
-    0,0,0,0,0,0,1,0,0,0,6,0,0,0,66,0,
-    0,0,115,173,0,0,0,124,0,0,69,101,0,0,90,1,
-    0,100,0,0,90,2,0,100,1,0,90,3,0,101,4,0,
-    100,2,0,100,3,0,132,0,0,131,1,0,90,5,0,101,
-    4,0,100,14,0,100,4,0,100,5,0,132,1,0,131,1,
-    0,90,7,0,101,4,0,101,8,0,101,9,0,101,10,0,
-    100,6,0,100,7,0,132,0,0,131,1,0,131,1,0,131,
-    1,0,131,1,0,90,11,0,101,4,0,101,10,0,100,8,
-    0,100,9,0,132,0,0,131,1,0,131,1,0,90,12,0,
-    101,4,0,101,10,0,100,10,0,100,11,0,132,0,0,131,
-    1,0,131,1,0,90,13,0,101,4,0,101,10,0,100,12,
-    0,100,13,0,132,0,0,131,1,0,131,1,0,90,14,0,
-    100,14,0,83,40,15,0,0,0,117,14,0,0,0,70,114,
-    111,122,101,110,73,109,112,111,114,116,101,114,117,142,0,0,
-    0,77,101,116,97,32,112,97,116,104,32,105,109,112,111,114,
-    116,32,102,111,114,32,102,114,111,122,101,110,32,109,111,100,
-    117,108,101,115,46,10,10,32,32,32,32,65,108,108,32,109,
-    101,116,104,111,100,115,32,97,114,101,32,101,105,116,104,101,
-    114,32,99,108,97,115,115,32,111,114,32,115,116,97,116,105,
-    99,32,109,101,116,104,111,100,115,32,116,111,32,97,118,111,
-    105,100,32,116,104,101,32,110,101,101,100,32,116,111,10,32,
-    32,32,32,105,110,115,116,97,110,116,105,97,116,101,32,116,
-    104,101,32,99,108,97,115,115,46,10,10,32,32,32,32,99,
-    2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,
-    67,0,0,0,115,16,0,0,0,100,1,0,106,0,0,124,
-    1,0,106,1,0,131,1,0,83,40,2,0,0,0,78,117,
-    22,0,0,0,60,109,111,100,117,108,101,32,39,123,125,39,
-    32,40,102,114,111,122,101,110,41,62,40,2,0,0,0,117,
-    6,0,0,0,102,111,114,109,97,116,117,8,0,0,0,95,
-    95,110,97,109,101,95,95,40,2,0,0,0,117,3,0,0,
-    0,99,108,115,117,1,0,0,0,109,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,11,0,0,0,109,111,100,117,108,
-    101,95,114,101,112,114,184,2,0,0,115,2,0,0,0,0,
-    2,117,26,0,0,0,70,114,111,122,101,110,73,109,112,111,
-    114,116,101,114,46,109,111,100,117,108,101,95,114,101,112,114,
-    99,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,
-    0,67,0,0,0,115,23,0,0,0,116,0,0,106,1,0,
-    124,1,0,131,1,0,114,19,0,124,0,0,83,100,1,0,
-    83,40,2,0,0,0,117,21,0,0,0,70,105,110,100,32,
-    97,32,102,114,111,122,101,110,32,109,111,100,117,108,101,46,
-    78,40,3,0,0,0,117,4,0,0,0,95,105,109,112,117,
-    9,0,0,0,105,115,95,102,114,111,122,101,110,117,4,0,
-    0,0,78,111,110,101,40,3,0,0,0,117,3,0,0,0,
+    98,111,111,116,115,116,114,97,112,62,117,11,0,0,0,108,
+    111,97,100,95,109,111,100,117,108,101,142,2,0,0,115,14,
+    0,0,0,0,6,15,1,3,1,20,1,3,1,22,1,13,
+    1,117,27,0,0,0,66,117,105,108,116,105,110,73,109,112,
+    111,114,116,101,114,46,108,111,97,100,95,109,111,100,117,108,
+    101,99,2,0,0,0,0,0,0,0,2,0,0,0,1,0,
+    0,0,67,0,0,0,115,4,0,0,0,100,1,0,83,40,
+    2,0,0,0,117,57,0,0,0,82,101,116,117,114,110,32,
+    78,111,110,101,32,97,115,32,98,117,105,108,116,45,105,110,
+    32,109,111,100,117,108,101,115,32,100,111,32,110,111,116,32,
+    104,97,118,101,32,99,111,100,101,32,111,98,106,101,99,116,
+    115,46,78,40,1,0,0,0,117,4,0,0,0,78,111,110,
+    101,40,2,0,0,0,117,3,0,0,0,99,108,115,117,8,
+    0,0,0,102,117,108,108,110,97,109,101,40,0,0,0,0,
+    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,8,0,0,0,103,101,116,95,
+    99,111,100,101,156,2,0,0,115,2,0,0,0,0,4,117,
+    24,0,0,0,66,117,105,108,116,105,110,73,109,112,111,114,
+    116,101,114,46,103,101,116,95,99,111,100,101,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,1,0,0,0,67,0,0,
+    0,115,4,0,0,0,100,1,0,83,40,2,0,0,0,117,
+    56,0,0,0,82,101,116,117,114,110,32,78,111,110,101,32,
+    97,115,32,98,117,105,108,116,45,105,110,32,109,111,100,117,
+    108,101,115,32,100,111,32,110,111,116,32,104,97,118,101,32,
+    115,111,117,114,99,101,32,99,111,100,101,46,78,40,1,0,
+    0,0,117,4,0,0,0,78,111,110,101,40,2,0,0,0,
+    117,3,0,0,0,99,108,115,117,8,0,0,0,102,117,108,
+    108,110,97,109,101,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,10,0,0,0,103,101,116,95,115,111,117,114,99,101,
+    162,2,0,0,115,2,0,0,0,0,4,117,26,0,0,0,
+    66,117,105,108,116,105,110,73,109,112,111,114,116,101,114,46,
+    103,101,116,95,115,111,117,114,99,101,99,2,0,0,0,0,
+    0,0,0,2,0,0,0,1,0,0,0,67,0,0,0,115,
+    4,0,0,0,100,1,0,83,40,2,0,0,0,117,52,0,
+    0,0,82,101,116,117,114,110,32,70,97,108,115,101,32,97,
+    115,32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,
+    101,115,32,97,114,101,32,110,101,118,101,114,32,112,97,99,
+    107,97,103,101,115,46,70,40,1,0,0,0,117,5,0,0,
+    0,70,97,108,115,101,40,2,0,0,0,117,3,0,0,0,
     99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,101,
-    117,4,0,0,0,112,97,116,104,40,0,0,0,0,40,0,
-    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
-    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
-    116,114,97,112,62,117,11,0,0,0,102,105,110,100,95,109,
-    111,100,117,108,101,188,2,0,0,115,2,0,0,0,0,3,
-    117,26,0,0,0,70,114,111,122,101,110,73,109,112,111,114,
-    116,101,114,46,102,105,110,100,95,109,111,100,117,108,101,99,
-    2,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,
-    67,0,0,0,115,100,0,0,0,124,1,0,116,0,0,106,
-    1,0,107,6,0,125,2,0,121,32,0,116,2,0,116,3,
-    0,106,4,0,124,1,0,131,2,0,125,3,0,124,3,0,
-    96,5,0,124,3,0,83,87,110,46,0,1,1,1,124,2,
-    0,12,114,88,0,124,1,0,116,0,0,106,1,0,107,6,
-    0,114,88,0,116,0,0,106,1,0,124,1,0,61,110,0,
-    0,130,0,0,89,110,1,0,88,100,1,0,83,40,2,0,
-    0,0,117,21,0,0,0,76,111,97,100,32,97,32,102,114,
-    111,122,101,110,32,109,111,100,117,108,101,46,78,40,6,0,
-    0,0,117,3,0,0,0,115,121,115,117,7,0,0,0,109,
-    111,100,117,108,101,115,117,25,0,0,0,95,99,97,108,108,
-    95,119,105,116,104,95,102,114,97,109,101,115,95,114,101,109,
-    111,118,101,100,117,4,0,0,0,95,105,109,112,117,11,0,
-    0,0,105,110,105,116,95,102,114,111,122,101,110,117,8,0,
-    0,0,95,95,102,105,108,101,95,95,40,4,0,0,0,117,
-    3,0,0,0,99,108,115,117,8,0,0,0,102,117,108,108,
-    110,97,109,101,117,9,0,0,0,105,115,95,114,101,108,111,
-    97,100,117,1,0,0,0,109,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,11,0,0,0,108,111,97,100,95,109,111,
-    100,117,108,101,193,2,0,0,115,18,0,0,0,0,6,15,
-    1,3,1,18,2,6,1,8,1,3,1,22,1,13,1,117,
-    26,0,0,0,70,114,111,122,101,110,73,109,112,111,114,116,
-    101,114,46,108,111,97,100,95,109,111,100,117,108,101,99,2,
-    0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,67,
-    0,0,0,115,13,0,0,0,116,0,0,106,1,0,124,1,
-    0,131,1,0,83,40,1,0,0,0,117,45,0,0,0,82,
-    101,116,117,114,110,32,116,104,101,32,99,111,100,101,32,111,
-    98,106,101,99,116,32,102,111,114,32,116,104,101,32,102,114,
-    111,122,101,110,32,109,111,100,117,108,101,46,40,2,0,0,
-    0,117,4,0,0,0,95,105,109,112,117,17,0,0,0,103,
-    101,116,95,102,114,111,122,101,110,95,111,98,106,101,99,116,
-    40,2,0,0,0,117,3,0,0,0,99,108,115,117,8,0,
-    0,0,102,117,108,108,110,97,109,101,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,8,0,0,0,103,101,116,95,99,
-    111,100,101,210,2,0,0,115,2,0,0,0,0,4,117,23,
-    0,0,0,70,114,111,122,101,110,73,109,112,111,114,116,101,
-    114,46,103,101,116,95,99,111,100,101,99,2,0,0,0,0,
-    0,0,0,2,0,0,0,1,0,0,0,67,0,0,0,115,
-    4,0,0,0,100,1,0,83,40,2,0,0,0,117,54,0,
-    0,0,82,101,116,117,114,110,32,78,111,110,101,32,97,115,
-    32,102,114,111,122,101,110,32,109,111,100,117,108,101,115,32,
-    100,111,32,110,111,116,32,104,97,118,101,32,115,111,117,114,
-    99,101,32,99,111,100,101,46,78,40,1,0,0,0,117,4,
-    0,0,0,78,111,110,101,40,2,0,0,0,117,3,0,0,
-    0,99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,
-    101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,10,0,
-    0,0,103,101,116,95,115,111,117,114,99,101,216,2,0,0,
-    115,2,0,0,0,0,4,117,25,0,0,0,70,114,111,122,
-    101,110,73,109,112,111,114,116,101,114,46,103,101,116,95,115,
-    111,117,114,99,101,99,2,0,0,0,0,0,0,0,2,0,
-    0,0,2,0,0,0,67,0,0,0,115,13,0,0,0,116,
-    0,0,106,1,0,124,1,0,131,1,0,83,40,1,0,0,
-    0,117,46,0,0,0,82,101,116,117,114,110,32,84,114,117,
-    101,32,105,102,32,116,104,101,32,102,114,111,122,101,110,32,
-    109,111,100,117,108,101,32,105,115,32,97,32,112,97,99,107,
-    97,103,101,46,40,2,0,0,0,117,4,0,0,0,95,105,
-    109,112,117,17,0,0,0,105,115,95,102,114,111,122,101,110,
-    95,112,97,99,107,97,103,101,40,2,0,0,0,117,3,0,
-    0,0,99,108,115,117,8,0,0,0,102,117,108,108,110,97,
-    109,101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
-    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
-    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,10,
-    0,0,0,105,115,95,112,97,99,107,97,103,101,222,2,0,
-    0,115,2,0,0,0,0,4,117,25,0,0,0,70,114,111,
-    122,101,110,73,109,112,111,114,116,101,114,46,105,115,95,112,
-    97,99,107,97,103,101,78,40,15,0,0,0,117,8,0,0,
-    0,95,95,110,97,109,101,95,95,117,10,0,0,0,95,95,
-    109,111,100,117,108,101,95,95,117,12,0,0,0,95,95,113,
-    117,97,108,110,97,109,101,95,95,117,7,0,0,0,95,95,
-    100,111,99,95,95,117,11,0,0,0,99,108,97,115,115,109,
-    101,116,104,111,100,117,11,0,0,0,109,111,100,117,108,101,
-    95,114,101,112,114,117,4,0,0,0,78,111,110,101,117,11,
-    0,0,0,102,105,110,100,95,109,111,100,117,108,101,117,11,
-    0,0,0,115,101,116,95,112,97,99,107,97,103,101,117,10,
-    0,0,0,115,101,116,95,108,111,97,100,101,114,117,16,0,
-    0,0,95,114,101,113,117,105,114,101,115,95,102,114,111,122,
-    101,110,117,11,0,0,0,108,111,97,100,95,109,111,100,117,
+    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,10,0,0,
+    0,105,115,95,112,97,99,107,97,103,101,168,2,0,0,115,
+    2,0,0,0,0,4,117,26,0,0,0,66,117,105,108,116,
+    105,110,73,109,112,111,114,116,101,114,46,105,115,95,112,97,
+    99,107,97,103,101,78,40,15,0,0,0,117,8,0,0,0,
+    95,95,110,97,109,101,95,95,117,10,0,0,0,95,95,109,
+    111,100,117,108,101,95,95,117,12,0,0,0,95,95,113,117,
+    97,108,110,97,109,101,95,95,117,7,0,0,0,95,95,100,
+    111,99,95,95,117,11,0,0,0,99,108,97,115,115,109,101,
+    116,104,111,100,117,11,0,0,0,109,111,100,117,108,101,95,
+    114,101,112,114,117,4,0,0,0,78,111,110,101,117,11,0,
+    0,0,102,105,110,100,95,109,111,100,117,108,101,117,11,0,
+    0,0,115,101,116,95,112,97,99,107,97,103,101,117,10,0,
+    0,0,115,101,116,95,108,111,97,100,101,114,117,17,0,0,
+    0,95,114,101,113,117,105,114,101,115,95,98,117,105,108,116,
+    105,110,117,11,0,0,0,108,111,97,100,95,109,111,100,117,
     108,101,117,8,0,0,0,103,101,116,95,99,111,100,101,117,
     10,0,0,0,103,101,116,95,115,111,117,114,99,101,117,10,
     0,0,0,105,115,95,112,97,99,107,97,103,101,40,1,0,
     0,0,117,10,0,0,0,95,95,108,111,99,97,108,115,95,
     95,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
     60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,14,0,
-    0,0,70,114,111,122,101,110,73,109,112,111,114,116,101,114,
-    175,2,0,0,115,28,0,0,0,16,7,6,2,18,4,3,
-    1,18,4,3,1,3,1,3,1,27,14,3,1,21,5,3,
-    1,21,5,3,1,117,14,0,0,0,70,114,111,122,101,110,
-    73,109,112,111,114,116,101,114,99,1,0,0,0,0,0,0,
-    0,1,0,0,0,4,0,0,0,66,0,0,0,115,101,0,
-    0,0,124,0,0,69,101,0,0,90,1,0,100,0,0,90,
-    2,0,100,1,0,90,3,0,100,2,0,90,4,0,100,3,
-    0,90,5,0,100,11,0,90,7,0,101,8,0,100,4,0,
-    100,5,0,132,0,0,131,1,0,90,9,0,101,8,0,100,
-    6,0,100,7,0,132,0,0,131,1,0,90,10,0,101,8,
-    0,100,10,0,100,8,0,100,9,0,132,1,0,131,1,0,
-    90,12,0,100,10,0,83,40,12,0,0,0,117,21,0,0,
-    0,87,105,110,100,111,119,115,82,101,103,105,115,116,114,121,
-    70,105,110,100,101,114,117,67,0,0,0,77,101,116,97,32,
-    112,97,116,104,32,102,105,110,100,101,114,32,102,111,114,32,
-    109,111,100,117,108,101,115,32,100,101,99,108,97,114,101,100,
-    32,105,110,32,116,104,101,32,87,105,110,100,111,119,115,32,
-    114,101,103,105,115,116,114,121,46,10,32,32,32,32,117,59,
-    0,0,0,83,111,102,116,119,97,114,101,92,80,121,116,104,
-    111,110,92,80,121,116,104,111,110,67,111,114,101,92,123,115,
-    121,115,95,118,101,114,115,105,111,110,125,92,77,111,100,117,
-    108,101,115,92,123,102,117,108,108,110,97,109,101,125,117,65,
-    0,0,0,83,111,102,116,119,97,114,101,92,80,121,116,104,
-    111,110,92,80,121,116,104,111,110,67,111,114,101,92,123,115,
-    121,115,95,118,101,114,115,105,111,110,125,92,77,111,100,117,
-    108,101,115,92,123,102,117,108,108,110,97,109,101,125,92,68,
-    101,98,117,103,99,2,0,0,0,0,0,0,0,2,0,0,
-    0,11,0,0,0,67,0,0,0,115,67,0,0,0,121,23,
-    0,116,0,0,106,1,0,116,0,0,106,2,0,124,1,0,
-    131,2,0,83,87,110,37,0,4,116,3,0,107,10,0,114,
-    62,0,1,1,1,116,0,0,106,1,0,116,0,0,106,4,
-    0,124,1,0,131,2,0,83,89,110,1,0,88,100,0,0,
-    83,40,1,0,0,0,78,40,5,0,0,0,117,7,0,0,
-    0,95,119,105,110,114,101,103,117,7,0,0,0,79,112,101,
-    110,75,101,121,117,17,0,0,0,72,75,69,89,95,67,85,
-    82,82,69,78,84,95,85,83,69,82,117,12,0,0,0,87,
-    105,110,100,111,119,115,69,114,114,111,114,117,18,0,0,0,
-    72,75,69,89,95,76,79,67,65,76,95,77,65,67,72,73,
-    78,69,40,2,0,0,0,117,3,0,0,0,99,108,115,117,
-    3,0,0,0,107,101,121,40,0,0,0,0,40,0,0,0,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,15,0,
+    0,0,66,117,105,108,116,105,110,73,109,112,111,114,116,101,
+    114,118,2,0,0,115,28,0,0,0,16,7,6,2,18,4,
+    3,1,18,10,3,1,3,1,3,1,27,11,3,1,21,5,
+    3,1,21,5,3,1,117,15,0,0,0,66,117,105,108,116,
+    105,110,73,109,112,111,114,116,101,114,99,1,0,0,0,0,
+    0,0,0,1,0,0,0,6,0,0,0,66,0,0,0,115,
+    173,0,0,0,124,0,0,69,101,0,0,90,1,0,100,0,
+    0,90,2,0,100,1,0,90,3,0,101,4,0,100,2,0,
+    100,3,0,132,0,0,131,1,0,90,5,0,101,4,0,100,
+    14,0,100,4,0,100,5,0,132,1,0,131,1,0,90,7,
+    0,101,4,0,101,8,0,101,9,0,101,10,0,100,6,0,
+    100,7,0,132,0,0,131,1,0,131,1,0,131,1,0,131,
+    1,0,90,11,0,101,4,0,101,10,0,100,8,0,100,9,
+    0,132,0,0,131,1,0,131,1,0,90,12,0,101,4,0,
+    101,10,0,100,10,0,100,11,0,132,0,0,131,1,0,131,
+    1,0,90,13,0,101,4,0,101,10,0,100,12,0,100,13,
+    0,132,0,0,131,1,0,131,1,0,90,14,0,100,14,0,
+    83,40,15,0,0,0,117,14,0,0,0,70,114,111,122,101,
+    110,73,109,112,111,114,116,101,114,117,142,0,0,0,77,101,
+    116,97,32,112,97,116,104,32,105,109,112,111,114,116,32,102,
+    111,114,32,102,114,111,122,101,110,32,109,111,100,117,108,101,
+    115,46,10,10,32,32,32,32,65,108,108,32,109,101,116,104,
+    111,100,115,32,97,114,101,32,101,105,116,104,101,114,32,99,
+    108,97,115,115,32,111,114,32,115,116,97,116,105,99,32,109,
+    101,116,104,111,100,115,32,116,111,32,97,118,111,105,100,32,
+    116,104,101,32,110,101,101,100,32,116,111,10,32,32,32,32,
+    105,110,115,116,97,110,116,105,97,116,101,32,116,104,101,32,
+    99,108,97,115,115,46,10,10,32,32,32,32,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,
+    0,115,16,0,0,0,100,1,0,106,0,0,124,1,0,106,
+    1,0,131,1,0,83,40,2,0,0,0,78,117,22,0,0,
+    0,60,109,111,100,117,108,101,32,39,123,125,39,32,40,102,
+    114,111,122,101,110,41,62,40,2,0,0,0,117,6,0,0,
+    0,102,111,114,109,97,116,117,8,0,0,0,95,95,110,97,
+    109,101,95,95,40,2,0,0,0,117,3,0,0,0,99,108,
+    115,117,1,0,0,0,109,40,0,0,0,0,40,0,0,0,
     0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
     112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,14,0,0,0,95,111,112,101,110,95,114,101,
-    103,105,115,116,114,121,242,2,0,0,115,8,0,0,0,0,
-    2,3,1,23,1,13,1,117,36,0,0,0,87,105,110,100,
-    111,119,115,82,101,103,105,115,116,114,121,70,105,110,100,101,
-    114,46,95,111,112,101,110,95,114,101,103,105,115,116,114,121,
-    99,2,0,0,0,0,0,0,0,6,0,0,0,16,0,0,
-    0,67,0,0,0,115,142,0,0,0,124,0,0,106,0,0,
-    114,21,0,124,0,0,106,1,0,125,2,0,110,9,0,124,
-    0,0,106,2,0,125,2,0,124,2,0,106,3,0,100,1,
-    0,124,1,0,100,2,0,116,4,0,106,5,0,100,0,0,
-    100,3,0,133,2,0,25,131,0,2,125,3,0,121,46,0,
-    124,0,0,106,6,0,124,3,0,131,1,0,143,25,0,125,
-    4,0,116,7,0,106,8,0,124,4,0,100,4,0,131,2,
-    0,125,5,0,87,100,0,0,81,88,87,110,22,0,4,116,
-    9,0,107,10,0,114,137,0,1,1,1,100,0,0,83,89,
-    110,1,0,88,124,5,0,83,40,5,0,0,0,78,117,8,
-    0,0,0,102,117,108,108,110,97,109,101,117,11,0,0,0,
-    115,121,115,95,118,101,114,115,105,111,110,105,3,0,0,0,
-    117,0,0,0,0,40,11,0,0,0,117,11,0,0,0,68,
-    69,66,85,71,95,66,85,73,76,68,117,18,0,0,0,82,
-    69,71,73,83,84,82,89,95,75,69,89,95,68,69,66,85,
-    71,117,12,0,0,0,82,69,71,73,83,84,82,89,95,75,
-    69,89,117,6,0,0,0,102,111,114,109,97,116,117,3,0,
-    0,0,115,121,115,117,7,0,0,0,118,101,114,115,105,111,
-    110,117,14,0,0,0,95,111,112,101,110,95,114,101,103,105,
-    115,116,114,121,117,7,0,0,0,95,119,105,110,114,101,103,
-    117,10,0,0,0,81,117,101,114,121,86,97,108,117,101,117,
-    12,0,0,0,87,105,110,100,111,119,115,69,114,114,111,114,
-    117,4,0,0,0,78,111,110,101,40,6,0,0,0,117,3,
-    0,0,0,99,108,115,117,8,0,0,0,102,117,108,108,110,
-    97,109,101,117,12,0,0,0,114,101,103,105,115,116,114,121,
-    95,107,101,121,117,3,0,0,0,107,101,121,117,4,0,0,
-    0,104,107,101,121,117,8,0,0,0,102,105,108,101,112,97,
-    116,104,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
-    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
-    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,16,
-    0,0,0,95,115,101,97,114,99,104,95,114,101,103,105,115,
-    116,114,121,249,2,0,0,115,22,0,0,0,0,2,9,1,
-    12,2,9,1,15,1,22,1,3,1,18,1,28,1,13,1,
-    9,1,117,38,0,0,0,87,105,110,100,111,119,115,82,101,
-    103,105,115,116,114,121,70,105,110,100,101,114,46,95,115,101,
-    97,114,99,104,95,114,101,103,105,115,116,114,121,99,3,0,
-    0,0,0,0,0,0,7,0,0,0,12,0,0,0,67,0,
-    0,0,115,140,0,0,0,124,0,0,106,0,0,124,1,0,
-    131,1,0,125,3,0,124,3,0,100,1,0,107,8,0,114,
-    31,0,100,1,0,83,121,17,0,116,2,0,106,3,0,124,
-    3,0,131,1,0,1,87,110,22,0,4,116,4,0,107,10,
-    0,114,72,0,1,1,1,100,1,0,83,89,110,1,0,88,
-    120,60,0,116,5,0,131,0,0,68,93,49,0,92,3,0,
-    125,4,0,125,5,0,125,6,0,124,3,0,106,6,0,116,
-    7,0,124,5,0,131,1,0,131,1,0,114,83,0,124,4,
-    0,124,1,0,124,3,0,131,2,0,83,113,83,0,87,100,
-    1,0,83,40,2,0,0,0,117,34,0,0,0,70,105,110,
-    100,32,109,111,100,117,108,101,32,110,97,109,101,100,32,105,
-    110,32,116,104,101,32,114,101,103,105,115,116,114,121,46,78,
-    40,8,0,0,0,117,16,0,0,0,95,115,101,97,114,99,
-    104,95,114,101,103,105,115,116,114,121,117,4,0,0,0,78,
-    111,110,101,117,3,0,0,0,95,111,115,117,4,0,0,0,
-    115,116,97,116,117,7,0,0,0,79,83,69,114,114,111,114,
-    117,27,0,0,0,95,103,101,116,95,115,117,112,112,111,114,
-    116,101,100,95,102,105,108,101,95,108,111,97,100,101,114,115,
-    117,8,0,0,0,101,110,100,115,119,105,116,104,117,5,0,
-    0,0,116,117,112,108,101,40,7,0,0,0,117,3,0,0,
+    97,112,62,117,11,0,0,0,109,111,100,117,108,101,95,114,
+    101,112,114,184,2,0,0,115,2,0,0,0,0,2,117,26,
+    0,0,0,70,114,111,122,101,110,73,109,112,111,114,116,101,
+    114,46,109,111,100,117,108,101,95,114,101,112,114,99,3,0,
+    0,0,0,0,0,0,3,0,0,0,2,0,0,0,67,0,
+    0,0,115,23,0,0,0,116,0,0,106,1,0,124,1,0,
+    131,1,0,114,19,0,124,0,0,83,100,1,0,83,40,2,
+    0,0,0,117,21,0,0,0,70,105,110,100,32,97,32,102,
+    114,111,122,101,110,32,109,111,100,117,108,101,46,78,40,3,
+    0,0,0,117,4,0,0,0,95,105,109,112,117,9,0,0,
+    0,105,115,95,102,114,111,122,101,110,117,4,0,0,0,78,
+    111,110,101,40,3,0,0,0,117,3,0,0,0,99,108,115,
+    117,8,0,0,0,102,117,108,108,110,97,109,101,117,4,0,
+    0,0,112,97,116,104,40,0,0,0,0,40,0,0,0,0,
+    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
+    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
+    112,62,117,11,0,0,0,102,105,110,100,95,109,111,100,117,
+    108,101,188,2,0,0,115,2,0,0,0,0,3,117,26,0,
+    0,0,70,114,111,122,101,110,73,109,112,111,114,116,101,114,
+    46,102,105,110,100,95,109,111,100,117,108,101,99,2,0,0,
+    0,0,0,0,0,4,0,0,0,9,0,0,0,67,0,0,
+    0,115,100,0,0,0,124,1,0,116,0,0,106,1,0,107,
+    6,0,125,2,0,121,32,0,116,2,0,116,3,0,106,4,
+    0,124,1,0,131,2,0,125,3,0,124,3,0,96,5,0,
+    124,3,0,83,87,110,46,0,1,1,1,124,2,0,12,114,
+    88,0,124,1,0,116,0,0,106,1,0,107,6,0,114,88,
+    0,116,0,0,106,1,0,124,1,0,61,110,0,0,130,0,
+    0,89,110,1,0,88,100,1,0,83,40,2,0,0,0,117,
+    21,0,0,0,76,111,97,100,32,97,32,102,114,111,122,101,
+    110,32,109,111,100,117,108,101,46,78,40,6,0,0,0,117,
+    3,0,0,0,115,121,115,117,7,0,0,0,109,111,100,117,
+    108,101,115,117,25,0,0,0,95,99,97,108,108,95,119,105,
+    116,104,95,102,114,97,109,101,115,95,114,101,109,111,118,101,
+    100,117,4,0,0,0,95,105,109,112,117,11,0,0,0,105,
+    110,105,116,95,102,114,111,122,101,110,117,8,0,0,0,95,
+    95,102,105,108,101,95,95,40,4,0,0,0,117,3,0,0,
     0,99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,
-    101,117,4,0,0,0,112,97,116,104,117,8,0,0,0,102,
-    105,108,101,112,97,116,104,117,6,0,0,0,108,111,97,100,
-    101,114,117,8,0,0,0,115,117,102,102,105,120,101,115,117,
-    1,0,0,0,95,40,0,0,0,0,40,0,0,0,0,117,
+    101,117,9,0,0,0,105,115,95,114,101,108,111,97,100,117,
+    1,0,0,0,109,40,0,0,0,0,40,0,0,0,0,117,
     29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
     114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
-    62,117,11,0,0,0,102,105,110,100,95,109,111,100,117,108,
-    101,8,3,0,0,115,20,0,0,0,0,3,15,1,12,1,
-    4,1,3,1,17,1,13,1,9,1,25,1,21,1,117,33,
-    0,0,0,87,105,110,100,111,119,115,82,101,103,105,115,116,
-    114,121,70,105,110,100,101,114,46,102,105,110,100,95,109,111,
-    100,117,108,101,78,70,40,13,0,0,0,117,8,0,0,0,
-    95,95,110,97,109,101,95,95,117,10,0,0,0,95,95,109,
-    111,100,117,108,101,95,95,117,12,0,0,0,95,95,113,117,
-    97,108,110,97,109,101,95,95,117,7,0,0,0,95,95,100,
-    111,99,95,95,117,12,0,0,0,82,69,71,73,83,84,82,
-    89,95,75,69,89,117,18,0,0,0,82,69,71,73,83,84,
-    82,89,95,75,69,89,95,68,69,66,85,71,117,5,0,0,
-    0,70,97,108,115,101,117,11,0,0,0,68,69,66,85,71,
-    95,66,85,73,76,68,117,11,0,0,0,99,108,97,115,115,
-    109,101,116,104,111,100,117,14,0,0,0,95,111,112,101,110,
-    95,114,101,103,105,115,116,114,121,117,16,0,0,0,95,115,
-    101,97,114,99,104,95,114,101,103,105,115,116,114,121,117,4,
-    0,0,0,78,111,110,101,117,11,0,0,0,102,105,110,100,
+    62,117,11,0,0,0,108,111,97,100,95,109,111,100,117,108,
+    101,193,2,0,0,115,18,0,0,0,0,6,15,1,3,1,
+    18,2,6,1,8,1,3,1,22,1,13,1,117,26,0,0,
+    0,70,114,111,122,101,110,73,109,112,111,114,116,101,114,46,
+    108,111,97,100,95,109,111,100,117,108,101,99,2,0,0,0,
+    0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,0,
+    115,13,0,0,0,116,0,0,106,1,0,124,1,0,131,1,
+    0,83,40,1,0,0,0,117,45,0,0,0,82,101,116,117,
+    114,110,32,116,104,101,32,99,111,100,101,32,111,98,106,101,
+    99,116,32,102,111,114,32,116,104,101,32,102,114,111,122,101,
+    110,32,109,111,100,117,108,101,46,40,2,0,0,0,117,4,
+    0,0,0,95,105,109,112,117,17,0,0,0,103,101,116,95,
+    102,114,111,122,101,110,95,111,98,106,101,99,116,40,2,0,
+    0,0,117,3,0,0,0,99,108,115,117,8,0,0,0,102,
+    117,108,108,110,97,109,101,40,0,0,0,0,40,0,0,0,
+    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
+    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
+    97,112,62,117,8,0,0,0,103,101,116,95,99,111,100,101,
+    210,2,0,0,115,2,0,0,0,0,4,117,23,0,0,0,
+    70,114,111,122,101,110,73,109,112,111,114,116,101,114,46,103,
+    101,116,95,99,111,100,101,99,2,0,0,0,0,0,0,0,
+    2,0,0,0,1,0,0,0,67,0,0,0,115,4,0,0,
+    0,100,1,0,83,40,2,0,0,0,117,54,0,0,0,82,
+    101,116,117,114,110,32,78,111,110,101,32,97,115,32,102,114,
+    111,122,101,110,32,109,111,100,117,108,101,115,32,100,111,32,
+    110,111,116,32,104,97,118,101,32,115,111,117,114,99,101,32,
+    99,111,100,101,46,78,40,1,0,0,0,117,4,0,0,0,
+    78,111,110,101,40,2,0,0,0,117,3,0,0,0,99,108,
+    115,117,8,0,0,0,102,117,108,108,110,97,109,101,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,10,0,0,0,103,
+    101,116,95,115,111,117,114,99,101,216,2,0,0,115,2,0,
+    0,0,0,4,117,25,0,0,0,70,114,111,122,101,110,73,
+    109,112,111,114,116,101,114,46,103,101,116,95,115,111,117,114,
+    99,101,99,2,0,0,0,0,0,0,0,2,0,0,0,2,
+    0,0,0,67,0,0,0,115,13,0,0,0,116,0,0,106,
+    1,0,124,1,0,131,1,0,83,40,1,0,0,0,117,46,
+    0,0,0,82,101,116,117,114,110,32,84,114,117,101,32,105,
+    102,32,116,104,101,32,102,114,111,122,101,110,32,109,111,100,
+    117,108,101,32,105,115,32,97,32,112,97,99,107,97,103,101,
+    46,40,2,0,0,0,117,4,0,0,0,95,105,109,112,117,
+    17,0,0,0,105,115,95,102,114,111,122,101,110,95,112,97,
+    99,107,97,103,101,40,2,0,0,0,117,3,0,0,0,99,
+    108,115,117,8,0,0,0,102,117,108,108,110,97,109,101,40,
+    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
+    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
+    95,98,111,111,116,115,116,114,97,112,62,117,10,0,0,0,
+    105,115,95,112,97,99,107,97,103,101,222,2,0,0,115,2,
+    0,0,0,0,4,117,25,0,0,0,70,114,111,122,101,110,
+    73,109,112,111,114,116,101,114,46,105,115,95,112,97,99,107,
+    97,103,101,78,40,15,0,0,0,117,8,0,0,0,95,95,
+    110,97,109,101,95,95,117,10,0,0,0,95,95,109,111,100,
+    117,108,101,95,95,117,12,0,0,0,95,95,113,117,97,108,
+    110,97,109,101,95,95,117,7,0,0,0,95,95,100,111,99,
+    95,95,117,11,0,0,0,99,108,97,115,115,109,101,116,104,
+    111,100,117,11,0,0,0,109,111,100,117,108,101,95,114,101,
+    112,114,117,4,0,0,0,78,111,110,101,117,11,0,0,0,
+    102,105,110,100,95,109,111,100,117,108,101,117,11,0,0,0,
+    115,101,116,95,112,97,99,107,97,103,101,117,10,0,0,0,
+    115,101,116,95,108,111,97,100,101,114,117,16,0,0,0,95,
+    114,101,113,117,105,114,101,115,95,102,114,111,122,101,110,117,
+    11,0,0,0,108,111,97,100,95,109,111,100,117,108,101,117,
+    8,0,0,0,103,101,116,95,99,111,100,101,117,10,0,0,
+    0,103,101,116,95,115,111,117,114,99,101,117,10,0,0,0,
+    105,115,95,112,97,99,107,97,103,101,40,1,0,0,0,117,
+    10,0,0,0,95,95,108,111,99,97,108,115,95,95,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,14,0,0,0,70,
+    114,111,122,101,110,73,109,112,111,114,116,101,114,175,2,0,
+    0,115,28,0,0,0,16,7,6,2,18,4,3,1,18,4,
+    3,1,3,1,3,1,27,14,3,1,21,5,3,1,21,5,
+    3,1,117,14,0,0,0,70,114,111,122,101,110,73,109,112,
+    111,114,116,101,114,99,1,0,0,0,0,0,0,0,1,0,
+    0,0,4,0,0,0,66,0,0,0,115,101,0,0,0,124,
+    0,0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,
+    1,0,90,3,0,100,2,0,90,4,0,100,3,0,90,5,
+    0,100,11,0,90,7,0,101,8,0,100,4,0,100,5,0,
+    132,0,0,131,1,0,90,9,0,101,8,0,100,6,0,100,
+    7,0,132,0,0,131,1,0,90,10,0,101,8,0,100,10,
+    0,100,8,0,100,9,0,132,1,0,131,1,0,90,12,0,
+    100,10,0,83,40,12,0,0,0,117,21,0,0,0,87,105,
+    110,100,111,119,115,82,101,103,105,115,116,114,121,70,105,110,
+    100,101,114,117,67,0,0,0,77,101,116,97,32,112,97,116,
+    104,32,102,105,110,100,101,114,32,102,111,114,32,109,111,100,
+    117,108,101,115,32,100,101,99,108,97,114,101,100,32,105,110,
+    32,116,104,101,32,87,105,110,100,111,119,115,32,114,101,103,
+    105,115,116,114,121,46,10,32,32,32,32,117,59,0,0,0,
+    83,111,102,116,119,97,114,101,92,80,121,116,104,111,110,92,
+    80,121,116,104,111,110,67,111,114,101,92,123,115,121,115,95,
+    118,101,114,115,105,111,110,125,92,77,111,100,117,108,101,115,
+    92,123,102,117,108,108,110,97,109,101,125,117,65,0,0,0,
+    83,111,102,116,119,97,114,101,92,80,121,116,104,111,110,92,
+    80,121,116,104,111,110,67,111,114,101,92,123,115,121,115,95,
+    118,101,114,115,105,111,110,125,92,77,111,100,117,108,101,115,
+    92,123,102,117,108,108,110,97,109,101,125,92,68,101,98,117,
+    103,99,2,0,0,0,0,0,0,0,2,0,0,0,11,0,
+    0,0,67,0,0,0,115,67,0,0,0,121,23,0,116,0,
+    0,106,1,0,116,0,0,106,2,0,124,1,0,131,2,0,
+    83,87,110,37,0,4,116,3,0,107,10,0,114,62,0,1,
+    1,1,116,0,0,106,1,0,116,0,0,106,4,0,124,1,
+    0,131,2,0,83,89,110,1,0,88,100,0,0,83,40,1,
+    0,0,0,78,40,5,0,0,0,117,7,0,0,0,95,119,
+    105,110,114,101,103,117,7,0,0,0,79,112,101,110,75,101,
+    121,117,17,0,0,0,72,75,69,89,95,67,85,82,82,69,
+    78,84,95,85,83,69,82,117,12,0,0,0,87,105,110,100,
+    111,119,115,69,114,114,111,114,117,18,0,0,0,72,75,69,
+    89,95,76,79,67,65,76,95,77,65,67,72,73,78,69,40,
+    2,0,0,0,117,3,0,0,0,99,108,115,117,3,0,0,
+    0,107,101,121,40,0,0,0,0,40,0,0,0,0,117,29,
+    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
+    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
+    117,14,0,0,0,95,111,112,101,110,95,114,101,103,105,115,
+    116,114,121,242,2,0,0,115,8,0,0,0,0,2,3,1,
+    23,1,13,1,117,36,0,0,0,87,105,110,100,111,119,115,
+    82,101,103,105,115,116,114,121,70,105,110,100,101,114,46,95,
+    111,112,101,110,95,114,101,103,105,115,116,114,121,99,2,0,
+    0,0,0,0,0,0,6,0,0,0,16,0,0,0,67,0,
+    0,0,115,142,0,0,0,124,0,0,106,0,0,114,21,0,
+    124,0,0,106,1,0,125,2,0,110,9,0,124,0,0,106,
+    2,0,125,2,0,124,2,0,106,3,0,100,1,0,124,1,
+    0,100,2,0,116,4,0,106,5,0,100,0,0,100,3,0,
+    133,2,0,25,131,0,2,125,3,0,121,46,0,124,0,0,
+    106,6,0,124,3,0,131,1,0,143,25,0,125,4,0,116,
+    7,0,106,8,0,124,4,0,100,4,0,131,2,0,125,5,
+    0,87,100,0,0,81,88,87,110,22,0,4,116,9,0,107,
+    10,0,114,137,0,1,1,1,100,0,0,83,89,110,1,0,
+    88,124,5,0,83,40,5,0,0,0,78,117,8,0,0,0,
+    102,117,108,108,110,97,109,101,117,11,0,0,0,115,121,115,
+    95,118,101,114,115,105,111,110,105,3,0,0,0,117,0,0,
+    0,0,40,11,0,0,0,117,11,0,0,0,68,69,66,85,
+    71,95,66,85,73,76,68,117,18,0,0,0,82,69,71,73,
+    83,84,82,89,95,75,69,89,95,68,69,66,85,71,117,12,
+    0,0,0,82,69,71,73,83,84,82,89,95,75,69,89,117,
+    6,0,0,0,102,111,114,109,97,116,117,3,0,0,0,115,
+    121,115,117,7,0,0,0,118,101,114,115,105,111,110,117,14,
+    0,0,0,95,111,112,101,110,95,114,101,103,105,115,116,114,
+    121,117,7,0,0,0,95,119,105,110,114,101,103,117,10,0,
+    0,0,81,117,101,114,121,86,97,108,117,101,117,12,0,0,
+    0,87,105,110,100,111,119,115,69,114,114,111,114,117,4,0,
+    0,0,78,111,110,101,40,6,0,0,0,117,3,0,0,0,
+    99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,101,
+    117,12,0,0,0,114,101,103,105,115,116,114,121,95,107,101,
+    121,117,3,0,0,0,107,101,121,117,4,0,0,0,104,107,
+    101,121,117,8,0,0,0,102,105,108,101,112,97,116,104,40,
+    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
+    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
+    95,98,111,111,116,115,116,114,97,112,62,117,16,0,0,0,
+    95,115,101,97,114,99,104,95,114,101,103,105,115,116,114,121,
+    249,2,0,0,115,22,0,0,0,0,2,9,1,12,2,9,
+    1,15,1,22,1,3,1,18,1,28,1,13,1,9,1,117,
+    38,0,0,0,87,105,110,100,111,119,115,82,101,103,105,115,
+    116,114,121,70,105,110,100,101,114,46,95,115,101,97,114,99,
+    104,95,114,101,103,105,115,116,114,121,99,3,0,0,0,0,
+    0,0,0,7,0,0,0,12,0,0,0,67,0,0,0,115,
+    140,0,0,0,124,0,0,106,0,0,124,1,0,131,1,0,
+    125,3,0,124,3,0,100,1,0,107,8,0,114,31,0,100,
+    1,0,83,121,17,0,116,2,0,106,3,0,124,3,0,131,
+    1,0,1,87,110,22,0,4,116,4,0,107,10,0,114,72,
+    0,1,1,1,100,1,0,83,89,110,1,0,88,120,60,0,
+    116,5,0,131,0,0,68,93,49,0,92,3,0,125,4,0,
+    125,5,0,125,6,0,124,3,0,106,6,0,116,7,0,124,
+    5,0,131,1,0,131,1,0,114,83,0,124,4,0,124,1,
+    0,124,3,0,131,2,0,83,113,83,0,87,100,1,0,83,
+    40,2,0,0,0,117,34,0,0,0,70,105,110,100,32,109,
+    111,100,117,108,101,32,110,97,109,101,100,32,105,110,32,116,
+    104,101,32,114,101,103,105,115,116,114,121,46,78,40,8,0,
+    0,0,117,16,0,0,0,95,115,101,97,114,99,104,95,114,
+    101,103,105,115,116,114,121,117,4,0,0,0,78,111,110,101,
+    117,3,0,0,0,95,111,115,117,4,0,0,0,115,116,97,
+    116,117,7,0,0,0,79,83,69,114,114,111,114,117,27,0,
+    0,0,95,103,101,116,95,115,117,112,112,111,114,116,101,100,
+    95,102,105,108,101,95,108,111,97,100,101,114,115,117,8,0,
+    0,0,101,110,100,115,119,105,116,104,117,5,0,0,0,116,
+    117,112,108,101,40,7,0,0,0,117,3,0,0,0,99,108,
+    115,117,8,0,0,0,102,117,108,108,110,97,109,101,117,4,
+    0,0,0,112,97,116,104,117,8,0,0,0,102,105,108,101,
+    112,97,116,104,117,6,0,0,0,108,111,97,100,101,114,117,
+    8,0,0,0,115,117,102,102,105,120,101,115,117,1,0,0,
+    0,95,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,
+    0,0,0,102,105,110,100,95,109,111,100,117,108,101,8,3,
+    0,0,115,20,0,0,0,0,3,15,1,12,1,4,1,3,
+    1,17,1,13,1,9,1,25,1,21,1,117,33,0,0,0,
+    87,105,110,100,111,119,115,82,101,103,105,115,116,114,121,70,
+    105,110,100,101,114,46,102,105,110,100,95,109,111,100,117,108,
+    101,78,70,40,13,0,0,0,117,8,0,0,0,95,95,110,
+    97,109,101,95,95,117,10,0,0,0,95,95,109,111,100,117,
+    108,101,95,95,117,12,0,0,0,95,95,113,117,97,108,110,
+    97,109,101,95,95,117,7,0,0,0,95,95,100,111,99,95,
+    95,117,12,0,0,0,82,69,71,73,83,84,82,89,95,75,
+    69,89,117,18,0,0,0,82,69,71,73,83,84,82,89,95,
+    75,69,89,95,68,69,66,85,71,117,5,0,0,0,70,97,
+    108,115,101,117,11,0,0,0,68,69,66,85,71,95,66,85,
+    73,76,68,117,11,0,0,0,99,108,97,115,115,109,101,116,
+    104,111,100,117,14,0,0,0,95,111,112,101,110,95,114,101,
+    103,105,115,116,114,121,117,16,0,0,0,95,115,101,97,114,
+    99,104,95,114,101,103,105,115,116,114,121,117,4,0,0,0,
+    78,111,110,101,117,11,0,0,0,102,105,110,100,95,109,111,
+    100,117,108,101,40,1,0,0,0,117,10,0,0,0,95,95,
+    108,111,99,97,108,115,95,95,40,0,0,0,0,40,0,0,
+    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
+    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
+    114,97,112,62,117,21,0,0,0,87,105,110,100,111,119,115,
+    82,101,103,105,115,116,114,121,70,105,110,100,101,114,229,2,
+    0,0,115,16,0,0,0,16,3,6,3,6,3,6,2,6,
+    2,18,7,18,15,3,1,117,21,0,0,0,87,105,110,100,
+    111,119,115,82,101,103,105,115,116,114,121,70,105,110,100,101,
+    114,99,1,0,0,0,0,0,0,0,1,0,0,0,5,0,
+    0,0,66,0,0,0,115,74,0,0,0,124,0,0,69,101,
+    0,0,90,1,0,100,0,0,90,2,0,100,1,0,90,3,
+    0,100,2,0,100,3,0,132,0,0,90,4,0,100,4,0,
+    100,5,0,132,0,0,90,5,0,101,6,0,100,6,0,100,
+    10,0,100,7,0,100,8,0,132,0,1,131,1,0,90,8,
+    0,100,9,0,83,40,11,0,0,0,117,13,0,0,0,95,
+    76,111,97,100,101,114,66,97,115,105,99,115,117,83,0,0,
+    0,66,97,115,101,32,99,108,97,115,115,32,111,102,32,99,
+    111,109,109,111,110,32,99,111,100,101,32,110,101,101,100,101,
+    100,32,98,121,32,98,111,116,104,32,83,111,117,114,99,101,
+    76,111,97,100,101,114,32,97,110,100,10,32,32,32,32,83,
+    111,117,114,99,101,108,101,115,115,70,105,108,101,76,111,97,
+    100,101,114,46,99,2,0,0,0,0,0,0,0,5,0,0,
+    0,3,0,0,0,67,0,0,0,115,88,0,0,0,116,0,
+    0,124,0,0,106,1,0,124,1,0,131,1,0,131,1,0,
+    100,1,0,25,125,2,0,124,2,0,106,2,0,100,2,0,
+    100,1,0,131,2,0,100,3,0,25,125,3,0,124,1,0,
+    106,3,0,100,2,0,131,1,0,100,4,0,25,125,4,0,
+    124,3,0,100,5,0,107,2,0,111,87,0,124,4,0,100,
+    5,0,107,3,0,83,40,6,0,0,0,117,141,0,0,0,
+    67,111,110,99,114,101,116,101,32,105,109,112,108,101,109,101,
+    110,116,97,116,105,111,110,32,111,102,32,73,110,115,112,101,
+    99,116,76,111,97,100,101,114,46,105,115,95,112,97,99,107,
+    97,103,101,32,98,121,32,99,104,101,99,107,105,110,103,32,
+    105,102,10,32,32,32,32,32,32,32,32,116,104,101,32,112,
+    97,116,104,32,114,101,116,117,114,110,101,100,32,98,121,32,
+    103,101,116,95,102,105,108,101,110,97,109,101,32,104,97,115,
+    32,97,32,102,105,108,101,110,97,109,101,32,111,102,32,39,
+    95,95,105,110,105,116,95,95,46,112,121,39,46,105,1,0,
+    0,0,117,1,0,0,0,46,105,0,0,0,0,105,2,0,
+    0,0,117,8,0,0,0,95,95,105,110,105,116,95,95,40,
+    4,0,0,0,117,11,0,0,0,95,112,97,116,104,95,115,
+    112,108,105,116,117,12,0,0,0,103,101,116,95,102,105,108,
+    101,110,97,109,101,117,6,0,0,0,114,115,112,108,105,116,
+    117,10,0,0,0,114,112,97,114,116,105,116,105,111,110,40,
+    5,0,0,0,117,4,0,0,0,115,101,108,102,117,8,0,
+    0,0,102,117,108,108,110,97,109,101,117,8,0,0,0,102,
+    105,108,101,110,97,109,101,117,13,0,0,0,102,105,108,101,
+    110,97,109,101,95,98,97,115,101,117,9,0,0,0,116,97,
+    105,108,95,110,97,109,101,40,0,0,0,0,40,0,0,0,
+    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
+    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
+    97,112,62,117,10,0,0,0,105,115,95,112,97,99,107,97,
+    103,101,28,3,0,0,115,8,0,0,0,0,3,25,1,22,
+    1,19,1,117,24,0,0,0,95,76,111,97,100,101,114,66,
+    97,115,105,99,115,46,105,115,95,112,97,99,107,97,103,101,
+    99,5,0,0,0,0,0,0,0,12,0,0,0,22,0,0,
+    0,67,0,0,0,115,198,1,0,0,124,2,0,100,1,0,
+    100,2,0,133,2,0,25,125,5,0,124,2,0,100,2,0,
+    100,3,0,133,2,0,25,125,6,0,124,2,0,100,3,0,
+    100,4,0,133,2,0,25,125,7,0,124,5,0,116,0,0,
+    107,3,0,114,105,0,100,5,0,106,1,0,124,1,0,124,
+    5,0,131,2,0,125,8,0,116,2,0,124,8,0,100,6,
+    0,124,1,0,100,7,0,124,3,0,131,1,2,130,1,0,
+    110,116,0,116,3,0,124,6,0,131,1,0,100,2,0,107,
+    3,0,114,163,0,100,8,0,106,1,0,124,1,0,131,1,
+    0,125,9,0,116,4,0,124,9,0,131,1,0,1,116,5,
+    0,124,9,0,131,1,0,130,1,0,110,58,0,116,3,0,
+    124,7,0,131,1,0,100,2,0,107,3,0,114,221,0,100,
+    9,0,106,1,0,124,1,0,131,1,0,125,9,0,116,4,
+    0,124,9,0,131,1,0,1,116,5,0,124,9,0,131,1,
+    0,130,1,0,110,0,0,124,4,0,100,1,0,107,9,0,
+    114,184,1,121,20,0,116,7,0,124,4,0,100,10,0,25,
+    131,1,0,125,10,0,87,110,18,0,4,116,8,0,107,10,
+    0,114,17,1,1,1,1,89,110,71,0,88,116,9,0,124,
+    6,0,131,1,0,124,10,0,107,3,0,114,88,1,100,11,
+    0,106,1,0,124,1,0,131,1,0,125,9,0,116,4,0,
+    124,9,0,131,1,0,1,116,2,0,124,9,0,100,6,0,
+    124,1,0,100,7,0,124,3,0,131,1,2,130,1,0,110,
+    0,0,121,18,0,124,4,0,100,12,0,25,100,13,0,64,
+    125,11,0,87,110,18,0,4,116,8,0,107,10,0,114,126,
+    1,1,1,1,89,113,184,1,88,116,9,0,124,7,0,131,
+    1,0,124,11,0,107,3,0,114,184,1,116,2,0,100,11,
+    0,106,1,0,124,1,0,131,1,0,100,6,0,124,1,0,
+    100,7,0,124,3,0,131,1,2,130,1,0,113,184,1,110,
+    0,0,124,2,0,100,4,0,100,1,0,133,2,0,25,83,
+    40,14,0,0,0,117,193,0,0,0,82,101,116,117,114,110,
+    32,116,104,101,32,109,97,114,115,104,97,108,108,101,100,32,
+    98,121,116,101,115,32,102,114,111,109,32,98,121,116,101,99,
+    111,100,101,44,32,118,101,114,105,102,121,105,110,103,32,116,
+    104,101,32,109,97,103,105,99,10,32,32,32,32,32,32,32,
+    32,110,117,109,98,101,114,44,32,116,105,109,101,115,116,97,
+    109,112,32,97,110,100,32,115,111,117,114,99,101,32,115,105,
+    122,101,32,97,108,111,110,103,32,116,104,101,32,119,97,121,
+    46,10,10,32,32,32,32,32,32,32,32,73,102,32,115,111,
+    117,114,99,101,95,115,116,97,116,115,32,105,115,32,78,111,
+    110,101,32,116,104,101,110,32,115,107,105,112,32,116,104,101,
+    32,116,105,109,101,115,116,97,109,112,32,99,104,101,99,107,
+    46,10,10,32,32,32,32,32,32,32,32,78,105,4,0,0,
+    0,105,8,0,0,0,105,12,0,0,0,117,30,0,0,0,
+    98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,
+    32,105,110,32,123,33,114,125,58,32,123,33,114,125,117,4,
+    0,0,0,110,97,109,101,117,4,0,0,0,112,97,116,104,
+    117,19,0,0,0,98,97,100,32,116,105,109,101,115,116,97,
+    109,112,32,105,110,32,123,125,117,14,0,0,0,98,97,100,
+    32,115,105,122,101,32,105,110,32,123,125,117,5,0,0,0,
+    109,116,105,109,101,117,24,0,0,0,98,121,116,101,99,111,
+    100,101,32,105,115,32,115,116,97,108,101,32,102,111,114,32,
+    123,125,117,4,0,0,0,115,105,122,101,108,3,0,0,0,
+    255,127,255,127,3,0,40,10,0,0,0,117,12,0,0,0,
+    95,77,65,71,73,67,95,66,89,84,69,83,117,6,0,0,
+    0,102,111,114,109,97,116,117,11,0,0,0,73,109,112,111,
+    114,116,69,114,114,111,114,117,3,0,0,0,108,101,110,117,
+    16,0,0,0,95,118,101,114,98,111,115,101,95,109,101,115,
+    115,97,103,101,117,8,0,0,0,69,79,70,69,114,114,111,
+    114,117,4,0,0,0,78,111,110,101,117,3,0,0,0,105,
+    110,116,117,8,0,0,0,75,101,121,69,114,114,111,114,117,
+    7,0,0,0,95,114,95,108,111,110,103,40,12,0,0,0,
+    117,4,0,0,0,115,101,108,102,117,8,0,0,0,102,117,
+    108,108,110,97,109,101,117,4,0,0,0,100,97,116,97,117,
+    13,0,0,0,98,121,116,101,99,111,100,101,95,112,97,116,
+    104,117,12,0,0,0,115,111,117,114,99,101,95,115,116,97,
+    116,115,117,5,0,0,0,109,97,103,105,99,117,13,0,0,
+    0,114,97,119,95,116,105,109,101,115,116,97,109,112,117,8,
+    0,0,0,114,97,119,95,115,105,122,101,117,3,0,0,0,
+    109,115,103,117,7,0,0,0,109,101,115,115,97,103,101,117,
+    12,0,0,0,115,111,117,114,99,101,95,109,116,105,109,101,
+    117,11,0,0,0,115,111,117,114,99,101,95,115,105,122,101,
+    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,20,0,0,
+    0,95,98,121,116,101,115,95,102,114,111,109,95,98,121,116,
+    101,99,111,100,101,36,3,0,0,115,66,0,0,0,0,7,
+    16,1,16,1,16,1,12,1,18,1,27,1,18,1,15,1,
+    10,1,15,1,18,1,15,1,10,1,15,1,12,1,3,1,
+    20,1,13,1,5,2,18,1,15,1,10,1,15,1,12,1,
+    3,1,18,1,13,1,5,2,18,1,3,1,15,1,21,3,
+    117,34,0,0,0,95,76,111,97,100,101,114,66,97,115,105,
+    99,115,46,95,98,121,116,101,115,95,102,114,111,109,95,98,
+    121,116,101,99,111,100,101,117,10,0,0,0,115,111,117,114,
+    99,101,108,101,115,115,99,2,0,0,0,1,0,0,0,5,
+    0,0,0,12,0,0,0,67,0,0,0,115,227,0,0,0,
+    124,1,0,106,0,0,125,3,0,124,0,0,106,1,0,124,
+    3,0,131,1,0,125,4,0,124,0,0,106,2,0,124,3,
+    0,131,1,0,124,1,0,95,3,0,124,2,0,115,106,0,
+    121,22,0,116,4,0,124,1,0,106,3,0,131,1,0,124,
+    1,0,95,5,0,87,113,118,0,4,116,6,0,107,10,0,
+    114,102,0,1,1,1,124,1,0,106,3,0,124,1,0,95,
+    5,0,89,113,118,0,88,110,12,0,124,1,0,106,3,0,
+    124,1,0,95,5,0,124,3,0,124,1,0,95,7,0,124,
+    0,0,106,8,0,124,3,0,131,1,0,114,170,0,116,9,
+    0,124,1,0,106,3,0,131,1,0,100,1,0,25,103,1,
+    0,124,1,0,95,10,0,110,25,0,124,1,0,106,7,0,
+    106,11,0,100,2,0,131,1,0,100,1,0,25,124,1,0,
+    95,7,0,124,0,0,124,1,0,95,12,0,116,13,0,116,
+    14,0,124,4,0,124,1,0,106,15,0,131,3,0,1,124,
+    1,0,83,40,3,0,0,0,117,82,0,0,0,72,101,108,
+    112,101,114,32,102,111,114,32,108,111,97,100,95,109,111,100,
+    117,108,101,32,97,98,108,101,32,116,111,32,104,97,110,100,
+    108,101,32,101,105,116,104,101,114,32,115,111,117,114,99,101,
+    32,111,114,32,115,111,117,114,99,101,108,101,115,115,10,32,
+    32,32,32,32,32,32,32,108,111,97,100,105,110,103,46,105,
+    0,0,0,0,117,1,0,0,0,46,40,16,0,0,0,117,
+    8,0,0,0,95,95,110,97,109,101,95,95,117,8,0,0,
+    0,103,101,116,95,99,111,100,101,117,12,0,0,0,103,101,
+    116,95,102,105,108,101,110,97,109,101,117,8,0,0,0,95,
+    95,102,105,108,101,95,95,117,17,0,0,0,99,97,99,104,
+    101,95,102,114,111,109,95,115,111,117,114,99,101,117,10,0,
+    0,0,95,95,99,97,99,104,101,100,95,95,117,19,0,0,
+    0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,
+    114,114,111,114,117,11,0,0,0,95,95,112,97,99,107,97,
+    103,101,95,95,117,10,0,0,0,105,115,95,112,97,99,107,
+    97,103,101,117,11,0,0,0,95,112,97,116,104,95,115,112,
+    108,105,116,117,8,0,0,0,95,95,112,97,116,104,95,95,
+    117,10,0,0,0,114,112,97,114,116,105,116,105,111,110,117,
+    10,0,0,0,95,95,108,111,97,100,101,114,95,95,117,25,
+    0,0,0,95,99,97,108,108,95,119,105,116,104,95,102,114,
+    97,109,101,115,95,114,101,109,111,118,101,100,117,4,0,0,
+    0,101,120,101,99,117,8,0,0,0,95,95,100,105,99,116,
+    95,95,40,5,0,0,0,117,4,0,0,0,115,101,108,102,
+    117,6,0,0,0,109,111,100,117,108,101,117,10,0,0,0,
+    115,111,117,114,99,101,108,101,115,115,117,4,0,0,0,110,
+    97,109,101,117,11,0,0,0,99,111,100,101,95,111,98,106,
+    101,99,116,40,0,0,0,0,40,0,0,0,0,117,29,0,
+    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
+    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
+    12,0,0,0,95,108,111,97,100,95,109,111,100,117,108,101,
+    81,3,0,0,115,32,0,0,0,0,4,9,1,15,1,18,
+    1,6,1,3,1,22,1,13,1,20,2,12,1,9,1,15,
+    1,28,2,25,1,9,1,19,1,117,26,0,0,0,95,76,
+    111,97,100,101,114,66,97,115,105,99,115,46,95,108,111,97,
+    100,95,109,111,100,117,108,101,78,70,40,9,0,0,0,117,
+    8,0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,
+    0,95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,
+    95,95,113,117,97,108,110,97,109,101,95,95,117,7,0,0,
+    0,95,95,100,111,99,95,95,117,10,0,0,0,105,115,95,
+    112,97,99,107,97,103,101,117,20,0,0,0,95,98,121,116,
+    101,115,95,102,114,111,109,95,98,121,116,101,99,111,100,101,
+    117,17,0,0,0,109,111,100,117,108,101,95,102,111,114,95,
+    108,111,97,100,101,114,117,5,0,0,0,70,97,108,115,101,
+    117,12,0,0,0,95,108,111,97,100,95,109,111,100,117,108,
+    101,40,1,0,0,0,117,10,0,0,0,95,95,108,111,99,
+    97,108,115,95,95,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,13,0,0,0,95,76,111,97,100,101,114,66,97,115,
+    105,99,115,23,3,0,0,115,10,0,0,0,16,3,6,2,
+    12,8,12,45,6,1,117,13,0,0,0,95,76,111,97,100,
+    101,114,66,97,115,105,99,115,99,1,0,0,0,0,0,0,
+    0,1,0,0,0,2,0,0,0,66,0,0,0,115,104,0,
+    0,0,124,0,0,69,101,0,0,90,1,0,100,0,0,90,
+    2,0,100,1,0,100,2,0,132,0,0,90,3,0,100,3,
+    0,100,4,0,132,0,0,90,4,0,100,5,0,100,6,0,
+    132,0,0,90,5,0,100,7,0,100,8,0,132,0,0,90,
+    6,0,100,9,0,100,10,0,132,0,0,90,7,0,100,11,
+    0,100,12,0,132,0,0,90,8,0,100,13,0,100,14,0,
+    132,0,0,90,9,0,100,15,0,83,40,16,0,0,0,117,
+    12,0,0,0,83,111,117,114,99,101,76,111,97,100,101,114,
+    99,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,
+    0,67,0,0,0,115,10,0,0,0,116,0,0,130,1,0,
+    100,1,0,83,40,2,0,0,0,117,121,0,0,0,79,112,
+    116,105,111,110,97,108,32,109,101,116,104,111,100,32,116,104,
+    97,116,32,114,101,116,117,114,110,115,32,116,104,101,32,109,
+    111,100,105,102,105,99,97,116,105,111,110,32,116,105,109,101,
+    32,40,97,110,32,105,110,116,41,32,102,111,114,32,116,104,
+    101,10,32,32,32,32,32,32,32,32,115,112,101,99,105,102,
+    105,101,100,32,112,97,116,104,44,32,119,104,101,114,101,32,
+    112,97,116,104,32,105,115,32,97,32,115,116,114,46,10,32,
+    32,32,32,32,32,32,32,78,40,1,0,0,0,117,19,0,
+    0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,
+    69,114,114,111,114,40,2,0,0,0,117,4,0,0,0,115,
+    101,108,102,117,4,0,0,0,112,97,116,104,40,0,0,0,
+    0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
+    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
+    111,116,115,116,114,97,112,62,117,10,0,0,0,112,97,116,
+    104,95,109,116,105,109,101,107,3,0,0,115,2,0,0,0,
+    0,4,117,23,0,0,0,83,111,117,114,99,101,76,111,97,
+    100,101,114,46,112,97,116,104,95,109,116,105,109,101,99,2,
+    0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,67,
+    0,0,0,115,20,0,0,0,105,1,0,124,0,0,106,0,
+    0,124,1,0,131,1,0,100,1,0,54,83,40,2,0,0,
+    0,117,114,1,0,0,79,112,116,105,111,110,97,108,32,109,
+    101,116,104,111,100,32,114,101,116,117,114,110,105,110,103,32,
+    97,32,109,101,116,97,100,97,116,97,32,100,105,99,116,32,
+    102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,101,
+    100,32,112,97,116,104,10,32,32,32,32,32,32,32,32,116,
+    111,32,98,121,32,116,104,101,32,112,97,116,104,32,40,115,
+    116,114,41,46,10,32,32,32,32,32,32,32,32,80,111,115,
+    115,105,98,108,101,32,107,101,121,115,58,10,32,32,32,32,
+    32,32,32,32,45,32,39,109,116,105,109,101,39,32,40,109,
+    97,110,100,97,116,111,114,121,41,32,105,115,32,116,104,101,
+    32,110,117,109,101,114,105,99,32,116,105,109,101,115,116,97,
+    109,112,32,111,102,32,108,97,115,116,32,115,111,117,114,99,
+    101,10,32,32,32,32,32,32,32,32,32,32,99,111,100,101,
+    32,109,111,100,105,102,105,99,97,116,105,111,110,59,10,32,
+    32,32,32,32,32,32,32,45,32,39,115,105,122,101,39,32,
+    40,111,112,116,105,111,110,97,108,41,32,105,115,32,116,104,
+    101,32,115,105,122,101,32,105,110,32,98,121,116,101,115,32,
+    111,102,32,116,104,101,32,115,111,117,114,99,101,32,99,111,
+    100,101,46,10,10,32,32,32,32,32,32,32,32,73,109,112,
+    108,101,109,101,110,116,105,110,103,32,116,104,105,115,32,109,
+    101,116,104,111,100,32,97,108,108,111,119,115,32,116,104,101,
+    32,108,111,97,100,101,114,32,116,111,32,114,101,97,100,32,
+    98,121,116,101,99,111,100,101,32,102,105,108,101,115,46,10,
+    32,32,32,32,32,32,32,32,117,5,0,0,0,109,116,105,
+    109,101,40,1,0,0,0,117,10,0,0,0,112,97,116,104,
+    95,109,116,105,109,101,40,2,0,0,0,117,4,0,0,0,
+    115,101,108,102,117,4,0,0,0,112,97,116,104,40,0,0,
+    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
+    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
+    111,111,116,115,116,114,97,112,62,117,10,0,0,0,112,97,
+    116,104,95,115,116,97,116,115,113,3,0,0,115,2,0,0,
+    0,0,10,117,23,0,0,0,83,111,117,114,99,101,76,111,
+    97,100,101,114,46,112,97,116,104,95,115,116,97,116,115,99,
+    4,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,
+    67,0,0,0,115,16,0,0,0,124,0,0,106,0,0,124,
+    2,0,124,3,0,131,2,0,83,40,1,0,0,0,117,228,
+    0,0,0,79,112,116,105,111,110,97,108,32,109,101,116,104,
+    111,100,32,119,104,105,99,104,32,119,114,105,116,101,115,32,
+    100,97,116,97,32,40,98,121,116,101,115,41,32,116,111,32,
+    97,32,102,105,108,101,32,112,97,116,104,32,40,97,32,115,
+    116,114,41,46,10,10,32,32,32,32,32,32,32,32,73,109,
+    112,108,101,109,101,110,116,105,110,103,32,116,104,105,115,32,
+    109,101,116,104,111,100,32,97,108,108,111,119,115,32,102,111,
+    114,32,116,104,101,32,119,114,105,116,105,110,103,32,111,102,
+    32,98,121,116,101,99,111,100,101,32,102,105,108,101,115,46,
+    10,10,32,32,32,32,32,32,32,32,84,104,101,32,115,111,
+    117,114,99,101,32,112,97,116,104,32,105,115,32,110,101,101,
+    100,101,100,32,105,110,32,111,114,100,101,114,32,116,111,32,
+    99,111,114,114,101,99,116,108,121,32,116,114,97,110,115,102,
+    101,114,32,112,101,114,109,105,115,115,105,111,110,115,10,32,
+    32,32,32,32,32,32,32,40,1,0,0,0,117,8,0,0,
+    0,115,101,116,95,100,97,116,97,40,4,0,0,0,117,4,
+    0,0,0,115,101,108,102,117,11,0,0,0,115,111,117,114,
+    99,101,95,112,97,116,104,117,10,0,0,0,99,97,99,104,
+    101,95,112,97,116,104,117,4,0,0,0,100,97,116,97,40,
+    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
+    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
+    95,98,111,111,116,115,116,114,97,112,62,117,15,0,0,0,
+    95,99,97,99,104,101,95,98,121,116,101,99,111,100,101,125,
+    3,0,0,115,2,0,0,0,0,8,117,28,0,0,0,83,
+    111,117,114,99,101,76,111,97,100,101,114,46,95,99,97,99,
+    104,101,95,98,121,116,101,99,111,100,101,99,3,0,0,0,
+    0,0,0,0,3,0,0,0,1,0,0,0,67,0,0,0,
+    115,10,0,0,0,116,0,0,130,1,0,100,1,0,83,40,
+    2,0,0,0,117,151,0,0,0,79,112,116,105,111,110,97,
+    108,32,109,101,116,104,111,100,32,119,104,105,99,104,32,119,
+    114,105,116,101,115,32,100,97,116,97,32,40,98,121,116,101,
+    115,41,32,116,111,32,97,32,102,105,108,101,32,112,97,116,
+    104,32,40,97,32,115,116,114,41,46,10,10,32,32,32,32,
+    32,32,32,32,73,109,112,108,101,109,101,110,116,105,110,103,
+    32,116,104,105,115,32,109,101,116,104,111,100,32,97,108,108,
+    111,119,115,32,102,111,114,32,116,104,101,32,119,114,105,116,
+    105,110,103,32,111,102,32,98,121,116,101,99,111,100,101,32,
+    102,105,108,101,115,46,10,10,32,32,32,32,32,32,32,32,
+    78,40,1,0,0,0,117,19,0,0,0,78,111,116,73,109,
+    112,108,101,109,101,110,116,101,100,69,114,114,111,114,40,3,
+    0,0,0,117,4,0,0,0,115,101,108,102,117,4,0,0,
+    0,112,97,116,104,117,4,0,0,0,100,97,116,97,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,8,0,0,0,115,
+    101,116,95,100,97,116,97,135,3,0,0,115,2,0,0,0,
+    0,6,117,21,0,0,0,83,111,117,114,99,101,76,111,97,
+    100,101,114,46,115,101,116,95,100,97,116,97,99,2,0,0,
+    0,0,0,0,0,9,0,0,0,44,0,0,0,67,0,0,
+    0,115,62,1,0,0,100,1,0,100,2,0,108,0,0,125,
+    2,0,124,0,0,106,1,0,124,1,0,131,1,0,125,3,
+    0,121,19,0,124,0,0,106,2,0,124,3,0,131,1,0,
+    125,4,0,87,110,58,0,4,116,3,0,107,10,0,114,106,
+    0,1,125,5,0,1,122,26,0,116,4,0,100,3,0,100,
+    4,0,124,1,0,131,1,1,124,5,0,130,2,0,87,89,
+    100,2,0,100,2,0,125,5,0,126,5,0,88,110,1,0,
+    88,116,5,0,106,6,0,124,4,0,131,1,0,106,7,0,
+    125,6,0,121,19,0,124,2,0,106,8,0,124,6,0,131,
+    1,0,125,7,0,87,110,58,0,4,116,9,0,107,10,0,
+    114,204,0,1,125,5,0,1,122,26,0,116,4,0,100,5,
+    0,100,4,0,124,1,0,131,1,1,124,5,0,130,2,0,
+    87,89,100,2,0,100,2,0,125,5,0,126,5,0,88,110,
+    1,0,88,116,5,0,106,10,0,100,2,0,100,7,0,131,
+    2,0,125,8,0,121,30,0,124,8,0,106,13,0,124,4,
+    0,106,13,0,124,7,0,100,1,0,25,131,1,0,131,1,
+    0,83,87,110,58,0,4,116,14,0,107,10,0,114,57,1,
+    1,125,5,0,1,122,26,0,116,4,0,100,6,0,100,4,
+    0,124,1,0,131,1,1,124,5,0,130,2,0,87,89,100,
+    2,0,100,2,0,125,5,0,126,5,0,88,110,1,0,88,
+    100,2,0,83,40,8,0,0,0,117,52,0,0,0,67,111,
+    110,99,114,101,116,101,32,105,109,112,108,101,109,101,110,116,
+    97,116,105,111,110,32,111,102,32,73,110,115,112,101,99,116,
+    76,111,97,100,101,114,46,103,101,116,95,115,111,117,114,99,
+    101,46,105,0,0,0,0,78,117,39,0,0,0,115,111,117,
+    114,99,101,32,110,111,116,32,97,118,97,105,108,97,98,108,
+    101,32,116,104,114,111,117,103,104,32,103,101,116,95,100,97,
+    116,97,40,41,117,4,0,0,0,110,97,109,101,117,25,0,
+    0,0,70,97,105,108,101,100,32,116,111,32,100,101,116,101,
+    99,116,32,101,110,99,111,100,105,110,103,117,28,0,0,0,
+    70,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,
+    32,115,111,117,114,99,101,32,102,105,108,101,84,40,15,0,
+    0,0,117,8,0,0,0,116,111,107,101,110,105,122,101,117,
+    12,0,0,0,103,101,116,95,102,105,108,101,110,97,109,101,
+    117,8,0,0,0,103,101,116,95,100,97,116,97,117,7,0,
+    0,0,73,79,69,114,114,111,114,117,11,0,0,0,73,109,
+    112,111,114,116,69,114,114,111,114,117,3,0,0,0,95,105,
+    111,117,7,0,0,0,66,121,116,101,115,73,79,117,8,0,
+    0,0,114,101,97,100,108,105,110,101,117,15,0,0,0,100,
+    101,116,101,99,116,95,101,110,99,111,100,105,110,103,117,11,
+    0,0,0,83,121,110,116,97,120,69,114,114,111,114,117,25,
+    0,0,0,73,110,99,114,101,109,101,110,116,97,108,78,101,
+    119,108,105,110,101,68,101,99,111,100,101,114,117,4,0,0,
+    0,78,111,110,101,117,4,0,0,0,84,114,117,101,117,6,
+    0,0,0,100,101,99,111,100,101,117,18,0,0,0,85,110,
+    105,99,111,100,101,68,101,99,111,100,101,69,114,114,111,114,
+    40,9,0,0,0,117,4,0,0,0,115,101,108,102,117,8,
+    0,0,0,102,117,108,108,110,97,109,101,117,8,0,0,0,
+    116,111,107,101,110,105,122,101,117,4,0,0,0,112,97,116,
+    104,117,12,0,0,0,115,111,117,114,99,101,95,98,121,116,
+    101,115,117,3,0,0,0,101,120,99,117,10,0,0,0,114,
+    101,97,100,115,111,117,114,99,101,117,8,0,0,0,101,110,
+    99,111,100,105,110,103,117,15,0,0,0,110,101,119,108,105,
+    110,101,95,100,101,99,111,100,101,114,40,0,0,0,0,40,
+    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
+    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
+    115,116,114,97,112,62,117,10,0,0,0,103,101,116,95,115,
+    111,117,114,99,101,144,3,0,0,115,38,0,0,0,0,2,
+    12,1,15,1,3,1,19,1,18,1,9,1,31,1,18,1,
+    3,1,19,1,18,1,9,1,31,1,18,1,3,1,30,1,
+    18,1,9,1,117,23,0,0,0,83,111,117,114,99,101,76,
+    111,97,100,101,114,46,103,101,116,95,115,111,117,114,99,101,
+    99,2,0,0,0,0,0,0,0,12,0,0,0,45,0,0,
+    0,67,0,0,0,115,52,2,0,0,124,0,0,106,0,0,
+    124,1,0,131,1,0,125,2,0,100,10,0,125,3,0,121,
+    16,0,116,2,0,124,2,0,131,1,0,125,4,0,87,110,
+    24,0,4,116,3,0,107,10,0,114,63,0,1,1,1,100,
+    10,0,125,4,0,89,110,14,1,88,121,19,0,124,0,0,
+    106,4,0,124,2,0,131,1,0,125,5,0,87,110,18,0,
+    4,116,3,0,107,10,0,114,103,0,1,1,1,89,110,230,
+    0,88,116,5,0,124,5,0,100,1,0,25,131,1,0,125,
+    3,0,121,19,0,124,0,0,106,6,0,124,4,0,131,1,
+    0,125,6,0,87,110,18,0,4,116,7,0,107,10,0,114,
+    159,0,1,1,1,89,110,174,0,88,121,28,0,124,0,0,
+    106,8,0,124,1,0,124,6,0,124,4,0,124,5,0,131,
+    4,0,125,7,0,87,110,24,0,4,116,9,0,116,10,0,
+    102,2,0,107,10,0,114,214,0,1,1,1,89,110,119,0,
+    88,116,11,0,100,2,0,124,4,0,124,2,0,131,3,0,
+    1,116,12,0,106,13,0,124,7,0,131,1,0,125,8,0,
+    116,14,0,124,8,0,116,15,0,131,2,0,114,38,1,116,
+    16,0,106,17,0,124,8,0,124,2,0,131,2,0,1,116,
+    11,0,100,3,0,124,4,0,131,2,0,1,124,8,0,83,
+    100,4,0,125,9,0,116,9,0,124,9,0,106,18,0,124,
+    4,0,131,1,0,100,5,0,124,1,0,100,6,0,124,4,
+    0,131,1,2,130,1,0,124,0,0,106,6,0,124,2,0,
+    131,1,0,125,10,0,116,19,0,116,20,0,124,10,0,124,
+    2,0,100,7,0,100,8,0,100,11,0,131,4,1,125,11,
+    0,116,11,0,100,3,0,124,2,0,131,2,0,1,116,22,
+    0,106,23,0,12,114,48,2,124,4,0,100,10,0,107,9,
+    0,114,48,2,124,3,0,100,10,0,107,9,0,114,48,2,
+    116,24,0,116,25,0,131,1,0,125,6,0,124,6,0,106,
+    26,0,116,27,0,124,3,0,131,1,0,131,1,0,1,124,
+    6,0,106,26,0,116,27,0,116,28,0,124,10,0,131,1,
+    0,131,1,0,131,1,0,1,124,6,0,106,26,0,116,12,
+    0,106,29,0,124,11,0,131,1,0,131,1,0,1,121,36,
+    0,124,0,0,106,30,0,124,2,0,124,4,0,124,6,0,
+    131,3,0,1,116,11,0,100,9,0,124,4,0,131,2,0,
+    1,87,113,48,2,4,116,3,0,107,10,0,114,44,2,1,
+    1,1,89,113,48,2,88,110,0,0,124,11,0,83,40,12,
+    0,0,0,117,190,0,0,0,67,111,110,99,114,101,116,101,
+    32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,
+    111,102,32,73,110,115,112,101,99,116,76,111,97,100,101,114,
+    46,103,101,116,95,99,111,100,101,46,10,10,32,32,32,32,
+    32,32,32,32,82,101,97,100,105,110,103,32,111,102,32,98,
+    121,116,101,99,111,100,101,32,114,101,113,117,105,114,101,115,
+    32,112,97,116,104,95,115,116,97,116,115,32,116,111,32,98,
+    101,32,105,109,112,108,101,109,101,110,116,101,100,46,32,84,
+    111,32,119,114,105,116,101,10,32,32,32,32,32,32,32,32,
+    98,121,116,101,99,111,100,101,44,32,115,101,116,95,100,97,
+    116,97,32,109,117,115,116,32,97,108,115,111,32,98,101,32,
+    105,109,112,108,101,109,101,110,116,101,100,46,10,10,32,32,
+    32,32,32,32,32,32,117,5,0,0,0,109,116,105,109,101,
+    117,13,0,0,0,123,125,32,109,97,116,99,104,101,115,32,
+    123,125,117,19,0,0,0,99,111,100,101,32,111,98,106,101,
+    99,116,32,102,114,111,109,32,123,125,117,21,0,0,0,78,
+    111,110,45,99,111,100,101,32,111,98,106,101,99,116,32,105,
+    110,32,123,125,117,4,0,0,0,110,97,109,101,117,4,0,
+    0,0,112,97,116,104,117,4,0,0,0,101,120,101,99,117,
+    12,0,0,0,100,111,110,116,95,105,110,104,101,114,105,116,
+    117,10,0,0,0,119,114,111,116,101,32,123,33,114,125,78,
+    84,40,31,0,0,0,117,12,0,0,0,103,101,116,95,102,
+    105,108,101,110,97,109,101,117,4,0,0,0,78,111,110,101,
+    117,17,0,0,0,99,97,99,104,101,95,102,114,111,109,95,
+    115,111,117,114,99,101,117,19,0,0,0,78,111,116,73,109,
+    112,108,101,109,101,110,116,101,100,69,114,114,111,114,117,10,
+    0,0,0,112,97,116,104,95,115,116,97,116,115,117,3,0,
+    0,0,105,110,116,117,8,0,0,0,103,101,116,95,100,97,
+    116,97,117,7,0,0,0,73,79,69,114,114,111,114,117,20,
+    0,0,0,95,98,121,116,101,115,95,102,114,111,109,95,98,
+    121,116,101,99,111,100,101,117,11,0,0,0,73,109,112,111,
+    114,116,69,114,114,111,114,117,8,0,0,0,69,79,70,69,
+    114,114,111,114,117,16,0,0,0,95,118,101,114,98,111,115,
+    101,95,109,101,115,115,97,103,101,117,7,0,0,0,109,97,
+    114,115,104,97,108,117,5,0,0,0,108,111,97,100,115,117,
+    10,0,0,0,105,115,105,110,115,116,97,110,99,101,117,10,
+    0,0,0,95,99,111,100,101,95,116,121,112,101,117,4,0,
+    0,0,95,105,109,112,117,16,0,0,0,95,102,105,120,95,
+    99,111,95,102,105,108,101,110,97,109,101,117,6,0,0,0,
+    102,111,114,109,97,116,117,25,0,0,0,95,99,97,108,108,
+    95,119,105,116,104,95,102,114,97,109,101,115,95,114,101,109,
+    111,118,101,100,117,7,0,0,0,99,111,109,112,105,108,101,
+    117,4,0,0,0,84,114,117,101,117,3,0,0,0,115,121,
+    115,117,19,0,0,0,100,111,110,116,95,119,114,105,116,101,
+    95,98,121,116,101,99,111,100,101,117,9,0,0,0,98,121,
+    116,101,97,114,114,97,121,117,12,0,0,0,95,77,65,71,
+    73,67,95,66,89,84,69,83,117,6,0,0,0,101,120,116,
+    101,110,100,117,7,0,0,0,95,119,95,108,111,110,103,117,
+    3,0,0,0,108,101,110,117,5,0,0,0,100,117,109,112,
+    115,117,15,0,0,0,95,99,97,99,104,101,95,98,121,116,
+    101,99,111,100,101,40,12,0,0,0,117,4,0,0,0,115,
+    101,108,102,117,8,0,0,0,102,117,108,108,110,97,109,101,
+    117,11,0,0,0,115,111,117,114,99,101,95,112,97,116,104,
+    117,12,0,0,0,115,111,117,114,99,101,95,109,116,105,109,
+    101,117,13,0,0,0,98,121,116,101,99,111,100,101,95,112,
+    97,116,104,117,2,0,0,0,115,116,117,4,0,0,0,100,
+    97,116,97,117,10,0,0,0,98,121,116,101,115,95,100,97,
+    116,97,117,5,0,0,0,102,111,117,110,100,117,3,0,0,
+    0,109,115,103,117,12,0,0,0,115,111,117,114,99,101,95,
+    98,121,116,101,115,117,11,0,0,0,99,111,100,101,95,111,
+    98,106,101,99,116,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,8,0,0,0,103,101,116,95,99,111,100,101,166,3,
+    0,0,115,98,0,0,0,0,7,15,1,6,1,3,1,16,
+    1,13,1,11,2,3,1,19,1,13,1,5,2,16,1,3,
+    1,19,1,13,1,5,2,3,1,12,1,3,1,13,1,19,
+    1,5,2,9,1,7,1,15,1,15,1,16,1,6,1,7,
+    1,4,2,6,1,18,1,15,1,15,1,6,1,12,1,9,
+    1,13,1,22,1,12,1,12,1,19,1,25,1,22,1,3,
+    1,19,1,17,1,13,1,8,1,117,21,0,0,0,83,111,
+    117,114,99,101,76,111,97,100,101,114,46,103,101,116,95,99,
+    111,100,101,99,2,0,0,0,0,0,0,0,2,0,0,0,
+    2,0,0,0,67,0,0,0,115,13,0,0,0,124,0,0,
+    106,0,0,124,1,0,131,1,0,83,40,1,0,0,0,117,
+    0,1,0,0,67,111,110,99,114,101,116,101,32,105,109,112,
+    108,101,109,101,110,116,97,116,105,111,110,32,111,102,32,76,
+    111,97,100,101,114,46,108,111,97,100,95,109,111,100,117,108,
+    101,46,10,10,32,32,32,32,32,32,32,32,82,101,113,117,
+    105,114,101,115,32,69,120,101,99,117,116,105,111,110,76,111,
+    97,100,101,114,46,103,101,116,95,102,105,108,101,110,97,109,
+    101,32,97,110,100,32,82,101,115,111,117,114,99,101,76,111,
+    97,100,101,114,46,103,101,116,95,100,97,116,97,32,116,111,
+    32,98,101,10,32,32,32,32,32,32,32,32,105,109,112,108,
+    101,109,101,110,116,101,100,32,116,111,32,108,111,97,100,32,
+    115,111,117,114,99,101,32,99,111,100,101,46,32,85,115,101,
+    32,111,102,32,98,121,116,101,99,111,100,101,32,105,115,32,
+    100,105,99,116,97,116,101,100,32,98,121,32,119,104,101,116,
+    104,101,114,10,32,32,32,32,32,32,32,32,103,101,116,95,
+    99,111,100,101,32,117,115,101,115,47,119,114,105,116,101,115,
+    32,98,121,116,101,99,111,100,101,46,10,10,32,32,32,32,
+    32,32,32,32,40,1,0,0,0,117,12,0,0,0,95,108,
+    111,97,100,95,109,111,100,117,108,101,40,2,0,0,0,117,
+    4,0,0,0,115,101,108,102,117,8,0,0,0,102,117,108,
+    108,110,97,109,101,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,11,0,0,0,108,111,97,100,95,109,111,100,117,108,
+    101,228,3,0,0,115,2,0,0,0,0,8,117,24,0,0,
+    0,83,111,117,114,99,101,76,111,97,100,101,114,46,108,111,
+    97,100,95,109,111,100,117,108,101,78,40,10,0,0,0,117,
+    8,0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,
+    0,95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,
+    95,95,113,117,97,108,110,97,109,101,95,95,117,10,0,0,
+    0,112,97,116,104,95,109,116,105,109,101,117,10,0,0,0,
+    112,97,116,104,95,115,116,97,116,115,117,15,0,0,0,95,
+    99,97,99,104,101,95,98,121,116,101,99,111,100,101,117,8,
+    0,0,0,115,101,116,95,100,97,116,97,117,10,0,0,0,
+    103,101,116,95,115,111,117,114,99,101,117,8,0,0,0,103,
+    101,116,95,99,111,100,101,117,11,0,0,0,108,111,97,100,
     95,109,111,100,117,108,101,40,1,0,0,0,117,10,0,0,
     0,95,95,108,111,99,97,108,115,95,95,40,0,0,0,0,
     40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
     110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
-    116,115,116,114,97,112,62,117,21,0,0,0,87,105,110,100,
-    111,119,115,82,101,103,105,115,116,114,121,70,105,110,100,101,
-    114,229,2,0,0,115,16,0,0,0,16,3,6,3,6,3,
-    6,2,6,2,18,7,18,15,3,1,117,21,0,0,0,87,
-    105,110,100,111,119,115,82,101,103,105,115,116,114,121,70,105,
-    110,100,101,114,99,1,0,0,0,0,0,0,0,1,0,0,
-    0,5,0,0,0,66,0,0,0,115,74,0,0,0,124,0,
-    0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,1,
-    0,90,3,0,100,2,0,100,3,0,132,0,0,90,4,0,
-    100,4,0,100,5,0,132,0,0,90,5,0,101,6,0,100,
-    6,0,100,10,0,100,7,0,100,8,0,132,0,1,131,1,
-    0,90,8,0,100,9,0,83,40,11,0,0,0,117,13,0,
-    0,0,95,76,111,97,100,101,114,66,97,115,105,99,115,117,
-    83,0,0,0,66,97,115,101,32,99,108,97,115,115,32,111,
-    102,32,99,111,109,109,111,110,32,99,111,100,101,32,110,101,
-    101,100,101,100,32,98,121,32,98,111,116,104,32,83,111,117,
-    114,99,101,76,111,97,100,101,114,32,97,110,100,10,32,32,
-    32,32,83,111,117,114,99,101,108,101,115,115,70,105,108,101,
-    76,111,97,100,101,114,46,99,2,0,0,0,0,0,0,0,
-    5,0,0,0,3,0,0,0,67,0,0,0,115,88,0,0,
-    0,116,0,0,124,0,0,106,1,0,124,1,0,131,1,0,
-    131,1,0,100,1,0,25,125,2,0,124,2,0,106,2,0,
-    100,2,0,100,1,0,131,2,0,100,3,0,25,125,3,0,
-    124,1,0,106,3,0,100,2,0,131,1,0,100,4,0,25,
-    125,4,0,124,3,0,100,5,0,107,2,0,111,87,0,124,
-    4,0,100,5,0,107,3,0,83,40,6,0,0,0,117,141,
-    0,0,0,67,111,110,99,114,101,116,101,32,105,109,112,108,
-    101,109,101,110,116,97,116,105,111,110,32,111,102,32,73,110,
-    115,112,101,99,116,76,111,97,100,101,114,46,105,115,95,112,
-    97,99,107,97,103,101,32,98,121,32,99,104,101,99,107,105,
-    110,103,32,105,102,10,32,32,32,32,32,32,32,32,116,104,
-    101,32,112,97,116,104,32,114,101,116,117,114,110,101,100,32,
-    98,121,32,103,101,116,95,102,105,108,101,110,97,109,101,32,
-    104,97,115,32,97,32,102,105,108,101,110,97,109,101,32,111,
-    102,32,39,95,95,105,110,105,116,95,95,46,112,121,39,46,
-    105,1,0,0,0,117,1,0,0,0,46,105,0,0,0,0,
-    105,2,0,0,0,117,8,0,0,0,95,95,105,110,105,116,
-    95,95,40,4,0,0,0,117,11,0,0,0,95,112,97,116,
-    104,95,115,112,108,105,116,117,12,0,0,0,103,101,116,95,
-    102,105,108,101,110,97,109,101,117,6,0,0,0,114,115,112,
-    108,105,116,117,10,0,0,0,114,112,97,114,116,105,116,105,
-    111,110,40,5,0,0,0,117,4,0,0,0,115,101,108,102,
-    117,8,0,0,0,102,117,108,108,110,97,109,101,117,8,0,
-    0,0,102,105,108,101,110,97,109,101,117,13,0,0,0,102,
-    105,108,101,110,97,109,101,95,98,97,115,101,117,9,0,0,
-    0,116,97,105,108,95,110,97,109,101,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,10,0,0,0,105,115,95,112,97,
-    99,107,97,103,101,28,3,0,0,115,8,0,0,0,0,3,
-    25,1,22,1,19,1,117,24,0,0,0,95,76,111,97,100,
-    101,114,66,97,115,105,99,115,46,105,115,95,112,97,99,107,
-    97,103,101,99,5,0,0,0,0,0,0,0,12,0,0,0,
-    22,0,0,0,67,0,0,0,115,198,1,0,0,124,2,0,
-    100,1,0,100,2,0,133,2,0,25,125,5,0,124,2,0,
-    100,2,0,100,3,0,133,2,0,25,125,6,0,124,2,0,
-    100,3,0,100,4,0,133,2,0,25,125,7,0,124,5,0,
-    116,0,0,107,3,0,114,105,0,100,5,0,106,1,0,124,
-    1,0,124,5,0,131,2,0,125,8,0,116,2,0,124,8,
-    0,100,6,0,124,1,0,100,7,0,124,3,0,131,1,2,
-    130,1,0,110,116,0,116,3,0,124,6,0,131,1,0,100,
-    2,0,107,3,0,114,163,0,100,8,0,106,1,0,124,1,
-    0,131,1,0,125,9,0,116,4,0,124,9,0,131,1,0,
-    1,116,5,0,124,9,0,131,1,0,130,1,0,110,58,0,
-    116,3,0,124,7,0,131,1,0,100,2,0,107,3,0,114,
-    221,0,100,9,0,106,1,0,124,1,0,131,1,0,125,9,
-    0,116,4,0,124,9,0,131,1,0,1,116,5,0,124,9,
-    0,131,1,0,130,1,0,110,0,0,124,4,0,100,1,0,
-    107,9,0,114,184,1,121,20,0,116,7,0,124,4,0,100,
-    10,0,25,131,1,0,125,10,0,87,110,18,0,4,116,8,
-    0,107,10,0,114,17,1,1,1,1,89,110,71,0,88,116,
-    9,0,124,6,0,131,1,0,124,10,0,107,3,0,114,88,
-    1,100,11,0,106,1,0,124,1,0,131,1,0,125,9,0,
-    116,4,0,124,9,0,131,1,0,1,116,2,0,124,9,0,
-    100,6,0,124,1,0,100,7,0,124,3,0,131,1,2,130,
-    1,0,110,0,0,121,18,0,124,4,0,100,12,0,25,100,
-    13,0,64,125,11,0,87,110,18,0,4,116,8,0,107,10,
-    0,114,126,1,1,1,1,89,113,184,1,88,116,9,0,124,
-    7,0,131,1,0,124,11,0,107,3,0,114,184,1,116,2,
-    0,100,11,0,106,1,0,124,1,0,131,1,0,100,6,0,
-    124,1,0,100,7,0,124,3,0,131,1,2,130,1,0,113,
-    184,1,110,0,0,124,2,0,100,4,0,100,1,0,133,2,
-    0,25,83,40,14,0,0,0,117,193,0,0,0,82,101,116,
-    117,114,110,32,116,104,101,32,109,97,114,115,104,97,108,108,
-    101,100,32,98,121,116,101,115,32,102,114,111,109,32,98,121,
-    116,101,99,111,100,101,44,32,118,101,114,105,102,121,105,110,
-    103,32,116,104,101,32,109,97,103,105,99,10,32,32,32,32,
-    32,32,32,32,110,117,109,98,101,114,44,32,116,105,109,101,
-    115,116,97,109,112,32,97,110,100,32,115,111,117,114,99,101,
-    32,115,105,122,101,32,97,108,111,110,103,32,116,104,101,32,
-    119,97,121,46,10,10,32,32,32,32,32,32,32,32,73,102,
-    32,115,111,117,114,99,101,95,115,116,97,116,115,32,105,115,
-    32,78,111,110,101,32,116,104,101,110,32,115,107,105,112,32,
-    116,104,101,32,116,105,109,101,115,116,97,109,112,32,99,104,
-    101,99,107,46,10,10,32,32,32,32,32,32,32,32,78,105,
-    4,0,0,0,105,8,0,0,0,105,12,0,0,0,117,30,
-    0,0,0,98,97,100,32,109,97,103,105,99,32,110,117,109,
-    98,101,114,32,105,110,32,123,33,114,125,58,32,123,33,114,
-    125,117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,
-    97,116,104,117,19,0,0,0,98,97,100,32,116,105,109,101,
-    115,116,97,109,112,32,105,110,32,123,125,117,14,0,0,0,
-    98,97,100,32,115,105,122,101,32,105,110,32,123,125,117,5,
-    0,0,0,109,116,105,109,101,117,24,0,0,0,98,121,116,
-    101,99,111,100,101,32,105,115,32,115,116,97,108,101,32,102,
-    111,114,32,123,125,117,4,0,0,0,115,105,122,101,108,3,
-    0,0,0,255,127,255,127,3,0,40,10,0,0,0,117,12,
-    0,0,0,95,77,65,71,73,67,95,66,89,84,69,83,117,
-    6,0,0,0,102,111,114,109,97,116,117,11,0,0,0,73,
-    109,112,111,114,116,69,114,114,111,114,117,3,0,0,0,108,
-    101,110,117,16,0,0,0,95,118,101,114,98,111,115,101,95,
-    109,101,115,115,97,103,101,117,8,0,0,0,69,79,70,69,
-    114,114,111,114,117,4,0,0,0,78,111,110,101,117,3,0,
-    0,0,105,110,116,117,8,0,0,0,75,101,121,69,114,114,
-    111,114,117,7,0,0,0,95,114,95,108,111,110,103,40,12,
-    0,0,0,117,4,0,0,0,115,101,108,102,117,8,0,0,
-    0,102,117,108,108,110,97,109,101,117,4,0,0,0,100,97,
-    116,97,117,13,0,0,0,98,121,116,101,99,111,100,101,95,
-    112,97,116,104,117,12,0,0,0,115,111,117,114,99,101,95,
-    115,116,97,116,115,117,5,0,0,0,109,97,103,105,99,117,
-    13,0,0,0,114,97,119,95,116,105,109,101,115,116,97,109,
-    112,117,8,0,0,0,114,97,119,95,115,105,122,101,117,3,
-    0,0,0,109,115,103,117,7,0,0,0,109,101,115,115,97,
-    103,101,117,12,0,0,0,115,111,117,114,99,101,95,109,116,
-    105,109,101,117,11,0,0,0,115,111,117,114,99,101,95,115,
-    105,122,101,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    20,0,0,0,95,98,121,116,101,115,95,102,114,111,109,95,
-    98,121,116,101,99,111,100,101,36,3,0,0,115,66,0,0,
-    0,0,7,16,1,16,1,16,1,12,1,18,1,27,1,18,
-    1,15,1,10,1,15,1,18,1,15,1,10,1,15,1,12,
-    1,3,1,20,1,13,1,5,2,18,1,15,1,10,1,15,
-    1,12,1,3,1,18,1,13,1,5,2,18,1,3,1,15,
-    1,21,3,117,34,0,0,0,95,76,111,97,100,101,114,66,
-    97,115,105,99,115,46,95,98,121,116,101,115,95,102,114,111,
-    109,95,98,121,116,101,99,111,100,101,117,10,0,0,0,115,
-    111,117,114,99,101,108,101,115,115,99,2,0,0,0,1,0,
-    0,0,5,0,0,0,12,0,0,0,67,0,0,0,115,227,
-    0,0,0,124,1,0,106,0,0,125,3,0,124,0,0,106,
-    1,0,124,3,0,131,1,0,125,4,0,124,0,0,106,2,
-    0,124,3,0,131,1,0,124,1,0,95,3,0,124,2,0,
-    115,106,0,121,22,0,116,4,0,124,1,0,106,3,0,131,
-    1,0,124,1,0,95,5,0,87,113,118,0,4,116,6,0,
-    107,10,0,114,102,0,1,1,1,124,1,0,106,3,0,124,
-    1,0,95,5,0,89,113,118,0,88,110,12,0,124,1,0,
-    106,3,0,124,1,0,95,5,0,124,3,0,124,1,0,95,
-    7,0,124,0,0,106,8,0,124,3,0,131,1,0,114,170,
-    0,116,9,0,124,1,0,106,3,0,131,1,0,100,1,0,
-    25,103,1,0,124,1,0,95,10,0,110,25,0,124,1,0,
-    106,7,0,106,11,0,100,2,0,131,1,0,100,1,0,25,
-    124,1,0,95,7,0,124,0,0,124,1,0,95,12,0,116,
-    13,0,116,14,0,124,4,0,124,1,0,106,15,0,131,3,
-    0,1,124,1,0,83,40,3,0,0,0,117,82,0,0,0,
-    72,101,108,112,101,114,32,102,111,114,32,108,111,97,100,95,
-    109,111,100,117,108,101,32,97,98,108,101,32,116,111,32,104,
-    97,110,100,108,101,32,101,105,116,104,101,114,32,115,111,117,
-    114,99,101,32,111,114,32,115,111,117,114,99,101,108,101,115,
-    115,10,32,32,32,32,32,32,32,32,108,111,97,100,105,110,
-    103,46,105,0,0,0,0,117,1,0,0,0,46,40,16,0,
-    0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,117,
-    8,0,0,0,103,101,116,95,99,111,100,101,117,12,0,0,
-    0,103,101,116,95,102,105,108,101,110,97,109,101,117,8,0,
-    0,0,95,95,102,105,108,101,95,95,117,17,0,0,0,99,
-    97,99,104,101,95,102,114,111,109,95,115,111,117,114,99,101,
-    117,10,0,0,0,95,95,99,97,99,104,101,100,95,95,117,
-    19,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,
-    101,100,69,114,114,111,114,117,11,0,0,0,95,95,112,97,
-    99,107,97,103,101,95,95,117,10,0,0,0,105,115,95,112,
-    97,99,107,97,103,101,117,11,0,0,0,95,112,97,116,104,
-    95,115,112,108,105,116,117,8,0,0,0,95,95,112,97,116,
-    104,95,95,117,10,0,0,0,114,112,97,114,116,105,116,105,
-    111,110,117,10,0,0,0,95,95,108,111,97,100,101,114,95,
-    95,117,25,0,0,0,95,99,97,108,108,95,119,105,116,104,
-    95,102,114,97,109,101,115,95,114,101,109,111,118,101,100,117,
-    4,0,0,0,101,120,101,99,117,8,0,0,0,95,95,100,
-    105,99,116,95,95,40,5,0,0,0,117,4,0,0,0,115,
-    101,108,102,117,6,0,0,0,109,111,100,117,108,101,117,10,
-    0,0,0,115,111,117,114,99,101,108,101,115,115,117,4,0,
-    0,0,110,97,109,101,117,11,0,0,0,99,111,100,101,95,
-    111,98,106,101,99,116,40,0,0,0,0,40,0,0,0,0,
-    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
-    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
-    112,62,117,12,0,0,0,95,108,111,97,100,95,109,111,100,
-    117,108,101,81,3,0,0,115,32,0,0,0,0,4,9,1,
-    15,1,18,1,6,1,3,1,22,1,13,1,20,2,12,1,
-    9,1,15,1,28,2,25,1,9,1,19,1,117,26,0,0,
-    0,95,76,111,97,100,101,114,66,97,115,105,99,115,46,95,
-    108,111,97,100,95,109,111,100,117,108,101,78,70,40,9,0,
-    0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,117,
-    10,0,0,0,95,95,109,111,100,117,108,101,95,95,117,12,
-    0,0,0,95,95,113,117,97,108,110,97,109,101,95,95,117,
-    7,0,0,0,95,95,100,111,99,95,95,117,10,0,0,0,
-    105,115,95,112,97,99,107,97,103,101,117,20,0,0,0,95,
-    98,121,116,101,115,95,102,114,111,109,95,98,121,116,101,99,
-    111,100,101,117,17,0,0,0,109,111,100,117,108,101,95,102,
-    111,114,95,108,111,97,100,101,114,117,5,0,0,0,70,97,
-    108,115,101,117,12,0,0,0,95,108,111,97,100,95,109,111,
-    100,117,108,101,40,1,0,0,0,117,10,0,0,0,95,95,
-    108,111,99,97,108,115,95,95,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,13,0,0,0,95,76,111,97,100,101,114,
-    66,97,115,105,99,115,23,3,0,0,115,10,0,0,0,16,
-    3,6,2,12,8,12,45,6,1,117,13,0,0,0,95,76,
-    111,97,100,101,114,66,97,115,105,99,115,99,1,0,0,0,
-    0,0,0,0,1,0,0,0,2,0,0,0,66,0,0,0,
-    115,104,0,0,0,124,0,0,69,101,0,0,90,1,0,100,
-    0,0,90,2,0,100,1,0,100,2,0,132,0,0,90,3,
-    0,100,3,0,100,4,0,132,0,0,90,4,0,100,5,0,
-    100,6,0,132,0,0,90,5,0,100,7,0,100,8,0,132,
-    0,0,90,6,0,100,9,0,100,10,0,132,0,0,90,7,
-    0,100,11,0,100,12,0,132,0,0,90,8,0,100,13,0,
-    100,14,0,132,0,0,90,9,0,100,15,0,83,40,16,0,
-    0,0,117,12,0,0,0,83,111,117,114,99,101,76,111,97,
-    100,101,114,99,2,0,0,0,0,0,0,0,2,0,0,0,
-    1,0,0,0,67,0,0,0,115,10,0,0,0,116,0,0,
-    130,1,0,100,1,0,83,40,2,0,0,0,117,121,0,0,
-    0,79,112,116,105,111,110,97,108,32,109,101,116,104,111,100,
-    32,116,104,97,116,32,114,101,116,117,114,110,115,32,116,104,
-    101,32,109,111,100,105,102,105,99,97,116,105,111,110,32,116,
-    105,109,101,32,40,97,110,32,105,110,116,41,32,102,111,114,
-    32,116,104,101,10,32,32,32,32,32,32,32,32,115,112,101,
-    99,105,102,105,101,100,32,112,97,116,104,44,32,119,104,101,
-    114,101,32,112,97,116,104,32,105,115,32,97,32,115,116,114,
-    46,10,32,32,32,32,32,32,32,32,78,40,1,0,0,0,
-    117,19,0,0,0,78,111,116,73,109,112,108,101,109,101,110,
-    116,101,100,69,114,114,111,114,40,2,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,4,0,0,0,112,97,116,104,40,
-    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
-    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
-    95,98,111,111,116,115,116,114,97,112,62,117,10,0,0,0,
-    112,97,116,104,95,109,116,105,109,101,107,3,0,0,115,2,
-    0,0,0,0,4,117,23,0,0,0,83,111,117,114,99,101,
-    76,111,97,100,101,114,46,112,97,116,104,95,109,116,105,109,
-    101,99,2,0,0,0,0,0,0,0,2,0,0,0,3,0,
-    0,0,67,0,0,0,115,20,0,0,0,105,1,0,124,0,
-    0,106,0,0,124,1,0,131,1,0,100,1,0,54,83,40,
-    2,0,0,0,117,114,1,0,0,79,112,116,105,111,110,97,
-    108,32,109,101,116,104,111,100,32,114,101,116,117,114,110,105,
-    110,103,32,97,32,109,101,116,97,100,97,116,97,32,100,105,
-    99,116,32,102,111,114,32,116,104,101,32,115,112,101,99,105,
-    102,105,101,100,32,112,97,116,104,10,32,32,32,32,32,32,
-    32,32,116,111,32,98,121,32,116,104,101,32,112,97,116,104,
-    32,40,115,116,114,41,46,10,32,32,32,32,32,32,32,32,
-    80,111,115,115,105,98,108,101,32,107,101,121,115,58,10,32,
-    32,32,32,32,32,32,32,45,32,39,109,116,105,109,101,39,
-    32,40,109,97,110,100,97,116,111,114,121,41,32,105,115,32,
-    116,104,101,32,110,117,109,101,114,105,99,32,116,105,109,101,
-    115,116,97,109,112,32,111,102,32,108,97,115,116,32,115,111,
-    117,114,99,101,10,32,32,32,32,32,32,32,32,32,32,99,
-    111,100,101,32,109,111,100,105,102,105,99,97,116,105,111,110,
-    59,10,32,32,32,32,32,32,32,32,45,32,39,115,105,122,
-    101,39,32,40,111,112,116,105,111,110,97,108,41,32,105,115,
-    32,116,104,101,32,115,105,122,101,32,105,110,32,98,121,116,
-    101,115,32,111,102,32,116,104,101,32,115,111,117,114,99,101,
-    32,99,111,100,101,46,10,10,32,32,32,32,32,32,32,32,
-    73,109,112,108,101,109,101,110,116,105,110,103,32,116,104,105,
-    115,32,109,101,116,104,111,100,32,97,108,108,111,119,115,32,
-    116,104,101,32,108,111,97,100,101,114,32,116,111,32,114,101,
-    97,100,32,98,121,116,101,99,111,100,101,32,102,105,108,101,
-    115,46,10,32,32,32,32,32,32,32,32,117,5,0,0,0,
-    109,116,105,109,101,40,1,0,0,0,117,10,0,0,0,112,
-    97,116,104,95,109,116,105,109,101,40,2,0,0,0,117,4,
-    0,0,0,115,101,108,102,117,4,0,0,0,112,97,116,104,
+    116,115,116,114,97,112,62,117,12,0,0,0,83,111,117,114,
+    99,101,76,111,97,100,101,114,105,3,0,0,115,14,0,0,
+    0,16,2,12,6,12,12,12,10,12,9,12,22,12,62,117,
+    12,0,0,0,83,111,117,114,99,101,76,111,97,100,101,114,
+    99,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,
+    0,2,0,0,0,115,92,0,0,0,124,0,0,69,101,0,
+    0,90,1,0,100,0,0,90,2,0,100,1,0,90,3,0,
+    100,2,0,100,3,0,132,0,0,90,4,0,101,5,0,135,
+    0,0,102,1,0,100,4,0,100,5,0,134,0,0,131,1,
+    0,90,6,0,101,5,0,100,6,0,100,7,0,132,0,0,
+    131,1,0,90,7,0,100,8,0,100,9,0,132,0,0,90,
+    8,0,135,0,0,83,40,10,0,0,0,117,10,0,0,0,
+    70,105,108,101,76,111,97,100,101,114,117,103,0,0,0,66,
+    97,115,101,32,102,105,108,101,32,108,111,97,100,101,114,32,
+    99,108,97,115,115,32,119,104,105,99,104,32,105,109,112,108,
+    101,109,101,110,116,115,32,116,104,101,32,108,111,97,100,101,
+    114,32,112,114,111,116,111,99,111,108,32,109,101,116,104,111,
+    100,115,32,116,104,97,116,10,32,32,32,32,114,101,113,117,
+    105,114,101,32,102,105,108,101,32,115,121,115,116,101,109,32,
+    117,115,97,103,101,46,99,3,0,0,0,0,0,0,0,3,
+    0,0,0,2,0,0,0,67,0,0,0,115,22,0,0,0,
+    124,1,0,124,0,0,95,0,0,124,2,0,124,0,0,95,
+    1,0,100,1,0,83,40,2,0,0,0,117,75,0,0,0,
+    67,97,99,104,101,32,116,104,101,32,109,111,100,117,108,101,
+    32,110,97,109,101,32,97,110,100,32,116,104,101,32,112,97,
+    116,104,32,116,111,32,116,104,101,32,102,105,108,101,32,102,
+    111,117,110,100,32,98,121,32,116,104,101,10,32,32,32,32,
+    32,32,32,32,102,105,110,100,101,114,46,78,40,2,0,0,
+    0,117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,
+    97,116,104,40,3,0,0,0,117,4,0,0,0,115,101,108,
+    102,117,8,0,0,0,102,117,108,108,110,97,109,101,117,4,
+    0,0,0,112,97,116,104,40,0,0,0,0,40,0,0,0,
+    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
+    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
+    97,112,62,117,8,0,0,0,95,95,105,110,105,116,95,95,
+    244,3,0,0,115,4,0,0,0,0,3,9,1,117,19,0,
+    0,0,70,105,108,101,76,111,97,100,101,114,46,95,95,105,
+    110,105,116,95,95,99,2,0,0,0,0,0,0,0,2,0,
+    0,0,3,0,0,0,3,0,0,0,115,22,0,0,0,116,
+    0,0,116,1,0,124,0,0,131,2,0,106,2,0,124,1,
+    0,131,1,0,83,40,1,0,0,0,117,26,0,0,0,76,
+    111,97,100,32,97,32,109,111,100,117,108,101,32,102,114,111,
+    109,32,97,32,102,105,108,101,46,40,3,0,0,0,117,5,
+    0,0,0,115,117,112,101,114,117,10,0,0,0,70,105,108,
+    101,76,111,97,100,101,114,117,11,0,0,0,108,111,97,100,
+    95,109,111,100,117,108,101,40,2,0,0,0,117,4,0,0,
+    0,115,101,108,102,117,8,0,0,0,102,117,108,108,110,97,
+    109,101,40,1,0,0,0,117,9,0,0,0,95,95,99,108,
+    97,115,115,95,95,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,11,0,0,
+    0,108,111,97,100,95,109,111,100,117,108,101,250,3,0,0,
+    115,2,0,0,0,0,5,117,22,0,0,0,70,105,108,101,
+    76,111,97,100,101,114,46,108,111,97,100,95,109,111,100,117,
+    108,101,99,2,0,0,0,0,0,0,0,2,0,0,0,1,
+    0,0,0,67,0,0,0,115,7,0,0,0,124,0,0,106,
+    0,0,83,40,1,0,0,0,117,58,0,0,0,82,101,116,
+    117,114,110,32,116,104,101,32,112,97,116,104,32,116,111,32,
+    116,104,101,32,115,111,117,114,99,101,32,102,105,108,101,32,
+    97,115,32,102,111,117,110,100,32,98,121,32,116,104,101,32,
+    102,105,110,100,101,114,46,40,1,0,0,0,117,4,0,0,
+    0,112,97,116,104,40,2,0,0,0,117,4,0,0,0,115,
+    101,108,102,117,8,0,0,0,102,117,108,108,110,97,109,101,
     40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
     102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
-    46,95,98,111,111,116,115,116,114,97,112,62,117,10,0,0,
-    0,112,97,116,104,95,115,116,97,116,115,113,3,0,0,115,
-    2,0,0,0,0,10,117,23,0,0,0,83,111,117,114,99,
-    101,76,111,97,100,101,114,46,112,97,116,104,95,115,116,97,
-    116,115,99,4,0,0,0,0,0,0,0,4,0,0,0,3,
-    0,0,0,67,0,0,0,115,16,0,0,0,124,0,0,106,
-    0,0,124,2,0,124,3,0,131,2,0,83,40,1,0,0,
-    0,117,228,0,0,0,79,112,116,105,111,110,97,108,32,109,
-    101,116,104,111,100,32,119,104,105,99,104,32,119,114,105,116,
-    101,115,32,100,97,116,97,32,40,98,121,116,101,115,41,32,
-    116,111,32,97,32,102,105,108,101,32,112,97,116,104,32,40,
-    97,32,115,116,114,41,46,10,10,32,32,32,32,32,32,32,
-    32,73,109,112,108,101,109,101,110,116,105,110,103,32,116,104,
-    105,115,32,109,101,116,104,111,100,32,97,108,108,111,119,115,
-    32,102,111,114,32,116,104,101,32,119,114,105,116,105,110,103,
-    32,111,102,32,98,121,116,101,99,111,100,101,32,102,105,108,
-    101,115,46,10,10,32,32,32,32,32,32,32,32,84,104,101,
-    32,115,111,117,114,99,101,32,112,97,116,104,32,105,115,32,
-    110,101,101,100,101,100,32,105,110,32,111,114,100,101,114,32,
-    116,111,32,99,111,114,114,101,99,116,108,121,32,116,114,97,
-    110,115,102,101,114,32,112,101,114,109,105,115,115,105,111,110,
-    115,10,32,32,32,32,32,32,32,32,40,1,0,0,0,117,
-    8,0,0,0,115,101,116,95,100,97,116,97,40,4,0,0,
-    0,117,4,0,0,0,115,101,108,102,117,11,0,0,0,115,
-    111,117,114,99,101,95,112,97,116,104,117,10,0,0,0,99,
-    97,99,104,101,95,112,97,116,104,117,4,0,0,0,100,97,
-    116,97,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
-    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
-    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,15,
-    0,0,0,95,99,97,99,104,101,95,98,121,116,101,99,111,
-    100,101,125,3,0,0,115,2,0,0,0,0,8,117,28,0,
-    0,0,83,111,117,114,99,101,76,111,97,100,101,114,46,95,
-    99,97,99,104,101,95,98,121,116,101,99,111,100,101,99,3,
-    0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,67,
-    0,0,0,115,10,0,0,0,116,0,0,130,1,0,100,1,
-    0,83,40,2,0,0,0,117,151,0,0,0,79,112,116,105,
-    111,110,97,108,32,109,101,116,104,111,100,32,119,104,105,99,
-    104,32,119,114,105,116,101,115,32,100,97,116,97,32,40,98,
-    121,116,101,115,41,32,116,111,32,97,32,102,105,108,101,32,
-    112,97,116,104,32,40,97,32,115,116,114,41,46,10,10,32,
-    32,32,32,32,32,32,32,73,109,112,108,101,109,101,110,116,
-    105,110,103,32,116,104,105,115,32,109,101,116,104,111,100,32,
-    97,108,108,111,119,115,32,102,111,114,32,116,104,101,32,119,
-    114,105,116,105,110,103,32,111,102,32,98,121,116,101,99,111,
-    100,101,32,102,105,108,101,115,46,10,10,32,32,32,32,32,
-    32,32,32,78,40,1,0,0,0,117,19,0,0,0,78,111,
-    116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,
-    114,40,3,0,0,0,117,4,0,0,0,115,101,108,102,117,
-    4,0,0,0,112,97,116,104,117,4,0,0,0,100,97,116,
-    97,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,8,0,
-    0,0,115,101,116,95,100,97,116,97,135,3,0,0,115,2,
-    0,0,0,0,6,117,21,0,0,0,83,111,117,114,99,101,
-    76,111,97,100,101,114,46,115,101,116,95,100,97,116,97,99,
-    2,0,0,0,0,0,0,0,9,0,0,0,44,0,0,0,
-    67,0,0,0,115,62,1,0,0,100,1,0,100,2,0,108,
-    0,0,125,2,0,124,0,0,106,1,0,124,1,0,131,1,
-    0,125,3,0,121,19,0,124,0,0,106,2,0,124,3,0,
-    131,1,0,125,4,0,87,110,58,0,4,116,3,0,107,10,
-    0,114,106,0,1,125,5,0,1,122,26,0,116,4,0,100,
-    3,0,100,4,0,124,1,0,131,1,1,124,5,0,130,2,
-    0,87,89,100,2,0,100,2,0,125,5,0,126,5,0,88,
-    110,1,0,88,116,5,0,106,6,0,124,4,0,131,1,0,
-    106,7,0,125,6,0,121,19,0,124,2,0,106,8,0,124,
-    6,0,131,1,0,125,7,0,87,110,58,0,4,116,9,0,
-    107,10,0,114,204,0,1,125,5,0,1,122,26,0,116,4,
-    0,100,5,0,100,4,0,124,1,0,131,1,1,124,5,0,
-    130,2,0,87,89,100,2,0,100,2,0,125,5,0,126,5,
-    0,88,110,1,0,88,116,5,0,106,10,0,100,2,0,100,
-    7,0,131,2,0,125,8,0,121,30,0,124,8,0,106,13,
-    0,124,4,0,106,13,0,124,7,0,100,1,0,25,131,1,
-    0,131,1,0,83,87,110,58,0,4,116,14,0,107,10,0,
-    114,57,1,1,125,5,0,1,122,26,0,116,4,0,100,6,
-    0,100,4,0,124,1,0,131,1,1,124,5,0,130,2,0,
-    87,89,100,2,0,100,2,0,125,5,0,126,5,0,88,110,
-    1,0,88,100,2,0,83,40,8,0,0,0,117,52,0,0,
-    0,67,111,110,99,114,101,116,101,32,105,109,112,108,101,109,
-    101,110,116,97,116,105,111,110,32,111,102,32,73,110,115,112,
-    101,99,116,76,111,97,100,101,114,46,103,101,116,95,115,111,
-    117,114,99,101,46,105,0,0,0,0,78,117,39,0,0,0,
-    115,111,117,114,99,101,32,110,111,116,32,97,118,97,105,108,
-    97,98,108,101,32,116,104,114,111,117,103,104,32,103,101,116,
-    95,100,97,116,97,40,41,117,4,0,0,0,110,97,109,101,
-    117,25,0,0,0,70,97,105,108,101,100,32,116,111,32,100,
-    101,116,101,99,116,32,101,110,99,111,100,105,110,103,117,28,
-    0,0,0,70,97,105,108,101,100,32,116,111,32,100,101,99,
-    111,100,101,32,115,111,117,114,99,101,32,102,105,108,101,84,
-    40,15,0,0,0,117,8,0,0,0,116,111,107,101,110,105,
-    122,101,117,12,0,0,0,103,101,116,95,102,105,108,101,110,
-    97,109,101,117,8,0,0,0,103,101,116,95,100,97,116,97,
-    117,7,0,0,0,73,79,69,114,114,111,114,117,11,0,0,
-    0,73,109,112,111,114,116,69,114,114,111,114,117,3,0,0,
-    0,95,105,111,117,7,0,0,0,66,121,116,101,115,73,79,
-    117,8,0,0,0,114,101,97,100,108,105,110,101,117,15,0,
-    0,0,100,101,116,101,99,116,95,101,110,99,111,100,105,110,
-    103,117,11,0,0,0,83,121,110,116,97,120,69,114,114,111,
-    114,117,25,0,0,0,73,110,99,114,101,109,101,110,116,97,
-    108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,117,
-    4,0,0,0,78,111,110,101,117,4,0,0,0,84,114,117,
-    101,117,6,0,0,0,100,101,99,111,100,101,117,18,0,0,
-    0,85,110,105,99,111,100,101,68,101,99,111,100,101,69,114,
-    114,111,114,40,9,0,0,0,117,4,0,0,0,115,101,108,
-    102,117,8,0,0,0,102,117,108,108,110,97,109,101,117,8,
-    0,0,0,116,111,107,101,110,105,122,101,117,4,0,0,0,
-    112,97,116,104,117,12,0,0,0,115,111,117,114,99,101,95,
-    98,121,116,101,115,117,3,0,0,0,101,120,99,117,10,0,
-    0,0,114,101,97,100,115,111,117,114,99,101,117,8,0,0,
-    0,101,110,99,111,100,105,110,103,117,15,0,0,0,110,101,
-    119,108,105,110,101,95,100,101,99,111,100,101,114,40,0,0,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,12,0,0,
+    0,103,101,116,95,102,105,108,101,110,97,109,101,1,4,0,
+    0,115,2,0,0,0,0,3,117,23,0,0,0,70,105,108,
+    101,76,111,97,100,101,114,46,103,101,116,95,102,105,108,101,
+    110,97,109,101,99,2,0,0,0,0,0,0,0,3,0,0,
+    0,8,0,0,0,67,0,0,0,115,41,0,0,0,116,0,
+    0,106,1,0,124,1,0,100,1,0,131,2,0,143,17,0,
+    125,2,0,124,2,0,106,2,0,131,0,0,83,87,100,2,
+    0,81,88,100,2,0,83,40,3,0,0,0,117,39,0,0,
+    0,82,101,116,117,114,110,32,116,104,101,32,100,97,116,97,
+    32,102,114,111,109,32,112,97,116,104,32,97,115,32,114,97,
+    119,32,98,121,116,101,115,46,117,1,0,0,0,114,78,40,
+    3,0,0,0,117,3,0,0,0,95,105,111,117,6,0,0,
+    0,70,105,108,101,73,79,117,4,0,0,0,114,101,97,100,
+    40,3,0,0,0,117,4,0,0,0,115,101,108,102,117,4,
+    0,0,0,112,97,116,104,117,4,0,0,0,102,105,108,101,
+    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,8,0,0,
+    0,103,101,116,95,100,97,116,97,6,4,0,0,115,4,0,
+    0,0,0,2,21,1,117,19,0,0,0,70,105,108,101,76,
+    111,97,100,101,114,46,103,101,116,95,100,97,116,97,40,9,
+    0,0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,
+    117,10,0,0,0,95,95,109,111,100,117,108,101,95,95,117,
+    12,0,0,0,95,95,113,117,97,108,110,97,109,101,95,95,
+    117,7,0,0,0,95,95,100,111,99,95,95,117,8,0,0,
+    0,95,95,105,110,105,116,95,95,117,11,0,0,0,95,99,
+    104,101,99,107,95,110,97,109,101,117,11,0,0,0,108,111,
+    97,100,95,109,111,100,117,108,101,117,12,0,0,0,103,101,
+    116,95,102,105,108,101,110,97,109,101,117,8,0,0,0,103,
+    101,116,95,100,97,116,97,40,1,0,0,0,117,10,0,0,
+    0,95,95,108,111,99,97,108,115,95,95,40,0,0,0,0,
+    40,1,0,0,0,117,9,0,0,0,95,95,99,108,97,115,
+    115,95,95,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,10,0,0,0,70,105,108,101,76,111,
+    97,100,101,114,239,3,0,0,115,10,0,0,0,16,3,6,
+    2,12,6,24,7,18,5,117,10,0,0,0,70,105,108,101,
+    76,111,97,100,101,114,99,1,0,0,0,0,0,0,0,1,
+    0,0,0,4,0,0,0,66,0,0,0,115,68,0,0,0,
+    124,0,0,69,101,0,0,90,1,0,100,0,0,90,2,0,
+    100,1,0,90,3,0,100,2,0,100,3,0,132,0,0,90,
+    4,0,100,4,0,100,5,0,132,0,0,90,5,0,100,6,
+    0,100,7,0,100,8,0,100,9,0,132,0,1,90,6,0,
+    100,10,0,83,40,11,0,0,0,117,16,0,0,0,83,111,
+    117,114,99,101,70,105,108,101,76,111,97,100,101,114,117,62,
+    0,0,0,67,111,110,99,114,101,116,101,32,105,109,112,108,
+    101,109,101,110,116,97,116,105,111,110,32,111,102,32,83,111,
+    117,114,99,101,76,111,97,100,101,114,32,117,115,105,110,103,
+    32,116,104,101,32,102,105,108,101,32,115,121,115,116,101,109,
+    46,99,2,0,0,0,0,0,0,0,3,0,0,0,3,0,
+    0,0,67,0,0,0,115,39,0,0,0,116,0,0,106,1,
+    0,124,1,0,131,1,0,125,2,0,105,2,0,124,2,0,
+    106,2,0,100,1,0,54,124,2,0,106,3,0,100,2,0,
+    54,83,40,3,0,0,0,117,33,0,0,0,82,101,116,117,
+    114,110,32,116,104,101,32,109,101,116,97,100,97,116,97,32,
+    102,111,114,32,116,104,101,32,112,97,116,104,46,117,5,0,
+    0,0,109,116,105,109,101,117,4,0,0,0,115,105,122,101,
+    40,4,0,0,0,117,3,0,0,0,95,111,115,117,4,0,
+    0,0,115,116,97,116,117,8,0,0,0,115,116,95,109,116,
+    105,109,101,117,7,0,0,0,115,116,95,115,105,122,101,40,
+    3,0,0,0,117,4,0,0,0,115,101,108,102,117,4,0,
+    0,0,112,97,116,104,117,2,0,0,0,115,116,40,0,0,
     0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
     122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
-    111,111,116,115,116,114,97,112,62,117,10,0,0,0,103,101,
-    116,95,115,111,117,114,99,101,144,3,0,0,115,38,0,0,
-    0,0,2,12,1,15,1,3,1,19,1,18,1,9,1,31,
-    1,18,1,3,1,19,1,18,1,9,1,31,1,18,1,3,
-    1,30,1,18,1,9,1,117,23,0,0,0,83,111,117,114,
-    99,101,76,111,97,100,101,114,46,103,101,116,95,115,111,117,
-    114,99,101,99,2,0,0,0,0,0,0,0,12,0,0,0,
-    45,0,0,0,67,0,0,0,115,52,2,0,0,124,0,0,
-    106,0,0,124,1,0,131,1,0,125,2,0,100,10,0,125,
-    3,0,121,16,0,116,2,0,124,2,0,131,1,0,125,4,
-    0,87,110,24,0,4,116,3,0,107,10,0,114,63,0,1,
-    1,1,100,10,0,125,4,0,89,110,14,1,88,121,19,0,
-    124,0,0,106,4,0,124,2,0,131,1,0,125,5,0,87,
-    110,18,0,4,116,3,0,107,10,0,114,103,0,1,1,1,
-    89,110,230,0,88,116,5,0,124,5,0,100,1,0,25,131,
-    1,0,125,3,0,121,19,0,124,0,0,106,6,0,124,4,
-    0,131,1,0,125,6,0,87,110,18,0,4,116,7,0,107,
-    10,0,114,159,0,1,1,1,89,110,174,0,88,121,28,0,
-    124,0,0,106,8,0,124,1,0,124,6,0,124,4,0,124,
-    5,0,131,4,0,125,7,0,87,110,24,0,4,116,9,0,
-    116,10,0,102,2,0,107,10,0,114,214,0,1,1,1,89,
-    110,119,0,88,116,11,0,100,2,0,124,4,0,124,2,0,
-    131,3,0,1,116,12,0,106,13,0,124,7,0,131,1,0,
-    125,8,0,116,14,0,124,8,0,116,15,0,131,2,0,114,
-    38,1,116,16,0,106,17,0,124,8,0,124,2,0,131,2,
-    0,1,116,11,0,100,3,0,124,4,0,131,2,0,1,124,
-    8,0,83,100,4,0,125,9,0,116,9,0,124,9,0,106,
-    18,0,124,4,0,131,1,0,100,5,0,124,1,0,100,6,
-    0,124,4,0,131,1,2,130,1,0,124,0,0,106,6,0,
-    124,2,0,131,1,0,125,10,0,116,19,0,116,20,0,124,
-    10,0,124,2,0,100,7,0,100,8,0,100,11,0,131,4,
-    1,125,11,0,116,11,0,100,3,0,124,2,0,131,2,0,
-    1,116,22,0,106,23,0,12,114,48,2,124,4,0,100,10,
-    0,107,9,0,114,48,2,124,3,0,100,10,0,107,9,0,
-    114,48,2,116,24,0,116,25,0,131,1,0,125,6,0,124,
-    6,0,106,26,0,116,27,0,124,3,0,131,1,0,131,1,
-    0,1,124,6,0,106,26,0,116,27,0,116,28,0,124,10,
-    0,131,1,0,131,1,0,131,1,0,1,124,6,0,106,26,
-    0,116,12,0,106,29,0,124,11,0,131,1,0,131,1,0,
-    1,121,36,0,124,0,0,106,30,0,124,2,0,124,4,0,
-    124,6,0,131,3,0,1,116,11,0,100,9,0,124,4,0,
-    131,2,0,1,87,113,48,2,4,116,3,0,107,10,0,114,
-    44,2,1,1,1,89,113,48,2,88,110,0,0,124,11,0,
-    83,40,12,0,0,0,117,190,0,0,0,67,111,110,99,114,
-    101,116,101,32,105,109,112,108,101,109,101,110,116,97,116,105,
-    111,110,32,111,102,32,73,110,115,112,101,99,116,76,111,97,
-    100,101,114,46,103,101,116,95,99,111,100,101,46,10,10,32,
-    32,32,32,32,32,32,32,82,101,97,100,105,110,103,32,111,
-    102,32,98,121,116,101,99,111,100,101,32,114,101,113,117,105,
-    114,101,115,32,112,97,116,104,95,115,116,97,116,115,32,116,
-    111,32,98,101,32,105,109,112,108,101,109,101,110,116,101,100,
-    46,32,84,111,32,119,114,105,116,101,10,32,32,32,32,32,
-    32,32,32,98,121,116,101,99,111,100,101,44,32,115,101,116,
-    95,100,97,116,97,32,109,117,115,116,32,97,108,115,111,32,
-    98,101,32,105,109,112,108,101,109,101,110,116,101,100,46,10,
-    10,32,32,32,32,32,32,32,32,117,5,0,0,0,109,116,
-    105,109,101,117,13,0,0,0,123,125,32,109,97,116,99,104,
-    101,115,32,123,125,117,19,0,0,0,99,111,100,101,32,111,
-    98,106,101,99,116,32,102,114,111,109,32,123,125,117,21,0,
-    0,0,78,111,110,45,99,111,100,101,32,111,98,106,101,99,
-    116,32,105,110,32,123,125,117,4,0,0,0,110,97,109,101,
-    117,4,0,0,0,112,97,116,104,117,4,0,0,0,101,120,
-    101,99,117,12,0,0,0,100,111,110,116,95,105,110,104,101,
-    114,105,116,117,10,0,0,0,119,114,111,116,101,32,123,33,
-    114,125,78,84,40,31,0,0,0,117,12,0,0,0,103,101,
-    116,95,102,105,108,101,110,97,109,101,117,4,0,0,0,78,
-    111,110,101,117,17,0,0,0,99,97,99,104,101,95,102,114,
-    111,109,95,115,111,117,114,99,101,117,19,0,0,0,78,111,
-    116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,
-    114,117,10,0,0,0,112,97,116,104,95,115,116,97,116,115,
-    117,3,0,0,0,105,110,116,117,8,0,0,0,103,101,116,
-    95,100,97,116,97,117,7,0,0,0,73,79,69,114,114,111,
-    114,117,20,0,0,0,95,98,121,116,101,115,95,102,114,111,
-    109,95,98,121,116,101,99,111,100,101,117,11,0,0,0,73,
-    109,112,111,114,116,69,114,114,111,114,117,8,0,0,0,69,
-    79,70,69,114,114,111,114,117,16,0,0,0,95,118,101,114,
-    98,111,115,101,95,109,101,115,115,97,103,101,117,7,0,0,
-    0,109,97,114,115,104,97,108,117,5,0,0,0,108,111,97,
-    100,115,117,10,0,0,0,105,115,105,110,115,116,97,110,99,
-    101,117,10,0,0,0,95,99,111,100,101,95,116,121,112,101,
-    117,4,0,0,0,95,105,109,112,117,16,0,0,0,95,102,
-    105,120,95,99,111,95,102,105,108,101,110,97,109,101,117,6,
-    0,0,0,102,111,114,109,97,116,117,25,0,0,0,95,99,
-    97,108,108,95,119,105,116,104,95,102,114,97,109,101,115,95,
-    114,101,109,111,118,101,100,117,7,0,0,0,99,111,109,112,
-    105,108,101,117,4,0,0,0,84,114,117,101,117,3,0,0,
-    0,115,121,115,117,19,0,0,0,100,111,110,116,95,119,114,
-    105,116,101,95,98,121,116,101,99,111,100,101,117,9,0,0,
-    0,98,121,116,101,97,114,114,97,121,117,12,0,0,0,95,
-    77,65,71,73,67,95,66,89,84,69,83,117,6,0,0,0,
-    101,120,116,101,110,100,117,7,0,0,0,95,119,95,108,111,
-    110,103,117,3,0,0,0,108,101,110,117,5,0,0,0,100,
-    117,109,112,115,117,15,0,0,0,95,99,97,99,104,101,95,
-    98,121,116,101,99,111,100,101,40,12,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,8,0,0,0,102,117,108,108,110,
-    97,109,101,117,11,0,0,0,115,111,117,114,99,101,95,112,
-    97,116,104,117,12,0,0,0,115,111,117,114,99,101,95,109,
-    116,105,109,101,117,13,0,0,0,98,121,116,101,99,111,100,
-    101,95,112,97,116,104,117,2,0,0,0,115,116,117,4,0,
-    0,0,100,97,116,97,117,10,0,0,0,98,121,116,101,115,
-    95,100,97,116,97,117,5,0,0,0,102,111,117,110,100,117,
-    3,0,0,0,109,115,103,117,12,0,0,0,115,111,117,114,
-    99,101,95,98,121,116,101,115,117,11,0,0,0,99,111,100,
-    101,95,111,98,106,101,99,116,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,8,0,0,0,103,101,116,95,99,111,100,
-    101,166,3,0,0,115,98,0,0,0,0,7,15,1,6,1,
-    3,1,16,1,13,1,11,2,3,1,19,1,13,1,5,2,
-    16,1,3,1,19,1,13,1,5,2,3,1,12,1,3,1,
-    13,1,19,1,5,2,9,1,7,1,15,1,15,1,16,1,
-    6,1,7,1,4,2,6,1,18,1,15,1,15,1,6,1,
-    12,1,9,1,13,1,22,1,12,1,12,1,19,1,25,1,
-    22,1,3,1,19,1,17,1,13,1,8,1,117,21,0,0,
-    0,83,111,117,114,99,101,76,111,97,100,101,114,46,103,101,
-    116,95,99,111,100,101,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,2,0,0,0,67,0,0,0,115,13,0,0,0,
-    124,0,0,106,0,0,124,1,0,131,1,0,83,40,1,0,
-    0,0,117,0,1,0,0,67,111,110,99,114,101,116,101,32,
-    105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,
-    102,32,76,111,97,100,101,114,46,108,111,97,100,95,109,111,
-    100,117,108,101,46,10,10,32,32,32,32,32,32,32,32,82,
-    101,113,117,105,114,101,115,32,69,120,101,99,117,116,105,111,
-    110,76,111,97,100,101,114,46,103,101,116,95,102,105,108,101,
-    110,97,109,101,32,97,110,100,32,82,101,115,111,117,114,99,
-    101,76,111,97,100,101,114,46,103,101,116,95,100,97,116,97,
-    32,116,111,32,98,101,10,32,32,32,32,32,32,32,32,105,
-    109,112,108,101,109,101,110,116,101,100,32,116,111,32,108,111,
-    97,100,32,115,111,117,114,99,101,32,99,111,100,101,46,32,
-    85,115,101,32,111,102,32,98,121,116,101,99,111,100,101,32,
-    105,115,32,100,105,99,116,97,116,101,100,32,98,121,32,119,
-    104,101,116,104,101,114,10,32,32,32,32,32,32,32,32,103,
-    101,116,95,99,111,100,101,32,117,115,101,115,47,119,114,105,
-    116,101,115,32,98,121,116,101,99,111,100,101,46,10,10,32,
-    32,32,32,32,32,32,32,40,1,0,0,0,117,12,0,0,
-    0,95,108,111,97,100,95,109,111,100,117,108,101,40,2,0,
-    0,0,117,4,0,0,0,115,101,108,102,117,8,0,0,0,
-    102,117,108,108,110,97,109,101,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,11,0,0,0,108,111,97,100,95,109,111,
-    100,117,108,101,228,3,0,0,115,2,0,0,0,0,8,117,
-    24,0,0,0,83,111,117,114,99,101,76,111,97,100,101,114,
-    46,108,111,97,100,95,109,111,100,117,108,101,78,40,10,0,
-    0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,117,
-    10,0,0,0,95,95,109,111,100,117,108,101,95,95,117,12,
-    0,0,0,95,95,113,117,97,108,110,97,109,101,95,95,117,
-    10,0,0,0,112,97,116,104,95,109,116,105,109,101,117,10,
-    0,0,0,112,97,116,104,95,115,116,97,116,115,117,15,0,
-    0,0,95,99,97,99,104,101,95,98,121,116,101,99,111,100,
-    101,117,8,0,0,0,115,101,116,95,100,97,116,97,117,10,
-    0,0,0,103,101,116,95,115,111,117,114,99,101,117,8,0,
-    0,0,103,101,116,95,99,111,100,101,117,11,0,0,0,108,
-    111,97,100,95,109,111,100,117,108,101,40,1,0,0,0,117,
-    10,0,0,0,95,95,108,111,99,97,108,115,95,95,40,0,
-    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
-    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,12,0,0,0,83,
-    111,117,114,99,101,76,111,97,100,101,114,105,3,0,0,115,
-    14,0,0,0,16,2,12,6,12,12,12,10,12,9,12,22,
-    12,62,117,12,0,0,0,83,111,117,114,99,101,76,111,97,
-    100,101,114,99,1,0,0,0,0,0,0,0,1,0,0,0,
-    4,0,0,0,2,0,0,0,115,92,0,0,0,124,0,0,
-    69,101,0,0,90,1,0,100,0,0,90,2,0,100,1,0,
-    90,3,0,100,2,0,100,3,0,132,0,0,90,4,0,101,
-    5,0,135,0,0,102,1,0,100,4,0,100,5,0,134,0,
-    0,131,1,0,90,6,0,101,5,0,100,6,0,100,7,0,
-    132,0,0,131,1,0,90,7,0,100,8,0,100,9,0,132,
-    0,0,90,8,0,135,0,0,83,40,10,0,0,0,117,10,
-    0,0,0,70,105,108,101,76,111,97,100,101,114,117,103,0,
-    0,0,66,97,115,101,32,102,105,108,101,32,108,111,97,100,
-    101,114,32,99,108,97,115,115,32,119,104,105,99,104,32,105,
-    109,112,108,101,109,101,110,116,115,32,116,104,101,32,108,111,
-    97,100,101,114,32,112,114,111,116,111,99,111,108,32,109,101,
-    116,104,111,100,115,32,116,104,97,116,10,32,32,32,32,114,
-    101,113,117,105,114,101,32,102,105,108,101,32,115,121,115,116,
-    101,109,32,117,115,97,103,101,46,99,3,0,0,0,0,0,
-    0,0,3,0,0,0,2,0,0,0,67,0,0,0,115,22,
-    0,0,0,124,1,0,124,0,0,95,0,0,124,2,0,124,
-    0,0,95,1,0,100,1,0,83,40,2,0,0,0,117,75,
-    0,0,0,67,97,99,104,101,32,116,104,101,32,109,111,100,
-    117,108,101,32,110,97,109,101,32,97,110,100,32,116,104,101,
-    32,112,97,116,104,32,116,111,32,116,104,101,32,102,105,108,
-    101,32,102,111,117,110,100,32,98,121,32,116,104,101,10,32,
-    32,32,32,32,32,32,32,102,105,110,100,101,114,46,78,40,
-    2,0,0,0,117,4,0,0,0,110,97,109,101,117,4,0,
-    0,0,112,97,116,104,40,3,0,0,0,117,4,0,0,0,
-    115,101,108,102,117,8,0,0,0,102,117,108,108,110,97,109,
-    101,117,4,0,0,0,112,97,116,104,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,8,0,0,0,95,95,105,110,105,
-    116,95,95,244,3,0,0,115,4,0,0,0,0,3,9,1,
-    117,19,0,0,0,70,105,108,101,76,111,97,100,101,114,46,
-    95,95,105,110,105,116,95,95,99,2,0,0,0,0,0,0,
-    0,2,0,0,0,3,0,0,0,3,0,0,0,115,22,0,
-    0,0,116,0,0,116,1,0,124,0,0,131,2,0,106,2,
-    0,124,1,0,131,1,0,83,40,1,0,0,0,117,26,0,
-    0,0,76,111,97,100,32,97,32,109,111,100,117,108,101,32,
-    102,114,111,109,32,97,32,102,105,108,101,46,40,3,0,0,
-    0,117,5,0,0,0,115,117,112,101,114,117,10,0,0,0,
-    70,105,108,101,76,111,97,100,101,114,117,11,0,0,0,108,
-    111,97,100,95,109,111,100,117,108,101,40,2,0,0,0,117,
-    4,0,0,0,115,101,108,102,117,8,0,0,0,102,117,108,
-    108,110,97,109,101,40,1,0,0,0,117,9,0,0,0,95,
-    95,99,108,97,115,115,95,95,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    11,0,0,0,108,111,97,100,95,109,111,100,117,108,101,250,
-    3,0,0,115,2,0,0,0,0,5,117,22,0,0,0,70,
-    105,108,101,76,111,97,100,101,114,46,108,111,97,100,95,109,
-    111,100,117,108,101,99,2,0,0,0,0,0,0,0,2,0,
-    0,0,1,0,0,0,67,0,0,0,115,7,0,0,0,124,
-    0,0,106,0,0,83,40,1,0,0,0,117,58,0,0,0,
-    82,101,116,117,114,110,32,116,104,101,32,112,97,116,104,32,
-    116,111,32,116,104,101,32,115,111,117,114,99,101,32,102,105,
-    108,101,32,97,115,32,102,111,117,110,100,32,98,121,32,116,
-    104,101,32,102,105,110,100,101,114,46,40,1,0,0,0,117,
-    4,0,0,0,112,97,116,104,40,2,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,8,0,0,0,102,117,108,108,110,
-    97,109,101,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    12,0,0,0,103,101,116,95,102,105,108,101,110,97,109,101,
-    1,4,0,0,115,2,0,0,0,0,3,117,23,0,0,0,
-    70,105,108,101,76,111,97,100,101,114,46,103,101,116,95,102,
-    105,108,101,110,97,109,101,99,2,0,0,0,0,0,0,0,
-    3,0,0,0,8,0,0,0,67,0,0,0,115,41,0,0,
-    0,116,0,0,106,1,0,124,1,0,100,1,0,131,2,0,
-    143,17,0,125,2,0,124,2,0,106,2,0,131,0,0,83,
-    87,100,2,0,81,88,100,2,0,83,40,3,0,0,0,117,
-    39,0,0,0,82,101,116,117,114,110,32,116,104,101,32,100,
-    97,116,97,32,102,114,111,109,32,112,97,116,104,32,97,115,
-    32,114,97,119,32,98,121,116,101,115,46,117,1,0,0,0,
-    114,78,40,3,0,0,0,117,3,0,0,0,95,105,111,117,
-    6,0,0,0,70,105,108,101,73,79,117,4,0,0,0,114,
-    101,97,100,40,3,0,0,0,117,4,0,0,0,115,101,108,
-    102,117,4,0,0,0,112,97,116,104,117,4,0,0,0,102,
-    105,108,101,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    8,0,0,0,103,101,116,95,100,97,116,97,6,4,0,0,
-    115,4,0,0,0,0,2,21,1,117,19,0,0,0,70,105,
-    108,101,76,111,97,100,101,114,46,103,101,116,95,100,97,116,
-    97,40,9,0,0,0,117,8,0,0,0,95,95,110,97,109,
-    101,95,95,117,10,0,0,0,95,95,109,111,100,117,108,101,
-    95,95,117,12,0,0,0,95,95,113,117,97,108,110,97,109,
-    101,95,95,117,7,0,0,0,95,95,100,111,99,95,95,117,
-    8,0,0,0,95,95,105,110,105,116,95,95,117,11,0,0,
-    0,95,99,104,101,99,107,95,110,97,109,101,117,11,0,0,
-    0,108,111,97,100,95,109,111,100,117,108,101,117,12,0,0,
-    0,103,101,116,95,102,105,108,101,110,97,109,101,117,8,0,
-    0,0,103,101,116,95,100,97,116,97,40,1,0,0,0,117,
-    10,0,0,0,95,95,108,111,99,97,108,115,95,95,40,0,
-    0,0,0,40,1,0,0,0,117,9,0,0,0,95,95,99,
-    108,97,115,115,95,95,117,29,0,0,0,60,102,114,111,122,
-    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
-    111,116,115,116,114,97,112,62,117,10,0,0,0,70,105,108,
-    101,76,111,97,100,101,114,239,3,0,0,115,10,0,0,0,
-    16,3,6,2,12,6,24,7,18,5,117,10,0,0,0,70,
-    105,108,101,76,111,97,100,101,114,99,1,0,0,0,0,0,
-    0,0,1,0,0,0,4,0,0,0,66,0,0,0,115,68,
-    0,0,0,124,0,0,69,101,0,0,90,1,0,100,0,0,
-    90,2,0,100,1,0,90,3,0,100,2,0,100,3,0,132,
-    0,0,90,4,0,100,4,0,100,5,0,132,0,0,90,5,
-    0,100,6,0,100,7,0,100,8,0,100,9,0,132,0,1,
-    90,6,0,100,10,0,83,40,11,0,0,0,117,16,0,0,
+    111,111,116,115,116,114,97,112,62,117,10,0,0,0,112,97,
+    116,104,95,115,116,97,116,115,16,4,0,0,115,4,0,0,
+    0,0,2,15,1,117,27,0,0,0,83,111,117,114,99,101,
+    70,105,108,101,76,111,97,100,101,114,46,112,97,116,104,95,
+    115,116,97,116,115,99,4,0,0,0,0,0,0,0,5,0,
+    0,0,13,0,0,0,67,0,0,0,115,81,0,0,0,121,
+    22,0,116,0,0,106,1,0,124,1,0,131,1,0,106,2,
+    0,125,4,0,87,110,24,0,4,116,3,0,107,10,0,114,
+    48,0,1,1,1,100,1,0,125,4,0,89,110,1,0,88,
+    124,4,0,100,2,0,79,125,4,0,124,0,0,106,4,0,
+    124,2,0,124,3,0,100,3,0,124,4,0,131,2,1,83,
+    40,4,0,0,0,78,105,182,1,0,0,105,128,0,0,0,
+    117,5,0,0,0,95,109,111,100,101,40,5,0,0,0,117,
+    3,0,0,0,95,111,115,117,4,0,0,0,115,116,97,116,
+    117,7,0,0,0,115,116,95,109,111,100,101,117,7,0,0,
+    0,79,83,69,114,114,111,114,117,8,0,0,0,115,101,116,
+    95,100,97,116,97,40,5,0,0,0,117,4,0,0,0,115,
+    101,108,102,117,11,0,0,0,115,111,117,114,99,101,95,112,
+    97,116,104,117,13,0,0,0,98,121,116,101,99,111,100,101,
+    95,112,97,116,104,117,4,0,0,0,100,97,116,97,117,4,
+    0,0,0,109,111,100,101,40,0,0,0,0,40,0,0,0,
+    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
+    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
+    97,112,62,117,15,0,0,0,95,99,97,99,104,101,95,98,
+    121,116,101,99,111,100,101,21,4,0,0,115,12,0,0,0,
+    0,2,3,1,22,1,13,1,11,3,10,1,117,32,0,0,
     0,83,111,117,114,99,101,70,105,108,101,76,111,97,100,101,
-    114,117,62,0,0,0,67,111,110,99,114,101,116,101,32,105,
-    109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,102,
-    32,83,111,117,114,99,101,76,111,97,100,101,114,32,117,115,
-    105,110,103,32,116,104,101,32,102,105,108,101,32,115,121,115,
-    116,101,109,46,99,2,0,0,0,0,0,0,0,3,0,0,
-    0,3,0,0,0,67,0,0,0,115,39,0,0,0,116,0,
-    0,106,1,0,124,1,0,131,1,0,125,2,0,105,2,0,
-    124,2,0,106,2,0,100,1,0,54,124,2,0,106,3,0,
-    100,2,0,54,83,40,3,0,0,0,117,33,0,0,0,82,
-    101,116,117,114,110,32,116,104,101,32,109,101,116,97,100,97,
-    116,97,32,102,111,114,32,116,104,101,32,112,97,116,104,46,
-    117,5,0,0,0,109,116,105,109,101,117,4,0,0,0,115,
-    105,122,101,40,4,0,0,0,117,3,0,0,0,95,111,115,
-    117,4,0,0,0,115,116,97,116,117,8,0,0,0,115,116,
-    95,109,116,105,109,101,117,7,0,0,0,115,116,95,115,105,
-    122,101,40,3,0,0,0,117,4,0,0,0,115,101,108,102,
-    117,4,0,0,0,112,97,116,104,117,2,0,0,0,115,116,
-    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
-    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
-    46,95,98,111,111,116,115,116,114,97,112,62,117,10,0,0,
-    0,112,97,116,104,95,115,116,97,116,115,16,4,0,0,115,
-    4,0,0,0,0,2,15,1,117,27,0,0,0,83,111,117,
-    114,99,101,70,105,108,101,76,111,97,100,101,114,46,112,97,
-    116,104,95,115,116,97,116,115,99,4,0,0,0,0,0,0,
-    0,5,0,0,0,13,0,0,0,67,0,0,0,115,71,0,
-    0,0,121,22,0,116,0,0,106,1,0,124,1,0,131,1,
-    0,106,2,0,125,4,0,87,110,24,0,4,116,3,0,107,
-    10,0,114,48,0,1,1,1,100,1,0,125,4,0,89,110,
-    1,0,88,124,0,0,106,4,0,124,2,0,124,3,0,100,
-    2,0,124,4,0,131,2,1,83,40,3,0,0,0,78,105,
-    182,1,0,0,117,5,0,0,0,95,109,111,100,101,40,5,
-    0,0,0,117,3,0,0,0,95,111,115,117,4,0,0,0,
-    115,116,97,116,117,7,0,0,0,115,116,95,109,111,100,101,
-    117,7,0,0,0,79,83,69,114,114,111,114,117,8,0,0,
-    0,115,101,116,95,100,97,116,97,40,5,0,0,0,117,4,
-    0,0,0,115,101,108,102,117,11,0,0,0,115,111,117,114,
-    99,101,95,112,97,116,104,117,13,0,0,0,98,121,116,101,
-    99,111,100,101,95,112,97,116,104,117,4,0,0,0,100,97,
-    116,97,117,4,0,0,0,109,111,100,101,40,0,0,0,0,
-    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
-    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
-    116,115,116,114,97,112,62,117,15,0,0,0,95,99,97,99,
-    104,101,95,98,121,116,101,99,111,100,101,21,4,0,0,115,
-    10,0,0,0,0,2,3,1,22,1,13,1,11,1,117,32,
-    0,0,0,83,111,117,114,99,101,70,105,108,101,76,111,97,
-    100,101,114,46,95,99,97,99,104,101,95,98,121,116,101,99,
-    111,100,101,117,5,0,0,0,95,109,111,100,101,105,182,1,
-    0,0,99,3,0,0,0,1,0,0,0,8,0,0,0,13,
-    0,0,0,67,0,0,0,115,245,0,0,0,116,0,0,124,
-    1,0,131,1,0,92,2,0,125,4,0,125,5,0,103,0,
-    0,125,6,0,120,54,0,124,4,0,114,80,0,116,1,0,
-    124,4,0,131,1,0,12,114,80,0,116,0,0,124,4,0,
-    131,1,0,92,2,0,125,4,0,125,7,0,124,6,0,106,
-    2,0,124,7,0,131,1,0,1,113,27,0,87,120,97,0,
-    116,3,0,124,6,0,131,1,0,68,93,83,0,125,7,0,
-    116,4,0,124,4,0,124,7,0,131,2,0,125,4,0,121,
-    17,0,116,5,0,106,6,0,124,4,0,131,1,0,1,87,
-    113,94,0,4,116,7,0,107,10,0,114,155,0,1,1,1,
-    119,94,0,89,113,94,0,4,116,8,0,107,10,0,114,176,
-    0,1,1,1,100,1,0,83,89,113,94,0,88,113,94,0,
-    87,121,33,0,116,9,0,124,1,0,124,2,0,124,3,0,
-    131,3,0,1,116,10,0,100,2,0,124,1,0,131,2,0,
-    1,87,110,24,0,4,116,8,0,116,7,0,102,2,0,107,
-    10,0,114,240,0,1,1,1,89,110,1,0,88,100,1,0,
-    83,40,3,0,0,0,117,27,0,0,0,87,114,105,116,101,
-    32,98,121,116,101,115,32,100,97,116,97,32,116,111,32,97,
-    32,102,105,108,101,46,78,117,12,0,0,0,99,114,101,97,
-    116,101,100,32,123,33,114,125,40,11,0,0,0,117,11,0,
-    0,0,95,112,97,116,104,95,115,112,108,105,116,117,11,0,
-    0,0,95,112,97,116,104,95,105,115,100,105,114,117,6,0,
-    0,0,97,112,112,101,110,100,117,8,0,0,0,114,101,118,
-    101,114,115,101,100,117,10,0,0,0,95,112,97,116,104,95,
-    106,111,105,110,117,3,0,0,0,95,111,115,117,5,0,0,
-    0,109,107,100,105,114,117,15,0,0,0,70,105,108,101,69,
-    120,105,115,116,115,69,114,114,111,114,117,15,0,0,0,80,
-    101,114,109,105,115,115,105,111,110,69,114,114,111,114,117,13,
-    0,0,0,95,119,114,105,116,101,95,97,116,111,109,105,99,
-    117,16,0,0,0,95,118,101,114,98,111,115,101,95,109,101,
-    115,115,97,103,101,40,8,0,0,0,117,4,0,0,0,115,
-    101,108,102,117,4,0,0,0,112,97,116,104,117,4,0,0,
-    0,100,97,116,97,117,5,0,0,0,95,109,111,100,101,117,
-    6,0,0,0,112,97,114,101,110,116,117,8,0,0,0,102,
-    105,108,101,110,97,109,101,117,10,0,0,0,112,97,116,104,
-    95,112,97,114,116,115,117,4,0,0,0,112,97,114,116,40,
-    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
-    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
-    95,98,111,111,116,115,116,114,97,112,62,117,8,0,0,0,
-    115,101,116,95,100,97,116,97,29,4,0,0,115,36,0,0,
-    0,0,2,18,1,6,2,22,1,18,1,17,2,19,1,15,
-    1,3,1,17,1,13,2,7,1,13,3,13,1,3,1,16,
-    1,17,1,19,3,117,25,0,0,0,83,111,117,114,99,101,
+    114,46,95,99,97,99,104,101,95,98,121,116,101,99,111,100,
+    101,117,5,0,0,0,95,109,111,100,101,105,182,1,0,0,
+    99,3,0,0,0,1,0,0,0,9,0,0,0,18,0,0,
+    0,67,0,0,0,115,53,1,0,0,116,0,0,124,1,0,
+    131,1,0,92,2,0,125,4,0,125,5,0,103,0,0,125,
+    6,0,120,54,0,124,4,0,114,80,0,116,1,0,124,4,
+    0,131,1,0,12,114,80,0,116,0,0,124,4,0,131,1,
+    0,92,2,0,125,4,0,125,7,0,124,6,0,106,2,0,
+    124,7,0,131,1,0,1,113,27,0,87,120,132,0,116,3,
+    0,124,6,0,131,1,0,68,93,118,0,125,7,0,116,4,
+    0,124,4,0,124,7,0,131,2,0,125,4,0,121,17,0,
+    116,5,0,106,6,0,124,4,0,131,1,0,1,87,113,94,
+    0,4,116,7,0,107,10,0,114,155,0,1,1,1,119,94,
+    0,89,113,94,0,4,116,8,0,107,10,0,114,211,0,1,
+    125,8,0,1,122,25,0,116,9,0,100,1,0,124,4,0,
+    124,8,0,131,3,0,1,100,2,0,83,87,89,100,2,0,
+    100,2,0,125,8,0,126,8,0,88,113,94,0,88,113,94,
+    0,87,121,33,0,116,10,0,124,1,0,124,2,0,124,3,
+    0,131,3,0,1,116,9,0,100,3,0,124,1,0,131,2,
+    0,1,87,110,53,0,4,116,8,0,107,10,0,114,48,1,
+    1,125,8,0,1,122,21,0,116,9,0,100,1,0,124,1,
+    0,124,8,0,131,3,0,1,87,89,100,2,0,100,2,0,
+    125,8,0,126,8,0,88,110,1,0,88,100,2,0,83,40,
+    4,0,0,0,117,27,0,0,0,87,114,105,116,101,32,98,
+    121,116,101,115,32,100,97,116,97,32,116,111,32,97,32,102,
+    105,108,101,46,117,27,0,0,0,99,111,117,108,100,32,110,
+    111,116,32,99,114,101,97,116,101,32,123,33,114,125,58,32,
+    123,33,114,125,78,117,12,0,0,0,99,114,101,97,116,101,
+    100,32,123,33,114,125,40,11,0,0,0,117,11,0,0,0,
+    95,112,97,116,104,95,115,112,108,105,116,117,11,0,0,0,
+    95,112,97,116,104,95,105,115,100,105,114,117,6,0,0,0,
+    97,112,112,101,110,100,117,8,0,0,0,114,101,118,101,114,
+    115,101,100,117,10,0,0,0,95,112,97,116,104,95,106,111,
+    105,110,117,3,0,0,0,95,111,115,117,5,0,0,0,109,
+    107,100,105,114,117,15,0,0,0,70,105,108,101,69,120,105,
+    115,116,115,69,114,114,111,114,117,7,0,0,0,79,83,69,
+    114,114,111,114,117,16,0,0,0,95,118,101,114,98,111,115,
+    101,95,109,101,115,115,97,103,101,117,13,0,0,0,95,119,
+    114,105,116,101,95,97,116,111,109,105,99,40,9,0,0,0,
+    117,4,0,0,0,115,101,108,102,117,4,0,0,0,112,97,
+    116,104,117,4,0,0,0,100,97,116,97,117,5,0,0,0,
+    95,109,111,100,101,117,6,0,0,0,112,97,114,101,110,116,
+    117,8,0,0,0,102,105,108,101,110,97,109,101,117,10,0,
+    0,0,112,97,116,104,95,112,97,114,116,115,117,4,0,0,
+    0,112,97,114,116,117,3,0,0,0,101,120,99,40,0,0,
+    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
+    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
+    111,111,116,115,116,114,97,112,62,117,8,0,0,0,115,101,
+    116,95,100,97,116,97,32,4,0,0,115,38,0,0,0,0,
+    2,18,1,6,2,22,1,18,1,17,2,19,1,15,1,3,
+    1,17,1,13,2,7,1,18,3,16,1,27,1,3,1,16,
+    1,17,1,18,2,117,25,0,0,0,83,111,117,114,99,101,
     70,105,108,101,76,111,97,100,101,114,46,115,101,116,95,100,
     97,116,97,78,40,7,0,0,0,117,8,0,0,0,95,95,
     110,97,109,101,95,95,117,10,0,0,0,95,95,109,111,100,
@@ -2544,7 +2550,7 @@
     111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
     112,62,117,16,0,0,0,83,111,117,114,99,101,70,105,108,
     101,76,111,97,100,101,114,12,4,0,0,115,8,0,0,0,
-    16,2,6,2,12,5,12,8,117,16,0,0,0,83,111,117,
+    16,2,6,2,12,5,12,11,117,16,0,0,0,83,111,117,
     114,99,101,70,105,108,101,76,111,97,100,101,114,99,1,0,
     0,0,0,0,0,0,1,0,0,0,2,0,0,0,66,0,
     0,0,115,62,0,0,0,124,0,0,69,101,0,0,90,1,
@@ -2567,7 +2573,7 @@
     109,101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
     0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
     105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,
-    0,0,0,108,111,97,100,95,109,111,100,117,108,101,62,4,
+    0,0,0,108,111,97,100,95,109,111,100,117,108,101,65,4,
     0,0,115,2,0,0,0,0,1,117,32,0,0,0,83,111,
     117,114,99,101,108,101,115,115,70,105,108,101,76,111,97,100,
     101,114,46,108,111,97,100,95,109,111,100,117,108,101,99,2,
@@ -2604,7 +2610,7 @@
     0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
     122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
     111,111,116,115,116,114,97,112,62,117,8,0,0,0,103,101,
-    116,95,99,111,100,101,65,4,0,0,115,18,0,0,0,0,
+    116,95,99,111,100,101,68,4,0,0,115,18,0,0,0,0,
     1,15,1,15,1,24,1,15,1,15,1,13,1,4,2,18,
     1,117,29,0,0,0,83,111,117,114,99,101,108,101,115,115,
     70,105,108,101,76,111,97,100,101,114,46,103,101,116,95,99,
@@ -2619,7 +2625,7 @@
     0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
     101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
     111,116,115,116,114,97,112,62,117,10,0,0,0,103,101,116,
-    95,115,111,117,114,99,101,77,4,0,0,115,2,0,0,0,
+    95,115,111,117,114,99,101,80,4,0,0,115,2,0,0,0,
     0,2,117,31,0,0,0,83,111,117,114,99,101,108,101,115,
     115,70,105,108,101,76,111,97,100,101,114,46,103,101,116,95,
     115,111,117,114,99,101,78,40,7,0,0,0,117,8,0,0,
@@ -2634,7 +2640,7 @@
     29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
     114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
     62,117,20,0,0,0,83,111,117,114,99,101,108,101,115,115,
-    70,105,108,101,76,111,97,100,101,114,58,4,0,0,115,8,
+    70,105,108,101,76,111,97,100,101,114,61,4,0,0,115,8,
     0,0,0,16,2,6,2,12,3,12,12,117,20,0,0,0,
     83,111,117,114,99,101,108,101,115,115,70,105,108,101,76,111,
     97,100,101,114,99,1,0,0,0,0,0,0,0,1,0,0,
@@ -2663,7 +2669,7 @@
     116,104,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
     0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
     105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,8,
-    0,0,0,95,95,105,110,105,116,95,95,94,4,0,0,115,
+    0,0,0,95,95,105,110,105,116,95,95,97,4,0,0,115,
     4,0,0,0,0,1,9,1,117,28,0,0,0,69,120,116,
     101,110,115,105,111,110,70,105,108,101,76,111,97,100,101,114,
     46,95,95,105,110,105,116,95,95,99,2,0,0,0,0,0,
@@ -2702,7 +2708,7 @@
     0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
     105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
     116,114,97,112,62,117,11,0,0,0,108,111,97,100,95,109,
-    111,100,117,108,101,98,4,0,0,115,24,0,0,0,0,5,
+    111,100,117,108,101,101,4,0,0,115,24,0,0,0,0,5,
     15,1,3,1,9,1,15,1,16,1,31,1,28,1,8,1,
     3,1,22,1,13,1,117,31,0,0,0,69,120,116,101,110,
     115,105,111,110,70,105,108,101,76,111,97,100,101,114,46,108,
@@ -2726,7 +2732,7 @@
     0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
     32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
     115,116,114,97,112,62,117,9,0,0,0,60,103,101,110,101,
-    120,112,114,62,119,4,0,0,115,2,0,0,0,6,1,117,
+    120,112,114,62,122,4,0,0,115,2,0,0,0,6,1,117,
     49,0,0,0,69,120,116,101,110,115,105,111,110,70,105,108,
     101,76,111,97,100,101,114,46,105,115,95,112,97,99,107,97,
     103,101,46,60,108,111,99,97,108,115,62,46,60,103,101,110,
@@ -2740,7 +2746,7 @@
     95,110,97,109,101,117,29,0,0,0,60,102,114,111,122,101,
     110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
     116,115,116,114,97,112,62,117,10,0,0,0,105,115,95,112,
-    97,99,107,97,103,101,116,4,0,0,115,6,0,0,0,0,
+    97,99,107,97,103,101,119,4,0,0,115,6,0,0,0,0,
     2,19,1,18,1,117,30,0,0,0,69,120,116,101,110,115,
     105,111,110,70,105,108,101,76,111,97,100,101,114,46,105,115,
     95,112,97,99,107,97,103,101,99,2,0,0,0,0,0,0,
@@ -2756,7 +2762,7 @@
     0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
     105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
     116,114,97,112,62,117,8,0,0,0,103,101,116,95,99,111,
-    100,101,122,4,0,0,115,2,0,0,0,0,2,117,28,0,
+    100,101,125,4,0,0,115,2,0,0,0,0,2,117,28,0,
     0,0,69,120,116,101,110,115,105,111,110,70,105,108,101,76,
     111,97,100,101,114,46,103,101,116,95,99,111,100,101,99,2,
     0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,67,
@@ -2771,7 +2777,7 @@
     29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
     114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
     62,117,10,0,0,0,103,101,116,95,115,111,117,114,99,101,
-    126,4,0,0,115,2,0,0,0,0,2,117,30,0,0,0,
+    129,4,0,0,115,2,0,0,0,0,2,117,30,0,0,0,
     69,120,116,101,110,115,105,111,110,70,105,108,101,76,111,97,
     100,101,114,46,103,101,116,95,115,111,117,114,99,101,78,40,
     12,0,0,0,117,8,0,0,0,95,95,110,97,109,101,95,
@@ -2790,7 +2796,7 @@
     0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
     109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
     114,97,112,62,117,19,0,0,0,69,120,116,101,110,115,105,
-    111,110,70,105,108,101,76,111,97,100,101,114,86,4,0,0,
+    111,110,70,105,108,101,76,111,97,100,101,114,89,4,0,0,
     115,16,0,0,0,16,6,6,2,12,4,3,1,3,1,24,
     16,12,6,12,4,117,19,0,0,0,69,120,116,101,110,115,
     105,111,110,70,105,108,101,76,111,97,100,101,114,99,1,0,
@@ -2805,7 +2811,7 @@
     0,100,16,0,100,17,0,132,0,0,90,11,0,100,18,0,
     100,19,0,132,0,0,90,12,0,100,20,0,83,40,21,0,
     0,0,117,14,0,0,0,95,78,97,109,101,115,112,97,99,
-    101,80,97,116,104,117,37,1,0,0,82,101,112,114,101,115,
+    101,80,97,116,104,117,38,1,0,0,82,101,112,114,101,115,
     101,110,116,115,32,97,32,110,97,109,101,115,112,97,99,101,
     32,112,97,99,107,97,103,101,39,115,32,112,97,116,104,46,
     32,32,73,116,32,117,115,101,115,32,116,104,101,32,109,111,
@@ -2820,1575 +2826,1583 @@
     111,119,110,32,112,97,116,104,32,105,115,32,114,101,99,111,
     109,112,117,116,101,100,44,10,32,32,32,32,117,115,105,110,
     103,32,112,97,116,104,95,102,105,110,100,101,114,46,32,32,
-    70,111,114,32,116,111,112,45,108,101,118,101,32,109,111,100,
-    117,108,101,115,44,32,116,104,101,32,112,97,114,101,110,116,
-    32,109,111,100,117,108,101,39,115,32,112,97,116,104,10,32,
-    32,32,32,105,115,32,115,121,115,46,112,97,116,104,46,99,
-    4,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,
-    67,0,0,0,115,52,0,0,0,124,1,0,124,0,0,95,
-    0,0,124,2,0,124,0,0,95,1,0,116,2,0,124,0,
-    0,106,3,0,131,0,0,131,1,0,124,0,0,95,4,0,
-    124,3,0,124,0,0,95,5,0,100,0,0,83,40,1,0,
-    0,0,78,40,6,0,0,0,117,5,0,0,0,95,110,97,
-    109,101,117,5,0,0,0,95,112,97,116,104,117,5,0,0,
-    0,116,117,112,108,101,117,16,0,0,0,95,103,101,116,95,
-    112,97,114,101,110,116,95,112,97,116,104,117,17,0,0,0,
-    95,108,97,115,116,95,112,97,114,101,110,116,95,112,97,116,
-    104,117,12,0,0,0,95,112,97,116,104,95,102,105,110,100,
-    101,114,40,4,0,0,0,117,4,0,0,0,115,101,108,102,
-    117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,97,
-    116,104,117,11,0,0,0,112,97,116,104,95,102,105,110,100,
-    101,114,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
-    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
-    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,8,
-    0,0,0,95,95,105,110,105,116,95,95,138,4,0,0,115,
-    8,0,0,0,0,1,9,1,9,1,21,1,117,23,0,0,
-    0,95,78,97,109,101,115,112,97,99,101,80,97,116,104,46,
-    95,95,105,110,105,116,95,95,99,1,0,0,0,0,0,0,
-    0,4,0,0,0,3,0,0,0,67,0,0,0,115,53,0,
-    0,0,124,0,0,106,0,0,106,1,0,100,1,0,131,1,
-    0,92,3,0,125,1,0,125,2,0,125,3,0,124,2,0,
-    100,2,0,107,2,0,114,43,0,100,6,0,83,124,1,0,
-    100,5,0,102,2,0,83,40,7,0,0,0,117,62,0,0,
-    0,82,101,116,117,114,110,115,32,97,32,116,117,112,108,101,
-    32,111,102,32,40,112,97,114,101,110,116,45,109,111,100,117,
-    108,101,45,110,97,109,101,44,32,112,97,114,101,110,116,45,
-    112,97,116,104,45,97,116,116,114,45,110,97,109,101,41,117,
-    1,0,0,0,46,117,0,0,0,0,117,3,0,0,0,115,
-    121,115,117,4,0,0,0,112,97,116,104,117,8,0,0,0,
-    95,95,112,97,116,104,95,95,40,2,0,0,0,117,3,0,
-    0,0,115,121,115,117,4,0,0,0,112,97,116,104,40,2,
-    0,0,0,117,5,0,0,0,95,110,97,109,101,117,10,0,
-    0,0,114,112,97,114,116,105,116,105,111,110,40,4,0,0,
-    0,117,4,0,0,0,115,101,108,102,117,6,0,0,0,112,
-    97,114,101,110,116,117,3,0,0,0,100,111,116,117,2,0,
-    0,0,109,101,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,23,0,0,0,95,102,105,110,100,95,112,97,114,101,110,
-    116,95,112,97,116,104,95,110,97,109,101,115,144,4,0,0,
-    115,8,0,0,0,0,2,27,1,12,2,4,3,117,38,0,
+    70,111,114,32,116,111,112,45,108,101,118,101,108,32,109,111,
+    100,117,108,101,115,44,32,116,104,101,32,112,97,114,101,110,
+    116,32,109,111,100,117,108,101,39,115,32,112,97,116,104,10,
+    32,32,32,32,105,115,32,115,121,115,46,112,97,116,104,46,
+    99,4,0,0,0,0,0,0,0,4,0,0,0,2,0,0,
+    0,67,0,0,0,115,52,0,0,0,124,1,0,124,0,0,
+    95,0,0,124,2,0,124,0,0,95,1,0,116,2,0,124,
+    0,0,106,3,0,131,0,0,131,1,0,124,0,0,95,4,
+    0,124,3,0,124,0,0,95,5,0,100,0,0,83,40,1,
+    0,0,0,78,40,6,0,0,0,117,5,0,0,0,95,110,
+    97,109,101,117,5,0,0,0,95,112,97,116,104,117,5,0,
+    0,0,116,117,112,108,101,117,16,0,0,0,95,103,101,116,
+    95,112,97,114,101,110,116,95,112,97,116,104,117,17,0,0,
+    0,95,108,97,115,116,95,112,97,114,101,110,116,95,112,97,
+    116,104,117,12,0,0,0,95,112,97,116,104,95,102,105,110,
+    100,101,114,40,4,0,0,0,117,4,0,0,0,115,101,108,
+    102,117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,
+    97,116,104,117,11,0,0,0,112,97,116,104,95,102,105,110,
+    100,101,114,40,0,0,0,0,40,0,0,0,0,117,29,0,
+    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
+    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
+    8,0,0,0,95,95,105,110,105,116,95,95,141,4,0,0,
+    115,8,0,0,0,0,1,9,1,9,1,21,1,117,23,0,
     0,0,95,78,97,109,101,115,112,97,99,101,80,97,116,104,
-    46,95,102,105,110,100,95,112,97,114,101,110,116,95,112,97,
-    116,104,95,110,97,109,101,115,99,1,0,0,0,0,0,0,
-    0,3,0,0,0,3,0,0,0,67,0,0,0,115,38,0,
-    0,0,124,0,0,106,0,0,131,0,0,92,2,0,125,1,
-    0,125,2,0,116,1,0,116,2,0,106,3,0,124,1,0,
-    25,124,2,0,131,2,0,83,40,1,0,0,0,78,40,4,
-    0,0,0,117,23,0,0,0,95,102,105,110,100,95,112,97,
-    114,101,110,116,95,112,97,116,104,95,110,97,109,101,115,117,
-    7,0,0,0,103,101,116,97,116,116,114,117,3,0,0,0,
-    115,121,115,117,7,0,0,0,109,111,100,117,108,101,115,40,
-    3,0,0,0,117,4,0,0,0,115,101,108,102,117,18,0,
-    0,0,112,97,114,101,110,116,95,109,111,100,117,108,101,95,
-    110,97,109,101,117,14,0,0,0,112,97,116,104,95,97,116,
-    116,114,95,110,97,109,101,40,0,0,0,0,40,0,0,0,
-    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
-    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,16,0,0,0,95,103,101,116,95,112,97,114,
-    101,110,116,95,112,97,116,104,154,4,0,0,115,4,0,0,
-    0,0,1,18,1,117,31,0,0,0,95,78,97,109,101,115,
-    112,97,99,101,80,97,116,104,46,95,103,101,116,95,112,97,
-    114,101,110,116,95,112,97,116,104,99,1,0,0,0,0,0,
-    0,0,4,0,0,0,3,0,0,0,67,0,0,0,115,103,
-    0,0,0,116,0,0,124,0,0,106,1,0,131,0,0,131,
-    1,0,125,1,0,124,1,0,124,0,0,106,2,0,107,3,
-    0,114,96,0,124,0,0,106,3,0,124,0,0,106,4,0,
-    124,1,0,131,2,0,92,2,0,125,2,0,125,3,0,124,
-    2,0,100,0,0,107,8,0,114,84,0,124,3,0,124,0,
-    0,95,6,0,110,0,0,124,1,0,124,0,0,95,2,0,
-    110,0,0,124,0,0,106,6,0,83,40,1,0,0,0,78,
-    40,7,0,0,0,117,5,0,0,0,116,117,112,108,101,117,
-    16,0,0,0,95,103,101,116,95,112,97,114,101,110,116,95,
-    112,97,116,104,117,17,0,0,0,95,108,97,115,116,95,112,
-    97,114,101,110,116,95,112,97,116,104,117,12,0,0,0,95,
-    112,97,116,104,95,102,105,110,100,101,114,117,5,0,0,0,
-    95,110,97,109,101,117,4,0,0,0,78,111,110,101,117,5,
-    0,0,0,95,112,97,116,104,40,4,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,11,0,0,0,112,97,114,101,110,
-    116,95,112,97,116,104,117,6,0,0,0,108,111,97,100,101,
-    114,117,8,0,0,0,110,101,119,95,112,97,116,104,40,0,
-    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
-    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
-    98,111,111,116,115,116,114,97,112,62,117,12,0,0,0,95,
-    114,101,99,97,108,99,117,108,97,116,101,158,4,0,0,115,
-    14,0,0,0,0,2,18,1,15,1,27,3,12,1,12,1,
-    12,1,117,27,0,0,0,95,78,97,109,101,115,112,97,99,
-    101,80,97,116,104,46,95,114,101,99,97,108,99,117,108,97,
-    116,101,99,1,0,0,0,0,0,0,0,1,0,0,0,2,
-    0,0,0,67,0,0,0,115,16,0,0,0,116,0,0,124,
-    0,0,106,1,0,131,0,0,131,1,0,83,40,1,0,0,
-    0,78,40,2,0,0,0,117,4,0,0,0,105,116,101,114,
-    117,12,0,0,0,95,114,101,99,97,108,99,117,108,97,116,
-    101,40,1,0,0,0,117,4,0,0,0,115,101,108,102,40,
+    46,95,95,105,110,105,116,95,95,99,1,0,0,0,0,0,
+    0,0,4,0,0,0,3,0,0,0,67,0,0,0,115,53,
+    0,0,0,124,0,0,106,0,0,106,1,0,100,1,0,131,
+    1,0,92,3,0,125,1,0,125,2,0,125,3,0,124,2,
+    0,100,2,0,107,2,0,114,43,0,100,6,0,83,124,1,
+    0,100,5,0,102,2,0,83,40,7,0,0,0,117,62,0,
+    0,0,82,101,116,117,114,110,115,32,97,32,116,117,112,108,
+    101,32,111,102,32,40,112,97,114,101,110,116,45,109,111,100,
+    117,108,101,45,110,97,109,101,44,32,112,97,114,101,110,116,
+    45,112,97,116,104,45,97,116,116,114,45,110,97,109,101,41,
+    117,1,0,0,0,46,117,0,0,0,0,117,3,0,0,0,
+    115,121,115,117,4,0,0,0,112,97,116,104,117,8,0,0,
+    0,95,95,112,97,116,104,95,95,40,2,0,0,0,117,3,
+    0,0,0,115,121,115,117,4,0,0,0,112,97,116,104,40,
+    2,0,0,0,117,5,0,0,0,95,110,97,109,101,117,10,
+    0,0,0,114,112,97,114,116,105,116,105,111,110,40,4,0,
+    0,0,117,4,0,0,0,115,101,108,102,117,6,0,0,0,
+    112,97,114,101,110,116,117,3,0,0,0,100,111,116,117,2,
+    0,0,0,109,101,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,23,0,0,0,95,102,105,110,100,95,112,97,114,101,
+    110,116,95,112,97,116,104,95,110,97,109,101,115,147,4,0,
+    0,115,8,0,0,0,0,2,27,1,12,2,4,3,117,38,
+    0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,116,
+    104,46,95,102,105,110,100,95,112,97,114,101,110,116,95,112,
+    97,116,104,95,110,97,109,101,115,99,1,0,0,0,0,0,
+    0,0,3,0,0,0,3,0,0,0,67,0,0,0,115,38,
+    0,0,0,124,0,0,106,0,0,131,0,0,92,2,0,125,
+    1,0,125,2,0,116,1,0,116,2,0,106,3,0,124,1,
+    0,25,124,2,0,131,2,0,83,40,1,0,0,0,78,40,
+    4,0,0,0,117,23,0,0,0,95,102,105,110,100,95,112,
+    97,114,101,110,116,95,112,97,116,104,95,110,97,109,101,115,
+    117,7,0,0,0,103,101,116,97,116,116,114,117,3,0,0,
+    0,115,121,115,117,7,0,0,0,109,111,100,117,108,101,115,
+    40,3,0,0,0,117,4,0,0,0,115,101,108,102,117,18,
+    0,0,0,112,97,114,101,110,116,95,109,111,100,117,108,101,
+    95,110,97,109,101,117,14,0,0,0,112,97,116,104,95,97,
+    116,116,114,95,110,97,109,101,40,0,0,0,0,40,0,0,
+    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
+    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
+    114,97,112,62,117,16,0,0,0,95,103,101,116,95,112,97,
+    114,101,110,116,95,112,97,116,104,157,4,0,0,115,4,0,
+    0,0,0,1,18,1,117,31,0,0,0,95,78,97,109,101,
+    115,112,97,99,101,80,97,116,104,46,95,103,101,116,95,112,
+    97,114,101,110,116,95,112,97,116,104,99,1,0,0,0,0,
+    0,0,0,4,0,0,0,3,0,0,0,67,0,0,0,115,
+    103,0,0,0,116,0,0,124,0,0,106,1,0,131,0,0,
+    131,1,0,125,1,0,124,1,0,124,0,0,106,2,0,107,
+    3,0,114,96,0,124,0,0,106,3,0,124,0,0,106,4,
+    0,124,1,0,131,2,0,92,2,0,125,2,0,125,3,0,
+    124,2,0,100,0,0,107,8,0,114,84,0,124,3,0,124,
+    0,0,95,6,0,110,0,0,124,1,0,124,0,0,95,2,
+    0,110,0,0,124,0,0,106,6,0,83,40,1,0,0,0,
+    78,40,7,0,0,0,117,5,0,0,0,116,117,112,108,101,
+    117,16,0,0,0,95,103,101,116,95,112,97,114,101,110,116,
+    95,112,97,116,104,117,17,0,0,0,95,108,97,115,116,95,
+    112,97,114,101,110,116,95,112,97,116,104,117,12,0,0,0,
+    95,112,97,116,104,95,102,105,110,100,101,114,117,5,0,0,
+    0,95,110,97,109,101,117,4,0,0,0,78,111,110,101,117,
+    5,0,0,0,95,112,97,116,104,40,4,0,0,0,117,4,
+    0,0,0,115,101,108,102,117,11,0,0,0,112,97,114,101,
+    110,116,95,112,97,116,104,117,6,0,0,0,108,111,97,100,
+    101,114,117,8,0,0,0,110,101,119,95,112,97,116,104,40,
     0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
     114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
-    95,98,111,111,116,115,116,114,97,112,62,117,8,0,0,0,
-    95,95,105,116,101,114,95,95,170,4,0,0,115,2,0,0,
-    0,0,1,117,23,0,0,0,95,78,97,109,101,115,112,97,
-    99,101,80,97,116,104,46,95,95,105,116,101,114,95,95,99,
-    1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,
-    67,0,0,0,115,16,0,0,0,116,0,0,124,0,0,106,
-    1,0,131,0,0,131,1,0,83,40,1,0,0,0,78,40,
-    2,0,0,0,117,3,0,0,0,108,101,110,117,12,0,0,
-    0,95,114,101,99,97,108,99,117,108,97,116,101,40,1,0,
+    95,98,111,111,116,115,116,114,97,112,62,117,12,0,0,0,
+    95,114,101,99,97,108,99,117,108,97,116,101,161,4,0,0,
+    115,14,0,0,0,0,2,18,1,15,1,27,3,12,1,12,
+    1,12,1,117,27,0,0,0,95,78,97,109,101,115,112,97,
+    99,101,80,97,116,104,46,95,114,101,99,97,108,99,117,108,
+    97,116,101,99,1,0,0,0,0,0,0,0,1,0,0,0,
+    2,0,0,0,67,0,0,0,115,16,0,0,0,116,0,0,
+    124,0,0,106,1,0,131,0,0,131,1,0,83,40,1,0,
+    0,0,78,40,2,0,0,0,117,4,0,0,0,105,116,101,
+    114,117,12,0,0,0,95,114,101,99,97,108,99,117,108,97,
+    116,101,40,1,0,0,0,117,4,0,0,0,115,101,108,102,
+    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,8,0,0,
+    0,95,95,105,116,101,114,95,95,173,4,0,0,115,2,0,
+    0,0,0,1,117,23,0,0,0,95,78,97,109,101,115,112,
+    97,99,101,80,97,116,104,46,95,95,105,116,101,114,95,95,
+    99,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,
+    0,67,0,0,0,115,16,0,0,0,116,0,0,124,0,0,
+    106,1,0,131,0,0,131,1,0,83,40,1,0,0,0,78,
+    40,2,0,0,0,117,3,0,0,0,108,101,110,117,12,0,
+    0,0,95,114,101,99,97,108,99,117,108,97,116,101,40,1,
+    0,0,0,117,4,0,0,0,115,101,108,102,40,0,0,0,
+    0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
+    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
+    111,116,115,116,114,97,112,62,117,7,0,0,0,95,95,108,
+    101,110,95,95,176,4,0,0,115,2,0,0,0,0,1,117,
+    22,0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,
+    116,104,46,95,95,108,101,110,95,95,99,1,0,0,0,0,
+    0,0,0,1,0,0,0,2,0,0,0,67,0,0,0,115,
+    16,0,0,0,100,1,0,106,0,0,124,0,0,106,1,0,
+    131,1,0,83,40,2,0,0,0,78,117,20,0,0,0,95,
+    78,97,109,101,115,112,97,99,101,80,97,116,104,40,123,33,
+    114,125,41,40,2,0,0,0,117,6,0,0,0,102,111,114,
+    109,97,116,117,5,0,0,0,95,112,97,116,104,40,1,0,
     0,0,117,4,0,0,0,115,101,108,102,40,0,0,0,0,
     40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
     110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
-    116,115,116,114,97,112,62,117,7,0,0,0,95,95,108,101,
-    110,95,95,173,4,0,0,115,2,0,0,0,0,1,117,22,
-    0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,116,
-    104,46,95,95,108,101,110,95,95,99,1,0,0,0,0,0,
-    0,0,1,0,0,0,2,0,0,0,67,0,0,0,115,16,
-    0,0,0,100,1,0,106,0,0,124,0,0,106,1,0,131,
-    1,0,83,40,2,0,0,0,78,117,20,0,0,0,95,78,
-    97,109,101,115,112,97,99,101,80,97,116,104,40,123,33,114,
-    125,41,40,2,0,0,0,117,6,0,0,0,102,111,114,109,
-    97,116,117,5,0,0,0,95,112,97,116,104,40,1,0,0,
-    0,117,4,0,0,0,115,101,108,102,40,0,0,0,0,40,
+    116,115,116,114,97,112,62,117,8,0,0,0,95,95,114,101,
+    112,114,95,95,179,4,0,0,115,2,0,0,0,0,1,117,
+    23,0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,
+    116,104,46,95,95,114,101,112,114,95,95,99,2,0,0,0,
+    0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,0,
+    115,16,0,0,0,124,1,0,124,0,0,106,0,0,131,0,
+    0,107,6,0,83,40,1,0,0,0,78,40,1,0,0,0,
+    117,12,0,0,0,95,114,101,99,97,108,99,117,108,97,116,
+    101,40,2,0,0,0,117,4,0,0,0,115,101,108,102,117,
+    4,0,0,0,105,116,101,109,40,0,0,0,0,40,0,0,
+    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
+    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
+    114,97,112,62,117,12,0,0,0,95,95,99,111,110,116,97,
+    105,110,115,95,95,182,4,0,0,115,2,0,0,0,0,1,
+    117,27,0,0,0,95,78,97,109,101,115,112,97,99,101,80,
+    97,116,104,46,95,95,99,111,110,116,97,105,110,115,95,95,
+    99,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,
+    0,67,0,0,0,115,20,0,0,0,124,0,0,106,0,0,
+    106,1,0,124,1,0,131,1,0,1,100,0,0,83,40,1,
+    0,0,0,78,40,2,0,0,0,117,5,0,0,0,95,112,
+    97,116,104,117,6,0,0,0,97,112,112,101,110,100,40,2,
+    0,0,0,117,4,0,0,0,115,101,108,102,117,4,0,0,
+    0,105,116,101,109,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,6,0,0,0,97,112,112,101,110,100,185,4,0,0,
+    115,2,0,0,0,0,1,117,21,0,0,0,95,78,97,109,
+    101,115,112,97,99,101,80,97,116,104,46,97,112,112,101,110,
+    100,78,40,13,0,0,0,117,8,0,0,0,95,95,110,97,
+    109,101,95,95,117,10,0,0,0,95,95,109,111,100,117,108,
+    101,95,95,117,12,0,0,0,95,95,113,117,97,108,110,97,
+    109,101,95,95,117,7,0,0,0,95,95,100,111,99,95,95,
+    117,8,0,0,0,95,95,105,110,105,116,95,95,117,23,0,
+    0,0,95,102,105,110,100,95,112,97,114,101,110,116,95,112,
+    97,116,104,95,110,97,109,101,115,117,16,0,0,0,95,103,
+    101,116,95,112,97,114,101,110,116,95,112,97,116,104,117,12,
+    0,0,0,95,114,101,99,97,108,99,117,108,97,116,101,117,
+    8,0,0,0,95,95,105,116,101,114,95,95,117,7,0,0,
+    0,95,95,108,101,110,95,95,117,8,0,0,0,95,95,114,
+    101,112,114,95,95,117,12,0,0,0,95,95,99,111,110,116,
+    97,105,110,115,95,95,117,6,0,0,0,97,112,112,101,110,
+    100,40,1,0,0,0,117,10,0,0,0,95,95,108,111,99,
+    97,108,115,95,95,40,0,0,0,0,40,0,0,0,0,117,
+    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
+    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
+    62,117,14,0,0,0,95,78,97,109,101,115,112,97,99,101,
+    80,97,116,104,134,4,0,0,115,20,0,0,0,16,5,6,
+    2,12,6,12,10,12,4,12,12,12,3,12,3,12,3,12,
+    3,117,14,0,0,0,95,78,97,109,101,115,112,97,99,101,
+    80,97,116,104,99,1,0,0,0,0,0,0,0,1,0,0,
+    0,3,0,0,0,66,0,0,0,115,68,0,0,0,124,0,
+    0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,1,
+    0,100,2,0,132,0,0,90,3,0,101,4,0,100,3,0,
+    100,4,0,132,0,0,131,1,0,90,5,0,101,6,0,100,
+    5,0,100,6,0,132,0,0,131,1,0,90,7,0,100,7,
+    0,83,40,8,0,0,0,117,15,0,0,0,78,97,109,101,
+    115,112,97,99,101,76,111,97,100,101,114,99,4,0,0,0,
+    0,0,0,0,4,0,0,0,4,0,0,0,67,0,0,0,
+    115,25,0,0,0,116,0,0,124,1,0,124,2,0,124,3,
+    0,131,3,0,124,0,0,95,1,0,100,0,0,83,40,1,
+    0,0,0,78,40,2,0,0,0,117,14,0,0,0,95,78,
+    97,109,101,115,112,97,99,101,80,97,116,104,117,5,0,0,
+    0,95,112,97,116,104,40,4,0,0,0,117,4,0,0,0,
+    115,101,108,102,117,4,0,0,0,110,97,109,101,117,4,0,
+    0,0,112,97,116,104,117,11,0,0,0,112,97,116,104,95,
+    102,105,110,100,101,114,40,0,0,0,0,40,0,0,0,0,
+    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
+    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
+    112,62,117,8,0,0,0,95,95,105,110,105,116,95,95,190,
+    4,0,0,115,2,0,0,0,0,1,117,24,0,0,0,78,
+    97,109,101,115,112,97,99,101,76,111,97,100,101,114,46,95,
+    95,105,110,105,116,95,95,99,2,0,0,0,0,0,0,0,
+    2,0,0,0,2,0,0,0,67,0,0,0,115,16,0,0,
+    0,100,1,0,106,0,0,124,1,0,106,1,0,131,1,0,
+    83,40,2,0,0,0,78,117,25,0,0,0,60,109,111,100,
+    117,108,101,32,39,123,125,39,32,40,110,97,109,101,115,112,
+    97,99,101,41,62,40,2,0,0,0,117,6,0,0,0,102,
+    111,114,109,97,116,117,8,0,0,0,95,95,110,97,109,101,
+    95,95,40,2,0,0,0,117,3,0,0,0,99,108,115,117,
+    6,0,0,0,109,111,100,117,108,101,40,0,0,0,0,40,
     0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
     32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,8,0,0,0,95,95,114,101,112,
-    114,95,95,176,4,0,0,115,2,0,0,0,0,1,117,23,
-    0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,116,
-    104,46,95,95,114,101,112,114,95,95,99,2,0,0,0,0,
-    0,0,0,2,0,0,0,2,0,0,0,67,0,0,0,115,
-    16,0,0,0,124,1,0,124,0,0,106,0,0,131,0,0,
-    107,6,0,83,40,1,0,0,0,78,40,1,0,0,0,117,
-    12,0,0,0,95,114,101,99,97,108,99,117,108,97,116,101,
-    40,2,0,0,0,117,4,0,0,0,115,101,108,102,117,4,
-    0,0,0,105,116,101,109,40,0,0,0,0,40,0,0,0,
+    115,116,114,97,112,62,117,11,0,0,0,109,111,100,117,108,
+    101,95,114,101,112,114,193,4,0,0,115,2,0,0,0,0,
+    2,117,27,0,0,0,78,97,109,101,115,112,97,99,101,76,
+    111,97,100,101,114,46,109,111,100,117,108,101,95,114,101,112,
+    114,99,2,0,0,0,0,0,0,0,2,0,0,0,3,0,
+    0,0,67,0,0,0,115,32,0,0,0,116,0,0,100,1,
+    0,124,0,0,106,1,0,131,2,0,1,124,0,0,106,1,
+    0,124,1,0,95,2,0,124,1,0,83,40,2,0,0,0,
+    117,24,0,0,0,76,111,97,100,32,97,32,110,97,109,101,
+    115,112,97,99,101,32,109,111,100,117,108,101,46,117,38,0,
+    0,0,110,97,109,101,115,112,97,99,101,32,109,111,100,117,
+    108,101,32,108,111,97,100,101,100,32,119,105,116,104,32,112,
+    97,116,104,32,123,33,114,125,40,3,0,0,0,117,16,0,
+    0,0,95,118,101,114,98,111,115,101,95,109,101,115,115,97,
+    103,101,117,5,0,0,0,95,112,97,116,104,117,8,0,0,
+    0,95,95,112,97,116,104,95,95,40,2,0,0,0,117,4,
+    0,0,0,115,101,108,102,117,6,0,0,0,109,111,100,117,
+    108,101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,
+    0,0,0,108,111,97,100,95,109,111,100,117,108,101,197,4,
+    0,0,115,6,0,0,0,0,3,16,1,12,1,117,27,0,
+    0,0,78,97,109,101,115,112,97,99,101,76,111,97,100,101,
+    114,46,108,111,97,100,95,109,111,100,117,108,101,78,40,8,
+    0,0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,
+    117,10,0,0,0,95,95,109,111,100,117,108,101,95,95,117,
+    12,0,0,0,95,95,113,117,97,108,110,97,109,101,95,95,
+    117,8,0,0,0,95,95,105,110,105,116,95,95,117,11,0,
+    0,0,99,108,97,115,115,109,101,116,104,111,100,117,11,0,
+    0,0,109,111,100,117,108,101,95,114,101,112,114,117,17,0,
+    0,0,109,111,100,117,108,101,95,102,111,114,95,108,111,97,
+    100,101,114,117,11,0,0,0,108,111,97,100,95,109,111,100,
+    117,108,101,40,1,0,0,0,117,10,0,0,0,95,95,108,
+    111,99,97,108,115,95,95,40,0,0,0,0,40,0,0,0,
     0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
     112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,12,0,0,0,95,95,99,111,110,116,97,105,
-    110,115,95,95,179,4,0,0,115,2,0,0,0,0,1,117,
-    27,0,0,0,95,78,97,109,101,115,112,97,99,101,80,97,
-    116,104,46,95,95,99,111,110,116,97,105,110,115,95,95,99,
-    2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,
-    67,0,0,0,115,20,0,0,0,124,0,0,106,0,0,106,
-    1,0,124,1,0,131,1,0,1,100,0,0,83,40,1,0,
-    0,0,78,40,2,0,0,0,117,5,0,0,0,95,112,97,
-    116,104,117,6,0,0,0,97,112,112,101,110,100,40,2,0,
-    0,0,117,4,0,0,0,115,101,108,102,117,4,0,0,0,
-    105,116,101,109,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,6,0,0,0,97,112,112,101,110,100,182,4,0,0,115,
-    2,0,0,0,0,1,117,21,0,0,0,95,78,97,109,101,
-    115,112,97,99,101,80,97,116,104,46,97,112,112,101,110,100,
-    78,40,13,0,0,0,117,8,0,0,0,95,95,110,97,109,
-    101,95,95,117,10,0,0,0,95,95,109,111,100,117,108,101,
-    95,95,117,12,0,0,0,95,95,113,117,97,108,110,97,109,
-    101,95,95,117,7,0,0,0,95,95,100,111,99,95,95,117,
-    8,0,0,0,95,95,105,110,105,116,95,95,117,23,0,0,
-    0,95,102,105,110,100,95,112,97,114,101,110,116,95,112,97,
-    116,104,95,110,97,109,101,115,117,16,0,0,0,95,103,101,
-    116,95,112,97,114,101,110,116,95,112,97,116,104,117,12,0,
-    0,0,95,114,101,99,97,108,99,117,108,97,116,101,117,8,
-    0,0,0,95,95,105,116,101,114,95,95,117,7,0,0,0,
-    95,95,108,101,110,95,95,117,8,0,0,0,95,95,114,101,
-    112,114,95,95,117,12,0,0,0,95,95,99,111,110,116,97,
-    105,110,115,95,95,117,6,0,0,0,97,112,112,101,110,100,
+    97,112,62,117,15,0,0,0,78,97,109,101,115,112,97,99,
+    101,76,111,97,100,101,114,189,4,0,0,115,6,0,0,0,
+    16,1,12,3,18,4,117,15,0,0,0,78,97,109,101,115,
+    112,97,99,101,76,111,97,100,101,114,99,1,0,0,0,0,
+    0,0,0,1,0,0,0,4,0,0,0,66,0,0,0,115,
+    119,0,0,0,124,0,0,69,101,0,0,90,1,0,100,0,
+    0,90,2,0,100,1,0,90,3,0,101,4,0,100,2,0,
+    100,3,0,132,0,0,131,1,0,90,5,0,101,4,0,100,
+    4,0,100,5,0,132,0,0,131,1,0,90,6,0,101,4,
+    0,100,6,0,100,7,0,132,0,0,131,1,0,90,7,0,
+    101,4,0,100,8,0,100,9,0,132,0,0,131,1,0,90,
+    8,0,101,4,0,100,12,0,100,10,0,100,11,0,132,1,
+    0,131,1,0,90,10,0,100,12,0,83,40,13,0,0,0,
+    117,10,0,0,0,80,97,116,104,70,105,110,100,101,114,117,
+    62,0,0,0,77,101,116,97,32,112,97,116,104,32,102,105,
+    110,100,101,114,32,102,111,114,32,115,121,115,46,112,97,116,
+    104,32,97,110,100,32,112,97,99,107,97,103,101,32,95,95,
+    112,97,116,104,95,95,32,97,116,116,114,105,98,117,116,101,
+    115,46,99,1,0,0,0,0,0,0,0,2,0,0,0,4,
+    0,0,0,67,0,0,0,115,58,0,0,0,120,51,0,116,
+    0,0,106,1,0,106,2,0,131,0,0,68,93,34,0,125,
+    1,0,116,3,0,124,1,0,100,1,0,131,2,0,114,16,
+    0,124,1,0,106,4,0,131,0,0,1,113,16,0,113,16,
+    0,87,100,2,0,83,40,3,0,0,0,117,125,0,0,0,
+    67,97,108,108,32,116,104,101,32,105,110,118,97,108,105,100,
+    97,116,101,95,99,97,99,104,101,115,40,41,32,109,101,116,
+    104,111,100,32,111,110,32,97,108,108,32,112,97,116,104,32,
+    101,110,116,114,121,32,102,105,110,100,101,114,115,10,32,32,
+    32,32,32,32,32,32,115,116,111,114,101,100,32,105,110,32,
+    115,121,115,46,112,97,116,104,95,105,109,112,111,114,116,101,
+    114,95,99,97,99,104,101,115,32,40,119,104,101,114,101,32,
+    105,109,112,108,101,109,101,110,116,101,100,41,46,117,17,0,
+    0,0,105,110,118,97,108,105,100,97,116,101,95,99,97,99,
+    104,101,115,78,40,5,0,0,0,117,3,0,0,0,115,121,
+    115,117,19,0,0,0,112,97,116,104,95,105,109,112,111,114,
+    116,101,114,95,99,97,99,104,101,117,6,0,0,0,118,97,
+    108,117,101,115,117,7,0,0,0,104,97,115,97,116,116,114,
+    117,17,0,0,0,105,110,118,97,108,105,100,97,116,101,95,
+    99,97,99,104,101,115,40,2,0,0,0,117,3,0,0,0,
+    99,108,115,117,6,0,0,0,102,105,110,100,101,114,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,17,0,0,0,105,
+    110,118,97,108,105,100,97,116,101,95,99,97,99,104,101,115,
+    211,4,0,0,115,6,0,0,0,0,4,22,1,15,1,117,
+    28,0,0,0,80,97,116,104,70,105,110,100,101,114,46,105,
+    110,118,97,108,105,100,97,116,101,95,99,97,99,104,101,115,
+    99,2,0,0,0,0,0,0,0,3,0,0,0,12,0,0,
+    0,67,0,0,0,115,94,0,0,0,116,0,0,106,1,0,
+    115,28,0,116,2,0,106,3,0,100,1,0,116,4,0,131,
+    2,0,1,110,0,0,120,59,0,116,0,0,106,1,0,68,
+    93,44,0,125,2,0,121,14,0,124,2,0,124,1,0,131,
+    1,0,83,87,113,38,0,4,116,5,0,107,10,0,114,81,
+    0,1,1,1,119,38,0,89,113,38,0,88,113,38,0,87,
+    100,2,0,83,100,2,0,83,40,3,0,0,0,117,113,0,
+    0,0,83,101,97,114,99,104,32,115,101,113,117,101,110,99,
+    101,32,111,102,32,104,111,111,107,115,32,102,111,114,32,97,
+    32,102,105,110,100,101,114,32,102,111,114,32,39,112,97,116,
+    104,39,46,10,10,32,32,32,32,32,32,32,32,73,102,32,
+    39,104,111,111,107,115,39,32,105,115,32,102,97,108,115,101,
+    32,116,104,101,110,32,117,115,101,32,115,121,115,46,112,97,
+    116,104,95,104,111,111,107,115,46,10,10,32,32,32,32,32,
+    32,32,32,117,23,0,0,0,115,121,115,46,112,97,116,104,
+    95,104,111,111,107,115,32,105,115,32,101,109,112,116,121,78,
+    40,7,0,0,0,117,3,0,0,0,115,121,115,117,10,0,
+    0,0,112,97,116,104,95,104,111,111,107,115,117,9,0,0,
+    0,95,119,97,114,110,105,110,103,115,117,4,0,0,0,119,
+    97,114,110,117,13,0,0,0,73,109,112,111,114,116,87,97,
+    114,110,105,110,103,117,11,0,0,0,73,109,112,111,114,116,
+    69,114,114,111,114,117,4,0,0,0,78,111,110,101,40,3,
+    0,0,0,117,3,0,0,0,99,108,115,117,4,0,0,0,
+    112,97,116,104,117,4,0,0,0,104,111,111,107,40,0,0,
+    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
+    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
+    111,111,116,115,116,114,97,112,62,117,11,0,0,0,95,112,
+    97,116,104,95,104,111,111,107,115,219,4,0,0,115,16,0,
+    0,0,0,7,9,1,19,1,16,1,3,1,14,1,13,1,
+    12,2,117,22,0,0,0,80,97,116,104,70,105,110,100,101,
+    114,46,95,112,97,116,104,95,104,111,111,107,115,99,2,0,
+    0,0,0,0,0,0,3,0,0,0,11,0,0,0,67,0,
+    0,0,115,91,0,0,0,124,1,0,100,1,0,107,2,0,
+    114,21,0,100,2,0,125,1,0,110,0,0,121,17,0,116,
+    0,0,106,1,0,124,1,0,25,125,2,0,87,110,46,0,
+    4,116,2,0,107,10,0,114,86,0,1,1,1,124,0,0,
+    106,3,0,124,1,0,131,1,0,125,2,0,124,2,0,116,
+    0,0,106,1,0,124,1,0,60,89,110,1,0,88,124,2,
+    0,83,40,3,0,0,0,117,210,0,0,0,71,101,116,32,
+    116,104,101,32,102,105,110,100,101,114,32,102,111,114,32,116,
+    104,101,32,112,97,116,104,32,101,110,116,114,121,32,102,114,
+    111,109,32,115,121,115,46,112,97,116,104,95,105,109,112,111,
+    114,116,101,114,95,99,97,99,104,101,46,10,10,32,32,32,
+    32,32,32,32,32,73,102,32,116,104,101,32,112,97,116,104,
+    32,101,110,116,114,121,32,105,115,32,110,111,116,32,105,110,
+    32,116,104,101,32,99,97,99,104,101,44,32,102,105,110,100,
+    32,116,104,101,32,97,112,112,114,111,112,114,105,97,116,101,
+    32,102,105,110,100,101,114,10,32,32,32,32,32,32,32,32,
+    97,110,100,32,99,97,99,104,101,32,105,116,46,32,73,102,
+    32,110,111,32,102,105,110,100,101,114,32,105,115,32,97,118,
+    97,105,108,97,98,108,101,44,32,115,116,111,114,101,32,78,
+    111,110,101,46,10,10,32,32,32,32,32,32,32,32,117,0,
+    0,0,0,117,1,0,0,0,46,40,4,0,0,0,117,3,
+    0,0,0,115,121,115,117,19,0,0,0,112,97,116,104,95,
+    105,109,112,111,114,116,101,114,95,99,97,99,104,101,117,8,
+    0,0,0,75,101,121,69,114,114,111,114,117,11,0,0,0,
+    95,112,97,116,104,95,104,111,111,107,115,40,3,0,0,0,
+    117,3,0,0,0,99,108,115,117,4,0,0,0,112,97,116,
+    104,117,6,0,0,0,102,105,110,100,101,114,40,0,0,0,
+    0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
+    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
+    111,116,115,116,114,97,112,62,117,20,0,0,0,95,112,97,
+    116,104,95,105,109,112,111,114,116,101,114,95,99,97,99,104,
+    101,236,4,0,0,115,16,0,0,0,0,8,12,1,9,1,
+    3,1,17,1,13,1,15,1,18,1,117,31,0,0,0,80,
+    97,116,104,70,105,110,100,101,114,46,95,112,97,116,104,95,
+    105,109,112,111,114,116,101,114,95,99,97,99,104,101,99,3,
+    0,0,0,0,0,0,0,8,0,0,0,5,0,0,0,67,
+    0,0,0,115,189,0,0,0,103,0,0,125,3,0,120,176,
+    0,124,2,0,68,93,158,0,125,4,0,116,0,0,124,4,
+    0,116,1,0,116,2,0,102,2,0,131,2,0,115,46,0,
+    113,13,0,110,0,0,124,0,0,106,3,0,124,4,0,131,
+    1,0,125,5,0,124,5,0,100,2,0,107,9,0,114,13,
+    0,116,5,0,124,5,0,100,1,0,131,2,0,114,112,0,
+    124,5,0,106,6,0,124,1,0,131,1,0,92,2,0,125,
+    6,0,125,7,0,110,21,0,124,5,0,106,7,0,124,1,
+    0,131,1,0,125,6,0,103,0,0,125,7,0,124,6,0,
+    100,2,0,107,9,0,114,155,0,124,6,0,124,3,0,102,
+    2,0,83,124,3,0,106,8,0,124,7,0,131,1,0,1,
+    113,13,0,113,13,0,87,100,2,0,124,3,0,102,2,0,
+    83,100,2,0,83,40,3,0,0,0,117,63,0,0,0,70,
+    105,110,100,32,116,104,101,32,108,111,97,100,101,114,32,111,
+    114,32,110,97,109,101,115,112,97,99,101,95,112,97,116,104,
+    32,102,111,114,32,116,104,105,115,32,109,111,100,117,108,101,
+    47,112,97,99,107,97,103,101,32,110,97,109,101,46,117,11,
+    0,0,0,102,105,110,100,95,108,111,97,100,101,114,78,40,
+    9,0,0,0,117,10,0,0,0,105,115,105,110,115,116,97,
+    110,99,101,117,3,0,0,0,115,116,114,117,5,0,0,0,
+    98,121,116,101,115,117,20,0,0,0,95,112,97,116,104,95,
+    105,109,112,111,114,116,101,114,95,99,97,99,104,101,117,4,
+    0,0,0,78,111,110,101,117,7,0,0,0,104,97,115,97,
+    116,116,114,117,11,0,0,0,102,105,110,100,95,108,111,97,
+    100,101,114,117,11,0,0,0,102,105,110,100,95,109,111,100,
+    117,108,101,117,6,0,0,0,101,120,116,101,110,100,40,8,
+    0,0,0,117,3,0,0,0,99,108,115,117,8,0,0,0,
+    102,117,108,108,110,97,109,101,117,4,0,0,0,112,97,116,
+    104,117,14,0,0,0,110,97,109,101,115,112,97,99,101,95,
+    112,97,116,104,117,5,0,0,0,101,110,116,114,121,117,6,
+    0,0,0,102,105,110,100,101,114,117,6,0,0,0,108,111,
+    97,100,101,114,117,8,0,0,0,112,111,114,116,105,111,110,
+    115,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
+    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,0,
+    0,0,95,103,101,116,95,108,111,97,100,101,114,253,4,0,
+    0,115,28,0,0,0,0,5,6,1,13,1,21,1,6,1,
+    15,1,12,1,15,1,24,2,15,1,6,1,12,2,10,5,
+    20,2,117,22,0,0,0,80,97,116,104,70,105,110,100,101,
+    114,46,95,103,101,116,95,108,111,97,100,101,114,99,3,0,
+    0,0,0,0,0,0,5,0,0,0,4,0,0,0,67,0,
+    0,0,115,97,0,0,0,124,2,0,100,1,0,107,8,0,
+    114,24,0,116,1,0,106,2,0,125,2,0,110,0,0,124,
+    0,0,106,3,0,124,1,0,124,2,0,131,2,0,92,2,
+    0,125,3,0,125,4,0,124,3,0,100,1,0,107,9,0,
+    114,64,0,124,3,0,83,124,4,0,114,89,0,116,4,0,
+    124,1,0,124,4,0,124,0,0,106,3,0,131,3,0,83,
+    100,1,0,83,100,1,0,83,40,2,0,0,0,117,98,0,
+    0,0,70,105,110,100,32,116,104,101,32,109,111,100,117,108,
+    101,32,111,110,32,115,121,115,46,112,97,116,104,32,111,114,
+    32,39,112,97,116,104,39,32,98,97,115,101,100,32,111,110,
+    32,115,121,115,46,112,97,116,104,95,104,111,111,107,115,32,
+    97,110,100,10,32,32,32,32,32,32,32,32,115,121,115,46,
+    112,97,116,104,95,105,109,112,111,114,116,101,114,95,99,97,
+    99,104,101,46,78,40,5,0,0,0,117,4,0,0,0,78,
+    111,110,101,117,3,0,0,0,115,121,115,117,4,0,0,0,
+    112,97,116,104,117,11,0,0,0,95,103,101,116,95,108,111,
+    97,100,101,114,117,15,0,0,0,78,97,109,101,115,112,97,
+    99,101,76,111,97,100,101,114,40,5,0,0,0,117,3,0,
+    0,0,99,108,115,117,8,0,0,0,102,117,108,108,110,97,
+    109,101,117,4,0,0,0,112,97,116,104,117,6,0,0,0,
+    108,111,97,100,101,114,117,14,0,0,0,110,97,109,101,115,
+    112,97,99,101,95,112,97,116,104,40,0,0,0,0,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,11,0,0,0,102,105,110,100,95,109,
+    111,100,117,108,101,24,5,0,0,115,16,0,0,0,0,4,
+    12,1,12,1,24,1,12,1,4,2,6,3,19,2,117,22,
+    0,0,0,80,97,116,104,70,105,110,100,101,114,46,102,105,
+    110,100,95,109,111,100,117,108,101,78,40,11,0,0,0,117,
+    8,0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,
+    0,95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,
+    95,95,113,117,97,108,110,97,109,101,95,95,117,7,0,0,
+    0,95,95,100,111,99,95,95,117,11,0,0,0,99,108,97,
+    115,115,109,101,116,104,111,100,117,17,0,0,0,105,110,118,
+    97,108,105,100,97,116,101,95,99,97,99,104,101,115,117,11,
+    0,0,0,95,112,97,116,104,95,104,111,111,107,115,117,20,
+    0,0,0,95,112,97,116,104,95,105,109,112,111,114,116,101,
+    114,95,99,97,99,104,101,117,11,0,0,0,95,103,101,116,
+    95,108,111,97,100,101,114,117,4,0,0,0,78,111,110,101,
+    117,11,0,0,0,102,105,110,100,95,109,111,100,117,108,101,
     40,1,0,0,0,117,10,0,0,0,95,95,108,111,99,97,
     108,115,95,95,40,0,0,0,0,40,0,0,0,0,117,29,
     0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
     116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,14,0,0,0,95,78,97,109,101,115,112,97,99,101,80,
-    97,116,104,131,4,0,0,115,20,0,0,0,16,5,6,2,
-    12,6,12,10,12,4,12,12,12,3,12,3,12,3,12,3,
-    117,14,0,0,0,95,78,97,109,101,115,112,97,99,101,80,
-    97,116,104,99,1,0,0,0,0,0,0,0,1,0,0,0,
-    3,0,0,0,66,0,0,0,115,68,0,0,0,124,0,0,
-    69,101,0,0,90,1,0,100,0,0,90,2,0,100,1,0,
-    100,2,0,132,0,0,90,3,0,101,4,0,100,3,0,100,
-    4,0,132,0,0,131,1,0,90,5,0,101,6,0,100,5,
-    0,100,6,0,132,0,0,131,1,0,90,7,0,100,7,0,
-    83,40,8,0,0,0,117,15,0,0,0,78,97,109,101,115,
-    112,97,99,101,76,111,97,100,101,114,99,4,0,0,0,0,
-    0,0,0,4,0,0,0,4,0,0,0,67,0,0,0,115,
-    25,0,0,0,116,0,0,124,1,0,124,2,0,124,3,0,
-    131,3,0,124,0,0,95,1,0,100,0,0,83,40,1,0,
-    0,0,78,40,2,0,0,0,117,14,0,0,0,95,78,97,
-    109,101,115,112,97,99,101,80,97,116,104,117,5,0,0,0,
-    95,112,97,116,104,40,4,0,0,0,117,4,0,0,0,115,
-    101,108,102,117,4,0,0,0,110,97,109,101,117,4,0,0,
-    0,112,97,116,104,117,11,0,0,0,112,97,116,104,95,102,
-    105,110,100,101,114,40,0,0,0,0,40,0,0,0,0,117,
+    117,10,0,0,0,80,97,116,104,70,105,110,100,101,114,207,
+    4,0,0,115,14,0,0,0,16,2,6,2,18,8,18,17,
+    18,17,18,27,3,1,117,10,0,0,0,80,97,116,104,70,
+    105,110,100,101,114,99,1,0,0,0,0,0,0,0,1,0,
+    0,0,3,0,0,0,66,0,0,0,115,110,0,0,0,124,
+    0,0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,
+    1,0,90,3,0,100,2,0,100,3,0,132,0,0,90,4,
+    0,100,4,0,100,5,0,132,0,0,90,5,0,101,6,0,
+    90,7,0,100,6,0,100,7,0,132,0,0,90,8,0,100,
+    8,0,100,9,0,132,0,0,90,9,0,101,10,0,100,10,
+    0,100,11,0,132,0,0,131,1,0,90,11,0,100,12,0,
+    100,13,0,132,0,0,90,12,0,100,14,0,83,40,15,0,
+    0,0,117,10,0,0,0,70,105,108,101,70,105,110,100,101,
+    114,117,172,0,0,0,70,105,108,101,45,98,97,115,101,100,
+    32,102,105,110,100,101,114,46,10,10,32,32,32,32,73,110,
+    116,101,114,97,99,116,105,111,110,115,32,119,105,116,104,32,
+    116,104,101,32,102,105,108,101,32,115,121,115,116,101,109,32,
+    97,114,101,32,99,97,99,104,101,100,32,102,111,114,32,112,
+    101,114,102,111,114,109,97,110,99,101,44,32,98,101,105,110,
+    103,10,32,32,32,32,114,101,102,114,101,115,104,101,100,32,
+    119,104,101,110,32,116,104,101,32,100,105,114,101,99,116,111,
+    114,121,32,116,104,101,32,102,105,110,100,101,114,32,105,115,
+    32,104,97,110,100,108,105,110,103,32,104,97,115,32,98,101,
+    101,110,32,109,111,100,105,102,105,101,100,46,10,10,32,32,
+    32,32,99,2,0,0,0,0,0,0,0,5,0,0,0,5,
+    0,0,0,7,0,0,0,115,122,0,0,0,103,0,0,125,
+    3,0,120,52,0,124,2,0,68,93,44,0,92,2,0,137,
+    0,0,125,4,0,124,3,0,106,0,0,135,0,0,102,1,
+    0,100,1,0,100,2,0,134,0,0,124,4,0,68,131,1,
+    0,131,1,0,1,113,13,0,87,124,3,0,124,0,0,95,
+    1,0,124,1,0,112,79,0,100,3,0,124,0,0,95,2,
+    0,100,6,0,124,0,0,95,3,0,116,4,0,131,0,0,
+    124,0,0,95,5,0,116,4,0,131,0,0,124,0,0,95,
+    6,0,100,5,0,83,40,7,0,0,0,117,201,0,0,0,
+    73,110,105,116,105,97,108,105,122,101,32,119,105,116,104,32,
+    116,104,101,32,112,97,116,104,32,116,111,32,115,101,97,114,
+    99,104,32,111,110,32,97,110,100,32,97,32,118,97,114,105,
+    97,98,108,101,32,110,117,109,98,101,114,32,111,102,10,32,
+    32,32,32,32,32,32,32,51,45,116,117,112,108,101,115,32,
+    99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,108,
+    111,97,100,101,114,44,32,102,105,108,101,32,115,117,102,102,
+    105,120,101,115,32,116,104,101,32,108,111,97,100,101,114,32,
+    114,101,99,111,103,110,105,122,101,115,44,10,32,32,32,32,
+    32,32,32,32,97,110,100,32,97,32,98,111,111,108,101,97,
+    110,32,111,102,32,119,104,101,116,104,101,114,32,116,104,101,
+    32,108,111,97,100,101,114,32,104,97,110,100,108,101,115,32,
+    112,97,99,107,97,103,101,115,46,99,1,0,0,0,0,0,
+    0,0,2,0,0,0,3,0,0,0,51,0,0,0,115,27,
+    0,0,0,124,0,0,93,17,0,125,1,0,124,1,0,136,
+    0,0,102,2,0,86,1,113,3,0,100,0,0,83,40,1,
+    0,0,0,78,40,0,0,0,0,40,2,0,0,0,117,2,
+    0,0,0,46,48,117,6,0,0,0,115,117,102,102,105,120,
+    40,1,0,0,0,117,6,0,0,0,108,111,97,100,101,114,
+    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,9,0,0,0,60,103,101,110,
+    101,120,112,114,62,57,5,0,0,115,2,0,0,0,6,0,
+    117,38,0,0,0,70,105,108,101,70,105,110,100,101,114,46,
+    95,95,105,110,105,116,95,95,46,60,108,111,99,97,108,115,
+    62,46,60,103,101,110,101,120,112,114,62,117,1,0,0,0,
+    46,105,1,0,0,0,78,105,255,255,255,255,40,7,0,0,
+    0,117,6,0,0,0,101,120,116,101,110,100,117,8,0,0,
+    0,95,108,111,97,100,101,114,115,117,4,0,0,0,112,97,
+    116,104,117,11,0,0,0,95,112,97,116,104,95,109,116,105,
+    109,101,117,3,0,0,0,115,101,116,117,11,0,0,0,95,
+    112,97,116,104,95,99,97,99,104,101,117,19,0,0,0,95,
+    114,101,108,97,120,101,100,95,112,97,116,104,95,99,97,99,
+    104,101,40,5,0,0,0,117,4,0,0,0,115,101,108,102,
+    117,4,0,0,0,112,97,116,104,117,7,0,0,0,100,101,
+    116,97,105,108,115,117,7,0,0,0,108,111,97,100,101,114,
+    115,117,8,0,0,0,115,117,102,102,105,120,101,115,40,0,
+    0,0,0,40,1,0,0,0,117,6,0,0,0,108,111,97,
+    100,101,114,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,8,0,0,0,95,95,105,110,105,116,
+    95,95,51,5,0,0,115,16,0,0,0,0,4,6,1,19,
+    1,36,1,9,2,15,1,9,1,12,1,117,19,0,0,0,
+    70,105,108,101,70,105,110,100,101,114,46,95,95,105,110,105,
+    116,95,95,99,1,0,0,0,0,0,0,0,1,0,0,0,
+    2,0,0,0,67,0,0,0,115,13,0,0,0,100,3,0,
+    124,0,0,95,0,0,100,2,0,83,40,4,0,0,0,117,
+    31,0,0,0,73,110,118,97,108,105,100,97,116,101,32,116,
+    104,101,32,100,105,114,101,99,116,111,114,121,32,109,116,105,
+    109,101,46,105,1,0,0,0,78,105,255,255,255,255,40,1,
+    0,0,0,117,11,0,0,0,95,112,97,116,104,95,109,116,
+    105,109,101,40,1,0,0,0,117,4,0,0,0,115,101,108,
+    102,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
+    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,17,0,
+    0,0,105,110,118,97,108,105,100,97,116,101,95,99,97,99,
+    104,101,115,65,5,0,0,115,2,0,0,0,0,2,117,28,
+    0,0,0,70,105,108,101,70,105,110,100,101,114,46,105,110,
+    118,97,108,105,100,97,116,101,95,99,97,99,104,101,115,99,
+    2,0,0,0,0,0,0,0,12,0,0,0,13,0,0,0,
+    67,0,0,0,115,172,1,0,0,100,5,0,125,2,0,124,
+    1,0,106,1,0,100,1,0,131,1,0,100,2,0,25,125,
+    3,0,121,25,0,116,2,0,106,3,0,124,0,0,106,4,
+    0,131,1,0,106,5,0,125,4,0,87,110,24,0,4,116,
+    6,0,107,10,0,114,76,0,1,1,1,100,6,0,125,4,
+    0,89,110,1,0,88,124,4,0,124,0,0,106,7,0,107,
+    3,0,114,114,0,124,0,0,106,8,0,131,0,0,1,124,
+    4,0,124,0,0,95,7,0,110,0,0,116,9,0,131,0,
+    0,114,147,0,124,0,0,106,10,0,125,5,0,124,3,0,
+    106,11,0,131,0,0,125,6,0,110,15,0,124,0,0,106,
+    12,0,125,5,0,124,3,0,125,6,0,124,6,0,124,5,
+    0,107,6,0,114,45,1,116,13,0,124,0,0,106,4,0,
+    124,3,0,131,2,0,125,7,0,116,14,0,124,7,0,131,
+    1,0,114,45,1,120,91,0,124,0,0,106,15,0,68,93,
+    71,0,92,2,0,125,8,0,125,9,0,100,4,0,124,8,
+    0,23,125,10,0,116,13,0,124,7,0,124,10,0,131,2,
+    0,125,11,0,116,16,0,124,11,0,131,1,0,114,214,0,
+    124,9,0,124,1,0,124,11,0,131,2,0,124,7,0,103,
+    1,0,102,2,0,83,113,214,0,87,100,7,0,125,2,0,
+    113,45,1,110,0,0,120,95,0,124,0,0,106,15,0,68,
+    93,84,0,92,2,0,125,8,0,125,9,0,124,6,0,124,
+    8,0,23,124,5,0,107,6,0,114,55,1,116,13,0,124,
+    0,0,106,4,0,124,3,0,124,8,0,23,131,2,0,125,
+    11,0,116,16,0,124,11,0,131,1,0,114,139,1,124,9,
+    0,124,1,0,124,11,0,131,2,0,103,0,0,102,2,0,
+    83,113,55,1,113,55,1,87,124,2,0,114,162,1,100,8,
+    0,124,7,0,103,1,0,102,2,0,83,100,8,0,103,0,
+    0,102,2,0,83,40,9,0,0,0,117,125,0,0,0,84,
+    114,121,32,116,111,32,102,105,110,100,32,97,32,108,111,97,
+    100,101,114,32,102,111,114,32,116,104,101,32,115,112,101,99,
+    105,102,105,101,100,32,109,111,100,117,108,101,44,32,111,114,
+    32,116,104,101,32,110,97,109,101,115,112,97,99,101,10,32,
+    32,32,32,32,32,32,32,112,97,99,107,97,103,101,32,112,
+    111,114,116,105,111,110,115,46,32,82,101,116,117,114,110,115,
+    32,40,108,111,97,100,101,114,44,32,108,105,115,116,45,111,
+    102,45,112,111,114,116,105,111,110,115,41,46,117,1,0,0,
+    0,46,105,2,0,0,0,105,1,0,0,0,117,8,0,0,
+    0,95,95,105,110,105,116,95,95,70,105,255,255,255,255,84,
+    78,40,19,0,0,0,117,5,0,0,0,70,97,108,115,101,
+    117,10,0,0,0,114,112,97,114,116,105,116,105,111,110,117,
+    3,0,0,0,95,111,115,117,4,0,0,0,115,116,97,116,
+    117,4,0,0,0,112,97,116,104,117,8,0,0,0,115,116,
+    95,109,116,105,109,101,117,7,0,0,0,79,83,69,114,114,
+    111,114,117,11,0,0,0,95,112,97,116,104,95,109,116,105,
+    109,101,117,11,0,0,0,95,102,105,108,108,95,99,97,99,
+    104,101,117,11,0,0,0,95,114,101,108,97,120,95,99,97,
+    115,101,117,19,0,0,0,95,114,101,108,97,120,101,100,95,
+    112,97,116,104,95,99,97,99,104,101,117,5,0,0,0,108,
+    111,119,101,114,117,11,0,0,0,95,112,97,116,104,95,99,
+    97,99,104,101,117,10,0,0,0,95,112,97,116,104,95,106,
+    111,105,110,117,11,0,0,0,95,112,97,116,104,95,105,115,
+    100,105,114,117,8,0,0,0,95,108,111,97,100,101,114,115,
+    117,12,0,0,0,95,112,97,116,104,95,105,115,102,105,108,
+    101,117,4,0,0,0,84,114,117,101,117,4,0,0,0,78,
+    111,110,101,40,12,0,0,0,117,4,0,0,0,115,101,108,
+    102,117,8,0,0,0,102,117,108,108,110,97,109,101,117,12,
+    0,0,0,105,115,95,110,97,109,101,115,112,97,99,101,117,
+    11,0,0,0,116,97,105,108,95,109,111,100,117,108,101,117,
+    5,0,0,0,109,116,105,109,101,117,5,0,0,0,99,97,
+    99,104,101,117,12,0,0,0,99,97,99,104,101,95,109,111,
+    100,117,108,101,117,9,0,0,0,98,97,115,101,95,112,97,
+    116,104,117,6,0,0,0,115,117,102,102,105,120,117,6,0,
+    0,0,108,111,97,100,101,114,117,13,0,0,0,105,110,105,
+    116,95,102,105,108,101,110,97,109,101,117,9,0,0,0,102,
+    117,108,108,95,112,97,116,104,40,0,0,0,0,40,0,0,
+    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
+    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
+    114,97,112,62,117,11,0,0,0,102,105,110,100,95,108,111,
+    97,100,101,114,71,5,0,0,115,62,0,0,0,0,3,6,
+    1,19,1,3,1,25,1,13,1,11,1,15,1,10,1,12,
+    2,9,1,9,1,15,2,9,1,6,2,12,1,18,1,12,
+    1,22,1,10,1,15,1,12,1,26,4,12,2,22,1,16,
+    1,22,1,12,1,26,1,6,1,13,1,117,22,0,0,0,
+    70,105,108,101,70,105,110,100,101,114,46,102,105,110,100,95,
+    108,111,97,100,101,114,99,1,0,0,0,0,0,0,0,9,
+    0,0,0,12,0,0,0,67,0,0,0,115,255,0,0,0,
+    124,0,0,106,0,0,125,1,0,121,19,0,116,1,0,106,
+    2,0,124,1,0,131,1,0,125,2,0,87,110,24,0,4,
+    116,3,0,107,10,0,114,54,0,1,1,1,103,0,0,125,
+    2,0,89,110,1,0,88,116,4,0,106,5,0,106,6,0,
+    100,1,0,131,1,0,115,91,0,116,7,0,124,2,0,131,
+    1,0,124,0,0,95,8,0,110,111,0,116,7,0,131,0,
+    0,125,3,0,120,90,0,124,2,0,68,93,82,0,125,4,
+    0,124,4,0,106,9,0,100,2,0,131,1,0,92,3,0,
+    125,5,0,125,6,0,125,7,0,124,6,0,114,170,0,100,
+    3,0,106,10,0,124,5,0,124,7,0,106,11,0,131,0,
+    0,131,2,0,125,8,0,110,6,0,124,5,0,125,8,0,
+    124,3,0,106,12,0,124,8,0,131,1,0,1,113,107,0,
+    87,124,3,0,124,0,0,95,8,0,116,4,0,106,5,0,
+    106,6,0,116,13,0,131,1,0,114,251,0,116,7,0,100,
+    4,0,100,5,0,132,0,0,124,2,0,68,131,1,0,131,
+    1,0,124,0,0,95,14,0,110,0,0,100,6,0,83,40,
+    7,0,0,0,117,68,0,0,0,70,105,108,108,32,116,104,
+    101,32,99,97,99,104,101,32,111,102,32,112,111,116,101,110,
+    116,105,97,108,32,109,111,100,117,108,101,115,32,97,110,100,
+    32,112,97,99,107,97,103,101,115,32,102,111,114,32,116,104,
+    105,115,32,100,105,114,101,99,116,111,114,121,46,117,3,0,
+    0,0,119,105,110,117,1,0,0,0,46,117,5,0,0,0,
+    123,125,46,123,125,99,1,0,0,0,0,0,0,0,2,0,
+    0,0,2,0,0,0,115,0,0,0,115,27,0,0,0,124,
+    0,0,93,17,0,125,1,0,124,1,0,106,0,0,131,0,
+    0,86,1,113,3,0,100,0,0,83,40,1,0,0,0,78,
+    40,1,0,0,0,117,5,0,0,0,108,111,119,101,114,40,
+    2,0,0,0,117,2,0,0,0,46,48,117,2,0,0,0,
+    102,110,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,9,
+    0,0,0,60,103,101,110,101,120,112,114,62,141,5,0,0,
+    115,2,0,0,0,6,0,117,41,0,0,0,70,105,108,101,
+    70,105,110,100,101,114,46,95,102,105,108,108,95,99,97,99,
+    104,101,46,60,108,111,99,97,108,115,62,46,60,103,101,110,
+    101,120,112,114,62,78,40,15,0,0,0,117,4,0,0,0,
+    112,97,116,104,117,3,0,0,0,95,111,115,117,7,0,0,
+    0,108,105,115,116,100,105,114,117,17,0,0,0,70,105,108,
+    101,78,111,116,70,111,117,110,100,69,114,114,111,114,117,3,
+    0,0,0,115,121,115,117,8,0,0,0,112,108,97,116,102,
+    111,114,109,117,10,0,0,0,115,116,97,114,116,115,119,105,
+    116,104,117,3,0,0,0,115,101,116,117,11,0,0,0,95,
+    112,97,116,104,95,99,97,99,104,101,117,9,0,0,0,112,
+    97,114,116,105,116,105,111,110,117,6,0,0,0,102,111,114,
+    109,97,116,117,5,0,0,0,108,111,119,101,114,117,3,0,
+    0,0,97,100,100,117,27,0,0,0,95,67,65,83,69,95,
+    73,78,83,69,78,83,73,84,73,86,69,95,80,76,65,84,
+    70,79,82,77,83,117,19,0,0,0,95,114,101,108,97,120,
+    101,100,95,112,97,116,104,95,99,97,99,104,101,40,9,0,
+    0,0,117,4,0,0,0,115,101,108,102,117,4,0,0,0,
+    112,97,116,104,117,8,0,0,0,99,111,110,116,101,110,116,
+    115,117,21,0,0,0,108,111,119,101,114,95,115,117,102,102,
+    105,120,95,99,111,110,116,101,110,116,115,117,4,0,0,0,
+    105,116,101,109,117,4,0,0,0,110,97,109,101,117,3,0,
+    0,0,100,111,116,117,6,0,0,0,115,117,102,102,105,120,
+    117,8,0,0,0,110,101,119,95,110,97,109,101,40,0,0,
+    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
+    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
+    111,111,116,115,116,114,97,112,62,117,11,0,0,0,95,102,
+    105,108,108,95,99,97,99,104,101,113,5,0,0,115,34,0,
+    0,0,0,2,9,1,3,1,19,1,13,2,11,3,18,1,
+    18,7,9,1,13,1,24,1,6,1,27,2,6,1,17,1,
+    9,1,18,1,117,22,0,0,0,70,105,108,101,70,105,110,
+    100,101,114,46,95,102,105,108,108,95,99,97,99,104,101,99,
+    1,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,
+    7,0,0,0,115,25,0,0,0,135,0,0,135,1,0,102,
+    2,0,100,1,0,100,2,0,134,0,0,125,2,0,124,2,
+    0,83,40,3,0,0,0,117,20,1,0,0,65,32,99,108,
+    97,115,115,32,109,101,116,104,111,100,32,119,104,105,99,104,
+    32,114,101,116,117,114,110,115,32,97,32,99,108,111,115,117,
+    114,101,32,116,111,32,117,115,101,32,111,110,32,115,121,115,
+    46,112,97,116,104,95,104,111,111,107,10,32,32,32,32,32,
+    32,32,32,119,104,105,99,104,32,119,105,108,108,32,114,101,
+    116,117,114,110,32,97,110,32,105,110,115,116,97,110,99,101,
+    32,117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,
+    102,105,101,100,32,108,111,97,100,101,114,115,32,97,110,100,
+    32,116,104,101,32,112,97,116,104,10,32,32,32,32,32,32,
+    32,32,99,97,108,108,101,100,32,111,110,32,116,104,101,32,
+    99,108,111,115,117,114,101,46,10,10,32,32,32,32,32,32,
+    32,32,73,102,32,116,104,101,32,112,97,116,104,32,99,97,
+    108,108,101,100,32,111,110,32,116,104,101,32,99,108,111,115,
+    117,114,101,32,105,115,32,110,111,116,32,97,32,100,105,114,
+    101,99,116,111,114,121,44,32,73,109,112,111,114,116,69,114,
+    114,111,114,32,105,115,10,32,32,32,32,32,32,32,32,114,
+    97,105,115,101,100,46,10,10,32,32,32,32,32,32,32,32,
+    99,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,
+    0,19,0,0,0,115,46,0,0,0,116,0,0,124,0,0,
+    131,1,0,115,33,0,116,1,0,100,1,0,100,2,0,124,
+    0,0,131,1,1,130,1,0,110,0,0,136,0,0,124,0,
+    0,136,1,0,140,1,0,83,40,3,0,0,0,117,45,0,
+    0,0,80,97,116,104,32,104,111,111,107,32,102,111,114,32,
+    105,109,112,111,114,116,108,105,98,46,109,97,99,104,105,110,
+    101,114,121,46,70,105,108,101,70,105,110,100,101,114,46,117,
+    30,0,0,0,111,110,108,121,32,100,105,114,101,99,116,111,
+    114,105,101,115,32,97,114,101,32,115,117,112,112,111,114,116,
+    101,100,117,4,0,0,0,112,97,116,104,40,2,0,0,0,
+    117,11,0,0,0,95,112,97,116,104,95,105,115,100,105,114,
+    117,11,0,0,0,73,109,112,111,114,116,69,114,114,111,114,
+    40,1,0,0,0,117,4,0,0,0,112,97,116,104,40,2,
+    0,0,0,117,3,0,0,0,99,108,115,117,14,0,0,0,
+    108,111,97,100,101,114,95,100,101,116,97,105,108,115,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,24,0,0,0,112,97,116,104,95,104,
+    111,111,107,95,102,111,114,95,70,105,108,101,70,105,110,100,
+    101,114,153,5,0,0,115,6,0,0,0,0,2,12,1,21,
+    1,117,54,0,0,0,70,105,108,101,70,105,110,100,101,114,
+    46,112,97,116,104,95,104,111,111,107,46,60,108,111,99,97,
+    108,115,62,46,112,97,116,104,95,104,111,111,107,95,102,111,
+    114,95,70,105,108,101,70,105,110,100,101,114,40,0,0,0,
+    0,40,3,0,0,0,117,3,0,0,0,99,108,115,117,14,
+    0,0,0,108,111,97,100,101,114,95,100,101,116,97,105,108,
+    115,117,24,0,0,0,112,97,116,104,95,104,111,111,107,95,
+    102,111,114,95,70,105,108,101,70,105,110,100,101,114,40,0,
+    0,0,0,40,2,0,0,0,117,3,0,0,0,99,108,115,
+    117,14,0,0,0,108,111,97,100,101,114,95,100,101,116,97,
+    105,108,115,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,9,0,0,0,112,97,116,104,95,104,
+    111,111,107,143,5,0,0,115,4,0,0,0,0,10,21,6,
+    117,20,0,0,0,70,105,108,101,70,105,110,100,101,114,46,
+    112,97,116,104,95,104,111,111,107,99,1,0,0,0,0,0,
+    0,0,1,0,0,0,2,0,0,0,67,0,0,0,115,14,
+    0,0,0,100,1,0,124,0,0,106,0,0,102,1,0,22,
+    83,40,2,0,0,0,78,117,14,0,0,0,70,105,108,101,
+    70,105,110,100,101,114,40,37,114,41,40,1,0,0,0,117,
+    4,0,0,0,112,97,116,104,40,1,0,0,0,117,4,0,
+    0,0,115,101,108,102,40,0,0,0,0,40,0,0,0,0,
+    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
+    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
+    112,62,117,8,0,0,0,95,95,114,101,112,114,95,95,161,
+    5,0,0,115,2,0,0,0,0,1,117,19,0,0,0,70,
+    105,108,101,70,105,110,100,101,114,46,95,95,114,101,112,114,
+    95,95,78,40,13,0,0,0,117,8,0,0,0,95,95,110,
+    97,109,101,95,95,117,10,0,0,0,95,95,109,111,100,117,
+    108,101,95,95,117,12,0,0,0,95,95,113,117,97,108,110,
+    97,109,101,95,95,117,7,0,0,0,95,95,100,111,99,95,
+    95,117,8,0,0,0,95,95,105,110,105,116,95,95,117,17,
+    0,0,0,105,110,118,97,108,105,100,97,116,101,95,99,97,
+    99,104,101,115,117,17,0,0,0,95,102,105,110,100,95,109,
+    111,100,117,108,101,95,115,104,105,109,117,11,0,0,0,102,
+    105,110,100,95,109,111,100,117,108,101,117,11,0,0,0,102,
+    105,110,100,95,108,111,97,100,101,114,117,11,0,0,0,95,
+    102,105,108,108,95,99,97,99,104,101,117,11,0,0,0,99,
+    108,97,115,115,109,101,116,104,111,100,117,9,0,0,0,112,
+    97,116,104,95,104,111,111,107,117,8,0,0,0,95,95,114,
+    101,112,114,95,95,40,1,0,0,0,117,10,0,0,0,95,
+    95,108,111,99,97,108,115,95,95,40,0,0,0,0,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,10,0,0,0,70,105,108,101,70,105,
+    110,100,101,114,42,5,0,0,115,16,0,0,0,16,7,6,
+    2,12,14,12,4,6,2,12,42,12,30,18,18,117,10,0,
+    0,0,70,105,108,101,70,105,110,100,101,114,99,1,0,0,
+    0,0,0,0,0,1,0,0,0,2,0,0,0,66,0,0,
+    0,115,50,0,0,0,124,0,0,69,101,0,0,90,1,0,
+    100,0,0,90,2,0,100,1,0,90,3,0,100,2,0,100,
+    3,0,132,0,0,90,4,0,100,4,0,100,5,0,132,0,
+    0,90,5,0,100,6,0,83,40,7,0,0,0,117,18,0,
+    0,0,95,73,109,112,111,114,116,76,111,99,107,67,111,110,
+    116,101,120,116,117,36,0,0,0,67,111,110,116,101,120,116,
+    32,109,97,110,97,103,101,114,32,102,111,114,32,116,104,101,
+    32,105,109,112,111,114,116,32,108,111,99,107,46,99,1,0,
+    0,0,0,0,0,0,1,0,0,0,1,0,0,0,67,0,
+    0,0,115,14,0,0,0,116,0,0,106,1,0,131,0,0,
+    1,100,1,0,83,40,2,0,0,0,117,24,0,0,0,65,
+    99,113,117,105,114,101,32,116,104,101,32,105,109,112,111,114,
+    116,32,108,111,99,107,46,78,40,2,0,0,0,117,4,0,
+    0,0,95,105,109,112,117,12,0,0,0,97,99,113,117,105,
+    114,101,95,108,111,99,107,40,1,0,0,0,117,4,0,0,
+    0,115,101,108,102,40,0,0,0,0,40,0,0,0,0,117,
     29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
     114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
-    62,117,8,0,0,0,95,95,105,110,105,116,95,95,187,4,
-    0,0,115,2,0,0,0,0,1,117,24,0,0,0,78,97,
-    109,101,115,112,97,99,101,76,111,97,100,101,114,46,95,95,
-    105,110,105,116,95,95,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,2,0,0,0,67,0,0,0,115,16,0,0,0,
-    100,1,0,106,0,0,124,1,0,106,1,0,131,1,0,83,
-    40,2,0,0,0,78,117,25,0,0,0,60,109,111,100,117,
-    108,101,32,39,123,125,39,32,40,110,97,109,101,115,112,97,
-    99,101,41,62,40,2,0,0,0,117,6,0,0,0,102,111,
-    114,109,97,116,117,8,0,0,0,95,95,110,97,109,101,95,
-    95,40,2,0,0,0,117,3,0,0,0,99,108,115,117,6,
-    0,0,0,109,111,100,117,108,101,40,0,0,0,0,40,0,
-    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
-    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
-    116,114,97,112,62,117,11,0,0,0,109,111,100,117,108,101,
-    95,114,101,112,114,190,4,0,0,115,2,0,0,0,0,2,
-    117,27,0,0,0,78,97,109,101,115,112,97,99,101,76,111,
-    97,100,101,114,46,109,111,100,117,108,101,95,114,101,112,114,
-    99,2,0,0,0,0,0,0,0,2,0,0,0,3,0,0,
-    0,67,0,0,0,115,32,0,0,0,116,0,0,100,1,0,
-    124,0,0,106,1,0,131,2,0,1,124,0,0,106,1,0,
-    124,1,0,95,2,0,124,1,0,83,40,2,0,0,0,117,
-    24,0,0,0,76,111,97,100,32,97,32,110,97,109,101,115,
-    112,97,99,101,32,109,111,100,117,108,101,46,117,38,0,0,
-    0,110,97,109,101,115,112,97,99,101,32,109,111,100,117,108,
-    101,32,108,111,97,100,101,100,32,119,105,116,104,32,112,97,
-    116,104,32,123,33,114,125,40,3,0,0,0,117,16,0,0,
-    0,95,118,101,114,98,111,115,101,95,109,101,115,115,97,103,
-    101,117,5,0,0,0,95,112,97,116,104,117,8,0,0,0,
-    95,95,112,97,116,104,95,95,40,2,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,6,0,0,0,109,111,100,117,108,
-    101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,11,0,
-    0,0,108,111,97,100,95,109,111,100,117,108,101,194,4,0,
-    0,115,6,0,0,0,0,3,16,1,12,1,117,27,0,0,
-    0,78,97,109,101,115,112,97,99,101,76,111,97,100,101,114,
-    46,108,111,97,100,95,109,111,100,117,108,101,78,40,8,0,
-    0,0,117,8,0,0,0,95,95,110,97,109,101,95,95,117,
-    10,0,0,0,95,95,109,111,100,117,108,101,95,95,117,12,
-    0,0,0,95,95,113,117,97,108,110,97,109,101,95,95,117,
-    8,0,0,0,95,95,105,110,105,116,95,95,117,11,0,0,
-    0,99,108,97,115,115,109,101,116,104,111,100,117,11,0,0,
-    0,109,111,100,117,108,101,95,114,101,112,114,117,17,0,0,
-    0,109,111,100,117,108,101,95,102,111,114,95,108,111,97,100,
-    101,114,117,11,0,0,0,108,111,97,100,95,109,111,100,117,
-    108,101,40,1,0,0,0,117,10,0,0,0,95,95,108,111,
+    62,117,9,0,0,0,95,95,101,110,116,101,114,95,95,171,
+    5,0,0,115,2,0,0,0,0,2,117,28,0,0,0,95,
+    73,109,112,111,114,116,76,111,99,107,67,111,110,116,101,120,
+    116,46,95,95,101,110,116,101,114,95,95,99,4,0,0,0,
+    0,0,0,0,4,0,0,0,1,0,0,0,67,0,0,0,
+    115,14,0,0,0,116,0,0,106,1,0,131,0,0,1,100,
+    1,0,83,40,2,0,0,0,117,60,0,0,0,82,101,108,
+    101,97,115,101,32,116,104,101,32,105,109,112,111,114,116,32,
+    108,111,99,107,32,114,101,103,97,114,100,108,101,115,115,32,
+    111,102,32,97,110,121,32,114,97,105,115,101,100,32,101,120,
+    99,101,112,116,105,111,110,115,46,78,40,2,0,0,0,117,
+    4,0,0,0,95,105,109,112,117,12,0,0,0,114,101,108,
+    101,97,115,101,95,108,111,99,107,40,4,0,0,0,117,4,
+    0,0,0,115,101,108,102,117,8,0,0,0,101,120,99,95,
+    116,121,112,101,117,9,0,0,0,101,120,99,95,118,97,108,
+    117,101,117,13,0,0,0,101,120,99,95,116,114,97,99,101,
+    98,97,99,107,40,0,0,0,0,40,0,0,0,0,117,29,
+    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
+    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
+    117,8,0,0,0,95,95,101,120,105,116,95,95,175,5,0,
+    0,115,2,0,0,0,0,2,117,27,0,0,0,95,73,109,
+    112,111,114,116,76,111,99,107,67,111,110,116,101,120,116,46,
+    95,95,101,120,105,116,95,95,78,40,6,0,0,0,117,8,
+    0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,0,
+    95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,95,
+    95,113,117,97,108,110,97,109,101,95,95,117,7,0,0,0,
+    95,95,100,111,99,95,95,117,9,0,0,0,95,95,101,110,
+    116,101,114,95,95,117,8,0,0,0,95,95,101,120,105,116,
+    95,95,40,1,0,0,0,117,10,0,0,0,95,95,108,111,
     99,97,108,115,95,95,40,0,0,0,0,40,0,0,0,0,
     117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
     111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
-    112,62,117,15,0,0,0,78,97,109,101,115,112,97,99,101,
-    76,111,97,100,101,114,186,4,0,0,115,6,0,0,0,16,
-    1,12,3,18,4,117,15,0,0,0,78,97,109,101,115,112,
-    97,99,101,76,111,97,100,101,114,99,1,0,0,0,0,0,
-    0,0,1,0,0,0,4,0,0,0,66,0,0,0,115,119,
-    0,0,0,124,0,0,69,101,0,0,90,1,0,100,0,0,
-    90,2,0,100,1,0,90,3,0,101,4,0,100,2,0,100,
-    3,0,132,0,0,131,1,0,90,5,0,101,4,0,100,4,
-    0,100,5,0,132,0,0,131,1,0,90,6,0,101,4,0,
-    100,6,0,100,7,0,132,0,0,131,1,0,90,7,0,101,
-    4,0,100,8,0,100,9,0,132,0,0,131,1,0,90,8,
-    0,101,4,0,100,12,0,100,10,0,100,11,0,132,1,0,
-    131,1,0,90,10,0,100,12,0,83,40,13,0,0,0,117,
-    10,0,0,0,80,97,116,104,70,105,110,100,101,114,117,62,
-    0,0,0,77,101,116,97,32,112,97,116,104,32,102,105,110,
-    100,101,114,32,102,111,114,32,115,121,115,46,112,97,116,104,
-    32,97,110,100,32,112,97,99,107,97,103,101,32,95,95,112,
-    97,116,104,95,95,32,97,116,116,114,105,98,117,116,101,115,
-    46,99,1,0,0,0,0,0,0,0,2,0,0,0,4,0,
-    0,0,67,0,0,0,115,58,0,0,0,120,51,0,116,0,
-    0,106,1,0,106,2,0,131,0,0,68,93,34,0,125,1,
-    0,116,3,0,124,1,0,100,1,0,131,2,0,114,16,0,
-    124,1,0,106,4,0,131,0,0,1,113,16,0,113,16,0,
-    87,100,2,0,83,40,3,0,0,0,117,125,0,0,0,67,
-    97,108,108,32,116,104,101,32,105,110,118,97,108,105,100,97,
-    116,101,95,99,97,99,104,101,115,40,41,32,109,101,116,104,
-    111,100,32,111,110,32,97,108,108,32,112,97,116,104,32,101,
-    110,116,114,121,32,102,105,110,100,101,114,115,10,32,32,32,
-    32,32,32,32,32,115,116,111,114,101,100,32,105,110,32,115,
-    121,115,46,112,97,116,104,95,105,109,112,111,114,116,101,114,
-    95,99,97,99,104,101,115,32,40,119,104,101,114,101,32,105,
-    109,112,108,101,109,101,110,116,101,100,41,46,117,17,0,0,
-    0,105,110,118,97,108,105,100,97,116,101,95,99,97,99,104,
-    101,115,78,40,5,0,0,0,117,3,0,0,0,115,121,115,
-    117,19,0,0,0,112,97,116,104,95,105,109,112,111,114,116,
-    101,114,95,99,97,99,104,101,117,6,0,0,0,118,97,108,
-    117,101,115,117,7,0,0,0,104,97,115,97,116,116,114,117,
-    17,0,0,0,105,110,118,97,108,105,100,97,116,101,95,99,
-    97,99,104,101,115,40,2,0,0,0,117,3,0,0,0,99,
-    108,115,117,6,0,0,0,102,105,110,100,101,114,40,0,0,
-    0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,
-    122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,
-    111,111,116,115,116,114,97,112,62,117,17,0,0,0,105,110,
-    118,97,108,105,100,97,116,101,95,99,97,99,104,101,115,208,
-    4,0,0,115,6,0,0,0,0,4,22,1,15,1,117,28,
-    0,0,0,80,97,116,104,70,105,110,100,101,114,46,105,110,
-    118,97,108,105,100,97,116,101,95,99,97,99,104,101,115,99,
-    2,0,0,0,0,0,0,0,3,0,0,0,12,0,0,0,
-    67,0,0,0,115,94,0,0,0,116,0,0,106,1,0,115,
-    28,0,116,2,0,106,3,0,100,1,0,116,4,0,131,2,
-    0,1,110,0,0,120,59,0,116,0,0,106,1,0,68,93,
-    44,0,125,2,0,121,14,0,124,2,0,124,1,0,131,1,
-    0,83,87,113,38,0,4,116,5,0,107,10,0,114,81,0,
-    1,1,1,119,38,0,89,113,38,0,88,113,38,0,87,100,
-    2,0,83,100,2,0,83,40,3,0,0,0,117,113,0,0,
-    0,83,101,97,114,99,104,32,115,101,113,117,101,110,99,101,
-    32,111,102,32,104,111,111,107,115,32,102,111,114,32,97,32,
-    102,105,110,100,101,114,32,102,111,114,32,39,112,97,116,104,
-    39,46,10,10,32,32,32,32,32,32,32,32,73,102,32,39,
-    104,111,111,107,115,39,32,105,115,32,102,97,108,115,101,32,
-    116,104,101,110,32,117,115,101,32,115,121,115,46,112,97,116,
-    104,95,104,111,111,107,115,46,10,10,32,32,32,32,32,32,
-    32,32,117,23,0,0,0,115,121,115,46,112,97,116,104,95,
-    104,111,111,107,115,32,105,115,32,101,109,112,116,121,78,40,
-    7,0,0,0,117,3,0,0,0,115,121,115,117,10,0,0,
-    0,112,97,116,104,95,104,111,111,107,115,117,9,0,0,0,
-    95,119,97,114,110,105,110,103,115,117,4,0,0,0,119,97,
-    114,110,117,13,0,0,0,73,109,112,111,114,116,87,97,114,
-    110,105,110,103,117,11,0,0,0,73,109,112,111,114,116,69,
-    114,114,111,114,117,4,0,0,0,78,111,110,101,40,3,0,
-    0,0,117,3,0,0,0,99,108,115,117,4,0,0,0,112,
-    97,116,104,117,4,0,0,0,104,111,111,107,40,0,0,0,
+    112,62,117,18,0,0,0,95,73,109,112,111,114,116,76,111,
+    99,107,67,111,110,116,101,120,116,167,5,0,0,115,6,0,
+    0,0,16,2,6,2,12,4,117,18,0,0,0,95,73,109,
+    112,111,114,116,76,111,99,107,67,111,110,116,101,120,116,99,
+    3,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,
+    67,0,0,0,115,91,0,0,0,124,1,0,106,0,0,100,
+    1,0,124,2,0,100,2,0,24,131,2,0,125,3,0,116,
+    1,0,124,3,0,131,1,0,124,2,0,107,0,0,114,55,
+    0,116,2,0,100,3,0,131,1,0,130,1,0,110,0,0,
+    124,3,0,100,4,0,25,125,4,0,124,0,0,114,87,0,
+    100,5,0,106,3,0,124,4,0,124,0,0,131,2,0,83,
+    124,4,0,83,40,6,0,0,0,117,50,0,0,0,82,101,
+    115,111,108,118,101,32,97,32,114,101,108,97,116,105,118,101,
+    32,109,111,100,117,108,101,32,110,97,109,101,32,116,111,32,
+    97,110,32,97,98,115,111,108,117,116,101,32,111,110,101,46,
+    117,1,0,0,0,46,105,1,0,0,0,117,50,0,0,0,
+    97,116,116,101,109,112,116,101,100,32,114,101,108,97,116,105,
+    118,101,32,105,109,112,111,114,116,32,98,101,121,111,110,100,
+    32,116,111,112,45,108,101,118,101,108,32,112,97,99,107,97,
+    103,101,105,0,0,0,0,117,5,0,0,0,123,125,46,123,
+    125,40,4,0,0,0,117,6,0,0,0,114,115,112,108,105,
+    116,117,3,0,0,0,108,101,110,117,10,0,0,0,86,97,
+    108,117,101,69,114,114,111,114,117,6,0,0,0,102,111,114,
+    109,97,116,40,5,0,0,0,117,4,0,0,0,110,97,109,
+    101,117,7,0,0,0,112,97,99,107,97,103,101,117,5,0,
+    0,0,108,101,118,101,108,117,4,0,0,0,98,105,116,115,
+    117,4,0,0,0,98,97,115,101,40,0,0,0,0,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,13,0,0,0,95,114,101,115,111,108,
+    118,101,95,110,97,109,101,180,5,0,0,115,10,0,0,0,
+    0,2,22,1,18,1,15,1,10,1,117,13,0,0,0,95,
+    114,101,115,111,108,118,101,95,110,97,109,101,99,2,0,0,
+    0,0,0,0,0,4,0,0,0,11,0,0,0,67,0,0,
+    0,115,138,0,0,0,116,0,0,106,1,0,115,28,0,116,
+    2,0,106,3,0,100,1,0,116,4,0,131,2,0,1,110,
+    0,0,120,103,0,116,0,0,106,1,0,68,93,88,0,125,
+    2,0,116,5,0,131,0,0,143,23,0,1,124,2,0,106,
+    6,0,124,0,0,124,1,0,131,2,0,125,3,0,87,100,
+    2,0,81,88,124,3,0,100,2,0,107,9,0,114,38,0,
+    124,0,0,116,0,0,106,8,0,107,7,0,114,109,0,124,
+    3,0,83,116,0,0,106,8,0,124,0,0,25,106,9,0,
+    83,113,38,0,113,38,0,87,100,2,0,83,100,2,0,83,
+    40,3,0,0,0,117,23,0,0,0,70,105,110,100,32,97,
+    32,109,111,100,117,108,101,39,115,32,108,111,97,100,101,114,
+    46,117,22,0,0,0,115,121,115,46,109,101,116,97,95,112,
+    97,116,104,32,105,115,32,101,109,112,116,121,78,40,10,0,
+    0,0,117,3,0,0,0,115,121,115,117,9,0,0,0,109,
+    101,116,97,95,112,97,116,104,117,9,0,0,0,95,119,97,
+    114,110,105,110,103,115,117,4,0,0,0,119,97,114,110,117,
+    13,0,0,0,73,109,112,111,114,116,87,97,114,110,105,110,
+    103,117,18,0,0,0,95,73,109,112,111,114,116,76,111,99,
+    107,67,111,110,116,101,120,116,117,11,0,0,0,102,105,110,
+    100,95,109,111,100,117,108,101,117,4,0,0,0,78,111,110,
+    101,117,7,0,0,0,109,111,100,117,108,101,115,117,10,0,
+    0,0,95,95,108,111,97,100,101,114,95,95,40,4,0,0,
+    0,117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,
+    97,116,104,117,6,0,0,0,102,105,110,100,101,114,117,6,
+    0,0,0,108,111,97,100,101,114,40,0,0,0,0,40,0,
+    0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,
+    105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,
+    116,114,97,112,62,117,12,0,0,0,95,102,105,110,100,95,
+    109,111,100,117,108,101,189,5,0,0,115,20,0,0,0,0,
+    2,9,1,19,1,16,1,10,1,24,1,12,2,15,1,4,
+    2,21,2,117,12,0,0,0,95,102,105,110,100,95,109,111,
+    100,117,108,101,99,3,0,0,0,0,0,0,0,4,0,0,
+    0,4,0,0,0,67,0,0,0,115,194,0,0,0,116,0,
+    0,124,0,0,116,1,0,131,2,0,115,45,0,116,2,0,
+    100,1,0,106,3,0,116,4,0,124,0,0,131,1,0,131,
+    1,0,131,1,0,130,1,0,110,0,0,124,2,0,100,2,
+    0,107,0,0,114,72,0,116,5,0,100,3,0,131,1,0,
+    130,1,0,110,0,0,124,1,0,114,156,0,116,0,0,124,
+    1,0,116,1,0,131,2,0,115,108,0,116,2,0,100,4,
+    0,131,1,0,130,1,0,113,156,0,124,1,0,116,6,0,
+    106,7,0,107,7,0,114,156,0,100,5,0,125,3,0,116,
+    8,0,124,3,0,106,3,0,124,1,0,131,1,0,131,1,
+    0,130,1,0,113,156,0,110,0,0,124,0,0,12,114,190,
+    0,124,2,0,100,2,0,107,2,0,114,190,0,116,5,0,
+    100,6,0,131,1,0,130,1,0,110,0,0,100,7,0,83,
+    40,8,0,0,0,117,28,0,0,0,86,101,114,105,102,121,
+    32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,34,
+    115,97,110,101,34,46,117,31,0,0,0,109,111,100,117,108,
+    101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,115,
+    116,114,44,32,110,111,116,32,123,125,105,0,0,0,0,117,
+    18,0,0,0,108,101,118,101,108,32,109,117,115,116,32,98,
+    101,32,62,61,32,48,117,31,0,0,0,95,95,112,97,99,
+    107,97,103,101,95,95,32,110,111,116,32,115,101,116,32,116,
+    111,32,97,32,115,116,114,105,110,103,117,61,0,0,0,80,
+    97,114,101,110,116,32,109,111,100,117,108,101,32,123,33,114,
+    125,32,110,111,116,32,108,111,97,100,101,100,44,32,99,97,
+    110,110,111,116,32,112,101,114,102,111,114,109,32,114,101,108,
+    97,116,105,118,101,32,105,109,112,111,114,116,117,17,0,0,
+    0,69,109,112,116,121,32,109,111,100,117,108,101,32,110,97,
+    109,101,78,40,9,0,0,0,117,10,0,0,0,105,115,105,
+    110,115,116,97,110,99,101,117,3,0,0,0,115,116,114,117,
+    9,0,0,0,84,121,112,101,69,114,114,111,114,117,6,0,
+    0,0,102,111,114,109,97,116,117,4,0,0,0,116,121,112,
+    101,117,10,0,0,0,86,97,108,117,101,69,114,114,111,114,
+    117,3,0,0,0,115,121,115,117,7,0,0,0,109,111,100,
+    117,108,101,115,117,11,0,0,0,83,121,115,116,101,109,69,
+    114,114,111,114,40,4,0,0,0,117,4,0,0,0,110,97,
+    109,101,117,7,0,0,0,112,97,99,107,97,103,101,117,5,
+    0,0,0,108,101,118,101,108,117,3,0,0,0,109,115,103,
+    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,117,13,0,0,
+    0,95,115,97,110,105,116,121,95,99,104,101,99,107,206,5,
+    0,0,115,24,0,0,0,0,2,15,1,30,1,12,1,15,
+    1,6,1,15,1,15,1,15,1,6,2,27,1,19,1,117,
+    13,0,0,0,95,115,97,110,105,116,121,95,99,104,101,99,
+    107,117,20,0,0,0,78,111,32,109,111,100,117,108,101,32,
+    110,97,109,101,100,32,123,33,114,125,99,2,0,0,0,0,
+    0,0,0,9,0,0,0,27,0,0,0,67,0,0,0,115,
+    12,2,0,0,100,0,0,125,2,0,124,0,0,106,1,0,
+    100,1,0,131,1,0,100,2,0,25,125,3,0,124,3,0,
+    114,178,0,124,3,0,116,2,0,106,3,0,107,7,0,114,
+    62,0,116,4,0,124,1,0,124,3,0,131,2,0,1,110,
+    0,0,124,0,0,116,2,0,106,3,0,107,6,0,114,88,
+    0,116,2,0,106,3,0,124,0,0,25,83,116,2,0,106,
+    3,0,124,3,0,25,125,4,0,121,13,0,124,4,0,106,
+    5,0,125,2,0,87,113,178,0,4,116,6,0,107,10,0,
+    114,174,0,1,1,1,116,7,0,100,3,0,23,106,8,0,
+    124,0,0,124,3,0,131,2,0,125,5,0,116,9,0,124,
+    5,0,100,4,0,124,0,0,131,1,1,130,1,0,89,113,
+    178,0,88,110,0,0,116,10,0,124,0,0,124,2,0,131,
+    2,0,125,6,0,124,6,0,100,0,0,107,8,0,114,250,
+    0,116,9,0,116,7,0,106,8,0,124,0,0,131,1,0,
+    100,4,0,124,0,0,131,1,1,125,7,0,100,10,0,124,
+    7,0,95,12,0,124,7,0,130,1,0,110,47,0,124,0,
+    0,116,2,0,106,3,0,107,7,0,114,41,1,124,6,0,
+    106,13,0,124,0,0,131,1,0,1,116,14,0,100,5,0,
+    124,0,0,124,6,0,131,3,0,1,110,0,0,116,2,0,
+    106,3,0,124,0,0,25,125,8,0,124,3,0,114,105,1,
+    116,2,0,106,3,0,124,3,0,25,125,4,0,116,15,0,
+    124,4,0,124,0,0,106,1,0,100,1,0,131,1,0,100,
+    6,0,25,124,8,0,131,3,0,1,110,0,0,116,16,0,
+    124,8,0,100,7,0,100,0,0,131,3,0,100,0,0,107,
+    8,0,114,212,1,121,59,0,124,8,0,106,17,0,124,8,
+    0,95,18,0,116,19,0,124,8,0,100,8,0,131,2,0,
+    115,187,1,124,8,0,106,18,0,106,1,0,100,1,0,131,
+    1,0,100,2,0,25,124,8,0,95,18,0,110,0,0,87,
+    113,212,1,4,116,6,0,107,10,0,114,208,1,1,1,1,
+    89,113,212,1,88,110,0,0,116,19,0,124,8,0,100,9,
+    0,131,2,0,115,8,2,121,13,0,124,6,0,124,8,0,
+    95,20,0,87,113,8,2,4,116,6,0,107,10,0,114,4,
+    2,1,1,1,89,113,8,2,88,110,0,0,124,8,0,83,
+    40,11,0,0,0,78,117,1,0,0,0,46,105,0,0,0,
+    0,117,21,0,0,0,59,32,123,125,32,105,115,32,110,111,
+    116,32,97,32,112,97,99,107,97,103,101,117,4,0,0,0,
+    110,97,109,101,117,18,0,0,0,105,109,112,111,114,116,32,
+    123,33,114,125,32,35,32,123,33,114,125,105,2,0,0,0,
+    117,11,0,0,0,95,95,112,97,99,107,97,103,101,95,95,
+    117,8,0,0,0,95,95,112,97,116,104,95,95,117,10,0,
+    0,0,95,95,108,111,97,100,101,114,95,95,84,40,21,0,
+    0,0,117,4,0,0,0,78,111,110,101,117,10,0,0,0,
+    114,112,97,114,116,105,116,105,111,110,117,3,0,0,0,115,
+    121,115,117,7,0,0,0,109,111,100,117,108,101,115,117,25,
+    0,0,0,95,99,97,108,108,95,119,105,116,104,95,102,114,
+    97,109,101,115,95,114,101,109,111,118,101,100,117,8,0,0,
+    0,95,95,112,97,116,104,95,95,117,14,0,0,0,65,116,
+    116,114,105,98,117,116,101,69,114,114,111,114,117,8,0,0,
+    0,95,69,82,82,95,77,83,71,117,6,0,0,0,102,111,
+    114,109,97,116,117,11,0,0,0,73,109,112,111,114,116,69,
+    114,114,111,114,117,12,0,0,0,95,102,105,110,100,95,109,
+    111,100,117,108,101,117,4,0,0,0,84,114,117,101,117,10,
+    0,0,0,95,110,111,116,95,102,111,117,110,100,117,11,0,
+    0,0,108,111,97,100,95,109,111,100,117,108,101,117,16,0,
+    0,0,95,118,101,114,98,111,115,101,95,109,101,115,115,97,
+    103,101,117,7,0,0,0,115,101,116,97,116,116,114,117,7,
+    0,0,0,103,101,116,97,116,116,114,117,8,0,0,0,95,
+    95,110,97,109,101,95,95,117,11,0,0,0,95,95,112,97,
+    99,107,97,103,101,95,95,117,7,0,0,0,104,97,115,97,
+    116,116,114,117,10,0,0,0,95,95,108,111,97,100,101,114,
+    95,95,40,9,0,0,0,117,4,0,0,0,110,97,109,101,
+    117,7,0,0,0,105,109,112,111,114,116,95,117,4,0,0,
+    0,112,97,116,104,117,6,0,0,0,112,97,114,101,110,116,
+    117,13,0,0,0,112,97,114,101,110,116,95,109,111,100,117,
+    108,101,117,3,0,0,0,109,115,103,117,6,0,0,0,108,
+    111,97,100,101,114,117,3,0,0,0,101,120,99,117,6,0,
+    0,0,109,111,100,117,108,101,40,0,0,0,0,40,0,0,
+    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
+    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
+    114,97,112,62,117,23,0,0,0,95,102,105,110,100,95,97,
+    110,100,95,108,111,97,100,95,117,110,108,111,99,107,101,100,
+    225,5,0,0,115,76,0,0,0,0,1,6,1,19,1,6,
+    1,15,1,16,2,15,1,11,2,13,1,3,1,13,1,13,
+    1,22,1,26,1,15,1,12,1,27,3,9,1,9,1,15,
+    2,13,1,19,2,13,1,6,2,13,1,32,2,24,1,3,
+    1,12,1,15,1,32,1,13,1,8,2,15,1,3,1,13,
+    1,13,1,8,1,117,23,0,0,0,95,102,105,110,100,95,
+    97,110,100,95,108,111,97,100,95,117,110,108,111,99,107,101,
+    100,99,2,0,0,0,0,0,0,0,3,0,0,0,18,0,
+    0,0,67,0,0,0,115,75,0,0,0,122,16,0,116,0,
+    0,124,0,0,131,1,0,125,2,0,87,100,1,0,116,1,
+    0,106,2,0,131,0,0,1,88,124,2,0,106,3,0,131,
+    0,0,1,122,17,0,116,4,0,124,0,0,124,1,0,131,
+    2,0,83,87,100,1,0,124,2,0,106,5,0,131,0,0,
+    1,88,100,1,0,83,40,2,0,0,0,117,54,0,0,0,
+    70,105,110,100,32,97,110,100,32,108,111,97,100,32,116,104,
+    101,32,109,111,100,117,108,101,44,32,97,110,100,32,114,101,
+    108,101,97,115,101,32,116,104,101,32,105,109,112,111,114,116,
+    32,108,111,99,107,46,78,40,6,0,0,0,117,16,0,0,
+    0,95,103,101,116,95,109,111,100,117,108,101,95,108,111,99,
+    107,117,4,0,0,0,95,105,109,112,117,12,0,0,0,114,
+    101,108,101,97,115,101,95,108,111,99,107,117,7,0,0,0,
+    97,99,113,117,105,114,101,117,23,0,0,0,95,102,105,110,
+    100,95,97,110,100,95,108,111,97,100,95,117,110,108,111,99,
+    107,101,100,117,7,0,0,0,114,101,108,101,97,115,101,40,
+    3,0,0,0,117,4,0,0,0,110,97,109,101,117,7,0,
+    0,0,105,109,112,111,114,116,95,117,4,0,0,0,108,111,
+    99,107,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,14,
+    0,0,0,95,102,105,110,100,95,97,110,100,95,108,111,97,
+    100,19,6,0,0,115,14,0,0,0,0,2,3,1,16,2,
+    11,1,10,1,3,1,17,2,117,14,0,0,0,95,102,105,
+    110,100,95,97,110,100,95,108,111,97,100,99,3,0,0,0,
+    0,0,0,0,5,0,0,0,4,0,0,0,67,0,0,0,
+    115,172,0,0,0,116,0,0,124,0,0,124,1,0,124,2,
+    0,131,3,0,1,124,2,0,100,1,0,107,4,0,114,49,
+    0,116,1,0,124,0,0,124,1,0,124,2,0,131,3,0,
+    125,0,0,110,0,0,116,2,0,106,3,0,131,0,0,1,
+    124,0,0,116,4,0,106,5,0,107,7,0,114,87,0,116,
+    6,0,124,0,0,116,7,0,131,2,0,83,116,4,0,106,
+    5,0,124,0,0,25,125,3,0,124,3,0,100,4,0,107,
+    8,0,114,158,0,116,2,0,106,9,0,131,0,0,1,100,
+    2,0,106,10,0,124,0,0,131,1,0,125,4,0,116,11,
+    0,124,4,0,100,3,0,124,0,0,131,1,1,130,1,0,
+    110,0,0,116,12,0,124,0,0,131,1,0,1,124,3,0,
+    83,40,5,0,0,0,117,50,1,0,0,73,109,112,111,114,
+    116,32,97,110,100,32,114,101,116,117,114,110,32,116,104,101,
+    32,109,111,100,117,108,101,32,98,97,115,101,100,32,111,110,
+    32,105,116,115,32,110,97,109,101,44,32,116,104,101,32,112,
+    97,99,107,97,103,101,32,116,104,101,32,99,97,108,108,32,
+    105,115,10,32,32,32,32,98,101,105,110,103,32,109,97,100,
+    101,32,102,114,111,109,44,32,97,110,100,32,116,104,101,32,
+    108,101,118,101,108,32,97,100,106,117,115,116,109,101,110,116,
+    46,10,10,32,32,32,32,84,104,105,115,32,102,117,110,99,
+    116,105,111,110,32,114,101,112,114,101,115,101,110,116,115,32,
+    116,104,101,32,103,114,101,97,116,101,115,116,32,99,111,109,
+    109,111,110,32,100,101,110,111,109,105,110,97,116,111,114,32,
+    111,102,32,102,117,110,99,116,105,111,110,97,108,105,116,121,
+    10,32,32,32,32,98,101,116,119,101,101,110,32,105,109,112,
+    111,114,116,95,109,111,100,117,108,101,32,97,110,100,32,95,
+    95,105,109,112,111,114,116,95,95,46,32,84,104,105,115,32,
+    105,110,99,108,117,100,101,115,32,115,101,116,116,105,110,103,
+    32,95,95,112,97,99,107,97,103,101,95,95,32,105,102,10,
+    32,32,32,32,116,104,101,32,108,111,97,100,101,114,32,100,
+    105,100,32,110,111,116,46,10,10,32,32,32,32,105,0,0,
+    0,0,117,40,0,0,0,105,109,112,111,114,116,32,111,102,
+    32,123,125,32,104,97,108,116,101,100,59,32,78,111,110,101,
+    32,105,110,32,115,121,115,46,109,111,100,117,108,101,115,117,
+    4,0,0,0,110,97,109,101,78,40,13,0,0,0,117,13,
+    0,0,0,95,115,97,110,105,116,121,95,99,104,101,99,107,
+    117,13,0,0,0,95,114,101,115,111,108,118,101,95,110,97,
+    109,101,117,4,0,0,0,95,105,109,112,117,12,0,0,0,
+    97,99,113,117,105,114,101,95,108,111,99,107,117,3,0,0,
+    0,115,121,115,117,7,0,0,0,109,111,100,117,108,101,115,
+    117,14,0,0,0,95,102,105,110,100,95,97,110,100,95,108,
+    111,97,100,117,11,0,0,0,95,103,99,100,95,105,109,112,
+    111,114,116,117,4,0,0,0,78,111,110,101,117,12,0,0,
+    0,114,101,108,101,97,115,101,95,108,111,99,107,117,6,0,
+    0,0,102,111,114,109,97,116,117,11,0,0,0,73,109,112,
+    111,114,116,69,114,114,111,114,117,19,0,0,0,95,108,111,
+    99,107,95,117,110,108,111,99,107,95,109,111,100,117,108,101,
+    40,5,0,0,0,117,4,0,0,0,110,97,109,101,117,7,
+    0,0,0,112,97,99,107,97,103,101,117,5,0,0,0,108,
+    101,118,101,108,117,6,0,0,0,109,111,100,117,108,101,117,
+    7,0,0,0,109,101,115,115,97,103,101,40,0,0,0,0,
+    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
+    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
+    116,115,116,114,97,112,62,117,11,0,0,0,95,103,99,100,
+    95,105,109,112,111,114,116,32,6,0,0,115,28,0,0,0,
+    0,9,16,1,12,1,21,1,10,1,15,1,13,1,13,1,
+    12,1,10,1,6,1,9,1,21,1,10,1,117,11,0,0,
+    0,95,103,99,100,95,105,109,112,111,114,116,99,3,0,0,
+    0,0,0,0,0,6,0,0,0,17,0,0,0,67,0,0,
+    0,115,254,0,0,0,116,0,0,124,0,0,100,1,0,131,
+    2,0,114,250,0,100,2,0,124,1,0,107,6,0,114,89,
+    0,116,1,0,124,1,0,131,1,0,125,1,0,124,1,0,
+    106,2,0,100,2,0,131,1,0,1,116,0,0,124,0,0,
+    100,3,0,131,2,0,114,89,0,124,1,0,106,3,0,124,
+    0,0,106,4,0,131,1,0,1,113,89,0,110,0,0,120,
+    158,0,124,1,0,68,93,147,0,125,3,0,116,0,0,124,
+    0,0,124,3,0,131,2,0,115,96,0,100,4,0,106,5,
+    0,124,0,0,106,6,0,124,3,0,131,2,0,125,4,0,
+    121,17,0,116,7,0,124,2,0,124,4,0,131,2,0,1,
+    87,113,243,0,4,116,8,0,107,10,0,114,239,0,1,125,
+    5,0,1,122,50,0,116,9,0,124,5,0,100,5,0,100,
+    7,0,131,3,0,114,218,0,124,5,0,106,11,0,124,4,
+    0,107,2,0,114,218,0,119,96,0,113,218,0,110,0,0,
+    130,0,0,87,89,100,6,0,100,6,0,125,5,0,126,5,
+    0,88,113,243,0,88,113,96,0,113,96,0,87,110,0,0,
+    124,0,0,83,40,8,0,0,0,117,238,0,0,0,70,105,
+    103,117,114,101,32,111,117,116,32,119,104,97,116,32,95,95,
+    105,109,112,111,114,116,95,95,32,115,104,111,117,108,100,32,
+    114,101,116,117,114,110,46,10,10,32,32,32,32,84,104,101,
+    32,105,109,112,111,114,116,95,32,112,97,114,97,109,101,116,
+    101,114,32,105,115,32,97,32,99,97,108,108,97,98,108,101,
+    32,119,104,105,99,104,32,116,97,107,101,115,32,116,104,101,
+    32,110,97,109,101,32,111,102,32,109,111,100,117,108,101,32,
+    116,111,10,32,32,32,32,105,109,112,111,114,116,46,32,73,
+    116,32,105,115,32,114,101,113,117,105,114,101,100,32,116,111,
+    32,100,101,99,111,117,112,108,101,32,116,104,101,32,102,117,
+    110,99,116,105,111,110,32,102,114,111,109,32,97,115,115,117,
+    109,105,110,103,32,105,109,112,111,114,116,108,105,98,39,115,
+    10,32,32,32,32,105,109,112,111,114,116,32,105,109,112,108,
+    101,109,101,110,116,97,116,105,111,110,32,105,115,32,100,101,
+    115,105,114,101,100,46,10,10,32,32,32,32,117,8,0,0,
+    0,95,95,112,97,116,104,95,95,117,1,0,0,0,42,117,
+    7,0,0,0,95,95,97,108,108,95,95,117,5,0,0,0,
+    123,125,46,123,125,117,10,0,0,0,95,110,111,116,95,102,
+    111,117,110,100,78,70,40,12,0,0,0,117,7,0,0,0,
+    104,97,115,97,116,116,114,117,4,0,0,0,108,105,115,116,
+    117,6,0,0,0,114,101,109,111,118,101,117,6,0,0,0,
+    101,120,116,101,110,100,117,7,0,0,0,95,95,97,108,108,
+    95,95,117,6,0,0,0,102,111,114,109,97,116,117,8,0,
+    0,0,95,95,110,97,109,101,95,95,117,25,0,0,0,95,
+    99,97,108,108,95,119,105,116,104,95,102,114,97,109,101,115,
+    95,114,101,109,111,118,101,100,117,11,0,0,0,73,109,112,
+    111,114,116,69,114,114,111,114,117,7,0,0,0,103,101,116,
+    97,116,116,114,117,5,0,0,0,70,97,108,115,101,117,4,
+    0,0,0,110,97,109,101,40,6,0,0,0,117,6,0,0,
+    0,109,111,100,117,108,101,117,8,0,0,0,102,114,111,109,
+    108,105,115,116,117,7,0,0,0,105,109,112,111,114,116,95,
+    117,1,0,0,0,120,117,9,0,0,0,102,114,111,109,95,
+    110,97,109,101,117,3,0,0,0,101,120,99,40,0,0,0,
     0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
     101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
-    111,116,115,116,114,97,112,62,117,11,0,0,0,95,112,97,
-    116,104,95,104,111,111,107,115,216,4,0,0,115,16,0,0,
-    0,0,7,9,1,19,1,16,1,3,1,14,1,13,1,12,
-    2,117,22,0,0,0,80,97,116,104,70,105,110,100,101,114,
-    46,95,112,97,116,104,95,104,111,111,107,115,99,2,0,0,
-    0,0,0,0,0,3,0,0,0,11,0,0,0,67,0,0,
-    0,115,91,0,0,0,124,1,0,100,1,0,107,2,0,114,
-    21,0,100,2,0,125,1,0,110,0,0,121,17,0,116,0,
-    0,106,1,0,124,1,0,25,125,2,0,87,110,46,0,4,
-    116,2,0,107,10,0,114,86,0,1,1,1,124,0,0,106,
-    3,0,124,1,0,131,1,0,125,2,0,124,2,0,116,0,
-    0,106,1,0,124,1,0,60,89,110,1,0,88,124,2,0,
-    83,40,3,0,0,0,117,210,0,0,0,71,101,116,32,116,
-    104,101,32,102,105,110,100,101,114,32,102,111,114,32,116,104,
-    101,32,112,97,116,104,32,101,110,116,114,121,32,102,114,111,
-    109,32,115,121,115,46,112,97,116,104,95,105,109,112,111,114,
-    116,101,114,95,99,97,99,104,101,46,10,10,32,32,32,32,
-    32,32,32,32,73,102,32,116,104,101,32,112,97,116,104,32,
-    101,110,116,114,121,32,105,115,32,110,111,116,32,105,110,32,
-    116,104,101,32,99,97,99,104,101,44,32,102,105,110,100,32,
-    116,104,101,32,97,112,112,114,111,112,114,105,97,116,101,32,
-    102,105,110,100,101,114,10,32,32,32,32,32,32,32,32,97,
-    110,100,32,99,97,99,104,101,32,105,116,46,32,73,102,32,
-    110,111,32,102,105,110,100,101,114,32,105,115,32,97,118,97,
-    105,108,97,98,108,101,44,32,115,116,111,114,101,32,78,111,
-    110,101,46,10,10,32,32,32,32,32,32,32,32,117,0,0,
-    0,0,117,1,0,0,0,46,40,4,0,0,0,117,3,0,
-    0,0,115,121,115,117,19,0,0,0,112,97,116,104,95,105,
-    109,112,111,114,116,101,114,95,99,97,99,104,101,117,8,0,
-    0,0,75,101,121,69,114,114,111,114,117,11,0,0,0,95,
-    112,97,116,104,95,104,111,111,107,115,40,3,0,0,0,117,
-    3,0,0,0,99,108,115,117,4,0,0,0,112,97,116,104,
-    117,6,0,0,0,102,105,110,100,101,114,40,0,0,0,0,
-    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
-    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
-    116,115,116,114,97,112,62,117,20,0,0,0,95,112,97,116,
-    104,95,105,109,112,111,114,116,101,114,95,99,97,99,104,101,
-    233,4,0,0,115,16,0,0,0,0,8,12,1,9,1,3,
-    1,17,1,13,1,15,1,18,1,117,31,0,0,0,80,97,
-    116,104,70,105,110,100,101,114,46,95,112,97,116,104,95,105,
-    109,112,111,114,116,101,114,95,99,97,99,104,101,99,3,0,
-    0,0,0,0,0,0,8,0,0,0,4,0,0,0,67,0,
-    0,0,115,162,0,0,0,103,0,0,125,3,0,120,149,0,
-    124,2,0,68,93,131,0,125,4,0,124,0,0,106,0,0,
-    124,4,0,131,1,0,125,5,0,124,5,0,100,2,0,107,
-    9,0,114,13,0,116,2,0,124,5,0,100,1,0,131,2,
-    0,114,85,0,124,5,0,106,3,0,124,1,0,131,1,0,
-    92,2,0,125,6,0,125,7,0,110,21,0,124,5,0,106,
-    4,0,124,1,0,131,1,0,125,6,0,103,0,0,125,7,
-    0,124,6,0,100,2,0,107,9,0,114,128,0,124,6,0,
-    124,3,0,102,2,0,83,124,3,0,106,5,0,124,7,0,
-    131,1,0,1,113,13,0,113,13,0,87,100,2,0,124,3,
-    0,102,2,0,83,100,2,0,83,40,3,0,0,0,117,63,
-    0,0,0,70,105,110,100,32,116,104,101,32,108,111,97,100,
-    101,114,32,111,114,32,110,97,109,101,115,112,97,99,101,95,
-    112,97,116,104,32,102,111,114,32,116,104,105,115,32,109,111,
-    100,117,108,101,47,112,97,99,107,97,103,101,32,110,97,109,
-    101,46,117,11,0,0,0,102,105,110,100,95,108,111,97,100,
-    101,114,78,40,6,0,0,0,117,20,0,0,0,95,112,97,
-    116,104,95,105,109,112,111,114,116,101,114,95,99,97,99,104,
-    101,117,4,0,0,0,78,111,110,101,117,7,0,0,0,104,
-    97,115,97,116,116,114,117,11,0,0,0,102,105,110,100,95,
-    108,111,97,100,101,114,117,11,0,0,0,102,105,110,100,95,
-    109,111,100,117,108,101,117,6,0,0,0,101,120,116,101,110,
-    100,40,8,0,0,0,117,3,0,0,0,99,108,115,117,8,
-    0,0,0,102,117,108,108,110,97,109,101,117,4,0,0,0,
-    112,97,116,104,117,14,0,0,0,110,97,109,101,115,112,97,
-    99,101,95,112,97,116,104,117,5,0,0,0,101,110,116,114,
-    121,117,6,0,0,0,102,105,110,100,101,114,117,6,0,0,
-    0,108,111,97,100,101,114,117,8,0,0,0,112,111,114,116,
-    105,111,110,115,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,11,0,0,0,95,103,101,116,95,108,111,97,100,101,114,
-    250,4,0,0,115,24,0,0,0,0,5,6,1,13,1,15,
-    1,12,1,15,1,24,2,15,1,6,1,12,2,10,5,20,
-    2,117,22,0,0,0,80,97,116,104,70,105,110,100,101,114,
-    46,95,103,101,116,95,108,111,97,100,101,114,99,3,0,0,
-    0,0,0,0,0,5,0,0,0,4,0,0,0,67,0,0,
-    0,115,97,0,0,0,124,2,0,100,1,0,107,8,0,114,
-    24,0,116,1,0,106,2,0,125,2,0,110,0,0,124,0,
-    0,106,3,0,124,1,0,124,2,0,131,2,0,92,2,0,
-    125,3,0,125,4,0,124,3,0,100,1,0,107,9,0,114,
-    64,0,124,3,0,83,124,4,0,114,89,0,116,4,0,124,
-    1,0,124,4,0,124,0,0,106,3,0,131,3,0,83,100,
-    1,0,83,100,1,0,83,40,2,0,0,0,117,98,0,0,
-    0,70,105,110,100,32,116,104,101,32,109,111,100,117,108,101,
-    32,111,110,32,115,121,115,46,112,97,116,104,32,111,114,32,
-    39,112,97,116,104,39,32,98,97,115,101,100,32,111,110,32,
-    115,121,115,46,112,97,116,104,95,104,111,111,107,115,32,97,
-    110,100,10,32,32,32,32,32,32,32,32,115,121,115,46,112,
-    97,116,104,95,105,109,112,111,114,116,101,114,95,99,97,99,
-    104,101,46,78,40,5,0,0,0,117,4,0,0,0,78,111,
-    110,101,117,3,0,0,0,115,121,115,117,4,0,0,0,112,
-    97,116,104,117,11,0,0,0,95,103,101,116,95,108,111,97,
-    100,101,114,117,15,0,0,0,78,97,109,101,115,112,97,99,
-    101,76,111,97,100,101,114,40,5,0,0,0,117,3,0,0,
-    0,99,108,115,117,8,0,0,0,102,117,108,108,110,97,109,
-    101,117,4,0,0,0,112,97,116,104,117,6,0,0,0,108,
-    111,97,100,101,114,117,14,0,0,0,110,97,109,101,115,112,
-    97,99,101,95,112,97,116,104,40,0,0,0,0,40,0,0,
+    111,116,115,116,114,97,112,62,117,16,0,0,0,95,104,97,
+    110,100,108,101,95,102,114,111,109,108,105,115,116,56,6,0,
+    0,115,34,0,0,0,0,10,15,1,12,1,12,1,13,1,
+    15,1,22,1,13,1,15,1,21,1,3,1,17,1,18,6,
+    18,1,15,1,9,1,32,1,117,16,0,0,0,95,104,97,
+    110,100,108,101,95,102,114,111,109,108,105,115,116,99,1,0,
+    0,0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,
+    0,0,115,78,0,0,0,124,0,0,106,0,0,100,1,0,
+    131,1,0,125,1,0,124,1,0,100,6,0,107,8,0,114,
+    74,0,124,0,0,100,2,0,25,125,1,0,100,3,0,124,
+    0,0,107,7,0,114,74,0,124,1,0,106,2,0,100,4,
+    0,131,1,0,100,5,0,25,125,1,0,113,74,0,110,0,
+    0,124,1,0,83,40,7,0,0,0,117,167,0,0,0,67,
+    97,108,99,117,108,97,116,101,32,119,104,97,116,32,95,95,
+    112,97,99,107,97,103,101,95,95,32,115,104,111,117,108,100,
+    32,98,101,46,10,10,32,32,32,32,95,95,112,97,99,107,
+    97,103,101,95,95,32,105,115,32,110,111,116,32,103,117,97,
+    114,97,110,116,101,101,100,32,116,111,32,98,101,32,100,101,
+    102,105,110,101,100,32,111,114,32,99,111,117,108,100,32,98,
+    101,32,115,101,116,32,116,111,32,78,111,110,101,10,32,32,
+    32,32,116,111,32,114,101,112,114,101,115,101,110,116,32,116,
+    104,97,116,32,105,116,115,32,112,114,111,112,101,114,32,118,
+    97,108,117,101,32,105,115,32,117,110,107,110,111,119,110,46,
+    10,10,32,32,32,32,117,11,0,0,0,95,95,112,97,99,
+    107,97,103,101,95,95,117,8,0,0,0,95,95,110,97,109,
+    101,95,95,117,8,0,0,0,95,95,112,97,116,104,95,95,
+    117,1,0,0,0,46,105,0,0,0,0,78,40,3,0,0,
+    0,117,3,0,0,0,103,101,116,117,4,0,0,0,78,111,
+    110,101,117,10,0,0,0,114,112,97,114,116,105,116,105,111,
+    110,40,2,0,0,0,117,7,0,0,0,103,108,111,98,97,
+    108,115,117,7,0,0,0,112,97,99,107,97,103,101,40,0,
+    0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,114,
+    111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,95,
+    98,111,111,116,115,116,114,97,112,62,117,17,0,0,0,95,
+    99,97,108,99,95,95,95,112,97,99,107,97,103,101,95,95,
+    90,6,0,0,115,12,0,0,0,0,7,15,1,12,1,10,
+    1,12,1,25,1,117,17,0,0,0,95,99,97,108,99,95,
+    95,95,112,97,99,107,97,103,101,95,95,99,0,0,0,0,
+    0,0,0,0,3,0,0,0,3,0,0,0,67,0,0,0,
+    115,55,0,0,0,116,0,0,116,1,0,106,2,0,131,0,
+    0,102,2,0,125,0,0,116,3,0,116,4,0,102,2,0,
+    125,1,0,116,5,0,116,6,0,102,2,0,125,2,0,124,
+    0,0,124,1,0,124,2,0,103,3,0,83,40,1,0,0,
+    0,117,111,0,0,0,82,101,116,117,114,110,115,32,97,32,
+    108,105,115,116,32,111,102,32,102,105,108,101,45,98,97,115,
+    101,100,32,109,111,100,117,108,101,32,108,111,97,100,101,114,
+    115,46,10,10,32,32,32,32,69,97,99,104,32,105,116,101,
+    109,32,105,115,32,97,32,116,117,112,108,101,32,40,108,111,
+    97,100,101,114,44,32,115,117,102,102,105,120,101,115,44,32,
+    97,108,108,111,119,95,112,97,99,107,97,103,101,115,41,46,
+    10,32,32,32,32,40,7,0,0,0,117,19,0,0,0,69,
+    120,116,101,110,115,105,111,110,70,105,108,101,76,111,97,100,
+    101,114,117,4,0,0,0,95,105,109,112,117,18,0,0,0,
+    101,120,116,101,110,115,105,111,110,95,115,117,102,102,105,120,
+    101,115,117,16,0,0,0,83,111,117,114,99,101,70,105,108,
+    101,76,111,97,100,101,114,117,15,0,0,0,83,79,85,82,
+    67,69,95,83,85,70,70,73,88,69,83,117,20,0,0,0,
+    83,111,117,114,99,101,108,101,115,115,70,105,108,101,76,111,
+    97,100,101,114,117,17,0,0,0,66,89,84,69,67,79,68,
+    69,95,83,85,70,70,73,88,69,83,40,3,0,0,0,117,
+    10,0,0,0,101,120,116,101,110,115,105,111,110,115,117,6,
+    0,0,0,115,111,117,114,99,101,117,8,0,0,0,98,121,
+    116,101,99,111,100,101,40,0,0,0,0,40,0,0,0,0,
+    117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,
+    111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,
+    112,62,117,27,0,0,0,95,103,101,116,95,115,117,112,112,
+    111,114,116,101,100,95,102,105,108,101,95,108,111,97,100,101,
+    114,115,105,6,0,0,115,8,0,0,0,0,5,18,1,12,
+    1,12,1,117,27,0,0,0,95,103,101,116,95,115,117,112,
+    112,111,114,116,101,100,95,102,105,108,101,95,108,111,97,100,
+    101,114,115,99,5,0,0,0,0,0,0,0,9,0,0,0,
+    5,0,0,0,67,0,0,0,115,227,0,0,0,124,4,0,
+    100,1,0,107,2,0,114,27,0,116,0,0,124,0,0,131,
+    1,0,125,5,0,110,54,0,124,1,0,100,3,0,107,9,
+    0,114,45,0,124,1,0,110,3,0,105,0,0,125,6,0,
+    116,2,0,124,6,0,131,1,0,125,7,0,116,0,0,124,
+    0,0,124,7,0,124,4,0,131,3,0,125,5,0,124,3,
+    0,115,207,0,124,4,0,100,1,0,107,2,0,114,122,0,
+    116,0,0,124,0,0,106,3,0,100,2,0,131,1,0,100,
+    1,0,25,131,1,0,83,124,0,0,115,132,0,124,5,0,
+    83,116,4,0,124,0,0,131,1,0,116,4,0,124,0,0,
+    106,3,0,100,2,0,131,1,0,100,1,0,25,131,1,0,
+    24,125,8,0,116,5,0,106,6,0,124,5,0,106,7,0,
+    100,3,0,116,4,0,124,5,0,106,7,0,131,1,0,124,
+    8,0,24,133,2,0,25,25,83,110,16,0,116,8,0,124,
+    5,0,124,3,0,116,0,0,131,3,0,83,100,3,0,83,
+    40,4,0,0,0,117,214,1,0,0,73,109,112,111,114,116,
+    32,97,32,109,111,100,117,108,101,46,10,10,32,32,32,32,
+    84,104,101,32,39,103,108,111,98,97,108,115,39,32,97,114,
+    103,117,109,101,110,116,32,105,115,32,117,115,101,100,32,116,
+    111,32,105,110,102,101,114,32,119,104,101,114,101,32,116,104,
+    101,32,105,109,112,111,114,116,32,105,115,32,111,99,99,117,
+    114,105,110,103,32,102,114,111,109,10,32,32,32,32,116,111,
+    32,104,97,110,100,108,101,32,114,101,108,97,116,105,118,101,
+    32,105,109,112,111,114,116,115,46,32,84,104,101,32,39,108,
+    111,99,97,108,115,39,32,97,114,103,117,109,101,110,116,32,
+    105,115,32,105,103,110,111,114,101,100,46,32,84,104,101,10,
+    32,32,32,32,39,102,114,111,109,108,105,115,116,39,32,97,
+    114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,
+    115,32,119,104,97,116,32,115,104,111,117,108,100,32,101,120,
+    105,115,116,32,97,115,32,97,116,116,114,105,98,117,116,101,
+    115,32,111,110,32,116,104,101,32,109,111,100,117,108,101,10,
+    32,32,32,32,98,101,105,110,103,32,105,109,112,111,114,116,
+    101,100,32,40,101,46,103,46,32,96,96,102,114,111,109,32,
+    109,111,100,117,108,101,32,105,109,112,111,114,116,32,60,102,
+    114,111,109,108,105,115,116,62,96,96,41,46,32,32,84,104,
+    101,32,39,108,101,118,101,108,39,10,32,32,32,32,97,114,
+    103,117,109,101,110,116,32,114,101,112,114,101,115,101,110,116,
+    115,32,116,104,101,32,112,97,99,107,97,103,101,32,108,111,
+    99,97,116,105,111,110,32,116,111,32,105,109,112,111,114,116,
+    32,102,114,111,109,32,105,110,32,97,32,114,101,108,97,116,
+    105,118,101,10,32,32,32,32,105,109,112,111,114,116,32,40,
+    101,46,103,46,32,96,96,102,114,111,109,32,46,46,112,107,
+    103,32,105,109,112,111,114,116,32,109,111,100,96,96,32,119,
+    111,117,108,100,32,104,97,118,101,32,97,32,39,108,101,118,
+    101,108,39,32,111,102,32,50,41,46,10,10,32,32,32,32,
+    105,0,0,0,0,117,1,0,0,0,46,78,40,9,0,0,
+    0,117,11,0,0,0,95,103,99,100,95,105,109,112,111,114,
+    116,117,4,0,0,0,78,111,110,101,117,17,0,0,0,95,
+    99,97,108,99,95,95,95,112,97,99,107,97,103,101,95,95,
+    117,9,0,0,0,112,97,114,116,105,116,105,111,110,117,3,
+    0,0,0,108,101,110,117,3,0,0,0,115,121,115,117,7,
+    0,0,0,109,111,100,117,108,101,115,117,8,0,0,0,95,
+    95,110,97,109,101,95,95,117,16,0,0,0,95,104,97,110,
+    100,108,101,95,102,114,111,109,108,105,115,116,40,9,0,0,
+    0,117,4,0,0,0,110,97,109,101,117,7,0,0,0,103,
+    108,111,98,97,108,115,117,6,0,0,0,108,111,99,97,108,
+    115,117,8,0,0,0,102,114,111,109,108,105,115,116,117,5,
+    0,0,0,108,101,118,101,108,117,6,0,0,0,109,111,100,
+    117,108,101,117,8,0,0,0,103,108,111,98,97,108,115,95,
+    117,7,0,0,0,112,97,99,107,97,103,101,117,7,0,0,
+    0,99,117,116,95,111,102,102,40,0,0,0,0,40,0,0,
     0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
     109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,11,0,0,0,102,105,110,100,95,109,111,
-    100,117,108,101,19,5,0,0,115,16,0,0,0,0,4,12,
-    1,12,1,24,1,12,1,4,2,6,3,19,2,117,22,0,
-    0,0,80,97,116,104,70,105,110,100,101,114,46,102,105,110,
-    100,95,109,111,100,117,108,101,78,40,11,0,0,0,117,8,
-    0,0,0,95,95,110,97,109,101,95,95,117,10,0,0,0,
-    95,95,109,111,100,117,108,101,95,95,117,12,0,0,0,95,
-    95,113,117,97,108,110,97,109,101,95,95,117,7,0,0,0,
-    95,95,100,111,99,95,95,117,11,0,0,0,99,108,97,115,
-    115,109,101,116,104,111,100,117,17,0,0,0,105,110,118,97,
-    108,105,100,97,116,101,95,99,97,99,104,101,115,117,11,0,
-    0,0,95,112,97,116,104,95,104,111,111,107,115,117,20,0,
-    0,0,95,112,97,116,104,95,105,109,112,111,114,116,101,114,
-    95,99,97,99,104,101,117,11,0,0,0,95,103,101,116,95,
-    108,111,97,100,101,114,117,4,0,0,0,78,111,110,101,117,
-    11,0,0,0,102,105,110,100,95,109,111,100,117,108,101,40,
-    1,0,0,0,117,10,0,0,0,95,95,108,111,99,97,108,
-    115,95,95,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    10,0,0,0,80,97,116,104,70,105,110,100,101,114,204,4,
-    0,0,115,14,0,0,0,16,2,6,2,18,8,18,17,18,
-    17,18,25,3,1,117,10,0,0,0,80,97,116,104,70,105,
-    110,100,101,114,99,1,0,0,0,0,0,0,0,1,0,0,
-    0,3,0,0,0,66,0,0,0,115,110,0,0,0,124,0,
-    0,69,101,0,0,90,1,0,100,0,0,90,2,0,100,1,
-    0,90,3,0,100,2,0,100,3,0,132,0,0,90,4,0,
-    100,4,0,100,5,0,132,0,0,90,5,0,101,6,0,90,
-    7,0,100,6,0,100,7,0,132,0,0,90,8,0,100,8,
-    0,100,9,0,132,0,0,90,9,0,101,10,0,100,10,0,
-    100,11,0,132,0,0,131,1,0,90,11,0,100,12,0,100,
-    13,0,132,0,0,90,12,0,100,14,0,83,40,15,0,0,
-    0,117,10,0,0,0,70,105,108,101,70,105,110,100,101,114,
-    117,172,0,0,0,70,105,108,101,45,98,97,115,101,100,32,
-    102,105,110,100,101,114,46,10,10,32,32,32,32,73,110,116,
-    101,114,97,99,116,105,111,110,115,32,119,105,116,104,32,116,
-    104,101,32,102,105,108,101,32,115,121,115,116,101,109,32,97,
-    114,101,32,99,97,99,104,101,100,32,102,111,114,32,112,101,
-    114,102,111,114,109,97,110,99,101,44,32,98,101,105,110,103,
-    10,32,32,32,32,114,101,102,114,101,115,104,101,100,32,119,
-    104,101,110,32,116,104,101,32,100,105,114,101,99,116,111,114,
-    121,32,116,104,101,32,102,105,110,100,101,114,32,105,115,32,
-    104,97,110,100,108,105,110,103,32,104,97,115,32,98,101,101,
-    110,32,109,111,100,105,102,105,101,100,46,10,10,32,32,32,
-    32,99,2,0,0,0,0,0,0,0,5,0,0,0,5,0,
-    0,0,7,0,0,0,115,122,0,0,0,103,0,0,125,3,
-    0,120,52,0,124,2,0,68,93,44,0,92,2,0,137,0,
-    0,125,4,0,124,3,0,106,0,0,135,0,0,102,1,0,
-    100,1,0,100,2,0,134,0,0,124,4,0,68,131,1,0,
-    131,1,0,1,113,13,0,87,124,3,0,124,0,0,95,1,
-    0,124,1,0,112,79,0,100,3,0,124,0,0,95,2,0,
-    100,6,0,124,0,0,95,3,0,116,4,0,131,0,0,124,
-    0,0,95,5,0,116,4,0,131,0,0,124,0,0,95,6,
-    0,100,5,0,83,40,7,0,0,0,117,201,0,0,0,73,
-    110,105,116,105,97,108,105,122,101,32,119,105,116,104,32,116,
-    104,101,32,112,97,116,104,32,116,111,32,115,101,97,114,99,
-    104,32,111,110,32,97,110,100,32,97,32,118,97,114,105,97,
-    98,108,101,32,110,117,109,98,101,114,32,111,102,10,32,32,
-    32,32,32,32,32,32,51,45,116,117,112,108,101,115,32,99,
-    111,110,116,97,105,110,105,110,103,32,116,104,101,32,108,111,
-    97,100,101,114,44,32,102,105,108,101,32,115,117,102,102,105,
-    120,101,115,32,116,104,101,32,108,111,97,100,101,114,32,114,
-    101,99,111,103,110,105,122,101,115,44,10,32,32,32,32,32,
-    32,32,32,97,110,100,32,97,32,98,111,111,108,101,97,110,
-    32,111,102,32,119,104,101,116,104,101,114,32,116,104,101,32,
-    108,111,97,100,101,114,32,104,97,110,100,108,101,115,32,112,
-    97,99,107,97,103,101,115,46,99,1,0,0,0,0,0,0,
-    0,2,0,0,0,3,0,0,0,51,0,0,0,115,27,0,
-    0,0,124,0,0,93,17,0,125,1,0,124,1,0,136,0,
-    0,102,2,0,86,1,113,3,0,100,0,0,83,40,1,0,
-    0,0,78,40,0,0,0,0,40,2,0,0,0,117,2,0,
-    0,0,46,48,117,6,0,0,0,115,117,102,102,105,120,40,
-    1,0,0,0,117,6,0,0,0,108,111,97,100,101,114,40,
+    114,97,112,62,117,10,0,0,0,95,95,105,109,112,111,114,
+    116,95,95,116,6,0,0,115,26,0,0,0,0,11,12,1,
+    15,2,24,1,12,1,18,1,6,3,12,1,23,1,6,1,
+    4,4,35,3,40,2,117,10,0,0,0,95,95,105,109,112,
+    111,114,116,95,95,99,2,0,0,0,0,0,0,0,14,0,
+    0,0,13,0,0,0,67,0,0,0,115,196,2,0,0,124,
+    1,0,97,0,0,124,0,0,97,1,0,116,1,0,106,2,
+    0,106,3,0,114,33,0,116,4,0,97,5,0,110,6,0,
+    116,6,0,97,5,0,120,47,0,116,0,0,116,1,0,102,
+    2,0,68,93,33,0,125,2,0,116,7,0,124,2,0,100,
+    1,0,131,2,0,115,52,0,116,8,0,124,2,0,95,9,
+    0,113,52,0,113,52,0,87,116,1,0,106,10,0,116,11,
+    0,25,125,3,0,120,76,0,100,28,0,68,93,68,0,125,
+    4,0,124,4,0,116,1,0,106,10,0,107,7,0,114,148,
+    0,116,8,0,106,12,0,124,4,0,131,1,0,125,5,0,
+    110,13,0,116,1,0,106,10,0,124,4,0,25,125,5,0,
+    116,13,0,124,3,0,124,4,0,124,5,0,131,3,0,1,
+    113,109,0,87,100,6,0,100,7,0,103,1,0,102,2,0,
+    100,8,0,100,9,0,100,7,0,103,2,0,102,2,0,100,
+    10,0,100,9,0,100,7,0,103,2,0,102,2,0,102,3,
+    0,125,6,0,120,189,0,124,6,0,68,93,169,0,92,2,
+    0,125,7,0,125,8,0,116,14,0,100,11,0,100,12,0,
+    132,0,0,124,8,0,68,131,1,0,131,1,0,115,23,1,
+    116,15,0,130,1,0,124,8,0,100,13,0,25,125,9,0,
+    124,7,0,116,1,0,106,10,0,107,6,0,114,65,1,116,
+    1,0,106,10,0,124,7,0,25,125,10,0,80,113,236,0,
+    121,60,0,116,8,0,106,12,0,124,7,0,131,1,0,125,
+    10,0,124,7,0,100,10,0,107,2,0,114,123,1,100,14,
+    0,116,1,0,106,16,0,107,6,0,114,123,1,124,8,0,
+    100,15,0,25,125,9,0,110,0,0,80,87,113,236,0,4,
+    116,17,0,107,10,0,114,148,1,1,1,1,119,236,0,89,
+    113,236,0,88,113,236,0,87,116,17,0,100,16,0,131,1,
+    0,130,1,0,121,19,0,116,8,0,106,12,0,100,17,0,
+    131,1,0,125,11,0,87,110,24,0,4,116,17,0,107,10,
+    0,114,210,1,1,1,1,100,27,0,125,11,0,89,110,1,
+    0,88,116,8,0,106,12,0,100,18,0,131,1,0,125,12,
+    0,124,7,0,100,8,0,107,2,0,114,16,2,116,8,0,
+    106,12,0,100,19,0,131,1,0,125,13,0,116,13,0,124,
+    3,0,100,20,0,124,13,0,131,3,0,1,110,0,0,116,
+    13,0,124,3,0,100,21,0,124,10,0,131,3,0,1,116,
+    13,0,124,3,0,100,17,0,124,11,0,131,3,0,1,116,
+    13,0,124,3,0,100,18,0,124,12,0,131,3,0,1,116,
+    13,0,124,3,0,100,22,0,124,9,0,131,3,0,1,116,
+    13,0,124,3,0,100,23,0,116,19,0,124,8,0,131,1,
+    0,131,3,0,1,116,13,0,124,3,0,100,24,0,116,20,
+    0,131,0,0,131,3,0,1,116,21,0,106,22,0,116,0,
+    0,106,23,0,131,0,0,131,1,0,1,124,7,0,100,8,
+    0,107,2,0,114,192,2,116,24,0,106,25,0,100,25,0,
+    131,1,0,1,100,26,0,116,21,0,107,6,0,114,192,2,
+    100,29,0,116,27,0,95,28,0,113,192,2,110,0,0,100,
+    27,0,83,40,30,0,0,0,117,250,0,0,0,83,101,116,
+    117,112,32,105,109,112,111,114,116,108,105,98,32,98,121,32,
+    105,109,112,111,114,116,105,110,103,32,110,101,101,100,101,100,
+    32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,101,
+    115,32,97,110,100,32,105,110,106,101,99,116,105,110,103,32,
+    116,104,101,109,10,32,32,32,32,105,110,116,111,32,116,104,
+    101,32,103,108,111,98,97,108,32,110,97,109,101,115,112,97,
+    99,101,46,10,10,32,32,32,32,65,115,32,115,121,115,32,
+    105,115,32,110,101,101,100,101,100,32,102,111,114,32,115,121,
+    115,46,109,111,100,117,108,101,115,32,97,99,99,101,115,115,
+    32,97,110,100,32,95,105,109,112,32,105,115,32,110,101,101,
+    100,101,100,32,116,111,32,108,111,97,100,32,98,117,105,108,
+    116,45,105,110,10,32,32,32,32,109,111,100,117,108,101,115,
+    44,32,116,104,111,115,101,32,116,119,111,32,109,111,100,117,
+    108,101,115,32,109,117,115,116,32,98,101,32,101,120,112,108,
+    105,99,105,116,108,121,32,112,97,115,115,101,100,32,105,110,
+    46,10,10,32,32,32,32,117,10,0,0,0,95,95,108,111,
+    97,100,101,114,95,95,117,3,0,0,0,95,105,111,117,9,
+    0,0,0,95,119,97,114,110,105,110,103,115,117,8,0,0,
+    0,98,117,105,108,116,105,110,115,117,7,0,0,0,109,97,
+    114,115,104,97,108,117,5,0,0,0,112,111,115,105,120,117,
+    1,0,0,0,47,117,2,0,0,0,110,116,117,1,0,0,
+    0,92,117,3,0,0,0,111,115,50,99,1,0,0,0,0,
+    0,0,0,2,0,0,0,3,0,0,0,115,0,0,0,115,
+    33,0,0,0,124,0,0,93,23,0,125,1,0,116,0,0,
+    124,1,0,131,1,0,100,0,0,107,2,0,86,1,113,3,
+    0,100,1,0,83,40,2,0,0,0,105,1,0,0,0,78,
+    40,1,0,0,0,117,3,0,0,0,108,101,110,40,2,0,
+    0,0,117,2,0,0,0,46,48,117,3,0,0,0,115,101,
+    112,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
+    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,9,0,
+    0,0,60,103,101,110,101,120,112,114,62,184,6,0,0,115,
+    2,0,0,0,6,0,117,25,0,0,0,95,115,101,116,117,
+    112,46,60,108,111,99,97,108,115,62,46,60,103,101,110,101,
+    120,112,114,62,105,0,0,0,0,117,7,0,0,0,69,77,
+    88,32,71,67,67,105,1,0,0,0,117,30,0,0,0,105,
+    109,112,111,114,116,108,105,98,32,114,101,113,117,105,114,101,
+    115,32,112,111,115,105,120,32,111,114,32,110,116,117,7,0,
+    0,0,95,116,104,114,101,97,100,117,8,0,0,0,95,119,
+    101,97,107,114,101,102,117,6,0,0,0,119,105,110,114,101,
+    103,117,7,0,0,0,95,119,105,110,114,101,103,117,3,0,
+    0,0,95,111,115,117,8,0,0,0,112,97,116,104,95,115,
+    101,112,117,15,0,0,0,112,97,116,104,95,115,101,112,97,
+    114,97,116,111,114,115,117,11,0,0,0,95,114,101,108,97,
+    120,95,99,97,115,101,117,4,0,0,0,46,112,121,119,117,
+    6,0,0,0,95,100,46,112,121,100,78,40,4,0,0,0,
+    117,3,0,0,0,95,105,111,117,9,0,0,0,95,119,97,
+    114,110,105,110,103,115,117,8,0,0,0,98,117,105,108,116,
+    105,110,115,117,7,0,0,0,109,97,114,115,104,97,108,84,
+    40,29,0,0,0,117,4,0,0,0,95,105,109,112,117,3,
+    0,0,0,115,121,115,117,5,0,0,0,102,108,97,103,115,
+    117,8,0,0,0,111,112,116,105,109,105,122,101,117,27,0,
+    0,0,79,80,84,73,77,73,90,69,68,95,66,89,84,69,
+    67,79,68,69,95,83,85,70,70,73,88,69,83,117,17,0,
+    0,0,66,89,84,69,67,79,68,69,95,83,85,70,70,73,
+    88,69,83,117,23,0,0,0,68,69,66,85,71,95,66,89,
+    84,69,67,79,68,69,95,83,85,70,70,73,88,69,83,117,
+    7,0,0,0,104,97,115,97,116,116,114,117,15,0,0,0,
+    66,117,105,108,116,105,110,73,109,112,111,114,116,101,114,117,
+    10,0,0,0,95,95,108,111,97,100,101,114,95,95,117,7,
+    0,0,0,109,111,100,117,108,101,115,117,8,0,0,0,95,
+    95,110,97,109,101,95,95,117,11,0,0,0,108,111,97,100,
+    95,109,111,100,117,108,101,117,7,0,0,0,115,101,116,97,
+    116,116,114,117,3,0,0,0,97,108,108,117,14,0,0,0,
+    65,115,115,101,114,116,105,111,110,69,114,114,111,114,117,7,
+    0,0,0,118,101,114,115,105,111,110,117,11,0,0,0,73,
+    109,112,111,114,116,69,114,114,111,114,117,4,0,0,0,78,
+    111,110,101,117,3,0,0,0,115,101,116,117,16,0,0,0,
+    95,109,97,107,101,95,114,101,108,97,120,95,99,97,115,101,
+    117,18,0,0,0,69,88,84,69,78,83,73,79,78,95,83,
+    85,70,70,73,88,69,83,117,6,0,0,0,101,120,116,101,
+    110,100,117,18,0,0,0,101,120,116,101,110,115,105,111,110,
+    95,115,117,102,102,105,120,101,115,117,15,0,0,0,83,79,
+    85,82,67,69,95,83,85,70,70,73,88,69,83,117,6,0,
+    0,0,97,112,112,101,110,100,117,4,0,0,0,84,114,117,
+    101,117,21,0,0,0,87,105,110,100,111,119,115,82,101,103,
+    105,115,116,114,121,70,105,110,100,101,114,117,11,0,0,0,
+    68,69,66,85,71,95,66,85,73,76,68,40,14,0,0,0,
+    117,10,0,0,0,115,121,115,95,109,111,100,117,108,101,117,
+    11,0,0,0,95,105,109,112,95,109,111,100,117,108,101,117,
+    6,0,0,0,109,111,100,117,108,101,117,11,0,0,0,115,
+    101,108,102,95,109,111,100,117,108,101,117,12,0,0,0,98,
+    117,105,108,116,105,110,95,110,97,109,101,117,14,0,0,0,
+    98,117,105,108,116,105,110,95,109,111,100,117,108,101,117,10,
+    0,0,0,111,115,95,100,101,116,97,105,108,115,117,10,0,
+    0,0,98,117,105,108,116,105,110,95,111,115,117,15,0,0,
+    0,112,97,116,104,95,115,101,112,97,114,97,116,111,114,115,
+    117,8,0,0,0,112,97,116,104,95,115,101,112,117,9,0,
+    0,0,111,115,95,109,111,100,117,108,101,117,13,0,0,0,
+    116,104,114,101,97,100,95,109,111,100,117,108,101,117,14,0,
+    0,0,119,101,97,107,114,101,102,95,109,111,100,117,108,101,
+    117,13,0,0,0,119,105,110,114,101,103,95,109,111,100,117,
+    108,101,40,0,0,0,0,40,0,0,0,0,117,29,0,0,
+    0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,
+    105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,6,
+    0,0,0,95,115,101,116,117,112,152,6,0,0,115,96,0,
+    0,0,0,9,6,1,6,2,12,1,9,2,6,2,19,1,
+    15,1,16,2,13,1,13,1,15,1,18,2,13,1,20,2,
+    48,1,19,2,31,1,10,1,15,1,13,1,4,2,3,1,
+    15,2,27,1,13,1,5,1,13,1,12,2,12,2,3,1,
+    19,1,13,2,11,1,15,2,12,1,15,1,19,2,16,1,
+    16,1,16,1,16,1,22,2,19,1,19,1,12,1,13,1,
+    12,1,117,6,0,0,0,95,115,101,116,117,112,99,2,0,
+    0,0,0,0,0,0,3,0,0,0,3,0,0,0,67,0,
+    0,0,115,136,0,0,0,116,0,0,124,0,0,124,1,0,
+    131,2,0,1,116,1,0,131,0,0,125,2,0,116,2,0,
+    106,3,0,106,4,0,116,5,0,106,6,0,124,2,0,140,
+    0,0,103,1,0,131,1,0,1,116,2,0,106,7,0,106,
+    8,0,116,9,0,131,1,0,1,116,2,0,106,7,0,106,
+    8,0,116,10,0,131,1,0,1,116,11,0,106,12,0,100,
+    1,0,107,2,0,114,116,0,116,2,0,106,7,0,106,8,
+    0,116,13,0,131,1,0,1,110,0,0,116,2,0,106,7,
+    0,106,8,0,116,14,0,131,1,0,1,100,2,0,83,40,
+    3,0,0,0,117,50,0,0,0,73,110,115,116,97,108,108,
+    32,105,109,112,111,114,116,108,105,98,32,97,115,32,116,104,
+    101,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,
+    32,111,102,32,105,109,112,111,114,116,46,117,2,0,0,0,
+    110,116,78,40,15,0,0,0,117,6,0,0,0,95,115,101,
+    116,117,112,117,27,0,0,0,95,103,101,116,95,115,117,112,
+    112,111,114,116,101,100,95,102,105,108,101,95,108,111,97,100,
+    101,114,115,117,3,0,0,0,115,121,115,117,10,0,0,0,
+    112,97,116,104,95,104,111,111,107,115,117,6,0,0,0,101,
+    120,116,101,110,100,117,10,0,0,0,70,105,108,101,70,105,
+    110,100,101,114,117,9,0,0,0,112,97,116,104,95,104,111,
+    111,107,117,9,0,0,0,109,101,116,97,95,112,97,116,104,
+    117,6,0,0,0,97,112,112,101,110,100,117,15,0,0,0,
+    66,117,105,108,116,105,110,73,109,112,111,114,116,101,114,117,
+    14,0,0,0,70,114,111,122,101,110,73,109,112,111,114,116,
+    101,114,117,3,0,0,0,95,111,115,117,8,0,0,0,95,
+    95,110,97,109,101,95,95,117,21,0,0,0,87,105,110,100,
+    111,119,115,82,101,103,105,115,116,114,121,70,105,110,100,101,
+    114,117,10,0,0,0,80,97,116,104,70,105,110,100,101,114,
+    40,3,0,0,0,117,10,0,0,0,115,121,115,95,109,111,
+    100,117,108,101,117,11,0,0,0,95,105,109,112,95,109,111,
+    100,117,108,101,117,17,0,0,0,115,117,112,112,111,114,116,
+    101,100,95,108,111,97,100,101,114,115,40,0,0,0,0,40,
     0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
     32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,9,0,0,0,60,103,101,110,101,
-    120,112,114,62,52,5,0,0,115,2,0,0,0,6,0,117,
-    38,0,0,0,70,105,108,101,70,105,110,100,101,114,46,95,
-    95,105,110,105,116,95,95,46,60,108,111,99,97,108,115,62,
-    46,60,103,101,110,101,120,112,114,62,117,1,0,0,0,46,
-    105,1,0,0,0,78,105,255,255,255,255,40,7,0,0,0,
-    117,6,0,0,0,101,120,116,101,110,100,117,8,0,0,0,
-    95,108,111,97,100,101,114,115,117,4,0,0,0,112,97,116,
-    104,117,11,0,0,0,95,112,97,116,104,95,109,116,105,109,
-    101,117,3,0,0,0,115,101,116,117,11,0,0,0,95,112,
-    97,116,104,95,99,97,99,104,101,117,19,0,0,0,95,114,
-    101,108,97,120,101,100,95,112,97,116,104,95,99,97,99,104,
-    101,40,5,0,0,0,117,4,0,0,0,115,101,108,102,117,
-    4,0,0,0,112,97,116,104,117,7,0,0,0,100,101,116,
-    97,105,108,115,117,7,0,0,0,108,111,97,100,101,114,115,
-    117,8,0,0,0,115,117,102,102,105,120,101,115,40,0,0,
-    0,0,40,1,0,0,0,117,6,0,0,0,108,111,97,100,
-    101,114,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,8,0,0,0,95,95,105,110,105,116,95,
-    95,46,5,0,0,115,16,0,0,0,0,4,6,1,19,1,
-    36,1,9,2,15,1,9,1,12,1,117,19,0,0,0,70,
-    105,108,101,70,105,110,100,101,114,46,95,95,105,110,105,116,
-    95,95,99,1,0,0,0,0,0,0,0,1,0,0,0,2,
-    0,0,0,67,0,0,0,115,13,0,0,0,100,3,0,124,
-    0,0,95,0,0,100,2,0,83,40,4,0,0,0,117,31,
-    0,0,0,73,110,118,97,108,105,100,97,116,101,32,116,104,
-    101,32,100,105,114,101,99,116,111,114,121,32,109,116,105,109,
-    101,46,105,1,0,0,0,78,105,255,255,255,255,40,1,0,
-    0,0,117,11,0,0,0,95,112,97,116,104,95,109,116,105,
-    109,101,40,1,0,0,0,117,4,0,0,0,115,101,108,102,
-    40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,
-    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
-    46,95,98,111,111,116,115,116,114,97,112,62,117,17,0,0,
-    0,105,110,118,97,108,105,100,97,116,101,95,99,97,99,104,
-    101,115,60,5,0,0,115,2,0,0,0,0,2,117,28,0,
-    0,0,70,105,108,101,70,105,110,100,101,114,46,105,110,118,
-    97,108,105,100,97,116,101,95,99,97,99,104,101,115,99,2,
-    0,0,0,0,0,0,0,12,0,0,0,13,0,0,0,67,
-    0,0,0,115,172,1,0,0,100,5,0,125,2,0,124,1,
-    0,106,1,0,100,1,0,131,1,0,100,2,0,25,125,3,
-    0,121,25,0,116,2,0,106,3,0,124,0,0,106,4,0,
-    131,1,0,106,5,0,125,4,0,87,110,24,0,4,116,6,
-    0,107,10,0,114,76,0,1,1,1,100,6,0,125,4,0,
-    89,110,1,0,88,124,4,0,124,0,0,106,7,0,107,3,
-    0,114,114,0,124,0,0,106,8,0,131,0,0,1,124,4,
-    0,124,0,0,95,7,0,110,0,0,116,9,0,131,0,0,
-    114,147,0,124,0,0,106,10,0,125,5,0,124,3,0,106,
-    11,0,131,0,0,125,6,0,110,15,0,124,0,0,106,12,
-    0,125,5,0,124,3,0,125,6,0,124,6,0,124,5,0,
-    107,6,0,114,45,1,116,13,0,124,0,0,106,4,0,124,
-    3,0,131,2,0,125,7,0,116,14,0,124,7,0,131,1,
-    0,114,45,1,120,91,0,124,0,0,106,15,0,68,93,71,
-    0,92,2,0,125,8,0,125,9,0,100,4,0,124,8,0,
-    23,125,10,0,116,13,0,124,7,0,124,10,0,131,2,0,
-    125,11,0,116,16,0,124,11,0,131,1,0,114,214,0,124,
-    9,0,124,1,0,124,11,0,131,2,0,124,7,0,103,1,
-    0,102,2,0,83,113,214,0,87,100,7,0,125,2,0,113,
-    45,1,110,0,0,120,95,0,124,0,0,106,15,0,68,93,
-    84,0,92,2,0,125,8,0,125,9,0,124,6,0,124,8,
-    0,23,124,5,0,107,6,0,114,55,1,116,13,0,124,0,
-    0,106,4,0,124,3,0,124,8,0,23,131,2,0,125,11,
-    0,116,16,0,124,11,0,131,1,0,114,139,1,124,9,0,
-    124,1,0,124,11,0,131,2,0,103,0,0,102,2,0,83,
-    113,55,1,113,55,1,87,124,2,0,114,162,1,100,8,0,
-    124,7,0,103,1,0,102,2,0,83,100,8,0,103,0,0,
-    102,2,0,83,40,9,0,0,0,117,125,0,0,0,84,114,
-    121,32,116,111,32,102,105,110,100,32,97,32,108,111,97,100,
-    101,114,32,102,111,114,32,116,104,101,32,115,112,101,99,105,
-    102,105,101,100,32,109,111,100,117,108,101,44,32,111,114,32,
-    116,104,101,32,110,97,109,101,115,112,97,99,101,10,32,32,
-    32,32,32,32,32,32,112,97,99,107,97,103,101,32,112,111,
-    114,116,105,111,110,115,46,32,82,101,116,117,114,110,115,32,
-    40,108,111,97,100,101,114,44,32,108,105,115,116,45,111,102,
-    45,112,111,114,116,105,111,110,115,41,46,117,1,0,0,0,
-    46,105,2,0,0,0,105,1,0,0,0,117,8,0,0,0,
-    95,95,105,110,105,116,95,95,70,105,255,255,255,255,84,78,
-    40,19,0,0,0,117,5,0,0,0,70,97,108,115,101,117,
-    10,0,0,0,114,112,97,114,116,105,116,105,111,110,117,3,
-    0,0,0,95,111,115,117,4,0,0,0,115,116,97,116,117,
-    4,0,0,0,112,97,116,104,117,8,0,0,0,115,116,95,
-    109,116,105,109,101,117,7,0,0,0,79,83,69,114,114,111,
-    114,117,11,0,0,0,95,112,97,116,104,95,109,116,105,109,
-    101,117,11,0,0,0,95,102,105,108,108,95,99,97,99,104,
-    101,117,11,0,0,0,95,114,101,108,97,120,95,99,97,115,
-    101,117,19,0,0,0,95,114,101,108,97,120,101,100,95,112,
-    97,116,104,95,99,97,99,104,101,117,5,0,0,0,108,111,
-    119,101,114,117,11,0,0,0,95,112,97,116,104,95,99,97,
-    99,104,101,117,10,0,0,0,95,112,97,116,104,95,106,111,
-    105,110,117,11,0,0,0,95,112,97,116,104,95,105,115,100,
-    105,114,117,8,0,0,0,95,108,111,97,100,101,114,115,117,
-    12,0,0,0,95,112,97,116,104,95,105,115,102,105,108,101,
-    117,4,0,0,0,84,114,117,101,117,4,0,0,0,78,111,
-    110,101,40,12,0,0,0,117,4,0,0,0,115,101,108,102,
-    117,8,0,0,0,102,117,108,108,110,97,109,101,117,12,0,
-    0,0,105,115,95,110,97,109,101,115,112,97,99,101,117,11,
-    0,0,0,116,97,105,108,95,109,111,100,117,108,101,117,5,
-    0,0,0,109,116,105,109,101,117,5,0,0,0,99,97,99,
-    104,101,117,12,0,0,0,99,97,99,104,101,95,109,111,100,
-    117,108,101,117,9,0,0,0,98,97,115,101,95,112,97,116,
-    104,117,6,0,0,0,115,117,102,102,105,120,117,6,0,0,
-    0,108,111,97,100,101,114,117,13,0,0,0,105,110,105,116,
-    95,102,105,108,101,110,97,109,101,117,9,0,0,0,102,117,
-    108,108,95,112,97,116,104,40,0,0,0,0,40,0,0,0,
-    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
-    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,11,0,0,0,102,105,110,100,95,108,111,97,
-    100,101,114,66,5,0,0,115,62,0,0,0,0,3,6,1,
-    19,1,3,1,25,1,13,1,11,1,15,1,10,1,12,2,
-    9,1,9,1,15,2,9,1,6,2,12,1,18,1,12,1,
-    22,1,10,1,15,1,12,1,26,4,12,2,22,1,16,1,
-    22,1,12,1,26,1,6,1,13,1,117,22,0,0,0,70,
-    105,108,101,70,105,110,100,101,114,46,102,105,110,100,95,108,
-    111,97,100,101,114,99,1,0,0,0,0,0,0,0,9,0,
-    0,0,12,0,0,0,67,0,0,0,115,255,0,0,0,124,
-    0,0,106,0,0,125,1,0,121,19,0,116,1,0,106,2,
-    0,124,1,0,131,1,0,125,2,0,87,110,24,0,4,116,
-    3,0,107,10,0,114,54,0,1,1,1,103,0,0,125,2,
-    0,89,110,1,0,88,116,4,0,106,5,0,106,6,0,100,
-    1,0,131,1,0,115,91,0,116,7,0,124,2,0,131,1,
-    0,124,0,0,95,8,0,110,111,0,116,7,0,131,0,0,
-    125,3,0,120,90,0,124,2,0,68,93,82,0,125,4,0,
-    124,4,0,106,9,0,100,2,0,131,1,0,92,3,0,125,
-    5,0,125,6,0,125,7,0,124,6,0,114,170,0,100,3,
-    0,106,10,0,124,5,0,124,7,0,106,11,0,131,0,0,
-    131,2,0,125,8,0,110,6,0,124,5,0,125,8,0,124,
-    3,0,106,12,0,124,8,0,131,1,0,1,113,107,0,87,
-    124,3,0,124,0,0,95,8,0,116,4,0,106,5,0,106,
-    6,0,116,13,0,131,1,0,114,251,0,116,7,0,100,4,
-    0,100,5,0,132,0,0,124,2,0,68,131,1,0,131,1,
-    0,124,0,0,95,14,0,110,0,0,100,6,0,83,40,7,
-    0,0,0,117,68,0,0,0,70,105,108,108,32,116,104,101,
-    32,99,97,99,104,101,32,111,102,32,112,111,116,101,110,116,
-    105,97,108,32,109,111,100,117,108,101,115,32,97,110,100,32,
-    112,97,99,107,97,103,101,115,32,102,111,114,32,116,104,105,
-    115,32,100,105,114,101,99,116,111,114,121,46,117,3,0,0,
-    0,119,105,110,117,1,0,0,0,46,117,5,0,0,0,123,
-    125,46,123,125,99,1,0,0,0,0,0,0,0,2,0,0,
-    0,2,0,0,0,115,0,0,0,115,27,0,0,0,124,0,
-    0,93,17,0,125,1,0,124,1,0,106,0,0,131,0,0,
-    86,1,113,3,0,100,0,0,83,40,1,0,0,0,78,40,
-    1,0,0,0,117,5,0,0,0,108,111,119,101,114,40,2,
-    0,0,0,117,2,0,0,0,46,48,117,2,0,0,0,102,
-    110,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
+    115,116,114,97,112,62,117,8,0,0,0,95,105,110,115,116,
+    97,108,108,226,6,0,0,115,16,0,0,0,0,2,13,1,
+    9,1,28,1,16,1,16,1,15,1,19,1,117,8,0,0,
+    0,95,105,110,115,116,97,108,108,78,40,3,0,0,0,117,
+    3,0,0,0,119,105,110,117,6,0,0,0,99,121,103,119,
+    105,110,117,6,0,0,0,100,97,114,119,105,110,40,74,0,
+    0,0,117,7,0,0,0,95,95,100,111,99,95,95,117,27,
+    0,0,0,95,67,65,83,69,95,73,78,83,69,78,83,73,
+    84,73,86,69,95,80,76,65,84,70,79,82,77,83,117,16,
+    0,0,0,95,109,97,107,101,95,114,101,108,97,120,95,99,
+    97,115,101,117,7,0,0,0,95,119,95,108,111,110,103,117,
+    7,0,0,0,95,114,95,108,111,110,103,117,10,0,0,0,
+    95,112,97,116,104,95,106,111,105,110,117,11,0,0,0,95,
+    112,97,116,104,95,115,112,108,105,116,117,18,0,0,0,95,
+    112,97,116,104,95,105,115,95,109,111,100,101,95,116,121,112,
+    101,117,12,0,0,0,95,112,97,116,104,95,105,115,102,105,
+    108,101,117,11,0,0,0,95,112,97,116,104,95,105,115,100,
+    105,114,117,13,0,0,0,95,119,114,105,116,101,95,97,116,
+    111,109,105,99,117,5,0,0,0,95,119,114,97,112,117,4,
+    0,0,0,116,121,112,101,117,8,0,0,0,95,95,99,111,
+    100,101,95,95,117,10,0,0,0,95,99,111,100,101,95,116,
+    121,112,101,117,10,0,0,0,110,101,119,95,109,111,100,117,
+    108,101,117,13,0,0,0,95,109,111,100,117,108,101,95,108,
+    111,99,107,115,117,12,0,0,0,95,98,108,111,99,107,105,
+    110,103,95,111,110,117,12,0,0,0,82,117,110,116,105,109,
+    101,69,114,114,111,114,117,14,0,0,0,95,68,101,97,100,
+    108,111,99,107,69,114,114,111,114,117,11,0,0,0,95,77,
+    111,100,117,108,101,76,111,99,107,117,16,0,0,0,95,68,
+    117,109,109,121,77,111,100,117,108,101,76,111,99,107,117,16,
+    0,0,0,95,103,101,116,95,109,111,100,117,108,101,95,108,
+    111,99,107,117,19,0,0,0,95,108,111,99,107,95,117,110,
+    108,111,99,107,95,109,111,100,117,108,101,117,25,0,0,0,
+    95,99,97,108,108,95,119,105,116,104,95,102,114,97,109,101,
+    115,95,114,101,109,111,118,101,100,117,3,0,0,0,111,114,
+    100,117,17,0,0,0,95,82,65,87,95,77,65,71,73,67,
+    95,78,85,77,66,69,82,117,5,0,0,0,98,121,116,101,
+    115,117,5,0,0,0,114,97,110,103,101,117,12,0,0,0,
+    95,77,65,71,73,67,95,66,89,84,69,83,117,8,0,0,
+    0,95,80,89,67,65,67,72,69,117,15,0,0,0,83,79,
+    85,82,67,69,95,83,85,70,70,73,88,69,83,117,23,0,
+    0,0,68,69,66,85,71,95,66,89,84,69,67,79,68,69,
+    95,83,85,70,70,73,88,69,83,117,27,0,0,0,79,80,
+    84,73,77,73,90,69,68,95,66,89,84,69,67,79,68,69,
+    95,83,85,70,70,73,88,69,83,117,4,0,0,0,78,111,
+    110,101,117,17,0,0,0,99,97,99,104,101,95,102,114,111,
+    109,95,115,111,117,114,99,101,117,17,0,0,0,115,111,117,
+    114,99,101,95,102,114,111,109,95,99,97,99,104,101,117,15,
+    0,0,0,95,103,101,116,95,115,111,117,114,99,101,102,105,
+    108,101,117,16,0,0,0,95,118,101,114,98,111,115,101,95,
+    109,101,115,115,97,103,101,117,11,0,0,0,115,101,116,95,
+    112,97,99,107,97,103,101,117,10,0,0,0,115,101,116,95,
+    108,111,97,100,101,114,117,17,0,0,0,109,111,100,117,108,
+    101,95,102,111,114,95,108,111,97,100,101,114,117,11,0,0,
+    0,95,99,104,101,99,107,95,110,97,109,101,117,17,0,0,
+    0,95,114,101,113,117,105,114,101,115,95,98,117,105,108,116,
+    105,110,117,16,0,0,0,95,114,101,113,117,105,114,101,115,
+    95,102,114,111,122,101,110,117,17,0,0,0,95,102,105,110,
+    100,95,109,111,100,117,108,101,95,115,104,105,109,117,15,0,
+    0,0,66,117,105,108,116,105,110,73,109,112,111,114,116,101,
+    114,117,14,0,0,0,70,114,111,122,101,110,73,109,112,111,
+    114,116,101,114,117,21,0,0,0,87,105,110,100,111,119,115,
+    82,101,103,105,115,116,114,121,70,105,110,100,101,114,117,13,
+    0,0,0,95,76,111,97,100,101,114,66,97,115,105,99,115,
+    117,12,0,0,0,83,111,117,114,99,101,76,111,97,100,101,
+    114,117,10,0,0,0,70,105,108,101,76,111,97,100,101,114,
+    117,16,0,0,0,83,111,117,114,99,101,70,105,108,101,76,
+    111,97,100,101,114,117,20,0,0,0,83,111,117,114,99,101,
+    108,101,115,115,70,105,108,101,76,111,97,100,101,114,117,18,
+    0,0,0,69,88,84,69,78,83,73,79,78,95,83,85,70,
+    70,73,88,69,83,117,19,0,0,0,69,120,116,101,110,115,
+    105,111,110,70,105,108,101,76,111,97,100,101,114,117,14,0,
+    0,0,95,78,97,109,101,115,112,97,99,101,80,97,116,104,
+    117,15,0,0,0,78,97,109,101,115,112,97,99,101,76,111,
+    97,100,101,114,117,10,0,0,0,80,97,116,104,70,105,110,
+    100,101,114,117,10,0,0,0,70,105,108,101,70,105,110,100,
+    101,114,117,18,0,0,0,95,73,109,112,111,114,116,76,111,
+    99,107,67,111,110,116,101,120,116,117,13,0,0,0,95,114,
+    101,115,111,108,118,101,95,110,97,109,101,117,12,0,0,0,
+    95,102,105,110,100,95,109,111,100,117,108,101,117,13,0,0,
+    0,95,115,97,110,105,116,121,95,99,104,101,99,107,117,8,
+    0,0,0,95,69,82,82,95,77,83,71,117,23,0,0,0,
+    95,102,105,110,100,95,97,110,100,95,108,111,97,100,95,117,
+    110,108,111,99,107,101,100,117,14,0,0,0,95,102,105,110,
+    100,95,97,110,100,95,108,111,97,100,117,11,0,0,0,95,
+    103,99,100,95,105,109,112,111,114,116,117,16,0,0,0,95,
+    104,97,110,100,108,101,95,102,114,111,109,108,105,115,116,117,
+    17,0,0,0,95,99,97,108,99,95,95,95,112,97,99,107,
+    97,103,101,95,95,117,27,0,0,0,95,103,101,116,95,115,
+    117,112,112,111,114,116,101,100,95,102,105,108,101,95,108,111,
+    97,100,101,114,115,117,10,0,0,0,95,95,105,109,112,111,
+    114,116,95,95,117,6,0,0,0,95,115,101,116,117,112,117,
+    8,0,0,0,95,105,110,115,116,97,108,108,40,0,0,0,
+    0,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
     60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,9,0,
-    0,0,60,103,101,110,101,120,112,114,62,136,5,0,0,115,
-    2,0,0,0,6,0,117,41,0,0,0,70,105,108,101,70,
-    105,110,100,101,114,46,95,102,105,108,108,95,99,97,99,104,
-    101,46,60,108,111,99,97,108,115,62,46,60,103,101,110,101,
-    120,112,114,62,78,40,15,0,0,0,117,4,0,0,0,112,
-    97,116,104,117,3,0,0,0,95,111,115,117,7,0,0,0,
-    108,105,115,116,100,105,114,117,17,0,0,0,70,105,108,101,
-    78,111,116,70,111,117,110,100,69,114,114,111,114,117,3,0,
-    0,0,115,121,115,117,8,0,0,0,112,108,97,116,102,111,
-    114,109,117,10,0,0,0,115,116,97,114,116,115,119,105,116,
-    104,117,3,0,0,0,115,101,116,117,11,0,0,0,95,112,
-    97,116,104,95,99,97,99,104,101,117,9,0,0,0,112,97,
-    114,116,105,116,105,111,110,117,6,0,0,0,102,111,114,109,
-    97,116,117,5,0,0,0,108,111,119,101,114,117,3,0,0,
-    0,97,100,100,117,27,0,0,0,95,67,65,83,69,95,73,
-    78,83,69,78,83,73,84,73,86,69,95,80,76,65,84,70,
-    79,82,77,83,117,19,0,0,0,95,114,101,108,97,120,101,
-    100,95,112,97,116,104,95,99,97,99,104,101,40,9,0,0,
-    0,117,4,0,0,0,115,101,108,102,117,4,0,0,0,112,
-    97,116,104,117,8,0,0,0,99,111,110,116,101,110,116,115,
-    117,21,0,0,0,108,111,119,101,114,95,115,117,102,102,105,
-    120,95,99,111,110,116,101,110,116,115,117,4,0,0,0,105,
-    116,101,109,117,4,0,0,0,110,97,109,101,117,3,0,0,
-    0,100,111,116,117,6,0,0,0,115,117,102,102,105,120,117,
-    8,0,0,0,110,101,119,95,110,97,109,101,40,0,0,0,
-    0,40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,
-    101,110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,
-    111,116,115,116,114,97,112,62,117,11,0,0,0,95,102,105,
-    108,108,95,99,97,99,104,101,108,5,0,0,115,34,0,0,
-    0,0,2,9,1,3,1,19,1,13,2,11,3,18,1,18,
-    7,9,1,13,1,24,1,6,1,27,2,6,1,17,1,9,
-    1,18,1,117,22,0,0,0,70,105,108,101,70,105,110,100,
-    101,114,46,95,102,105,108,108,95,99,97,99,104,101,99,1,
-    0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,7,
-    0,0,0,115,25,0,0,0,135,0,0,135,1,0,102,2,
-    0,100,1,0,100,2,0,134,0,0,125,2,0,124,2,0,
-    83,40,3,0,0,0,117,20,1,0,0,65,32,99,108,97,
-    115,115,32,109,101,116,104,111,100,32,119,104,105,99,104,32,
-    114,101,116,117,114,110,115,32,97,32,99,108,111,115,117,114,
-    101,32,116,111,32,117,115,101,32,111,110,32,115,121,115,46,
-    112,97,116,104,95,104,111,111,107,10,32,32,32,32,32,32,
-    32,32,119,104,105,99,104,32,119,105,108,108,32,114,101,116,
-    117,114,110,32,97,110,32,105,110,115,116,97,110,99,101,32,
-    117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,102,
-    105,101,100,32,108,111,97,100,101,114,115,32,97,110,100,32,
-    116,104,101,32,112,97,116,104,10,32,32,32,32,32,32,32,
-    32,99,97,108,108,101,100,32,111,110,32,116,104,101,32,99,
-    108,111,115,117,114,101,46,10,10,32,32,32,32,32,32,32,
-    32,73,102,32,116,104,101,32,112,97,116,104,32,99,97,108,
-    108,101,100,32,111,110,32,116,104,101,32,99,108,111,115,117,
-    114,101,32,105,115,32,110,111,116,32,97,32,100,105,114,101,
-    99,116,111,114,121,44,32,73,109,112,111,114,116,69,114,114,
-    111,114,32,105,115,10,32,32,32,32,32,32,32,32,114,97,
-    105,115,101,100,46,10,10,32,32,32,32,32,32,32,32,99,
-    1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,
-    19,0,0,0,115,46,0,0,0,116,0,0,124,0,0,131,
-    1,0,115,33,0,116,1,0,100,1,0,100,2,0,124,0,
-    0,131,1,1,130,1,0,110,0,0,136,0,0,124,0,0,
-    136,1,0,140,1,0,83,40,3,0,0,0,117,45,0,0,
-    0,80,97,116,104,32,104,111,111,107,32,102,111,114,32,105,
-    109,112,111,114,116,108,105,98,46,109,97,99,104,105,110,101,
-    114,121,46,70,105,108,101,70,105,110,100,101,114,46,117,30,
-    0,0,0,111,110,108,121,32,100,105,114,101,99,116,111,114,
-    105,101,115,32,97,114,101,32,115,117,112,112,111,114,116,101,
-    100,117,4,0,0,0,112,97,116,104,40,2,0,0,0,117,
-    11,0,0,0,95,112,97,116,104,95,105,115,100,105,114,117,
-    11,0,0,0,73,109,112,111,114,116,69,114,114,111,114,40,
-    1,0,0,0,117,4,0,0,0,112,97,116,104,40,2,0,
-    0,0,117,3,0,0,0,99,108,115,117,14,0,0,0,108,
-    111,97,100,101,114,95,100,101,116,97,105,108,115,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,24,0,0,0,112,97,116,104,95,104,111,
-    111,107,95,102,111,114,95,70,105,108,101,70,105,110,100,101,
-    114,148,5,0,0,115,6,0,0,0,0,2,12,1,21,1,
-    117,54,0,0,0,70,105,108,101,70,105,110,100,101,114,46,
-    112,97,116,104,95,104,111,111,107,46,60,108,111,99,97,108,
-    115,62,46,112,97,116,104,95,104,111,111,107,95,102,111,114,
-    95,70,105,108,101,70,105,110,100,101,114,40,0,0,0,0,
-    40,3,0,0,0,117,3,0,0,0,99,108,115,117,14,0,
-    0,0,108,111,97,100,101,114,95,100,101,116,97,105,108,115,
-    117,24,0,0,0,112,97,116,104,95,104,111,111,107,95,102,
-    111,114,95,70,105,108,101,70,105,110,100,101,114,40,0,0,
-    0,0,40,2,0,0,0,117,3,0,0,0,99,108,115,117,
-    14,0,0,0,108,111,97,100,101,114,95,100,101,116,97,105,
-    108,115,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,9,0,0,0,112,97,116,104,95,104,111,
-    111,107,138,5,0,0,115,4,0,0,0,0,10,21,6,117,
-    20,0,0,0,70,105,108,101,70,105,110,100,101,114,46,112,
-    97,116,104,95,104,111,111,107,99,1,0,0,0,0,0,0,
-    0,1,0,0,0,2,0,0,0,67,0,0,0,115,14,0,
-    0,0,100,1,0,124,0,0,106,0,0,102,1,0,22,83,
-    40,2,0,0,0,78,117,14,0,0,0,70,105,108,101,70,
-    105,110,100,101,114,40,37,114,41,40,1,0,0,0,117,4,
-    0,0,0,112,97,116,104,40,1,0,0,0,117,4,0,0,
-    0,115,101,108,102,40,0,0,0,0,40,0,0,0,0,117,
-    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
-    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
-    62,117,8,0,0,0,95,95,114,101,112,114,95,95,156,5,
-    0,0,115,2,0,0,0,0,1,117,19,0,0,0,70,105,
-    108,101,70,105,110,100,101,114,46,95,95,114,101,112,114,95,
-    95,78,40,13,0,0,0,117,8,0,0,0,95,95,110,97,
-    109,101,95,95,117,10,0,0,0,95,95,109,111,100,117,108,
-    101,95,95,117,12,0,0,0,95,95,113,117,97,108,110,97,
-    109,101,95,95,117,7,0,0,0,95,95,100,111,99,95,95,
-    117,8,0,0,0,95,95,105,110,105,116,95,95,117,17,0,
-    0,0,105,110,118,97,108,105,100,97,116,101,95,99,97,99,
-    104,101,115,117,17,0,0,0,95,102,105,110,100,95,109,111,
-    100,117,108,101,95,115,104,105,109,117,11,0,0,0,102,105,
-    110,100,95,109,111,100,117,108,101,117,11,0,0,0,102,105,
-    110,100,95,108,111,97,100,101,114,117,11,0,0,0,95,102,
-    105,108,108,95,99,97,99,104,101,117,11,0,0,0,99,108,
-    97,115,115,109,101,116,104,111,100,117,9,0,0,0,112,97,
-    116,104,95,104,111,111,107,117,8,0,0,0,95,95,114,101,
-    112,114,95,95,40,1,0,0,0,117,10,0,0,0,95,95,
-    108,111,99,97,108,115,95,95,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,10,0,0,0,70,105,108,101,70,105,110,
-    100,101,114,37,5,0,0,115,16,0,0,0,16,7,6,2,
-    12,14,12,4,6,2,12,42,12,30,18,18,117,10,0,0,
-    0,70,105,108,101,70,105,110,100,101,114,99,1,0,0,0,
-    0,0,0,0,1,0,0,0,2,0,0,0,66,0,0,0,
-    115,50,0,0,0,124,0,0,69,101,0,0,90,1,0,100,
-    0,0,90,2,0,100,1,0,90,3,0,100,2,0,100,3,
-    0,132,0,0,90,4,0,100,4,0,100,5,0,132,0,0,
-    90,5,0,100,6,0,83,40,7,0,0,0,117,18,0,0,
-    0,95,73,109,112,111,114,116,76,111,99,107,67,111,110,116,
-    101,120,116,117,36,0,0,0,67,111,110,116,101,120,116,32,
-    109,97,110,97,103,101,114,32,102,111,114,32,116,104,101,32,
-    105,109,112,111,114,116,32,108,111,99,107,46,99,1,0,0,
-    0,0,0,0,0,1,0,0,0,1,0,0,0,67,0,0,
-    0,115,14,0,0,0,116,0,0,106,1,0,131,0,0,1,
-    100,1,0,83,40,2,0,0,0,117,24,0,0,0,65,99,
-    113,117,105,114,101,32,116,104,101,32,105,109,112,111,114,116,
-    32,108,111,99,107,46,78,40,2,0,0,0,117,4,0,0,
-    0,95,105,109,112,117,12,0,0,0,97,99,113,117,105,114,
-    101,95,108,111,99,107,40,1,0,0,0,117,4,0,0,0,
-    115,101,108,102,40,0,0,0,0,40,0,0,0,0,117,29,
-    0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,
-    116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,
-    117,9,0,0,0,95,95,101,110,116,101,114,95,95,166,5,
-    0,0,115,2,0,0,0,0,2,117,28,0,0,0,95,73,
-    109,112,111,114,116,76,111,99,107,67,111,110,116,101,120,116,
-    46,95,95,101,110,116,101,114,95,95,99,4,0,0,0,0,
-    0,0,0,4,0,0,0,1,0,0,0,67,0,0,0,115,
-    14,0,0,0,116,0,0,106,1,0,131,0,0,1,100,1,
-    0,83,40,2,0,0,0,117,60,0,0,0,82,101,108,101,
-    97,115,101,32,116,104,101,32,105,109,112,111,114,116,32,108,
-    111,99,107,32,114,101,103,97,114,100,108,101,115,115,32,111,
-    102,32,97,110,121,32,114,97,105,115,101,100,32,101,120,99,
-    101,112,116,105,111,110,115,46,78,40,2,0,0,0,117,4,
-    0,0,0,95,105,109,112,117,12,0,0,0,114,101,108,101,
-    97,115,101,95,108,111,99,107,40,4,0,0,0,117,4,0,
-    0,0,115,101,108,102,117,8,0,0,0,101,120,99,95,116,
-    121,112,101,117,9,0,0,0,101,120,99,95,118,97,108,117,
-    101,117,13,0,0,0,101,120,99,95,116,114,97,99,101,98,
-    97,99,107,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    8,0,0,0,95,95,101,120,105,116,95,95,170,5,0,0,
-    115,2,0,0,0,0,2,117,27,0,0,0,95,73,109,112,
-    111,114,116,76,111,99,107,67,111,110,116,101,120,116,46,95,
-    95,101,120,105,116,95,95,78,40,6,0,0,0,117,8,0,
-    0,0,95,95,110,97,109,101,95,95,117,10,0,0,0,95,
-    95,109,111,100,117,108,101,95,95,117,12,0,0,0,95,95,
-    113,117,97,108,110,97,109,101,95,95,117,7,0,0,0,95,
-    95,100,111,99,95,95,117,9,0,0,0,95,95,101,110,116,
-    101,114,95,95,117,8,0,0,0,95,95,101,120,105,116,95,
-    95,40,1,0,0,0,117,10,0,0,0,95,95,108,111,99,
-    97,108,115,95,95,40,0,0,0,0,40,0,0,0,0,117,
-    29,0,0,0,60,102,114,111,122,101,110,32,105,109,112,111,
-    114,116,108,105,98,46,95,98,111,111,116,115,116,114,97,112,
-    62,117,18,0,0,0,95,73,109,112,111,114,116,76,111,99,
-    107,67,111,110,116,101,120,116,162,5,0,0,115,6,0,0,
-    0,16,2,6,2,12,4,117,18,0,0,0,95,73,109,112,
-    111,114,116,76,111,99,107,67,111,110,116,101,120,116,99,3,
-    0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,67,
-    0,0,0,115,91,0,0,0,124,1,0,106,0,0,100,1,
-    0,124,2,0,100,2,0,24,131,2,0,125,3,0,116,1,
-    0,124,3,0,131,1,0,124,2,0,107,0,0,114,55,0,
-    116,2,0,100,3,0,131,1,0,130,1,0,110,0,0,124,
-    3,0,100,4,0,25,125,4,0,124,0,0,114,87,0,100,
-    5,0,106,3,0,124,4,0,124,0,0,131,2,0,83,124,
-    4,0,83,40,6,0,0,0,117,50,0,0,0,82,101,115,
-    111,108,118,101,32,97,32,114,101,108,97,116,105,118,101,32,
-    109,111,100,117,108,101,32,110,97,109,101,32,116,111,32,97,
-    110,32,97,98,115,111,108,117,116,101,32,111,110,101,46,117,
-    1,0,0,0,46,105,1,0,0,0,117,50,0,0,0,97,
-    116,116,101,109,112,116,101,100,32,114,101,108,97,116,105,118,
-    101,32,105,109,112,111,114,116,32,98,101,121,111,110,100,32,
-    116,111,112,45,108,101,118,101,108,32,112,97,99,107,97,103,
-    101,105,0,0,0,0,117,5,0,0,0,123,125,46,123,125,
-    40,4,0,0,0,117,6,0,0,0,114,115,112,108,105,116,
-    117,3,0,0,0,108,101,110,117,10,0,0,0,86,97,108,
-    117,101,69,114,114,111,114,117,6,0,0,0,102,111,114,109,
-    97,116,40,5,0,0,0,117,4,0,0,0,110,97,109,101,
-    117,7,0,0,0,112,97,99,107,97,103,101,117,5,0,0,
-    0,108,101,118,101,108,117,4,0,0,0,98,105,116,115,117,
-    4,0,0,0,98,97,115,101,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,13,0,0,0,95,114,101,115,111,108,118,
-    101,95,110,97,109,101,175,5,0,0,115,10,0,0,0,0,
-    2,22,1,18,1,15,1,10,1,117,13,0,0,0,95,114,
-    101,115,111,108,118,101,95,110,97,109,101,99,2,0,0,0,
-    0,0,0,0,4,0,0,0,11,0,0,0,67,0,0,0,
-    115,138,0,0,0,116,0,0,106,1,0,115,28,0,116,2,
-    0,106,3,0,100,1,0,116,4,0,131,2,0,1,110,0,
-    0,120,103,0,116,0,0,106,1,0,68,93,88,0,125,2,
-    0,116,5,0,131,0,0,143,23,0,1,124,2,0,106,6,
-    0,124,0,0,124,1,0,131,2,0,125,3,0,87,100,2,
-    0,81,88,124,3,0,100,2,0,107,9,0,114,38,0,124,
-    0,0,116,0,0,106,8,0,107,7,0,114,109,0,124,3,
-    0,83,116,0,0,106,8,0,124,0,0,25,106,9,0,83,
-    113,38,0,113,38,0,87,100,2,0,83,100,2,0,83,40,
-    3,0,0,0,117,23,0,0,0,70,105,110,100,32,97,32,
-    109,111,100,117,108,101,39,115,32,108,111,97,100,101,114,46,
-    117,22,0,0,0,115,121,115,46,109,101,116,97,95,112,97,
-    116,104,32,105,115,32,101,109,112,116,121,78,40,10,0,0,
-    0,117,3,0,0,0,115,121,115,117,9,0,0,0,109,101,
-    116,97,95,112,97,116,104,117,9,0,0,0,95,119,97,114,
-    110,105,110,103,115,117,4,0,0,0,119,97,114,110,117,13,
-    0,0,0,73,109,112,111,114,116,87,97,114,110,105,110,103,
-    117,18,0,0,0,95,73,109,112,111,114,116,76,111,99,107,
-    67,111,110,116,101,120,116,117,11,0,0,0,102,105,110,100,
-    95,109,111,100,117,108,101,117,4,0,0,0,78,111,110,101,
-    117,7,0,0,0,109,111,100,117,108,101,115,117,10,0,0,
-    0,95,95,108,111,97,100,101,114,95,95,40,4,0,0,0,
-    117,4,0,0,0,110,97,109,101,117,4,0,0,0,112,97,
-    116,104,117,6,0,0,0,102,105,110,100,101,114,117,6,0,
-    0,0,108,111,97,100,101,114,40,0,0,0,0,40,0,0,
-    0,0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,
-    109,112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,
-    114,97,112,62,117,12,0,0,0,95,102,105,110,100,95,109,
-    111,100,117,108,101,184,5,0,0,115,20,0,0,0,0,2,
-    9,1,19,1,16,1,10,1,24,1,12,2,15,1,4,2,
-    21,2,117,12,0,0,0,95,102,105,110,100,95,109,111,100,
-    117,108,101,99,3,0,0,0,0,0,0,0,4,0,0,0,
-    4,0,0,0,67,0,0,0,115,194,0,0,0,116,0,0,
-    124,0,0,116,1,0,131,2,0,115,45,0,116,2,0,100,
-    1,0,106,3,0,116,4,0,124,0,0,131,1,0,131,1,
-    0,131,1,0,130,1,0,110,0,0,124,2,0,100,2,0,
-    107,0,0,114,72,0,116,5,0,100,3,0,131,1,0,130,
-    1,0,110,0,0,124,1,0,114,156,0,116,0,0,124,1,
-    0,116,1,0,131,2,0,115,108,0,116,2,0,100,4,0,
-    131,1,0,130,1,0,113,156,0,124,1,0,116,6,0,106,
-    7,0,107,7,0,114,156,0,100,5,0,125,3,0,116,8,
-    0,124,3,0,106,3,0,124,1,0,131,1,0,131,1,0,
-    130,1,0,113,156,0,110,0,0,124,0,0,12,114,190,0,
-    124,2,0,100,2,0,107,2,0,114,190,0,116,5,0,100,
-    6,0,131,1,0,130,1,0,110,0,0,100,7,0,83,40,
-    8,0,0,0,117,28,0,0,0,86,101,114,105,102,121,32,
-    97,114,103,117,109,101,110,116,115,32,97,114,101,32,34,115,
-    97,110,101,34,46,117,31,0,0,0,109,111,100,117,108,101,
-    32,110,97,109,101,32,109,117,115,116,32,98,101,32,115,116,
-    114,44,32,110,111,116,32,123,125,105,0,0,0,0,117,18,
-    0,0,0,108,101,118,101,108,32,109,117,115,116,32,98,101,
-    32,62,61,32,48,117,31,0,0,0,95,95,112,97,99,107,
-    97,103,101,95,95,32,110,111,116,32,115,101,116,32,116,111,
-    32,97,32,115,116,114,105,110,103,117,61,0,0,0,80,97,
-    114,101,110,116,32,109,111,100,117,108,101,32,123,33,114,125,
-    32,110,111,116,32,108,111,97,100,101,100,44,32,99,97,110,
-    110,111,116,32,112,101,114,102,111,114,109,32,114,101,108,97,
-    116,105,118,101,32,105,109,112,111,114,116,117,17,0,0,0,
-    69,109,112,116,121,32,109,111,100,117,108,101,32,110,97,109,
-    101,78,40,9,0,0,0,117,10,0,0,0,105,115,105,110,
-    115,116,97,110,99,101,117,3,0,0,0,115,116,114,117,9,
-    0,0,0,84,121,112,101,69,114,114,111,114,117,6,0,0,
-    0,102,111,114,109,97,116,117,4,0,0,0,116,121,112,101,
-    117,10,0,0,0,86,97,108,117,101,69,114,114,111,114,117,
-    3,0,0,0,115,121,115,117,7,0,0,0,109,111,100,117,
-    108,101,115,117,11,0,0,0,83,121,115,116,101,109,69,114,
-    114,111,114,40,4,0,0,0,117,4,0,0,0,110,97,109,
-    101,117,7,0,0,0,112,97,99,107,97,103,101,117,5,0,
-    0,0,108,101,118,101,108,117,3,0,0,0,109,115,103,40,
-    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
-    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
-    95,98,111,111,116,115,116,114,97,112,62,117,13,0,0,0,
-    95,115,97,110,105,116,121,95,99,104,101,99,107,201,5,0,
-    0,115,24,0,0,0,0,2,15,1,30,1,12,1,15,1,
-    6,1,15,1,15,1,15,1,6,2,27,1,19,1,117,13,
-    0,0,0,95,115,97,110,105,116,121,95,99,104,101,99,107,
-    117,20,0,0,0,78,111,32,109,111,100,117,108,101,32,110,
-    97,109,101,100,32,123,33,114,125,99,2,0,0,0,0,0,
-    0,0,9,0,0,0,27,0,0,0,67,0,0,0,115,12,
-    2,0,0,100,0,0,125,2,0,124,0,0,106,1,0,100,
-    1,0,131,1,0,100,2,0,25,125,3,0,124,3,0,114,
-    178,0,124,3,0,116,2,0,106,3,0,107,7,0,114,62,
-    0,116,4,0,124,1,0,124,3,0,131,2,0,1,110,0,
-    0,124,0,0,116,2,0,106,3,0,107,6,0,114,88,0,
-    116,2,0,106,3,0,124,0,0,25,83,116,2,0,106,3,
-    0,124,3,0,25,125,4,0,121,13,0,124,4,0,106,5,
-    0,125,2,0,87,113,178,0,4,116,6,0,107,10,0,114,
-    174,0,1,1,1,116,7,0,100,3,0,23,106,8,0,124,
-    0,0,124,3,0,131,2,0,125,5,0,116,9,0,124,5,
-    0,100,4,0,124,0,0,131,1,1,130,1,0,89,113,178,
-    0,88,110,0,0,116,10,0,124,0,0,124,2,0,131,2,
-    0,125,6,0,124,6,0,100,0,0,107,8,0,114,250,0,
-    116,9,0,116,7,0,106,8,0,124,0,0,131,1,0,100,
-    4,0,124,0,0,131,1,1,125,7,0,100,10,0,124,7,
-    0,95,12,0,124,7,0,130,1,0,110,47,0,124,0,0,
-    116,2,0,106,3,0,107,7,0,114,41,1,124,6,0,106,
-    13,0,124,0,0,131,1,0,1,116,14,0,100,5,0,124,
-    0,0,124,6,0,131,3,0,1,110,0,0,116,2,0,106,
-    3,0,124,0,0,25,125,8,0,124,3,0,114,105,1,116,
-    2,0,106,3,0,124,3,0,25,125,4,0,116,15,0,124,
-    4,0,124,0,0,106,1,0,100,1,0,131,1,0,100,6,
-    0,25,124,8,0,131,3,0,1,110,0,0,116,16,0,124,
-    8,0,100,7,0,100,0,0,131,3,0,100,0,0,107,8,
-    0,114,212,1,121,59,0,124,8,0,106,17,0,124,8,0,
-    95,18,0,116,19,0,124,8,0,100,8,0,131,2,0,115,
-    187,1,124,8,0,106,18,0,106,1,0,100,1,0,131,1,
-    0,100,2,0,25,124,8,0,95,18,0,110,0,0,87,113,
-    212,1,4,116,6,0,107,10,0,114,208,1,1,1,1,89,
-    113,212,1,88,110,0,0,116,19,0,124,8,0,100,9,0,
-    131,2,0,115,8,2,121,13,0,124,6,0,124,8,0,95,
-    20,0,87,113,8,2,4,116,6,0,107,10,0,114,4,2,
-    1,1,1,89,113,8,2,88,110,0,0,124,8,0,83,40,
-    11,0,0,0,78,117,1,0,0,0,46,105,0,0,0,0,
-    117,21,0,0,0,59,32,123,125,32,105,115,32,110,111,116,
-    32,97,32,112,97,99,107,97,103,101,117,4,0,0,0,110,
-    97,109,101,117,18,0,0,0,105,109,112,111,114,116,32,123,
-    33,114,125,32,35,32,123,33,114,125,105,2,0,0,0,117,
-    11,0,0,0,95,95,112,97,99,107,97,103,101,95,95,117,
-    8,0,0,0,95,95,112,97,116,104,95,95,117,10,0,0,
-    0,95,95,108,111,97,100,101,114,95,95,84,40,21,0,0,
-    0,117,4,0,0,0,78,111,110,101,117,10,0,0,0,114,
-    112,97,114,116,105,116,105,111,110,117,3,0,0,0,115,121,
-    115,117,7,0,0,0,109,111,100,117,108,101,115,117,25,0,
-    0,0,95,99,97,108,108,95,119,105,116,104,95,102,114,97,
-    109,101,115,95,114,101,109,111,118,101,100,117,8,0,0,0,
-    95,95,112,97,116,104,95,95,117,14,0,0,0,65,116,116,
-    114,105,98,117,116,101,69,114,114,111,114,117,8,0,0,0,
-    95,69,82,82,95,77,83,71,117,6,0,0,0,102,111,114,
-    109,97,116,117,11,0,0,0,73,109,112,111,114,116,69,114,
-    114,111,114,117,12,0,0,0,95,102,105,110,100,95,109,111,
-    100,117,108,101,117,4,0,0,0,84,114,117,101,117,10,0,
-    0,0,95,110,111,116,95,102,111,117,110,100,117,11,0,0,
-    0,108,111,97,100,95,109,111,100,117,108,101,117,16,0,0,
-    0,95,118,101,114,98,111,115,101,95,109,101,115,115,97,103,
-    101,117,7,0,0,0,115,101,116,97,116,116,114,117,7,0,
-    0,0,103,101,116,97,116,116,114,117,8,0,0,0,95,95,
-    110,97,109,101,95,95,117,11,0,0,0,95,95,112,97,99,
-    107,97,103,101,95,95,117,7,0,0,0,104,97,115,97,116,
-    116,114,117,10,0,0,0,95,95,108,111,97,100,101,114,95,
-    95,40,9,0,0,0,117,4,0,0,0,110,97,109,101,117,
-    7,0,0,0,105,109,112,111,114,116,95,117,4,0,0,0,
-    112,97,116,104,117,6,0,0,0,112,97,114,101,110,116,117,
-    13,0,0,0,112,97,114,101,110,116,95,109,111,100,117,108,
-    101,117,3,0,0,0,109,115,103,117,6,0,0,0,108,111,
-    97,100,101,114,117,3,0,0,0,101,120,99,117,6,0,0,
-    0,109,111,100,117,108,101,40,0,0,0,0,40,0,0,0,
-    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
-    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,23,0,0,0,95,102,105,110,100,95,97,110,
-    100,95,108,111,97,100,95,117,110,108,111,99,107,101,100,220,
-    5,0,0,115,76,0,0,0,0,1,6,1,19,1,6,1,
-    15,1,16,2,15,1,11,2,13,1,3,1,13,1,13,1,
-    22,1,26,1,15,1,12,1,27,3,9,1,9,1,15,2,
-    13,1,19,2,13,1,6,2,13,1,32,2,24,1,3,1,
-    12,1,15,1,32,1,13,1,8,2,15,1,3,1,13,1,
-    13,1,8,1,117,23,0,0,0,95,102,105,110,100,95,97,
-    110,100,95,108,111,97,100,95,117,110,108,111,99,107,101,100,
-    99,2,0,0,0,0,0,0,0,3,0,0,0,18,0,0,
-    0,67,0,0,0,115,75,0,0,0,122,16,0,116,0,0,
-    124,0,0,131,1,0,125,2,0,87,100,1,0,116,1,0,
-    106,2,0,131,0,0,1,88,124,2,0,106,3,0,131,0,
-    0,1,122,17,0,116,4,0,124,0,0,124,1,0,131,2,
-    0,83,87,100,1,0,124,2,0,106,5,0,131,0,0,1,
-    88,100,1,0,83,40,2,0,0,0,117,54,0,0,0,70,
-    105,110,100,32,97,110,100,32,108,111,97,100,32,116,104,101,
-    32,109,111,100,117,108,101,44,32,97,110,100,32,114,101,108,
-    101,97,115,101,32,116,104,101,32,105,109,112,111,114,116,32,
-    108,111,99,107,46,78,40,6,0,0,0,117,16,0,0,0,
-    95,103,101,116,95,109,111,100,117,108,101,95,108,111,99,107,
-    117,4,0,0,0,95,105,109,112,117,12,0,0,0,114,101,
-    108,101,97,115,101,95,108,111,99,107,117,7,0,0,0,97,
-    99,113,117,105,114,101,117,23,0,0,0,95,102,105,110,100,
-    95,97,110,100,95,108,111,97,100,95,117,110,108,111,99,107,
-    101,100,117,7,0,0,0,114,101,108,101,97,115,101,40,3,
-    0,0,0,117,4,0,0,0,110,97,109,101,117,7,0,0,
-    0,105,109,112,111,114,116,95,117,4,0,0,0,108,111,99,
-    107,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,14,0,
-    0,0,95,102,105,110,100,95,97,110,100,95,108,111,97,100,
-    14,6,0,0,115,14,0,0,0,0,2,3,1,16,2,11,
-    1,10,1,3,1,17,2,117,14,0,0,0,95,102,105,110,
-    100,95,97,110,100,95,108,111,97,100,99,3,0,0,0,0,
-    0,0,0,5,0,0,0,4,0,0,0,67,0,0,0,115,
-    172,0,0,0,116,0,0,124,0,0,124,1,0,124,2,0,
-    131,3,0,1,124,2,0,100,1,0,107,4,0,114,49,0,
-    116,1,0,124,0,0,124,1,0,124,2,0,131,3,0,125,
-    0,0,110,0,0,116,2,0,106,3,0,131,0,0,1,124,
-    0,0,116,4,0,106,5,0,107,7,0,114,87,0,116,6,
-    0,124,0,0,116,7,0,131,2,0,83,116,4,0,106,5,
-    0,124,0,0,25,125,3,0,124,3,0,100,4,0,107,8,
-    0,114,158,0,116,2,0,106,9,0,131,0,0,1,100,2,
-    0,106,10,0,124,0,0,131,1,0,125,4,0,116,11,0,
-    124,4,0,100,3,0,124,0,0,131,1,1,130,1,0,110,
-    0,0,116,12,0,124,0,0,131,1,0,1,124,3,0,83,
-    40,5,0,0,0,117,50,1,0,0,73,109,112,111,114,116,
-    32,97,110,100,32,114,101,116,117,114,110,32,116,104,101,32,
-    109,111,100,117,108,101,32,98,97,115,101,100,32,111,110,32,
-    105,116,115,32,110,97,109,101,44,32,116,104,101,32,112,97,
-    99,107,97,103,101,32,116,104,101,32,99,97,108,108,32,105,
-    115,10,32,32,32,32,98,101,105,110,103,32,109,97,100,101,
-    32,102,114,111,109,44,32,97,110,100,32,116,104,101,32,108,
-    101,118,101,108,32,97,100,106,117,115,116,109,101,110,116,46,
-    10,10,32,32,32,32,84,104,105,115,32,102,117,110,99,116,
-    105,111,110,32,114,101,112,114,101,115,101,110,116,115,32,116,
-    104,101,32,103,114,101,97,116,101,115,116,32,99,111,109,109,
-    111,110,32,100,101,110,111,109,105,110,97,116,111,114,32,111,
-    102,32,102,117,110,99,116,105,111,110,97,108,105,116,121,10,
-    32,32,32,32,98,101,116,119,101,101,110,32,105,109,112,111,
-    114,116,95,109,111,100,117,108,101,32,97,110,100,32,95,95,
-    105,109,112,111,114,116,95,95,46,32,84,104,105,115,32,105,
-    110,99,108,117,100,101,115,32,115,101,116,116,105,110,103,32,
-    95,95,112,97,99,107,97,103,101,95,95,32,105,102,10,32,
-    32,32,32,116,104,101,32,108,111,97,100,101,114,32,100,105,
-    100,32,110,111,116,46,10,10,32,32,32,32,105,0,0,0,
-    0,117,40,0,0,0,105,109,112,111,114,116,32,111,102,32,
-    123,125,32,104,97,108,116,101,100,59,32,78,111,110,101,32,
-    105,110,32,115,121,115,46,109,111,100,117,108,101,115,117,4,
-    0,0,0,110,97,109,101,78,40,13,0,0,0,117,13,0,
-    0,0,95,115,97,110,105,116,121,95,99,104,101,99,107,117,
-    13,0,0,0,95,114,101,115,111,108,118,101,95,110,97,109,
-    101,117,4,0,0,0,95,105,109,112,117,12,0,0,0,97,
-    99,113,117,105,114,101,95,108,111,99,107,117,3,0,0,0,
-    115,121,115,117,7,0,0,0,109,111,100,117,108,101,115,117,
-    14,0,0,0,95,102,105,110,100,95,97,110,100,95,108,111,
-    97,100,117,11,0,0,0,95,103,99,100,95,105,109,112,111,
-    114,116,117,4,0,0,0,78,111,110,101,117,12,0,0,0,
-    114,101,108,101,97,115,101,95,108,111,99,107,117,6,0,0,
-    0,102,111,114,109,97,116,117,11,0,0,0,73,109,112,111,
-    114,116,69,114,114,111,114,117,19,0,0,0,95,108,111,99,
-    107,95,117,110,108,111,99,107,95,109,111,100,117,108,101,40,
-    5,0,0,0,117,4,0,0,0,110,97,109,101,117,7,0,
-    0,0,112,97,99,107,97,103,101,117,5,0,0,0,108,101,
-    118,101,108,117,6,0,0,0,109,111,100,117,108,101,117,7,
-    0,0,0,109,101,115,115,97,103,101,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,11,0,0,0,95,103,99,100,95,
-    105,109,112,111,114,116,27,6,0,0,115,28,0,0,0,0,
-    9,16,1,12,1,21,1,10,1,15,1,13,1,13,1,12,
-    1,10,1,6,1,9,1,21,1,10,1,117,11,0,0,0,
-    95,103,99,100,95,105,109,112,111,114,116,99,3,0,0,0,
-    0,0,0,0,5,0,0,0,17,0,0,0,67,0,0,0,
-    115,233,0,0,0,116,0,0,124,0,0,100,1,0,131,2,
-    0,114,229,0,100,2,0,124,1,0,107,6,0,114,89,0,
-    116,1,0,124,1,0,131,1,0,125,1,0,124,1,0,106,
-    2,0,100,2,0,131,1,0,1,116,0,0,124,0,0,100,
-    3,0,131,2,0,114,89,0,124,1,0,106,3,0,124,0,
-    0,106,4,0,131,1,0,1,113,89,0,110,0,0,120,137,
-    0,124,1,0,68,93,126,0,125,3,0,116,0,0,124,0,
-    0,124,3,0,131,2,0,115,96,0,121,32,0,116,5,0,
-    124,2,0,100,4,0,106,6,0,124,0,0,106,7,0,124,
-    3,0,131,2,0,131,2,0,1,87,113,222,0,4,116,8,
-    0,107,10,0,114,218,0,1,125,4,0,1,122,35,0,116,
-    0,0,124,4,0,100,5,0,131,2,0,114,197,0,124,4,
-    0,106,9,0,114,197,0,110,3,0,130,0,0,87,89,100,
-    6,0,100,6,0,125,4,0,126,4,0,88,113,222,0,88,
-    113,96,0,113,96,0,87,110,0,0,124,0,0,83,40,7,
-    0,0,0,117,238,0,0,0,70,105,103,117,114,101,32,111,
-    117,116,32,119,104,97,116,32,95,95,105,109,112,111,114,116,
-    95,95,32,115,104,111,117,108,100,32,114,101,116,117,114,110,
-    46,10,10,32,32,32,32,84,104,101,32,105,109,112,111,114,
-    116,95,32,112,97,114,97,109,101,116,101,114,32,105,115,32,
-    97,32,99,97,108,108,97,98,108,101,32,119,104,105,99,104,
-    32,116,97,107,101,115,32,116,104,101,32,110,97,109,101,32,
-    111,102,32,109,111,100,117,108,101,32,116,111,10,32,32,32,
-    32,105,109,112,111,114,116,46,32,73,116,32,105,115,32,114,
-    101,113,117,105,114,101,100,32,116,111,32,100,101,99,111,117,
-    112,108,101,32,116,104,101,32,102,117,110,99,116,105,111,110,
-    32,102,114,111,109,32,97,115,115,117,109,105,110,103,32,105,
-    109,112,111,114,116,108,105,98,39,115,10,32,32,32,32,105,
-    109,112,111,114,116,32,105,109,112,108,101,109,101,110,116,97,
-    116,105,111,110,32,105,115,32,100,101,115,105,114,101,100,46,
-    10,10,32,32,32,32,117,8,0,0,0,95,95,112,97,116,
-    104,95,95,117,1,0,0,0,42,117,7,0,0,0,95,95,
-    97,108,108,95,95,117,5,0,0,0,123,125,46,123,125,117,
-    10,0,0,0,95,110,111,116,95,102,111,117,110,100,78,40,
-    10,0,0,0,117,7,0,0,0,104,97,115,97,116,116,114,
-    117,4,0,0,0,108,105,115,116,117,6,0,0,0,114,101,
-    109,111,118,101,117,6,0,0,0,101,120,116,101,110,100,117,
-    7,0,0,0,95,95,97,108,108,95,95,117,25,0,0,0,
-    95,99,97,108,108,95,119,105,116,104,95,102,114,97,109,101,
-    115,95,114,101,109,111,118,101,100,117,6,0,0,0,102,111,
-    114,109,97,116,117,8,0,0,0,95,95,110,97,109,101,95,
-    95,117,11,0,0,0,73,109,112,111,114,116,69,114,114,111,
-    114,117,10,0,0,0,95,110,111,116,95,102,111,117,110,100,
-    40,5,0,0,0,117,6,0,0,0,109,111,100,117,108,101,
-    117,8,0,0,0,102,114,111,109,108,105,115,116,117,7,0,
-    0,0,105,109,112,111,114,116,95,117,1,0,0,0,120,117,
-    3,0,0,0,101,120,99,40,0,0,0,0,40,0,0,0,
-    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
-    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,16,0,0,0,95,104,97,110,100,108,101,95,
-    102,114,111,109,108,105,115,116,51,6,0,0,115,32,0,0,
-    0,0,10,15,1,12,1,12,1,13,1,15,1,22,1,13,
-    1,15,1,3,1,6,1,26,1,18,6,24,1,3,2,32,
-    1,117,16,0,0,0,95,104,97,110,100,108,101,95,102,114,
-    111,109,108,105,115,116,99,1,0,0,0,0,0,0,0,2,
-    0,0,0,2,0,0,0,67,0,0,0,115,78,0,0,0,
-    124,0,0,106,0,0,100,1,0,131,1,0,125,1,0,124,
-    1,0,100,6,0,107,8,0,114,74,0,124,0,0,100,2,
-    0,25,125,1,0,100,3,0,124,0,0,107,7,0,114,74,
-    0,124,1,0,106,2,0,100,4,0,131,1,0,100,5,0,
-    25,125,1,0,113,74,0,110,0,0,124,1,0,83,40,7,
-    0,0,0,117,167,0,0,0,67,97,108,99,117,108,97,116,
-    101,32,119,104,97,116,32,95,95,112,97,99,107,97,103,101,
-    95,95,32,115,104,111,117,108,100,32,98,101,46,10,10,32,
-    32,32,32,95,95,112,97,99,107,97,103,101,95,95,32,105,
-    115,32,110,111,116,32,103,117,97,114,97,110,116,101,101,100,
-    32,116,111,32,98,101,32,100,101,102,105,110,101,100,32,111,
-    114,32,99,111,117,108,100,32,98,101,32,115,101,116,32,116,
-    111,32,78,111,110,101,10,32,32,32,32,116,111,32,114,101,
-    112,114,101,115,101,110,116,32,116,104,97,116,32,105,116,115,
-    32,112,114,111,112,101,114,32,118,97,108,117,101,32,105,115,
-    32,117,110,107,110,111,119,110,46,10,10,32,32,32,32,117,
-    11,0,0,0,95,95,112,97,99,107,97,103,101,95,95,117,
-    8,0,0,0,95,95,110,97,109,101,95,95,117,8,0,0,
-    0,95,95,112,97,116,104,95,95,117,1,0,0,0,46,105,
-    0,0,0,0,78,40,3,0,0,0,117,3,0,0,0,103,
-    101,116,117,4,0,0,0,78,111,110,101,117,10,0,0,0,
-    114,112,97,114,116,105,116,105,111,110,40,2,0,0,0,117,
-    7,0,0,0,103,108,111,98,97,108,115,117,7,0,0,0,
-    112,97,99,107,97,103,101,40,0,0,0,0,40,0,0,0,
-    0,117,29,0,0,0,60,102,114,111,122,101,110,32,105,109,
-    112,111,114,116,108,105,98,46,95,98,111,111,116,115,116,114,
-    97,112,62,117,17,0,0,0,95,99,97,108,99,95,95,95,
-    112,97,99,107,97,103,101,95,95,85,6,0,0,115,12,0,
-    0,0,0,7,15,1,12,1,10,1,12,1,25,1,117,17,
-    0,0,0,95,99,97,108,99,95,95,95,112,97,99,107,97,
-    103,101,95,95,99,0,0,0,0,0,0,0,0,3,0,0,
-    0,3,0,0,0,67,0,0,0,115,55,0,0,0,116,0,
-    0,116,1,0,106,2,0,131,0,0,102,2,0,125,0,0,
-    116,3,0,116,4,0,102,2,0,125,1,0,116,5,0,116,
-    6,0,102,2,0,125,2,0,124,0,0,124,1,0,124,2,
-    0,103,3,0,83,40,1,0,0,0,117,111,0,0,0,82,
-    101,116,117,114,110,115,32,97,32,108,105,115,116,32,111,102,
-    32,102,105,108,101,45,98,97,115,101,100,32,109,111,100,117,
-    108,101,32,108,111,97,100,101,114,115,46,10,10,32,32,32,
-    32,69,97,99,104,32,105,116,101,109,32,105,115,32,97,32,
-    116,117,112,108,101,32,40,108,111,97,100,101,114,44,32,115,
-    117,102,102,105,120,101,115,44,32,97,108,108,111,119,95,112,
-    97,99,107,97,103,101,115,41,46,10,32,32,32,32,40,7,
-    0,0,0,117,19,0,0,0,69,120,116,101,110,115,105,111,
-    110,70,105,108,101,76,111,97,100,101,114,117,4,0,0,0,
-    95,105,109,112,117,18,0,0,0,101,120,116,101,110,115,105,
-    111,110,95,115,117,102,102,105,120,101,115,117,16,0,0,0,
-    83,111,117,114,99,101,70,105,108,101,76,111,97,100,101,114,
-    117,15,0,0,0,83,79,85,82,67,69,95,83,85,70,70,
-    73,88,69,83,117,20,0,0,0,83,111,117,114,99,101,108,
-    101,115,115,70,105,108,101,76,111,97,100,101,114,117,17,0,
-    0,0,66,89,84,69,67,79,68,69,95,83,85,70,70,73,
-    88,69,83,40,3,0,0,0,117,10,0,0,0,101,120,116,
-    101,110,115,105,111,110,115,117,6,0,0,0,115,111,117,114,
-    99,101,117,8,0,0,0,98,121,116,101,99,111,100,101,40,
-    0,0,0,0,40,0,0,0,0,117,29,0,0,0,60,102,
-    114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,46,
-    95,98,111,111,116,115,116,114,97,112,62,117,27,0,0,0,
-    95,103,101,116,95,115,117,112,112,111,114,116,101,100,95,102,
-    105,108,101,95,108,111,97,100,101,114,115,100,6,0,0,115,
-    8,0,0,0,0,5,18,1,12,1,12,1,117,27,0,0,
-    0,95,103,101,116,95,115,117,112,112,111,114,116,101,100,95,
-    102,105,108,101,95,108,111,97,100,101,114,115,99,5,0,0,
-    0,0,0,0,0,9,0,0,0,5,0,0,0,67,0,0,
-    0,115,227,0,0,0,124,4,0,100,1,0,107,2,0,114,
-    27,0,116,0,0,124,0,0,131,1,0,125,5,0,110,54,
-    0,124,1,0,100,3,0,107,9,0,114,45,0,124,1,0,
-    110,3,0,105,0,0,125,6,0,116,2,0,124,6,0,131,
-    1,0,125,7,0,116,0,0,124,0,0,124,7,0,124,4,
-    0,131,3,0,125,5,0,124,3,0,115,207,0,124,4,0,
-    100,1,0,107,2,0,114,122,0,116,0,0,124,0,0,106,
-    3,0,100,2,0,131,1,0,100,1,0,25,131,1,0,83,
-    124,0,0,115,132,0,124,5,0,83,116,4,0,124,0,0,
-    131,1,0,116,4,0,124,0,0,106,3,0,100,2,0,131,
-    1,0,100,1,0,25,131,1,0,24,125,8,0,116,5,0,
-    106,6,0,124,5,0,106,7,0,100,3,0,116,4,0,124,
-    5,0,106,7,0,131,1,0,124,8,0,24,133,2,0,25,
-    25,83,110,16,0,116,8,0,124,5,0,124,3,0,116,0,
-    0,131,3,0,83,100,3,0,83,40,4,0,0,0,117,214,
-    1,0,0,73,109,112,111,114,116,32,97,32,109,111,100,117,
-    108,101,46,10,10,32,32,32,32,84,104,101,32,39,103,108,
-    111,98,97,108,115,39,32,97,114,103,117,109,101,110,116,32,
-    105,115,32,117,115,101,100,32,116,111,32,105,110,102,101,114,
-    32,119,104,101,114,101,32,116,104,101,32,105,109,112,111,114,
-    116,32,105,115,32,111,99,99,117,114,105,110,103,32,102,114,
-    111,109,10,32,32,32,32,116,111,32,104,97,110,100,108,101,
-    32,114,101,108,97,116,105,118,101,32,105,109,112,111,114,116,
-    115,46,32,84,104,101,32,39,108,111,99,97,108,115,39,32,
-    97,114,103,117,109,101,110,116,32,105,115,32,105,103,110,111,
-    114,101,100,46,32,84,104,101,10,32,32,32,32,39,102,114,
-    111,109,108,105,115,116,39,32,97,114,103,117,109,101,110,116,
-    32,115,112,101,99,105,102,105,101,115,32,119,104,97,116,32,
-    115,104,111,117,108,100,32,101,120,105,115,116,32,97,115,32,
-    97,116,116,114,105,98,117,116,101,115,32,111,110,32,116,104,
-    101,32,109,111,100,117,108,101,10,32,32,32,32,98,101,105,
-    110,103,32,105,109,112,111,114,116,101,100,32,40,101,46,103,
-    46,32,96,96,102,114,111,109,32,109,111,100,117,108,101,32,
-    105,109,112,111,114,116,32,60,102,114,111,109,108,105,115,116,
-    62,96,96,41,46,32,32,84,104,101,32,39,108,101,118,101,
-    108,39,10,32,32,32,32,97,114,103,117,109,101,110,116,32,
-    114,101,112,114,101,115,101,110,116,115,32,116,104,101,32,112,
-    97,99,107,97,103,101,32,108,111,99,97,116,105,111,110,32,
-    116,111,32,105,109,112,111,114,116,32,102,114,111,109,32,105,
-    110,32,97,32,114,101,108,97,116,105,118,101,10,32,32,32,
-    32,105,109,112,111,114,116,32,40,101,46,103,46,32,96,96,
-    102,114,111,109,32,46,46,112,107,103,32,105,109,112,111,114,
-    116,32,109,111,100,96,96,32,119,111,117,108,100,32,104,97,
-    118,101,32,97,32,39,108,101,118,101,108,39,32,111,102,32,
-    50,41,46,10,10,32,32,32,32,105,0,0,0,0,117,1,
-    0,0,0,46,78,40,9,0,0,0,117,11,0,0,0,95,
-    103,99,100,95,105,109,112,111,114,116,117,4,0,0,0,78,
-    111,110,101,117,17,0,0,0,95,99,97,108,99,95,95,95,
-    112,97,99,107,97,103,101,95,95,117,9,0,0,0,112,97,
-    114,116,105,116,105,111,110,117,3,0,0,0,108,101,110,117,
-    3,0,0,0,115,121,115,117,7,0,0,0,109,111,100,117,
-    108,101,115,117,8,0,0,0,95,95,110,97,109,101,95,95,
-    117,16,0,0,0,95,104,97,110,100,108,101,95,102,114,111,
-    109,108,105,115,116,40,9,0,0,0,117,4,0,0,0,110,
-    97,109,101,117,7,0,0,0,103,108,111,98,97,108,115,117,
-    6,0,0,0,108,111,99,97,108,115,117,8,0,0,0,102,
-    114,111,109,108,105,115,116,117,5,0,0,0,108,101,118,101,
-    108,117,6,0,0,0,109,111,100,117,108,101,117,8,0,0,
-    0,103,108,111,98,97,108,115,95,117,7,0,0,0,112,97,
-    99,107,97,103,101,117,7,0,0,0,99,117,116,95,111,102,
-    102,40,0,0,0,0,40,0,0,0,0,117,29,0,0,0,
-    60,102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,
-    98,46,95,98,111,111,116,115,116,114,97,112,62,117,10,0,
-    0,0,95,95,105,109,112,111,114,116,95,95,111,6,0,0,
-    115,26,0,0,0,0,11,12,1,15,2,24,1,12,1,18,
-    1,6,3,12,1,23,1,6,1,4,2,35,1,40,2,117,
-    10,0,0,0,95,95,105,109,112,111,114,116,95,95,99,2,
-    0,0,0,0,0,0,0,14,0,0,0,13,0,0,0,67,
-    0,0,0,115,196,2,0,0,124,1,0,97,0,0,124,0,
-    0,97,1,0,116,1,0,106,2,0,106,3,0,114,33,0,
-    116,4,0,97,5,0,110,6,0,116,6,0,97,5,0,120,
-    47,0,116,0,0,116,1,0,102,2,0,68,93,33,0,125,
-    2,0,116,7,0,124,2,0,100,1,0,131,2,0,115,52,
-    0,116,8,0,124,2,0,95,9,0,113,52,0,113,52,0,
-    87,116,1,0,106,10,0,116,11,0,25,125,3,0,120,76,
-    0,100,28,0,68,93,68,0,125,4,0,124,4,0,116,1,
-    0,106,10,0,107,7,0,114,148,0,116,8,0,106,12,0,
-    124,4,0,131,1,0,125,5,0,110,13,0,116,1,0,106,
-    10,0,124,4,0,25,125,5,0,116,13,0,124,3,0,124,
-    4,0,124,5,0,131,3,0,1,113,109,0,87,100,6,0,
-    100,7,0,103,1,0,102,2,0,100,8,0,100,9,0,100,
-    7,0,103,2,0,102,2,0,100,10,0,100,9,0,100,7,
-    0,103,2,0,102,2,0,102,3,0,125,6,0,120,189,0,
-    124,6,0,68,93,169,0,92,2,0,125,7,0,125,8,0,
-    116,14,0,100,11,0,100,12,0,132,0,0,124,8,0,68,
-    131,1,0,131,1,0,115,23,1,116,15,0,130,1,0,124,
-    8,0,100,13,0,25,125,9,0,124,7,0,116,1,0,106,
-    10,0,107,6,0,114,65,1,116,1,0,106,10,0,124,7,
-    0,25,125,10,0,80,113,236,0,121,60,0,116,8,0,106,
-    12,0,124,7,0,131,1,0,125,10,0,124,7,0,100,10,
-    0,107,2,0,114,123,1,100,14,0,116,1,0,106,16,0,
-    107,6,0,114,123,1,124,8,0,100,15,0,25,125,9,0,
-    110,0,0,80,87,113,236,0,4,116,17,0,107,10,0,114,
-    148,1,1,1,1,119,236,0,89,113,236,0,88,113,236,0,
-    87,116,17,0,100,16,0,131,1,0,130,1,0,121,19,0,
-    116,8,0,106,12,0,100,17,0,131,1,0,125,11,0,87,
-    110,24,0,4,116,17,0,107,10,0,114,210,1,1,1,1,
-    100,27,0,125,11,0,89,110,1,0,88,116,8,0,106,12,
-    0,100,18,0,131,1,0,125,12,0,124,7,0,100,8,0,
-    107,2,0,114,16,2,116,8,0,106,12,0,100,19,0,131,
-    1,0,125,13,0,116,13,0,124,3,0,100,20,0,124,13,
-    0,131,3,0,1,110,0,0,116,13,0,124,3,0,100,21,
-    0,124,10,0,131,3,0,1,116,13,0,124,3,0,100,17,
-    0,124,11,0,131,3,0,1,116,13,0,124,3,0,100,18,
-    0,124,12,0,131,3,0,1,116,13,0,124,3,0,100,22,
-    0,124,9,0,131,3,0,1,116,13,0,124,3,0,100,23,
-    0,116,19,0,124,8,0,131,1,0,131,3,0,1,116,13,
-    0,124,3,0,100,24,0,116,20,0,131,0,0,131,3,0,
-    1,116,21,0,106,22,0,116,0,0,106,23,0,131,0,0,
-    131,1,0,1,124,7,0,100,8,0,107,2,0,114,192,2,
-    116,24,0,106,25,0,100,25,0,131,1,0,1,100,26,0,
-    116,21,0,107,6,0,114,192,2,100,29,0,116,27,0,95,
-    28,0,113,192,2,110,0,0,100,27,0,83,40,30,0,0,
-    0,117,250,0,0,0,83,101,116,117,112,32,105,109,112,111,
-    114,116,108,105,98,32,98,121,32,105,109,112,111,114,116,105,
-    110,103,32,110,101,101,100,101,100,32,98,117,105,108,116,45,
-    105,110,32,109,111,100,117,108,101,115,32,97,110,100,32,105,
-    110,106,101,99,116,105,110,103,32,116,104,101,109,10,32,32,
-    32,32,105,110,116,111,32,116,104,101,32,103,108,111,98,97,
-    108,32,110,97,109,101,115,112,97,99,101,46,10,10,32,32,
-    32,32,65,115,32,115,121,115,32,105,115,32,110,101,101,100,
-    101,100,32,102,111,114,32,115,121,115,46,109,111,100,117,108,
-    101,115,32,97,99,99,101,115,115,32,97,110,100,32,95,105,
-    109,112,32,105,115,32,110,101,101,100,101,100,32,116,111,32,
-    108,111,97,100,32,98,117,105,108,116,45,105,110,10,32,32,
-    32,32,109,111,100,117,108,101,115,44,32,116,104,111,115,101,
-    32,116,119,111,32,109,111,100,117,108,101,115,32,109,117,115,
-    116,32,98,101,32,101,120,112,108,105,99,105,116,108,121,32,
-    112,97,115,115,101,100,32,105,110,46,10,10,32,32,32,32,
-    117,10,0,0,0,95,95,108,111,97,100,101,114,95,95,117,
-    3,0,0,0,95,105,111,117,9,0,0,0,95,119,97,114,
-    110,105,110,103,115,117,8,0,0,0,98,117,105,108,116,105,
-    110,115,117,7,0,0,0,109,97,114,115,104,97,108,117,5,
-    0,0,0,112,111,115,105,120,117,1,0,0,0,47,117,2,
-    0,0,0,110,116,117,1,0,0,0,92,117,3,0,0,0,
-    111,115,50,99,1,0,0,0,0,0,0,0,2,0,0,0,
-    3,0,0,0,115,0,0,0,115,33,0,0,0,124,0,0,
-    93,23,0,125,1,0,116,0,0,124,1,0,131,1,0,100,
-    0,0,107,2,0,86,1,113,3,0,100,1,0,83,40,2,
-    0,0,0,105,1,0,0,0,78,40,1,0,0,0,117,3,
-    0,0,0,108,101,110,40,2,0,0,0,117,2,0,0,0,
-    46,48,117,3,0,0,0,115,101,112,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,9,0,0,0,60,103,101,110,101,
-    120,112,114,62,175,6,0,0,115,2,0,0,0,6,0,117,
-    25,0,0,0,95,115,101,116,117,112,46,60,108,111,99,97,
-    108,115,62,46,60,103,101,110,101,120,112,114,62,105,0,0,
-    0,0,117,7,0,0,0,69,77,88,32,71,67,67,105,1,
-    0,0,0,117,30,0,0,0,105,109,112,111,114,116,108,105,
-    98,32,114,101,113,117,105,114,101,115,32,112,111,115,105,120,
-    32,111,114,32,110,116,117,7,0,0,0,95,116,104,114,101,
-    97,100,117,8,0,0,0,95,119,101,97,107,114,101,102,117,
-    6,0,0,0,119,105,110,114,101,103,117,7,0,0,0,95,
-    119,105,110,114,101,103,117,3,0,0,0,95,111,115,117,8,
-    0,0,0,112,97,116,104,95,115,101,112,117,15,0,0,0,
-    112,97,116,104,95,115,101,112,97,114,97,116,111,114,115,117,
-    11,0,0,0,95,114,101,108,97,120,95,99,97,115,101,117,
-    4,0,0,0,46,112,121,119,117,6,0,0,0,95,100,46,
-    112,121,100,78,40,4,0,0,0,117,3,0,0,0,95,105,
-    111,117,9,0,0,0,95,119,97,114,110,105,110,103,115,117,
-    8,0,0,0,98,117,105,108,116,105,110,115,117,7,0,0,
-    0,109,97,114,115,104,97,108,84,40,29,0,0,0,117,4,
-    0,0,0,95,105,109,112,117,3,0,0,0,115,121,115,117,
-    5,0,0,0,102,108,97,103,115,117,8,0,0,0,111,112,
-    116,105,109,105,122,101,117,27,0,0,0,79,80,84,73,77,
-    73,90,69,68,95,66,89,84,69,67,79,68,69,95,83,85,
-    70,70,73,88,69,83,117,17,0,0,0,66,89,84,69,67,
-    79,68,69,95,83,85,70,70,73,88,69,83,117,23,0,0,
-    0,68,69,66,85,71,95,66,89,84,69,67,79,68,69,95,
-    83,85,70,70,73,88,69,83,117,7,0,0,0,104,97,115,
-    97,116,116,114,117,15,0,0,0,66,117,105,108,116,105,110,
-    73,109,112,111,114,116,101,114,117,10,0,0,0,95,95,108,
-    111,97,100,101,114,95,95,117,7,0,0,0,109,111,100,117,
-    108,101,115,117,8,0,0,0,95,95,110,97,109,101,95,95,
-    117,11,0,0,0,108,111,97,100,95,109,111,100,117,108,101,
-    117,7,0,0,0,115,101,116,97,116,116,114,117,3,0,0,
-    0,97,108,108,117,14,0,0,0,65,115,115,101,114,116,105,
-    111,110,69,114,114,111,114,117,7,0,0,0,118,101,114,115,
-    105,111,110,117,11,0,0,0,73,109,112,111,114,116,69,114,
-    114,111,114,117,4,0,0,0,78,111,110,101,117,3,0,0,
-    0,115,101,116,117,16,0,0,0,95,109,97,107,101,95,114,
-    101,108,97,120,95,99,97,115,101,117,18,0,0,0,69,88,
-    84,69,78,83,73,79,78,95,83,85,70,70,73,88,69,83,
-    117,6,0,0,0,101,120,116,101,110,100,117,18,0,0,0,
-    101,120,116,101,110,115,105,111,110,95,115,117,102,102,105,120,
-    101,115,117,15,0,0,0,83,79,85,82,67,69,95,83,85,
-    70,70,73,88,69,83,117,6,0,0,0,97,112,112,101,110,
-    100,117,4,0,0,0,84,114,117,101,117,21,0,0,0,87,
-    105,110,100,111,119,115,82,101,103,105,115,116,114,121,70,105,
-    110,100,101,114,117,11,0,0,0,68,69,66,85,71,95,66,
-    85,73,76,68,40,14,0,0,0,117,10,0,0,0,115,121,
-    115,95,109,111,100,117,108,101,117,11,0,0,0,95,105,109,
-    112,95,109,111,100,117,108,101,117,6,0,0,0,109,111,100,
-    117,108,101,117,11,0,0,0,115,101,108,102,95,109,111,100,
-    117,108,101,117,12,0,0,0,98,117,105,108,116,105,110,95,
-    110,97,109,101,117,14,0,0,0,98,117,105,108,116,105,110,
-    95,109,111,100,117,108,101,117,10,0,0,0,111,115,95,100,
-    101,116,97,105,108,115,117,10,0,0,0,98,117,105,108,116,
-    105,110,95,111,115,117,15,0,0,0,112,97,116,104,95,115,
-    101,112,97,114,97,116,111,114,115,117,8,0,0,0,112,97,
-    116,104,95,115,101,112,117,9,0,0,0,111,115,95,109,111,
-    100,117,108,101,117,13,0,0,0,116,104,114,101,97,100,95,
-    109,111,100,117,108,101,117,14,0,0,0,119,101,97,107,114,
-    101,102,95,109,111,100,117,108,101,117,13,0,0,0,119,105,
-    110,114,101,103,95,109,111,100,117,108,101,40,0,0,0,0,
-    40,0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,
-    110,32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,
-    116,115,116,114,97,112,62,117,6,0,0,0,95,115,101,116,
-    117,112,143,6,0,0,115,96,0,0,0,0,9,6,1,6,
-    2,12,1,9,2,6,2,19,1,15,1,16,2,13,1,13,
-    1,15,1,18,2,13,1,20,2,48,1,19,2,31,1,10,
-    1,15,1,13,1,4,2,3,1,15,2,27,1,13,1,5,
-    1,13,1,12,2,12,2,3,1,19,1,13,2,11,1,15,
-    2,12,1,15,1,19,2,16,1,16,1,16,1,16,1,22,
-    2,19,1,19,1,12,1,13,1,12,1,117,6,0,0,0,
-    95,115,101,116,117,112,99,2,0,0,0,0,0,0,0,3,
-    0,0,0,3,0,0,0,67,0,0,0,115,136,0,0,0,
-    116,0,0,124,0,0,124,1,0,131,2,0,1,116,1,0,
-    131,0,0,125,2,0,116,2,0,106,3,0,106,4,0,116,
-    5,0,106,6,0,124,2,0,140,0,0,103,1,0,131,1,
-    0,1,116,2,0,106,7,0,106,8,0,116,9,0,131,1,
-    0,1,116,2,0,106,7,0,106,8,0,116,10,0,131,1,
-    0,1,116,11,0,106,12,0,100,1,0,107,2,0,114,116,
-    0,116,2,0,106,7,0,106,8,0,116,13,0,131,1,0,
-    1,110,0,0,116,2,0,106,7,0,106,8,0,116,14,0,
-    131,1,0,1,100,2,0,83,40,3,0,0,0,117,50,0,
-    0,0,73,110,115,116,97,108,108,32,105,109,112,111,114,116,
-    108,105,98,32,97,115,32,116,104,101,32,105,109,112,108,101,
-    109,101,110,116,97,116,105,111,110,32,111,102,32,105,109,112,
-    111,114,116,46,117,2,0,0,0,110,116,78,40,15,0,0,
-    0,117,6,0,0,0,95,115,101,116,117,112,117,27,0,0,
-    0,95,103,101,116,95,115,117,112,112,111,114,116,101,100,95,
-    102,105,108,101,95,108,111,97,100,101,114,115,117,3,0,0,
-    0,115,121,115,117,10,0,0,0,112,97,116,104,95,104,111,
-    111,107,115,117,6,0,0,0,101,120,116,101,110,100,117,10,
-    0,0,0,70,105,108,101,70,105,110,100,101,114,117,9,0,
-    0,0,112,97,116,104,95,104,111,111,107,117,9,0,0,0,
-    109,101,116,97,95,112,97,116,104,117,6,0,0,0,97,112,
-    112,101,110,100,117,15,0,0,0,66,117,105,108,116,105,110,
-    73,109,112,111,114,116,101,114,117,14,0,0,0,70,114,111,
-    122,101,110,73,109,112,111,114,116,101,114,117,3,0,0,0,
-    95,111,115,117,8,0,0,0,95,95,110,97,109,101,95,95,
-    117,21,0,0,0,87,105,110,100,111,119,115,82,101,103,105,
-    115,116,114,121,70,105,110,100,101,114,117,10,0,0,0,80,
-    97,116,104,70,105,110,100,101,114,40,3,0,0,0,117,10,
-    0,0,0,115,121,115,95,109,111,100,117,108,101,117,11,0,
-    0,0,95,105,109,112,95,109,111,100,117,108,101,117,17,0,
-    0,0,115,117,112,112,111,114,116,101,100,95,108,111,97,100,
-    101,114,115,40,0,0,0,0,40,0,0,0,0,117,29,0,
-    0,0,60,102,114,111,122,101,110,32,105,109,112,111,114,116,
-    108,105,98,46,95,98,111,111,116,115,116,114,97,112,62,117,
-    8,0,0,0,95,105,110,115,116,97,108,108,217,6,0,0,
-    115,16,0,0,0,0,2,13,1,9,1,28,1,16,1,16,
-    1,15,1,19,1,117,8,0,0,0,95,105,110,115,116,97,
-    108,108,78,40,3,0,0,0,117,3,0,0,0,119,105,110,
-    117,6,0,0,0,99,121,103,119,105,110,117,6,0,0,0,
-    100,97,114,119,105,110,40,74,0,0,0,117,7,0,0,0,
-    95,95,100,111,99,95,95,117,27,0,0,0,95,67,65,83,
-    69,95,73,78,83,69,78,83,73,84,73,86,69,95,80,76,
-    65,84,70,79,82,77,83,117,16,0,0,0,95,109,97,107,
-    101,95,114,101,108,97,120,95,99,97,115,101,117,7,0,0,
-    0,95,119,95,108,111,110,103,117,7,0,0,0,95,114,95,
-    108,111,110,103,117,10,0,0,0,95,112,97,116,104,95,106,
-    111,105,110,117,11,0,0,0,95,112,97,116,104,95,115,112,
-    108,105,116,117,18,0,0,0,95,112,97,116,104,95,105,115,
-    95,109,111,100,101,95,116,121,112,101,117,12,0,0,0,95,
-    112,97,116,104,95,105,115,102,105,108,101,117,11,0,0,0,
-    95,112,97,116,104,95,105,115,100,105,114,117,13,0,0,0,
-    95,119,114,105,116,101,95,97,116,111,109,105,99,117,5,0,
-    0,0,95,119,114,97,112,117,4,0,0,0,116,121,112,101,
-    117,8,0,0,0,95,95,99,111,100,101,95,95,117,10,0,
-    0,0,95,99,111,100,101,95,116,121,112,101,117,10,0,0,
-    0,110,101,119,95,109,111,100,117,108,101,117,13,0,0,0,
-    95,109,111,100,117,108,101,95,108,111,99,107,115,117,12,0,
-    0,0,95,98,108,111,99,107,105,110,103,95,111,110,117,12,
-    0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,117,
-    14,0,0,0,95,68,101,97,100,108,111,99,107,69,114,114,
-    111,114,117,11,0,0,0,95,77,111,100,117,108,101,76,111,
-    99,107,117,16,0,0,0,95,68,117,109,109,121,77,111,100,
-    117,108,101,76,111,99,107,117,16,0,0,0,95,103,101,116,
-    95,109,111,100,117,108,101,95,108,111,99,107,117,19,0,0,
-    0,95,108,111,99,107,95,117,110,108,111,99,107,95,109,111,
-    100,117,108,101,117,25,0,0,0,95,99,97,108,108,95,119,
-    105,116,104,95,102,114,97,109,101,115,95,114,101,109,111,118,
-    101,100,117,3,0,0,0,111,114,100,117,17,0,0,0,95,
-    82,65,87,95,77,65,71,73,67,95,78,85,77,66,69,82,
-    117,5,0,0,0,98,121,116,101,115,117,5,0,0,0,114,
-    97,110,103,101,117,12,0,0,0,95,77,65,71,73,67,95,
-    66,89,84,69,83,117,8,0,0,0,95,80,89,67,65,67,
-    72,69,117,15,0,0,0,83,79,85,82,67,69,95,83,85,
-    70,70,73,88,69,83,117,23,0,0,0,68,69,66,85,71,
-    95,66,89,84,69,67,79,68,69,95,83,85,70,70,73,88,
-    69,83,117,27,0,0,0,79,80,84,73,77,73,90,69,68,
-    95,66,89,84,69,67,79,68,69,95,83,85,70,70,73,88,
-    69,83,117,4,0,0,0,78,111,110,101,117,17,0,0,0,
-    99,97,99,104,101,95,102,114,111,109,95,115,111,117,114,99,
-    101,117,17,0,0,0,115,111,117,114,99,101,95,102,114,111,
-    109,95,99,97,99,104,101,117,15,0,0,0,95,103,101,116,
-    95,115,111,117,114,99,101,102,105,108,101,117,16,0,0,0,
-    95,118,101,114,98,111,115,101,95,109,101,115,115,97,103,101,
-    117,11,0,0,0,115,101,116,95,112,97,99,107,97,103,101,
-    117,10,0,0,0,115,101,116,95,108,111,97,100,101,114,117,
-    17,0,0,0,109,111,100,117,108,101,95,102,111,114,95,108,
-    111,97,100,101,114,117,11,0,0,0,95,99,104,101,99,107,
-    95,110,97,109,101,117,17,0,0,0,95,114,101,113,117,105,
-    114,101,115,95,98,117,105,108,116,105,110,117,16,0,0,0,
-    95,114,101,113,117,105,114,101,115,95,102,114,111,122,101,110,
-    117,17,0,0,0,95,102,105,110,100,95,109,111,100,117,108,
-    101,95,115,104,105,109,117,15,0,0,0,66,117,105,108,116,
-    105,110,73,109,112,111,114,116,101,114,117,14,0,0,0,70,
-    114,111,122,101,110,73,109,112,111,114,116,101,114,117,21,0,
-    0,0,87,105,110,100,111,119,115,82,101,103,105,115,116,114,
-    121,70,105,110,100,101,114,117,13,0,0,0,95,76,111,97,
-    100,101,114,66,97,115,105,99,115,117,12,0,0,0,83,111,
-    117,114,99,101,76,111,97,100,101,114,117,10,0,0,0,70,
-    105,108,101,76,111,97,100,101,114,117,16,0,0,0,83,111,
-    117,114,99,101,70,105,108,101,76,111,97,100,101,114,117,20,
-    0,0,0,83,111,117,114,99,101,108,101,115,115,70,105,108,
-    101,76,111,97,100,101,114,117,18,0,0,0,69,88,84,69,
-    78,83,73,79,78,95,83,85,70,70,73,88,69,83,117,19,
-    0,0,0,69,120,116,101,110,115,105,111,110,70,105,108,101,
-    76,111,97,100,101,114,117,14,0,0,0,95,78,97,109,101,
-    115,112,97,99,101,80,97,116,104,117,15,0,0,0,78,97,
-    109,101,115,112,97,99,101,76,111,97,100,101,114,117,10,0,
-    0,0,80,97,116,104,70,105,110,100,101,114,117,10,0,0,
-    0,70,105,108,101,70,105,110,100,101,114,117,18,0,0,0,
-    95,73,109,112,111,114,116,76,111,99,107,67,111,110,116,101,
-    120,116,117,13,0,0,0,95,114,101,115,111,108,118,101,95,
-    110,97,109,101,117,12,0,0,0,95,102,105,110,100,95,109,
-    111,100,117,108,101,117,13,0,0,0,95,115,97,110,105,116,
-    121,95,99,104,101,99,107,117,8,0,0,0,95,69,82,82,
-    95,77,83,71,117,23,0,0,0,95,102,105,110,100,95,97,
-    110,100,95,108,111,97,100,95,117,110,108,111,99,107,101,100,
-    117,14,0,0,0,95,102,105,110,100,95,97,110,100,95,108,
-    111,97,100,117,11,0,0,0,95,103,99,100,95,105,109,112,
-    111,114,116,117,16,0,0,0,95,104,97,110,100,108,101,95,
-    102,114,111,109,108,105,115,116,117,17,0,0,0,95,99,97,
-    108,99,95,95,95,112,97,99,107,97,103,101,95,95,117,27,
-    0,0,0,95,103,101,116,95,115,117,112,112,111,114,116,101,
-    100,95,102,105,108,101,95,108,111,97,100,101,114,115,117,10,
-    0,0,0,95,95,105,109,112,111,114,116,95,95,117,6,0,
-    0,0,95,115,101,116,117,112,117,8,0,0,0,95,105,110,
-    115,116,97,108,108,40,0,0,0,0,40,0,0,0,0,40,
-    0,0,0,0,117,29,0,0,0,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,117,8,0,0,0,60,109,111,100,117,
-    108,101,62,8,0,0,0,115,132,0,0,0,6,21,6,3,
-    12,13,12,16,12,13,12,12,12,12,12,10,12,6,12,7,
-    15,22,12,8,15,3,12,12,6,2,6,3,22,4,19,68,
-    19,23,12,19,12,20,12,100,34,1,37,2,6,2,9,2,
-    9,1,9,2,15,27,12,23,12,21,12,8,12,13,12,11,
-    12,55,12,18,12,11,12,11,12,17,19,57,19,54,19,50,
-    19,82,22,134,19,29,25,46,25,25,6,3,19,45,19,55,
-    19,18,19,89,19,125,19,13,12,9,12,17,12,17,6,2,
-    12,50,12,13,18,24,12,34,12,15,12,11,24,32,12,74,
+    98,46,95,98,111,111,116,115,116,114,97,112,62,117,8,0,
+    0,0,60,109,111,100,117,108,101,62,8,0,0,0,115,132,
+    0,0,0,6,21,6,3,12,13,12,16,12,13,12,12,12,
+    12,12,10,12,6,12,7,15,22,12,8,15,3,12,12,6,
+    2,6,3,22,4,19,68,19,23,12,19,12,20,12,100,34,
+    1,37,2,6,2,9,2,9,1,9,2,15,27,12,23,12,
+    21,12,8,12,13,12,11,12,55,12,18,12,11,12,11,12,
+    17,19,57,19,54,19,50,19,82,22,134,19,29,25,49,25,
+    25,6,3,19,45,19,55,19,18,19,91,19,125,19,13,12,
+    9,12,17,12,17,6,2,12,50,12,13,18,24,12,34,12,
+    15,12,11,24,36,12,74,
 };
diff -r bd8afb90ebf2 Python/pyarena.c
--- a/Python/pyarena.c
+++ b/Python/pyarena.c
@@ -12,8 +12,6 @@
 
 #define DEFAULT_BLOCK_SIZE 8192
 #define ALIGNMENT               8
-#define ALIGNMENT_MASK          (ALIGNMENT - 1)
-#define ROUNDUP(x)              (((x) + ALIGNMENT_MASK) & ~ALIGNMENT_MASK)
 
 typedef struct _block {
     /* Total number of bytes owned by this block available to pass out.
@@ -85,8 +83,8 @@
     b->ab_size = size;
     b->ab_mem = (void *)(b + 1);
     b->ab_next = NULL;
-    b->ab_offset = ROUNDUP((Py_uintptr_t)(b->ab_mem)) -
-      (Py_uintptr_t)(b->ab_mem);
+    b->ab_offset = (char *)_Py_ALIGN_UP(b->ab_mem, ALIGNMENT) -
+            (char *)(b->ab_mem);
     return b;
 }
 
@@ -104,7 +102,7 @@
 {
     void *p;
     assert(b);
-    size = ROUNDUP(size);
+    size = _Py_SIZE_ROUND_UP(size, ALIGNMENT);
     if (b->ab_offset + size > b->ab_size) {
         /* If we need to allocate more memory than will fit in
            the default block, allocate a one-off block that is
diff -r bd8afb90ebf2 Python/pythonrun.c
--- a/Python/pythonrun.c
+++ b/Python/pythonrun.c
@@ -1358,16 +1358,21 @@
 {
     PyInterpreterState *interp;
     PyThreadState *tstate;
-    PyObject *loader_type, *loader;
+    PyObject *filename_obj, *loader_type, *loader;
     int result = 0;
+
+    filename_obj = PyUnicode_DecodeFSDefault(filename);
+    if (filename_obj == NULL)
+        return -1;
     /* Get current thread state and interpreter pointer */
     tstate = PyThreadState_GET();
     interp = tstate->interp;
     loader_type = PyObject_GetAttrString(interp->importlib, loader_name);
     if (loader_type == NULL) {
+        Py_DECREF(filename_obj);
         return -1;
     }
-    loader = PyObject_CallFunction(loader_type, "ss", "__main__", filename);
+    loader = PyObject_CallFunction(loader_type, "sN", "__main__", filename_obj);
     Py_DECREF(loader_type);
     if (loader == NULL) {
         return -1;
@@ -1385,25 +1390,26 @@
 {
     PyObject *m, *d, *v;
     const char *ext;
-    int set_file_name = 0, ret;
+    int set_file_name = 0, ret = -1;
     size_t len;
 
     m = PyImport_AddModule("__main__");
     if (m == NULL)
         return -1;
+    Py_INCREF(m);
     d = PyModule_GetDict(m);
     if (PyDict_GetItemString(d, "__file__") == NULL) {
         PyObject *f;
         f = PyUnicode_DecodeFSDefault(filename);
         if (f == NULL)
-            return -1;
+            goto done;
         if (PyDict_SetItemString(d, "__file__", f) < 0) {
             Py_DECREF(f);
-            return -1;
+            goto done;
         }
         if (PyDict_SetItemString(d, "__cached__", Py_None) < 0) {
             Py_DECREF(f);
-            return -1;
+            goto done;
         }
         set_file_name = 1;
         Py_DECREF(f);
@@ -1417,7 +1423,6 @@
             fclose(fp);
         if ((pyc_fp = fopen(filename, "rb")) == NULL) {
             fprintf(stderr, "python: Can't reopen .pyc file\n");
-            ret = -1;
             goto done;
         }
         /* Turn on optimization if a .pyo file is given */
@@ -1446,7 +1451,6 @@
     flush_io();
     if (v == NULL) {
         PyErr_Print();
-        ret = -1;
         goto done;
     }
     Py_DECREF(v);
@@ -1454,6 +1458,7 @@
   done:
     if (set_file_name && PyDict_DelItemString(d, "__file__"))
         PyErr_Clear();
+    Py_DECREF(m);
     return ret;
 }
 
diff -r bd8afb90ebf2 Python/structmember.c
--- a/Python/structmember.c
+++ b/Python/structmember.c
@@ -254,12 +254,8 @@
         char *string;
         Py_ssize_t len;
 
-        if (!PyUnicode_Check(v)) {
-            PyErr_BadArgument();
-            return -1;
-        }
         string = _PyUnicode_AsStringAndSize(v, &len);
-        if (len != 1) {
+        if (string == NULL || len != 1) {
             PyErr_BadArgument();
             return -1;
         }
diff -r bd8afb90ebf2 Python/symtable.c
--- a/Python/symtable.c
+++ b/Python/symtable.c
@@ -24,16 +24,18 @@
         void *key, int lineno, int col_offset)
 {
     PySTEntryObject *ste = NULL;
-    PyObject *k;
+    PyObject *k = NULL;
 
     k = PyLong_FromVoidPtr(key);
     if (k == NULL)
         goto fail;
     ste = PyObject_New(PySTEntryObject, &PySTEntry_Type);
-    if (ste == NULL)
+    if (ste == NULL) {
+        Py_DECREF(k);
         goto fail;
+    }
     ste->ste_table = st;
-    ste->ste_id = k;
+    ste->ste_id = k; /* ste owns reference to k */
 
     ste->ste_name = name;
     Py_INCREF(name);
@@ -218,17 +220,40 @@
     return NULL;
 }
 
+/* When compiling the use of C stack is probably going to be a lot
+   lighter than when executing Python code but still can overflow
+   and causing a Python crash if not checked (e.g. eval("()"*300000)).
+   Using the current recursion limit for the compiler seems too
+   restrictive (it caused at least one test to fail) so a factor is
+   used to allow deeper recursion when compiling an expression.
+
+   Using a scaling factor means this should automatically adjust when
+   the recursion limit is adjusted for small or large C stack allocations.
+*/
+#define COMPILER_STACK_FRAME_SCALE 3
+
 struct symtable *
 PySymtable_Build(mod_ty mod, const char *filename, PyFutureFeatures *future)
 {
     struct symtable *st = symtable_new();
     asdl_seq *seq;
     int i;
+    PyThreadState *tstate;
 
     if (st == NULL)
         return st;
     st->st_filename = filename;
     st->st_future = future;
+
+    /* Setup recursion depth check counters */
+    tstate = PyThreadState_GET();
+    if (!tstate) {
+        PySymtable_Free(st);
+        return NULL;
+    }
+    st->recursion_depth = tstate->recursion_depth * COMPILER_STACK_FRAME_SCALE;
+    st->recursion_limit = Py_GetRecursionLimit() * COMPILER_STACK_FRAME_SCALE;
+
     /* Make the initial symbol information gathering pass */
     if (!GET_IDENTIFIER(top) ||
         !symtable_enter_block(st, top, ModuleBlock, (void *)mod, 0, 0)) {
@@ -1011,11 +1036,17 @@
 
    VISIT_SEQ_TAIL permits the start of an ASDL sequence to be skipped, which is
    useful if the first node in the sequence requires special treatment.
+
+   VISIT_QUIT macro returns the specified value exiting from the function but
+   first adjusts current recursion counter depth.
 */
 
+#define VISIT_QUIT(ST, X) \
+    return --(ST)->recursion_depth,(X)
+
 #define VISIT(ST, TYPE, V) \
     if (!symtable_visit_ ## TYPE((ST), (V))) \
-        return 0;
+        VISIT_QUIT((ST), 0);
 
 #define VISIT_SEQ(ST, TYPE, SEQ) { \
     int i; \
@@ -1023,7 +1054,7 @@
     for (i = 0; i < asdl_seq_LEN(seq); i++) { \
         TYPE ## _ty elt = (TYPE ## _ty)asdl_seq_GET(seq, i); \
         if (!symtable_visit_ ## TYPE((ST), elt)) \
-            return 0; \
+            VISIT_QUIT((ST), 0);                 \
     } \
 }
 
@@ -1033,7 +1064,7 @@
     for (i = (START); i < asdl_seq_LEN(seq); i++) { \
         TYPE ## _ty elt = (TYPE ## _ty)asdl_seq_GET(seq, i); \
         if (!symtable_visit_ ## TYPE((ST), elt)) \
-            return 0; \
+            VISIT_QUIT((ST), 0);                 \
     } \
 }
 
@@ -1044,7 +1075,7 @@
         expr_ty elt = (expr_ty)asdl_seq_GET(seq, i); \
         if (!elt) continue; /* can be NULL */ \
         if (!symtable_visit_expr((ST), elt)) \
-            return 0; \
+            VISIT_QUIT((ST), 0);             \
     } \
 }
 
@@ -1069,32 +1100,37 @@
 static int
 symtable_visit_stmt(struct symtable *st, stmt_ty s)
 {
+    if (++st->recursion_depth > st->recursion_limit) {
+        PyErr_SetString(PyExc_RuntimeError,
+                        "maximum recursion depth exceeded during compilation");
+        VISIT_QUIT(st, 0);
+    }
     switch (s->kind) {
     case FunctionDef_kind:
         if (!symtable_add_def(st, s->v.FunctionDef.name, DEF_LOCAL))
-            return 0;
+            VISIT_QUIT(st, 0);
         if (s->v.FunctionDef.args->defaults)
             VISIT_SEQ(st, expr, s->v.FunctionDef.args->defaults);
         if (s->v.FunctionDef.args->kw_defaults)
             VISIT_KWONLYDEFAULTS(st,
                                s->v.FunctionDef.args->kw_defaults);
         if (!symtable_visit_annotations(st, s))
-            return 0;
+            VISIT_QUIT(st, 0);
         if (s->v.FunctionDef.decorator_list)
             VISIT_SEQ(st, expr, s->v.FunctionDef.decorator_list);
         if (!symtable_enter_block(st, s->v.FunctionDef.name,
                                   FunctionBlock, (void *)s, s->lineno,
                                   s->col_offset))
-            return 0;
+            VISIT_QUIT(st, 0);
         VISIT(st, arguments, s->v.FunctionDef.args);
         VISIT_SEQ(st, stmt, s->v.FunctionDef.body);
         if (!symtable_exit_block(st, s))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     case ClassDef_kind: {
         PyObject *tmp;
         if (!symtable_add_def(st, s->v.ClassDef.name, DEF_LOCAL))
-            return 0;
+            VISIT_QUIT(st, 0);
         VISIT_SEQ(st, expr, s->v.ClassDef.bases);
         VISIT_SEQ(st, keyword, s->v.ClassDef.keywords);
         if (s->v.ClassDef.starargs)
@@ -1105,20 +1141,20 @@
             VISIT_SEQ(st, expr, s->v.ClassDef.decorator_list);
         if (!symtable_enter_block(st, s->v.ClassDef.name, ClassBlock,
                                   (void *)s, s->lineno, s->col_offset))
-            return 0;
+            VISIT_QUIT(st, 0);
         if (!GET_IDENTIFIER(__class__) ||
             !symtable_add_def(st, __class__, DEF_LOCAL) ||
             !GET_IDENTIFIER(__locals__) ||
             !symtable_add_def(st, __locals__, DEF_PARAM)) {
             symtable_exit_block(st, s);
-            return 0;
+            VISIT_QUIT(st, 0);
         }
         tmp = st->st_private;
         st->st_private = s->v.ClassDef.name;
         VISIT_SEQ(st, stmt, s->v.ClassDef.body);
         st->st_private = tmp;
         if (!symtable_exit_block(st, s))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     }
     case Return_kind:
@@ -1200,12 +1236,14 @@
         asdl_seq *seq = s->v.Global.names;
         for (i = 0; i < asdl_seq_LEN(seq); i++) {
             identifier name = (identifier)asdl_seq_GET(seq, i);
-            char *c_name = _PyUnicode_AsString(name);
             long cur = symtable_lookup(st, name);
             if (cur < 0)
-                return 0;
+                VISIT_QUIT(st, 0);
             if (cur & (DEF_LOCAL | USE)) {
                 char buf[256];
+                char *c_name = _PyUnicode_AsString(name);
+                if (!c_name)
+                    return 0;
                 if (cur & DEF_LOCAL)
                     PyOS_snprintf(buf, sizeof(buf),
                                   GLOBAL_AFTER_ASSIGN,
@@ -1215,10 +1253,10 @@
                                   GLOBAL_AFTER_USE,
                                   c_name);
                 if (!symtable_warn(st, buf, s->lineno))
-                    return 0;
+                    VISIT_QUIT(st, 0);
             }
             if (!symtable_add_def(st, name, DEF_GLOBAL))
-                return 0;
+                VISIT_QUIT(st, 0);
         }
         break;
     }
@@ -1227,12 +1265,14 @@
         asdl_seq *seq = s->v.Nonlocal.names;
         for (i = 0; i < asdl_seq_LEN(seq); i++) {
             identifier name = (identifier)asdl_seq_GET(seq, i);
-            char *c_name = _PyUnicode_AsString(name);
             long cur = symtable_lookup(st, name);
             if (cur < 0)
-                return 0;
+                VISIT_QUIT(st, 0);
             if (cur & (DEF_LOCAL | USE)) {
                 char buf[256];
+                char *c_name = _PyUnicode_AsString(name);
+                if (!c_name)
+                    return 0;
                 if (cur & DEF_LOCAL)
                     PyOS_snprintf(buf, sizeof(buf),
                                   NONLOCAL_AFTER_ASSIGN,
@@ -1242,10 +1282,10 @@
                                   NONLOCAL_AFTER_USE,
                                   c_name);
                 if (!symtable_warn(st, buf, s->lineno))
-                    return 0;
+                    VISIT_QUIT(st, 0);
             }
             if (!symtable_add_def(st, name, DEF_NONLOCAL))
-                return 0;
+                VISIT_QUIT(st, 0);
         }
         break;
     }
@@ -1262,12 +1302,17 @@
         VISIT_SEQ(st, stmt, s->v.With.body);
         break;
     }
-    return 1;
+    VISIT_QUIT(st, 1);
 }
 
 static int
 symtable_visit_expr(struct symtable *st, expr_ty e)
 {
+    if (++st->recursion_depth > st->recursion_limit) {
+        PyErr_SetString(PyExc_RuntimeError,
+                        "maximum recursion depth exceeded during compilation");
+        VISIT_QUIT(st, 0);
+    }
     switch (e->kind) {
     case BoolOp_kind:
         VISIT_SEQ(st, expr, e->v.BoolOp.values);
@@ -1281,7 +1326,7 @@
         break;
     case Lambda_kind: {
         if (!GET_IDENTIFIER(lambda))
-            return 0;
+            VISIT_QUIT(st, 0);
         if (e->v.Lambda.args->defaults)
             VISIT_SEQ(st, expr, e->v.Lambda.args->defaults);
         if (e->v.Lambda.args->kw_defaults)
@@ -1290,11 +1335,11 @@
         if (!symtable_enter_block(st, lambda,
                                   FunctionBlock, (void *)e, e->lineno,
                                   e->col_offset))
-            return 0;
+            VISIT_QUIT(st, 0);
         VISIT(st, arguments, e->v.Lambda.args);
         VISIT(st, expr, e->v.Lambda.body);
         if (!symtable_exit_block(st, (void *)e))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     }
     case IfExp_kind:
@@ -1311,29 +1356,29 @@
         break;
     case GeneratorExp_kind:
         if (!symtable_visit_genexp(st, e))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     case ListComp_kind:
         if (!symtable_visit_listcomp(st, e))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     case SetComp_kind:
         if (!symtable_visit_setcomp(st, e))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     case DictComp_kind:
         if (!symtable_visit_dictcomp(st, e))
-            return 0;
+            VISIT_QUIT(st, 0);
         break;
     case Yield_kind:
-    case YieldFrom_kind: {
-        expr_ty value;
-        value = (e->kind == YieldFrom_kind) ? e->v.YieldFrom.value : e->v.Yield.value;
-        if (value)
-            VISIT(st, expr, value);
+        if (e->v.Yield.value)
+            VISIT(st, expr, e->v.Yield.value);
         st->st_cur->ste_generator = 1;
         break;
-    }
+    case YieldFrom_kind:
+        VISIT(st, expr, e->v.YieldFrom.value);
+        st->st_cur->ste_generator = 1;
+        break;
     case Compare_kind:
         VISIT(st, expr, e->v.Compare.left);
         VISIT_SEQ(st, expr, e->v.Compare.comparators);
@@ -1367,14 +1412,14 @@
     case Name_kind:
         if (!symtable_add_def(st, e->v.Name.id,
                               e->v.Name.ctx == Load ? USE : DEF_LOCAL))
-            return 0;
+            VISIT_QUIT(st, 0);
         /* Special-case super: it counts as a use of __class__ */
         if (e->v.Name.ctx == Load &&
             st->st_cur->ste_type == FunctionBlock &&
             !PyUnicode_CompareWithASCIIString(e->v.Name.id, "super")) {
             if (!GET_IDENTIFIER(__class__) ||
                 !symtable_add_def(st, __class__, USE))
-                return 0;
+                VISIT_QUIT(st, 0);
         }
         break;
     /* child nodes of List and Tuple will have expr_context set */
@@ -1385,7 +1430,7 @@
         VISIT_SEQ(st, expr, e->v.Tuple.elts);
         break;
     }
-    return 1;
+    VISIT_QUIT(st, 1);
 }
 
 static int
diff -r bd8afb90ebf2 Python/thread_pthread.h
--- a/Python/thread_pthread.h
+++ b/Python/thread_pthread.h
@@ -303,6 +303,7 @@
     sem_t *thelock = (sem_t *)lock;
     int status, error = 0;
 
+    (void) error; /* silence unused-but-set-variable warning */
     dprintf(("PyThread_free_lock(%p) called\n", lock));
 
     if (!thelock)
@@ -335,6 +336,7 @@
     int status, error = 0;
     struct timespec ts;
 
+    (void) error; /* silence unused-but-set-variable warning */
     dprintf(("PyThread_acquire_lock_timed(%p, %lld, %d) called\n",
              lock, microseconds, intr_flag));
 
@@ -385,6 +387,7 @@
     sem_t *thelock = (sem_t *)lock;
     int status, error = 0;
 
+    (void) error; /* silence unused-but-set-variable warning */
     dprintf(("PyThread_release_lock(%p) called\n", lock));
 
     status = sem_post(thelock);
diff -r bd8afb90ebf2 Tools/gdb/libpython.py
--- a/Tools/gdb/libpython.py
+++ b/Tools/gdb/libpython.py
@@ -1332,7 +1332,7 @@
   /usr/lib/debug/usr/lib/libpython2.6.so.1.0.debug-gdb.py
 """
 def register (obj):
-    if obj == None:
+    if obj is None:
         obj = gdb
 
     # Wire up the pretty-printer
diff -r bd8afb90ebf2 Tools/i18n/msgfmt.py
--- a/Tools/i18n/msgfmt.py
+++ b/Tools/i18n/msgfmt.py
@@ -24,8 +24,9 @@
         Display version information and exit.
 """
 
+import os
 import sys
-import os
+import ast
 import getopt
 import struct
 import array
@@ -180,8 +181,7 @@
         l = l.strip()
         if not l:
             continue
-        # XXX: Does this always follow Python escape semantics?
-        l = eval(l)
+        l = ast.literal_eval(l)
         if section == ID:
             msgid += l.encode(encoding)
         elif section == STR:
diff -r bd8afb90ebf2 Tools/msi/msi.py
--- a/Tools/msi/msi.py
+++ b/Tools/msi/msi.py
@@ -415,7 +415,7 @@
               ("VerdanaRed9", "Verdana", 9, 255, 0),
              ])
 
-    compileargs = r'-Wi "[TARGETDIR]Lib\compileall.py" -f -x "bad_coding|badsyntax|site-packages|py2_|lib2to3\\tests" "[TARGETDIR]Lib"'
+    compileargs = r'-Wi "[TARGETDIR]Lib\compileall.py" -f -x "bad_coding|badsyntax|site-packages|py2_|lib2to3\\tests|venv\\scripts" "[TARGETDIR]Lib"'
     lib2to3args = r'-c "import lib2to3.pygram, lib2to3.patcomp;lib2to3.patcomp.PatternCompiler()"'
     # See "CustomAction Table"
     add_data(db, "CustomAction", [
@@ -977,6 +977,8 @@
     launchersrc = PCBUILD
     if launchersrc.lower() == 'pcbuild\\x64-pgo':
         launchersrc = 'PCBuild\\win32-pgo'
+    if launchersrc.lower() == 'pcbuild\\amd64':
+        launchersrc = 'PCBuild'
     launcher = os.path.join(srcdir, launchersrc, "py.exe")
     launcherdir.start_component("launcher", flags = 8+256, keyfile="py.exe")
     launcherdir.add_file(launcher,
diff -r bd8afb90ebf2 Tools/scripts/find_recursionlimit.py
--- a/Tools/scripts/find_recursionlimit.py
+++ b/Tools/scripts/find_recursionlimit.py
@@ -89,6 +89,12 @@
         _pickle.Pickler(io.BytesIO(), protocol=-1).dump(l)
         _cache[n] = l
 
+def test_compiler_recursion():
+    # The compiler uses a scaling factor to support additional levels
+    # of recursion. This is a sanity check of that scaling to ensure
+    # it still raises RuntimeError even at higher recursion limits
+    compile("()" * (10 * sys.getrecursionlimit()), "<single>", "single")
+
 def check_limit(n, test_func_name):
     sys.setrecursionlimit(n)
     if test_func_name.startswith("test_"):
@@ -117,5 +123,6 @@
         check_limit(limit, "test_getattr")
         check_limit(limit, "test_getitem")
         check_limit(limit, "test_cpickle")
+        check_limit(limit, "test_compiler_recursion")
         print("Limit of %d is fine" % limit)
         limit = limit + 100
diff -r bd8afb90ebf2 Tools/scripts/serve.py
--- a/Tools/scripts/serve.py
+++ b/Tools/scripts/serve.py
@@ -2,7 +2,7 @@
 '''
 Small wsgiref based web server. Takes a path to serve from and an
 optional port number (defaults to 8000), then tries to serve files.
-Mime types are guessed from the file names, 404 errors are thrown
+Mime types are guessed from the file names, 404 errors are raised
 if the file is not found. Used for the make serve target in Doc.
 '''
 import sys
diff -r bd8afb90ebf2 Tools/scripts/texi2html.py
--- a/Tools/scripts/texi2html.py
+++ b/Tools/scripts/texi2html.py
@@ -319,7 +319,7 @@
 
     # Start saving text in a buffer instead of writing it to a file
     def startsaving(self):
-        if self.savetext != None:
+        if self.savetext is not None:
             self.savestack.append(self.savetext)
             # print '*** Recursively saving text, expect trouble'
         self.savetext = ''
@@ -341,7 +341,7 @@
         except:
             print(args)
             raise TypeError
-        if self.savetext != None:
+        if self.savetext is not None:
             self.savetext = self.savetext + text
         elif self.nodefp:
             self.nodefp.write(text)
@@ -350,7 +350,7 @@
 
     # Complete the current node -- write footnotes and close file
     def endnode(self):
-        if self.savetext != None:
+        if self.savetext is not None:
             print('*** Still saving text at end of node')
             dummy = self.collectsavings()
         if self.footnotes:
@@ -804,7 +804,7 @@
     def close_i(self): self.write('</I>')
 
     def open_footnote(self):
-        # if self.savetext <> None:
+        # if self.savetext is not None:
         #       print '*** Recursive footnote -- expect weirdness'
         id = len(self.footnotes) + 1
         self.write(self.FN_SOURCE_PATTERN % {'id': repr(id)})
@@ -1442,7 +1442,7 @@
             else:
                 # some other character, e.g. '-'
                 args = self.itemarg + ' ' + args
-        if self.itemnumber != None:
+        if self.itemnumber is not None:
             args = self.itemnumber + '. ' + args
             self.itemnumber = increment(self.itemnumber)
         if self.stack and self.stack[-1] == 'table':
diff -r bd8afb90ebf2 Tools/unicode/comparecodecs.py
--- a/Tools/unicode/comparecodecs.py
+++ b/Tools/unicode/comparecodecs.py
@@ -30,7 +30,7 @@
             mismatch += 1
     # Check decoding
     for i in range(256):
-        c = chr(i)
+        c = bytes([i])
         try:
             u1 = c.decode(encoding1)
         except UnicodeError:
diff -r bd8afb90ebf2 configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -9,6 +9,22 @@
 
 AC_INIT(python, PYTHON_VERSION, http://bugs.python.org/)
 
+AC_SUBST(BASECPPFLAGS)
+if test "$abs_srcdir" != "$abs_builddir"; then
+    # If we're building out-of-tree, we need to make sure the following
+    # resources get picked up before their $srcdir counterparts.
+    #   Objects/ -> typeslots.inc
+    #   Include/ -> Python-ast.h, graminit.h
+    #   Python/  -> importlib.h
+    # (A side effect of this is that these resources will automatically be
+    #  regenerated when building out-of-tree, regardless of whether or not
+    #  the $srcdir counterpart is up-to-date.  This is an acceptable trade
+    #  off.)
+    BASECPPFLAGS="-IObjects -IInclude -IPython"
+else
+    BASECPPFLAGS=""
+fi
+
 AC_SUBST(HGVERSION)
 AC_SUBST(HGTAG)
 AC_SUBST(HGBRANCH)
@@ -51,6 +67,8 @@
         AC_MSG_RESULT($interp)
 	PYTHON_FOR_BUILD="_PYTHON_PROJECT_BASE=$srcdir"' _PYTHON_HOST_PLATFORM=$(_PYTHON_HOST_PLATFORM) PYTHONPATH=$(srcdir)/Lib:$(srcdir)/Lib/plat-$(MACHDEP) '$interp
     fi
+elif test "$cross_compiling" = maybe; then
+    AC_MSG_ERROR([Cross compiling required --host=HOST-TUPLE and --build=ARCH])
 else
     PYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'
 fi
@@ -984,12 +1002,12 @@
 fi
 AC_SUBST(READELF)
 
-AC_SUBST(DISABLE_ASDLGEN)
-DISABLE_ASDLGEN=""
-AC_CHECK_PROG(HAS_PYTHON, python, found, not-found)
-if test $HAS_HG != found -o $HAS_PYTHON != found
-then
-    DISABLE_ASDLGEN="@echo hg: $HAS_HG, python: $HAS_PYTHON! cannot run \$(srcdir)/Parser/asdl_c.py #"
+AC_SUBST(ASDLGEN)
+AC_CHECK_PROGS(PYTHON, python$PACKAGE_VERSION python3 python, not-found)
+if test "$PYTHON" = not-found; then
+    ASDLGEN="@echo python: $PYTHON! cannot run \$(srcdir)/Parser/asdl_c.py #"
+else
+    ASDLGEN="$PYTHON"
 fi
 
 
@@ -1329,6 +1347,7 @@
 AC_MSG_CHECKING(whether pthreads are available without options)
 AC_CACHE_VAL(ac_cv_pthread_is_default,
 [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
 #include <pthread.h>
 
 void* routine(void* p){return NULL;}
@@ -1363,6 +1382,7 @@
 [ac_save_cc="$CC"
 CC="$CC -Kpthread"
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
 #include <pthread.h>
 
 void* routine(void* p){return NULL;}
@@ -1391,6 +1411,7 @@
 [ac_save_cc="$CC"
 CC="$CC -Kthread"
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
 #include <pthread.h>
 
 void* routine(void* p){return NULL;}
@@ -1419,6 +1440,7 @@
 [ac_save_cc="$CC"
 CC="$CC -pthread"
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
 #include <pthread.h>
 
 void* routine(void* p){return NULL;}
@@ -1618,10 +1640,30 @@
 AC_DEFINE_UNQUOTED([RETSIGTYPE],[void],[assume C89 semantics that RETSIGTYPE is always void])
 AC_TYPE_SIZE_T
 AC_TYPE_UID_T
+
+# There are two separate checks for each of the exact-width integer types we
+# need.  First we check whether the type is available using the usual
+# AC_CHECK_TYPE macro with the default includes (which includes <inttypes.h>
+# and <stdint.h> where available).  We then also use the special type checks of
+# the form AC_TYPE_UINT32_T, which in the case that uint32_t is not available
+# directly, #define's uint32_t to be a suitable type.
+
+AC_CHECK_TYPE(uint32_t,
+  AC_DEFINE(HAVE_UINT32_T, 1, [Define if your compiler provides uint32_t.]),,)
 AC_TYPE_UINT32_T
+
+AC_CHECK_TYPE(uint64_t,
+  AC_DEFINE(HAVE_UINT64_T, 1, [Define if your compiler provides uint64_t.]),,)
 AC_TYPE_UINT64_T
+
+AC_CHECK_TYPE(int32_t,
+  AC_DEFINE(HAVE_INT32_T, 1, [Define if your compiler provides int32_t.]),,)
 AC_TYPE_INT32_T
+
+AC_CHECK_TYPE(int64_t,
+  AC_DEFINE(HAVE_INT64_T, 1, [Define if your compiler provides int64_t.]),,)
 AC_TYPE_INT64_T
+
 AC_CHECK_TYPE(ssize_t,
   AC_DEFINE(HAVE_SSIZE_T, 1, [Define if your compiler provides ssize_t]),,)
 AC_CHECK_TYPE(__uint128_t,
@@ -2340,7 +2382,9 @@
     _libs=$LIBS
     LIBS="$LIBS -lpthread"
     AC_MSG_CHECKING([for pthread_create in -lpthread])
-    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+#include <stdio.h>
+#include <pthread.h>
 
 void * start_routine (void *arg) { exit (0); }]], [[
 pthread_create (NULL, NULL, start_routine, NULL)]])],[
@@ -2406,7 +2450,9 @@
 
       AC_MSG_CHECKING(if PTHREAD_SCOPE_SYSTEM is supported)
       AC_CACHE_VAL(ac_cv_pthread_system_supported,
-      [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <pthread.h>
+      [AC_RUN_IFELSE([AC_LANG_SOURCE([[
+      #include <stdio.h>
+      #include <pthread.h>
       void *foo(void *parm) {
         return NULL;
       }
@@ -3095,6 +3141,7 @@
   AC_MSG_CHECKING(getaddrinfo bug)
   AC_CACHE_VAL(ac_cv_buggy_getaddrinfo,
   AC_RUN_IFELSE([AC_LANG_SOURCE([[[
+#include <stdio.h>
 #include <sys/types.h>
 #include <netdb.h>
 #include <string.h>
@@ -4423,6 +4470,7 @@
 AC_MSG_CHECKING(for broken mbstowcs)
 AC_CACHE_VAL(ac_cv_broken_mbstowcs,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <stdio.h>
 #include<stdlib.h>
 int main() {
     size_t len = -1;
diff -r bd8afb90ebf2 pyconfig.h.in
--- a/pyconfig.h.in
+++ b/pyconfig.h.in
@@ -426,6 +426,12 @@
 /* Define to 1 if you have the `initgroups' function. */
 #undef HAVE_INITGROUPS
 
+/* Define if your compiler provides int32_t. */
+#undef HAVE_INT32_T
+
+/* Define if your compiler provides int64_t. */
+#undef HAVE_INT64_T
+
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
@@ -1047,6 +1053,12 @@
 /* Define this if you have tcl and TCL_UTF_MAX==6 */
 #undef HAVE_UCS4_TCL
 
+/* Define if your compiler provides uint32_t. */
+#undef HAVE_UINT32_T
+
+/* Define if your compiler provides uint64_t. */
+#undef HAVE_UINT64_T
+
 /* Define to 1 if the system has the type `uintptr_t'. */
 #undef HAVE_UINTPTR_T
 
diff -r bd8afb90ebf2 setup.py
--- a/setup.py
+++ b/setup.py
@@ -33,10 +33,6 @@
 # This global variable is used to hold the list of modules to be disabled.
 disabled_module_list = []
 
-# File which contains the directory for shared mods (for sys.path fixup
-# when running from the build dir, see Modules/getpath.c)
-_BUILDDIR_COOKIE = "pybuilddir.txt"
-
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (after any relative
     directories) if:
@@ -252,16 +248,6 @@
             args['compiler_so'] = compiler + ' ' + ccshared + ' ' + cflags
         self.compiler.set_executables(**args)
 
-        # Not only do we write the builddir cookie, but we manually install
-        # the shared modules directory if it isn't already in sys.path.
-        # Otherwise trying to import the extensions after building them
-        # will fail.
-        with open(_BUILDDIR_COOKIE, "wb") as f:
-            f.write(self.build_lib.encode('utf-8', 'surrogateescape'))
-        abs_build_lib = os.path.join(os.getcwd(), self.build_lib)
-        if abs_build_lib not in sys.path:
-            sys.path.append(abs_build_lib)
-
         build_ext.build_extensions(self)
 
         longest = max([len(e.name) for e in self.extensions])
@@ -520,6 +506,9 @@
                 '/lib', '/usr/lib',
                 ]
             inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        else:
+            lib_dirs = self.compiler.library_dirs[:]
+            inc_dirs = self.compiler.include_dirs[:]
         exts = []
         missing = []
 
@@ -1788,6 +1777,8 @@
                 mkpath(ffi_builddir)
                 config_args = [arg for arg in sysconfig.get_config_var("CONFIG_ARGS").split()
                                if (('--host=' in arg) or ('--build=' in arg))]
+                if not self.verbose:
+                    config_args.append("-q")
 
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
@@ -1983,6 +1974,7 @@
                 # solaris: problems with register allocation.
                 # icc >= 11.0 works as well.
                 define_macros = config['ppro']
+                extra_compile_args.append('-Wno-unknown-pragmas')
             else:
                 define_macros = config['ansi32']
         else:
