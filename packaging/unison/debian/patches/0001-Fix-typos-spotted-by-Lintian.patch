From: Stephane Glondu <steph@glondu.net>
Date: Sun, 8 Jan 2012 14:12:24 +0100
Subject: Fix typos spotted by Lintian

---
 INSTALL.win32-msvc |    2 +-
 copy.mli           |    2 +-
 globals.ml         |    2 +-
 osx.ml             |   24 ++++++++++++------------
 transfer.ml        |    2 +-
 transfer.mli       |    4 ++--
 transport.ml       |    2 +-
 uicommon.ml        |    4 ++--
 uicommon.mli       |    2 +-
 9 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/INSTALL.win32-msvc b/INSTALL.win32-msvc
index a425a0f..6924210 100644
--- a/INSTALL.win32-msvc
+++ b/INSTALL.win32-msvc
@@ -475,7 +475,7 @@ directories and files or processing names supplied by the user:
 
 Appendix D - Windows icons
 
-  Here are some general informations on how to make your Windows
+  Here are some general information on how to make your Windows
 program have a nice icon.
 
 * What we mean by icon is a set of bitmaps that are displayed by
diff --git a/copy.mli b/copy.mli
index 9147794..287f26d 100644
--- a/copy.mli
+++ b/copy.mli
@@ -12,7 +12,7 @@ val file :
  -> Os.fullfingerprint  (* fingerprint of file *)
  -> Fileinfo.stamp option
                         (* source file stamp, if available *)
- -> Osx.ressStamp       (* ressource info of file *)
+ -> Osx.ressStamp       (* resource info of file *)
  -> Uutil.File.t        (* file's index in UI (for progress bars) *)
  -> Fileinfo.t Lwt.t    (* information regarding the transferred file *)
 
diff --git a/globals.ml b/globals.ml
index 02e1a87..fcb810f 100644
--- a/globals.ml
+++ b/globals.ml
@@ -302,5 +302,5 @@ let fatFilesystem =
       do not attempt to synchronize symbolic links ({\\tt links = false}); \
       ignore inode number changes when detecting updates \
       ({\\tt ignoreinodenumbers = true}).  \
-      Any of these change can be overridden by explicitely setting \
+      Any of these change can be overridden by explicitly setting \
       the corresponding preference in the profile.")
diff --git a/osx.ml b/osx.ml
index dc58b64..13e6257 100644
--- a/osx.ml
+++ b/osx.ml
@@ -58,15 +58,15 @@ let init b =
 let doubleMagic = "\000\005\022\007"
 let doubleVersion = "\000\002\000\000"
 let doubleFiller = String.make 16 '\000'
-let ressource_fork_empty_tag = "This resource fork intentionally left blank   "
+let resource_fork_empty_tag = "This resource fork intentionally left blank   "
 let finfoLength = 32L
 let emptyFinderInfo () = String.make 32 '\000'
-let empty_ressource_fork =
+let empty_resource_fork =
   "\000\000\001\000" ^
   "\000\000\001\000" ^
   "\000\000\000\000" ^
   "\000\000\000\030" ^
-  ressource_fork_empty_tag ^
+  resource_fork_empty_tag ^
   String.make (66+128) '\000' ^
   "\000\000\001\000" ^
   "\000\000\001\000" ^
@@ -239,7 +239,7 @@ let getFileInfos dataFspath dataPath typ =
   if not (Prefs.read rsrc) then defaultInfos typ else
   match typ with
     (`FILE | `DIRECTORY) as typ ->
-      Util.convertUnixErrorsToTransient "getting file informations" (fun () ->
+      Util.convertUnixErrorsToTransient "getting file information" (fun () ->
         try
           let (fInfo, rsrcLength) =
             getFileInfosInternal
@@ -260,15 +260,15 @@ let getFileInfos dataFspath dataPath typ =
             let (rsrcOffset, rsrcLength) =
               try
                 let (offset, len) = Safelist.assoc `RSRC entries in
-                (* We need to check that the ressource fork is not a
+                (* We need to check that the resource fork is not a
                    dummy one included for compatibility reasons *)
                 if len = 286L &&
                    protect (fun () ->
                      LargeFile.seek_in inch (Int64.add offset 16L);
-                     let len = String.length ressource_fork_empty_tag in
+                     let len = String.length resource_fork_empty_tag in
                      let buf = String.create len in
                      really_input inch buf 0 len;
-                     buf = ressource_fork_empty_tag)
+                     buf = resource_fork_empty_tag)
                      (fun () -> close_in_noerr inch)
                 then
                   (0L, 0L)
@@ -279,7 +279,7 @@ let getFileInfos dataFspath dataPath typ =
             in
             debug (fun () ->
               Util.msg
-                "AppleDouble for file %s / %s: ressource fork length: %d\n"
+                "AppleDouble for file %s / %s: resource fork length: %d\n"
                 (Fspath.toDebugString dataFspath) (Path.toString dataPath)
                 (Int64.to_int rsrcLength));
             let finfo =
@@ -339,7 +339,7 @@ let insertInfo fullInfo info =
 
 let setFileInfos dataFspath dataPath finfo =
   assert (finfo <> "");
-  Util.convertUnixErrorsToTransient "setting file informations" (fun () ->
+  Util.convertUnixErrorsToTransient "setting file information" (fun () ->
     try
       let p = Fspath.toSysPath (Fspath.concat dataFspath dataPath) in
       let (fullFinfo, _) = getFileInfosInternal p false in
@@ -391,7 +391,7 @@ let setFileInfos dataFspath dataPath finfo =
           in
           (* Apparently, for compatibility with various old versions
              of Mac OS X that did not follow the AppleDouble specification,
-             we have to include a dummy ressource fork...
+             we have to include a dummy resource fork...
              We also put an empty extended attribute section at the
              end of the finder info section, mimicking the Mac OS X
              kernel behavior.  *)
@@ -409,7 +409,7 @@ let setFileInfos dataFspath dataPath finfo =
             output_string outch (insertInfo (emptyFinderInfo ()) finfo);
             output_string outch (empty_attribute_chunk ());
                                                     (* extended attributes *)
-            output_string outch empty_ressource_fork;
+            output_string outch empty_resource_fork;
             close_out outch)
             (fun () -> close_out_noerr outch)
         end
@@ -458,7 +458,7 @@ let ressFingerprint fspath path info =
       Fingerprint.file fspath (ressPath path)
   | AppleDoubleRess (_, _, _, len, (path, offset)) ->
       debug (fun () ->
-        Util.msg "ressource fork fingerprint: path %s, offset %d, len %d"
+        Util.msg "resource fork fingerprint: path %s, offset %d, len %d"
         (Fspath.toString path)
         (Int64.to_int offset) (Uutil.Filesize.toInt len));
       Fingerprint.subfile path offset len
diff --git a/transfer.ml b/transfer.ml
index ed42ef9..858d1e4 100644
--- a/transfer.ml
+++ b/transfer.ml
@@ -103,7 +103,7 @@ let queueSizeFS = Uutil.Filesize.ofInt queueSize
 type tokenQueue =
   { mutable data : Bytearray.t;  (* the queued tokens *)
     mutable previous : [`Str of int | `Block of int | `None];
-                                 (* some informations about the
+                                 (* some information about the
                                     previous token *)
     mutable pos : int;           (* head of the queue *)
     mutable prog : int;          (* the size of the data they represent *)
diff --git a/transfer.mli b/transfer.mli
index d58df07..429082a 100644
--- a/transfer.mli
+++ b/transfer.mli
@@ -80,7 +80,7 @@ module Rsync :
     (* Expected size of the [rsync_block_info] datastructure (in KiB). *)
     val memoryFootprint : Uutil.Filesize.t -> Uutil.Filesize.t -> int
 
-    (* Compute block informations from the old file *)
+    (* Compute block information from the old file *)
     val rsyncPreprocess :
 	   in_channel            (* old file descriptor *)
         -> Uutil.Filesize.t      (* source file length *)
@@ -98,7 +98,7 @@ module Rsync :
 
     (*** SOURCE HOST ***)
 
-    (* Using block informations, parse the new file and send transfer
+    (* Using block information, parse the new file and send transfer
        instructions accordingly *)
     val rsyncCompress :
 	   rsync_block_info
diff --git a/transport.ml b/transport.ml
index 55ea3cc..9e0a316 100644
--- a/transport.ml
+++ b/transport.ml
@@ -80,7 +80,7 @@ let logLwtNumbered (lwtDescription: string) (lwtShortDescription: string)
 let doAction fromRoot fromPath fromContents toRoot toPath toContents id =
   (* When streaming, we can transfer many file simultaneously:
      as the contents of only one file is transferred in one direction
-     at any time, little ressource is consumed this way. *)
+     at any time, little resource is consumed this way. *)
   let limit =
     let n = Prefs.read maxthreads in
     if n > 0 then n else
diff --git a/uicommon.ml b/uicommon.ml
index ae81225..6234dd2 100644
--- a/uicommon.ml
+++ b/uicommon.ml
@@ -120,9 +120,9 @@ let retry =
 
 let confirmmerge =
   Prefs.createBool "confirmmerge" false
-    "!ask for confirmation before commiting results of a merge"
+    "!ask for confirmation before committing results of a merge"
     ("Setting this preference causes both the text and graphical interfaces"
-     ^ " to ask the user if the results of a merge command may be commited "
+     ^ " to ask the user if the results of a merge command may be committed "
      ^ " to the replica or not. Since the merge command works on temporary files,"
      ^ " the user can then cancel all the effects of applying the merge if it"
      ^ " turns out that the result is not satisfactory.  In "
diff --git a/uicommon.mli b/uicommon.mli
index 2a6ee86..64c681a 100644
--- a/uicommon.mli
+++ b/uicommon.mli
@@ -37,7 +37,7 @@ val repeat : string Prefs.t
 (* User preference: Try failing paths N times *)
 val retry : int Prefs.t
 
-(* User preference: confirmation before commiting merge results *)
+(* User preference: confirmation before committing merge results *)
 val confirmmerge : bool Prefs.t
 
 (* Format the information about current contents of a path in one replica (the second argument
-- 
