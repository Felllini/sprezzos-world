Author: Jamie Strandboge <jamie@canonical.com>
Description: Adjust apparmor(5) to describe policy load on Ubuntu
Bug-Ubuntu: https://launchpad.net/bugs/974089
Forward: no (Ubuntu specific)

Index: apparmor-ubuntu-trunk/parser/apparmor.pod
===================================================================
--- apparmor-ubuntu-trunk.orig/parser/apparmor.pod	2010-12-20 14:29:10.000000000 -0600
+++ apparmor-ubuntu-trunk/parser/apparmor.pod	2012-04-05 10:19:29.000000000 -0500
@@ -3,7 +3,7 @@
 #                  2008, 2009
 #    NOVELL (All rights reserved)
 #
-#    Copyright (c) 2010
+#    Copyright (c) 2010, 2011, 2012
 #    Canonical Ltd. (All rights reserved)
 #
 #    This program is free software; you can redistribute it and/or
@@ -16,7 +16,7 @@
 #    GNU General Public License for more details.
 #
 #    You should have received a copy of the GNU General Public License
-#    along with this program; if not, contact Novell, Inc.
+#    along with this program; if not, contact Canonical Ltd.
 # ----------------------------------------------------------------------
 
 
@@ -34,7 +34,8 @@
 
 AppArmor confinement is provided via I<profiles> loaded into the kernel
 via apparmor_parser(8), typically through the F</etc/init.d/apparmor>
-SysV initscript, which is used like this:
+SysV initscript (on Ubuntu, also see UBUNTU POLICY LOAD, below), which is used
+like this:
 
 	# /etc/init.d/apparmor start
 	# /etc/init.d/apparmor stop
@@ -94,6 +95,41 @@
 
 A confined process can not call mknod(2) to create character or block devices.
 
+=head1 UBUNTU POLICY LOAD
+
+Ubuntu systems use Upstart instead of a traditional SysV init system. Because
+Upstart is an event-driven init system and understanding that policy must be
+loaded before execution, Ubuntu loads policy in two stages: first via upstart
+jobs for binaries that are started in early boot, and then via a SysV
+initscript that starts in S37 for all remaining policy. When developing
+policy it is important to know how your application is started and if policy
+load should be handled specially.
+
+In general, nothing extra has to be done for applications without an initscript
+or with an initscript that starts after AppArmor's second stage initscript.
+
+If the confined application has an Upstart job, adjust the job to call
+F</lib/init/apparmor-profile-load> with the filename of the policy file
+(relative to F</etc/apparmor.d/>). For example:
+
+	pre-start script
+    		/lib/init/apparmor-profile-load usr.bin.foo
+	end script
+
+If the confined application does not have an Upstart job but it starts before
+AppArmor's second stage initscript, then add a symlink from the policy file in
+F</etc/apparmor.d> to F</etc/apparmor/init/network-interface-security/>. For
+example:
+
+	# cd /etc/apparmor/init/network-interface-security/
+	# ln -s /etc/apparmor.d/usr.bin.foo .
+
+The network-interface-security Upstart job will load all the symlinked policy
+files in F</etc/apparmor/init/network-interface-security/> before any network
+interfaces come up. Because network interfaces come up very early in the boot
+process, this will help ensure that AppArmor policy is loaded before the
+confined application starts.
+
 =head1 ERRORS
 
 When a confined process tries to access a file it does not have permission
@@ -140,6 +176,8 @@
 
 =item F</etc/init.d/apparmor>
 
+=item F</etc/apparmor/init/network-interface-security/>
+
 =item F</etc/apparmor.d/>
 
 =item F</var/lib/apparmor/>
