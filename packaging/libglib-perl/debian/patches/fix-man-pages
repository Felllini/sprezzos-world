Description: improves man pages
Origin: vendor
Forwarded: no
Author: Ryan Niebur <ryan@debian.org>

--- a/GParamSpec.xs
+++ b/GParamSpec.xs
@@ -25,7 +25,7 @@
 /*
  * this isn't already done for us.  :-(
  *
- * interestingly, the obvious G_TYPE_PARAM_FLAGS is taken by the 
+ * interestingly, the obvious G_TYPE_PARAM_FLAGS is taken by the
  * GParamSpecFlags.
  */
 
@@ -109,7 +109,7 @@
 	if (g_str_equal ((const char *) value, fd->package)) {
 		fd->found_type = (GType) key;
 		return TRUE;
-	} else 
+	} else
 		return FALSE;
 }
 #else
@@ -211,6 +211,8 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::ParamSpec	PREFIX = g_param_spec_
 
+=for object Glib::ParamSpec Wrapper to encapsulate metadate needed to specify parameters
+
 void
 DESTROY (GParamSpec * pspec)
     CODE:
@@ -224,12 +226,12 @@
 You will see these most often when creating new Glib::Object types; see
 C<< Glib::Type->register >> and L<Glib::Object::Subclass>.
 
-Parameter specifications allow you to provide limits for validation as 
+Parameter specifications allow you to provide limits for validation as
 well as nicknames and blurbs to document the parameters.  Blurbs show up
 in reference documentation such as this page or the gtk+ C API reference;
 i'm not really sure where the nicknames get used.  The Perl bindings for
 the most part ignore the difference between dashes and underscores in
-the paramspec names, which typically find use as the actual keys for 
+the paramspec names, which typically find use as the actual keys for
 object parameters.
 
 It's worth noting that Glib offers various sizes of integer and floating
@@ -307,9 +309,9 @@
 ### the right sizes).
 ###
 
-##  GParamSpec* g_param_spec_char (const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags) 
-##  GParamSpec* g_param_spec_int (const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags) 
-##  GParamSpec* g_param_spec_long (const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_char (const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags)
+##  GParamSpec* g_param_spec_int (const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags)
+##  GParamSpec* g_param_spec_long (const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags)
 GParamSpec*
 IV (class, name, nick, blurb, minimum, maximum, default_value, flags)
 	const gchar *name
@@ -347,7 +349,7 @@
     OUTPUT:
 	RETVAL
 
-##  GParamSpec* g_param_spec_int64 (const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_int64 (const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_int64 (class, name, nick, blurb, minimum, maximum, default_value, flags)
 	const gchar *name
@@ -360,9 +362,9 @@
      C_ARGS:
  	name, nick, blurb, minimum, maximum, default_value, flags
 
-##  GParamSpec* g_param_spec_uchar (const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags) 
-##  GParamSpec* g_param_spec_uint (const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags) 
-##  GParamSpec* g_param_spec_ulong (const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_uchar (const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags)
+##  GParamSpec* g_param_spec_uint (const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags)
+##  GParamSpec* g_param_spec_ulong (const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags)
 GParamSpec*
 UV (class, name, nick, blurb, minimum, maximum, default_value, flags)
 	const gchar *name
@@ -400,7 +402,7 @@
     OUTPUT:
 	RETVAL
 
-##  GParamSpec* g_param_spec_uint64 (const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_uint64 (const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_uint64 (class, name, nick, blurb, minimum, maximum, default_value, flags)
 	const gchar *name
@@ -413,7 +415,7 @@
     C_ARGS:
 	name, nick, blurb, minimum, maximum, default_value, flags
 
-##  GParamSpec* g_param_spec_boolean (const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_boolean (const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_boolean (class, name, nick, blurb, default_value, flags)
 	const gchar *name
@@ -425,13 +427,13 @@
 	name, nick, blurb, default_value, flags
 
 
-###  GParamSpec* g_param_spec_unichar (const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags) 
+###  GParamSpec* g_param_spec_unichar (const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags)
 GParamSpec*
-g_param_spec_unichar (class, const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags) 
+g_param_spec_unichar (class, const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags)
     C_ARGS:
 	name, nick, blurb, default_value, flags
 
-###  GParamSpec* g_param_spec_enum (const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags) 
+###  GParamSpec* g_param_spec_enum (const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_enum (class, const gchar *name, const gchar *nick, const gchar *blurb, const char * enum_type, SV * default_value, GParamFlags flags)
     PREINIT:
@@ -445,9 +447,9 @@
 	                            gperl_convert_enum (gtype, default_value),
 	                            flags);
     OUTPUT:
-	RETVAL 
+	RETVAL
 
-###  GParamSpec* g_param_spec_flags (const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags) 
+###  GParamSpec* g_param_spec_flags (const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_flags (class, const gchar *name, const gchar *nick, const gchar *blurb, const char * flags_type, SV * default_value, GParamFlags flags)
     PREINIT:
@@ -461,11 +463,11 @@
 	                             gperl_convert_flags (gtype, default_value),
 	                             flags);
     OUTPUT:
-	RETVAL 
+	RETVAL
 
 
-##  GParamSpec* g_param_spec_float (const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags) 
-##  GParamSpec* g_param_spec_double (const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_float (const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags)
+##  GParamSpec* g_param_spec_double (const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags)
 GParamSpec*
 g_param_spec_double (class, name, nick, blurb, minimum, maximum, default_value, flags)
 	const gchar *name
@@ -489,7 +491,7 @@
     OUTPUT:
 	RETVAL
 
-##  GParamSpec* g_param_spec_string (const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags) 
+##  GParamSpec* g_param_spec_string (const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags)
 ##
 ## "default_value" can be NULL.  Not actually described in the docs as
 ## of 2.18, but used that way in lots of the builtin classes
@@ -504,9 +506,9 @@
     C_ARGS:
 	name, nick, blurb, default_value, flags
 
-###  GParamSpec* g_param_spec_param (const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags) 
-##  GParamSpec* g_param_spec_boxed (const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags) 
-##  GParamSpec* g_param_spec_object (const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags) 
+###  GParamSpec* g_param_spec_param (const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags)
+##  GParamSpec* g_param_spec_boxed (const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags)
+##  GParamSpec* g_param_spec_object (const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags)
 
 =for apidoc object
 =for arg package name of the class, derived from Glib::Object, of the objects this property will hold.
@@ -577,11 +579,11 @@
 
 ### plain pointers are dangerous, and i don't even know how you'd create
 ### them from perl since there are no pointers in perl (references are SVs)
-##  GParamSpec* g_param_spec_pointer (const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags) 
+##  GParamSpec* g_param_spec_pointer (const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
 
-#### we don't have full pspec support, and probably don't really need 
+#### we don't have full pspec support, and probably don't really need
 #### value arrays.
-###  GParamSpec* g_param_spec_value_array (const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags) 
+###  GParamSpec* g_param_spec_value_array (const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags)
 
 
 #if GLIB_CHECK_VERSION(2, 4, 0)
@@ -916,7 +918,7 @@
  ## similarly, all unsigned integer types
 
 
-=for object Glib::Param::UInt
+=for object Glib::Param::UInt Wrapper for uint parameters in GLib
 
 =for position post_hierarchy
 
@@ -987,7 +989,7 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::Param::Int64
 
-=for object Glib::Param::Int64
+=for object Glib::Param::Int64 Wrapper for int64 parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -1014,7 +1016,7 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::Param::UInt64
 
-=for object Glib::Param::UInt64
+=for object Glib::Param::UInt64 Wrapper for uint64 parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -1043,7 +1045,7 @@
 
  ## and again for the floating-point types
 
-=for object Glib::Param::Double
+=for object Glib::Param::Double Wrapper for double parameters in GLib
 
 =for position post_hierarchy
 
@@ -1062,6 +1064,21 @@
 
 =cut
 
+=for object Glib::Param::Boolean Wrapper for boolean parameters in GLib
+=cut
+
+=for object Glib::Param::Enum Wrapper for enum parameters in GLib
+=cut
+
+=for object Glib::Param::Flags Wrapper for flag parameters in GLib
+=cut
+
+=for object Glib::Param::String Wrapper for string parameters in GLib
+=cut
+
+=for object Glib::Param::Unichar Wrapper for unichar parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1147,6 +1164,8 @@
 
 #if GLIB_CHECK_VERSION(2, 10, 0)
 
+=for object Glib::Param::GType - Paramspecs for glib types
+
 =for section DESCRIPTION
 
 =head1 DESCRIPTION
--- a/GType.xs
+++ b/GType.xs
@@ -2662,6 +2662,8 @@
 
 MODULE = Glib::Type	PACKAGE = Glib::Flags
 
+=for object Glib::Flags Overloaded operators representing GLib flags
+
 =for position DESCRIPTION
 
 =head1 DESCRIPTION
--- a/GUtils.xs
+++ b/GUtils.xs
@@ -489,6 +489,9 @@
 
 MODULE = Glib::Utils	PACKAGE = Glib::Markup	PREFIX = g_markup_
 
+=for object Glib::Markup Wrapper for markup handling functions in GLib
+=cut
+
 =for apidoc __function__
 =cut
 # gchar* g_markup_escape_text (const gchar *text, gssize length);
--- a/GOption.xs
+++ b/GOption.xs
@@ -660,6 +660,14 @@
 	gperl_register_fundamental (GPERL_TYPE_OPTION_ARG, "Glib::OptionArg");
 	gperl_register_fundamental (GPERL_TYPE_OPTION_FLAGS, "Glib::OptionFlags");
 
+=for object Glib::OptionContext defines options accepted by the commandline option parser
+
+=cut
+
+=for object Glib::OptionGroup group of options for command line option parsing
+
+=cut
+
 =for position SYNOPSIS
 
 =head1 SYNOPSIS
--- a/lib/Glib/MakeHelper.pm
+++ b/lib/Glib/MakeHelper.pm
@@ -440,7 +440,7 @@
 
 \$(INST_LIB)/\$(FULLEXT)/index.pod :: \$(INST_LIB)/\$(FULLEXT)/ build/podindex
 	\$(NOECHO) \$(ECHO) Creating POD index...
-	\$(NOECHO) $^X -e "print qq(\\n=head1 NAME\\n\\n\$(NAME) - API Reference Pod Index\\n\\n=head1 PAGES\\n\\n=over\\n\\n)" \\
+	\$(NOECHO) $^X -e "print qq(\\n=head1 NAME\\n\\n\$(NAME) \\\\- API Reference Pod Index\\n\\n=head1 PAGES\\n\\n=over\\n\\n)" \\
 		> \$(INST_LIB)/\$(FULLEXT)/index.pod
 	\$(NOECHO) $^X -ne "print q(=item L<) . (split q( ))[1] . qq(>\\n\\n);" < build/podindex >> \$(INST_LIB)/\$(FULLEXT)/index.pod
 	\$(NOECHO) $^X -e "print qq(=back\\n\\n);" >> \$(INST_LIB)/\$(FULLEXT)/index.pod
