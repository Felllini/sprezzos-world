.TH CAMLMIX 1 "December 2, 2010" "camlmix User Manual"
.SH NAME
.PP
camlmix - preprocessor which converts text with embedded OCaml.
.SH SYNOPSIS
.PP
camlmix [options] file1 file2 \&... fileN
.PP
A temporary file \[lq]fileN.ml\[rq] is created and then executed with
ocaml.
.SH DESCRIPTION
.SS General rules
.PP
Text between ## and ## is considered as a block of code.
A block of code is normally some OCaml code.
It can be any kind of toplevel expressions such as definitions or
application of printing functions:
.IP
.nf
\f[C]
This\ is\ ocaml\ version\ ##\ print\ Sys.ocaml\\_version\ ##
\f[]
.fi
.PP
If it starts with = the OCaml code is interpreted as an expression of
type string that will printed like the rest of the text:
.PP
This is ocaml version ##= Sys.ocaml_version ##
.PP
The document blocks are printed by default on stdout using the
\[lq]print\[rq] function.
For ## to be printed, ### should be used.
.PP
White space introduced by OCaml can be controlled by ##.
and .## symbols:
.IP
.nf
\f[C]
\ \ ##.\ causes\ any\ white\ space\ to\ the\ left\ of\ the\ symbol
\ \ \ \ \ \ to\ be\ omitted\ from\ the\ output.\ Similarly
\ \ .##\ causes\ any\ white\ space\ followed\ by\ one\ newline
\ \ \ \ \ \ to\ be\ omitted\ from\ the\ output.
\f[]
.fi
.SS \ Directives
.PP
Blocks of code that start with the \@ character (possibly preceded by
spaces) are directives for Camlmix.
The following directives are available:
.IP
.nf
\f[C]
include\ "somefile.mlx";\ (*\ inserts\ a\ camlmix\ file\ *)
skip;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (*\ ignores\ the\ next\ block\ of\ text\ *)
\f[]
.fi
.PP
e.g.:
.IP
.nf
\f[C]
Hello\ ##\ \@include\ "world.mlx";\ skip\ .##\ ##\ let\ x\ =\ 123\ ##!
\f[]
.fi
.SS Conversion into a \[lq]render\[rq] function for dynamic rendering
.PP
The -fun option, used in combination with -c and often -co produces an
OCaml source file which provides a function with the following
signature:
.PP
val render : ?print:(string -> unit) -> ANYTYPE -> unit
.PP
where ANYTYPE is the type the \[lq]param\[rq] object which is available
in the template.
\[lq]param\[rq] can be used to pass runtime arguments, such as CGI
parameters if you are serving dynamic web pages.
The \[lq]print\[rq] function is used to set the initial value of
Camlmix.printer (see below) and should be used if you want to be able to
put the output into some other container than stdout.
It's default value is:
.PP
fun s -> print_string s; flush stdout
.SS Advanced usage
.PP
The OCaml program that is generated from the Camlmix files first defines
a module called Camlmix.
This module contains several variables that are updated automatically
and may be used explicitly by the user.
.IP
.nf
\f[C]
module\ Camlmix\ :
\ \ sig
\ \ \ \ val\ source\ :\ string\ ref
\ \ \ \ val\ line\ \ \ :\ int\ ref
\ \ \ \ val\ char\ \ \ :\ int\ ref
\ \ \ \ \ \ \ \ (*\ source,\ line\ and\ char\ refer\ to\ the\ location\ of\ the
\ \ \ \ \ \ \ \ \ \ \ first\ character\ of\ the\ current\ block\ in\ its\ source\ file
\ \ \ \ \ \ \ \ \ \ \ (source\ file,\ line\ number\ starting\ from\ 1,\ position\ in
\ \ \ \ \ \ \ \ \ \ \ the\ line\ starting\ from\ 1).\ They\ are\ updated
\ \ \ \ \ \ \ \ \ \ \ automatically\ at\ the\ beginning\ of\ each\ (code\ or\ text)
\ \ \ \ \ \ \ \ \ \ \ block.\ *)

\ \ \ \ val\ printer\ :\ (string\ ->\ unit)\ ref
\ \ \ \ \ \ \ \ (*\ the\ function\ that\ prints\ text\ blocks.\ It\ is\ initialized
\ \ \ \ \ \ \ \ \ \ \ with\ the\ "print"\ function\ *)

\ \ \ \ val\ print_with\ :\ (string\ ->\ unit)\ ->\ unit
\ \ \ \ \ \ \ \ (*\ print_with\ f\ prints\ the\ next\ block\ of\ text\ using\ f
\ \ \ \ \ \ \ \ \ \ \ instead\ of\ the\ current\ printer.\ Its\ behavior\ is
\ \ \ \ \ \ \ \ \ \ \ undefined\ if\ it\ is\ called\ several\ times\ in\ the\ same
\ \ \ \ \ \ \ \ \ \ \ OCaml\ block.\ *)

\ \ \ \ val\ print_if\ :\ bool\ ->\ unit
\ \ \ \ \ \ \ \ (*\ print_if\ cond\ prints\ the\ next\ block\ of\ text\ only
\ \ \ \ \ \ \ \ \ \ \ if\ cond\ is\ true.\ It\ uses\ print_with.\ *)
\ \ end
\f[]
.fi
.SH OPTIONS
.TP
.B -c
only generate the .ml file
.RS
.RE
.TP
.B -co \f[C]filename\f[]
specify a name for the .ml file or \[lq]-\[rq] for stdout
.RS
.RE
.TP
.B -fun
make it the body of a function named \[lq]render\[rq], using a single
argument named \[lq]param\[rq]
.RS
.RE
.TP
.B -e \f[C]ocaml\f[]
specify ocaml executable
.RS
.RE
.TP
.B -o \f[C]file\f[]
specify an output file
.RS
.RE
.TP
.B -clean
remove the temporary .ml file after execution
.RS
.RE
.TP
.B -insert \f[I]ocaml code\f[]
insert this code first
.RS
.RE
.TP
.B -remix
try a conversion to the camlremix syntax
.RS
.RE
.TP
.B -version
prints the version of Camlmix and exits
.RS
.RE
.TP
.B -help|--help
Display this list of options
.RS
.RE
.SH AUTHORS
Sylvain Le Gall.
