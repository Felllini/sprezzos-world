From: Steven McDonald <steven.mcdonald@libremail.me>
Description: Remove assumptions about ALSA to make it work on non-Linux ports.
Forwarded: No (unclean patch, DEB_HOST_ARCH_OS is Debian specific)
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=636921
--- a/SConstruct
+++ b/SConstruct
@@ -1043,7 +1043,7 @@
 
 conf = Configure(env)
 
-if conf.CheckCHeader('alsa/asoundlib.h'):
+if conf.CheckCHeader('alsa/asoundlib.h') and os.environ['DEB_HOST_ARCH_OS'] == 'linux':
     libraries['sysmidi'] = LibraryInfo (LIBS='asound')
     env['SYSMIDI'] = 'ALSA Sequencer'
     subst_dict['%MIDITAG%'] = "seq"
@@ -1061,8 +1061,10 @@
     subst_dict['%MIDITAG%'] = "ardour"
     subst_dict['%MIDITYPE%'] = "coremidi"
 else:
-    print "It appears you don't have the required MIDI libraries installed. For Linux this means you are missing the development package for ALSA libraries."
-    sys.exit (1)
+    libraries['sysmidi'] = LibraryInfo ()
+    env['SYSMIDI'] = 'none'
+    subst_dict['%MIDITAG%'] = "none"
+    subst_dict['%MIDITYPE%'] = "none"
 
 pname = env['PROGRAM_NAME']
 subst_dict['%MIDI_DEVICE_NAME%'] = pname.lower()
@@ -1345,9 +1347,12 @@
 if conf.CheckCHeader('/System/Library/Frameworks/CoreAudio.framework/Versions/A/Headers/CoreAudio.h'):
     subst_dict['%JACK_INPUT%'] = "coreaudio:Built-in Audio:in"
     subst_dict['%JACK_OUTPUT%'] = "coreaudio:Built-in Audio:out"
-else:
+elif os.environ['DEB_HOST_ARCH_OS'] == 'linux':
     subst_dict['%JACK_INPUT%'] = "alsa_pcm:playback_"
     subst_dict['%JACK_OUTPUT%'] = "alsa_pcm:capture_"
+else:
+    subst_dict['%JACK_INPUT%'] = "oss:playback_"
+    subst_dict['%JACK_OUTPUT%'] = "oss:capture_"
 
 # posix_memalign available
 if not conf.CheckFunc('posix_memalign'):
--- a/libs/midi++2/SConscript
+++ b/libs/midi++2/SConscript
@@ -39,9 +39,11 @@
    midi2.Append (CCFLAGS="-DWITH_COREMIDI")
    midi2.Append (LINKFLAGS="-framework CoreMIDI")
    midi2.Append (LINKFLAGS="-framework CoreFoundation")
-else:
+elif os.environ['DEB_HOST_ARCH_OS'] == 'linux':
    sysdep_src = [ 'alsa_sequencer_midiport.cc' ]
    midi2.Append (CCFLAGS="-DWITH_ALSA")
+else:
+   sysdep_src = [ ]
 
 midi2.Append(CCFLAGS="-D_REENTRANT -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE")
 midi2.Append(CCFLAGS="-DLIBSIGC_DISABLE_DEPRECATED")
--- a/gtk2_ardour/engine_dialog.cc
+++ b/gtk2_ardour/engine_dialog.cc
@@ -14,7 +14,7 @@
 #include <CoreFoundation/CFString.h>
 #include <sys/param.h>
 #include <mach-o/dyld.h>
-#else
+#elif defined(__linux__)
 #include <alsa/asoundlib.h>
 #endif
 
@@ -117,7 +117,9 @@
 #ifdef __APPLE__
 	strings.push_back (X_("CoreAudio"));
 #else
+#ifdef __linux__
 	strings.push_back (X_("ALSA"));
+#endif
 	strings.push_back (X_("OSS"));
 	strings.push_back (X_("FFADO"));
 #endif
@@ -162,7 +164,7 @@
 	basic_packer.attach (period_size_combo, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	row++;
 
-#ifndef __APPLE__
+#ifdef __linux__
 	label = manage (new Label (_("Number of buffers")));
 	basic_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	basic_packer.attach (periods_spinner, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@ -183,7 +185,7 @@
 	row++;
 	/* no audio mode with CoreAudio, its duplex or nuthin' */
 
-#ifndef __APPLE__
+#ifdef __linux__
 	label = manage (new Label (_("Audio Mode")));
 	basic_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	basic_packer.attach (audio_mode_combo, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@ -223,7 +225,7 @@
 	realtime_button.signal_toggled().connect (mem_fun (*this, &EngineControl::realtime_changed));
 	realtime_changed ();
 
-#ifndef __APPLE__
+#ifdef __linux__
 	label = manage (new Label (_("Realtime Priority")));
 	label->set_alignment (1.0, 0.5);
 	options_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@ -273,7 +275,7 @@
 	options_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	++row;
 
-#ifndef __APPLE__
+#ifdef __linux
 	label = manage (new Label (_("Dither")));	
 	label->set_alignment (1.0, 0.5);
 	options_packer.attach (dither_mode_combo, 1, 2, row, row + 1, FILL|EXPAND, AttachOptions(0));
@@ -289,7 +291,7 @@
 	device_packer.set_spacings (6);
 	row = 0;
 
-#ifndef __APPLE__
+#ifdef __linux__
 	label = manage (new Label (_("Input device")));
 	label->set_alignment (1.0, 0.5);
 	device_packer.attach (*label, 0, 1, row, row+1, FILL|EXPAND, (AttachOptions) 0);
@@ -613,7 +615,7 @@
 void
 EngineControl::realtime_changed ()
 {
-#ifndef __APPLE__
+#ifdef __linux__
 	priority_spinner.set_sensitive (realtime_button.get_active());
 #endif
 }
@@ -629,8 +631,10 @@
 #endif
 
 #ifndef __APPLE__
+#ifdef __linux__
 	} else if (driver == "ALSA") {
 		devices[driver] = enumerate_alsa_devices ();
+#endif
 	} else if (driver == "FFADO") {
 		devices[driver] = enumerate_ffado_devices ();
 	} else if (driver == "OSS") {
@@ -757,6 +761,7 @@
 	return devs;
 }
 #else
+#ifdef __linux__
 vector<string>
 EngineControl::enumerate_alsa_devices ()
 {
@@ -817,6 +822,7 @@
 
 	return devs;
 }
+#endif
 
 vector<string>
 EngineControl::enumerate_ffado_devices ()
@@ -859,7 +865,9 @@
 	vector<string>& strings = devices[driver];
 
 	if (strings.empty() && driver != "FFADO" && driver != "Dummy") {
+#ifdef __linux__
 		error << string_compose (_("No devices found for driver \"%1\""), driver) << endmsg;
+#endif
 		return;
 	}
 	
@@ -912,7 +920,7 @@
 EngineControl::redisplay_latency ()
 {
 	uint32_t rate = get_rate();
-#ifdef __APPLE_
+#ifndef __linux__
 	float periods = 2;
 #else
 	float periods = periods_adjustment.get_value();
