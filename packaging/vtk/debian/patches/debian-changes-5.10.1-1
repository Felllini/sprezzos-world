--- /dev/null
+++ vtk-5.9.0/VTKConfig-Tcl.cmake.in
@@ -0,0 +1,21 @@
+# The list of available languages.
+SET(VTK_LANGUAGES ${VTK_LANGUAGES} TCL)
+
+SET(VTK_WRAP_TCL 1)
+
+# The Tcl/Tk configuration.
+SET(VTK_TCL_TK_STATIC "@VTK_TCL_TK_STATIC@")
+SET(VTK_TCL_TK_COPY_SUPPORT_LIBRARY "@VTK_TCL_TK_COPY_SUPPORT_LIBRARY@")
+SET(VTK_TCL_SUPPORT_LIBRARY_PATH "@VTK_TCL_SUPPORT_LIBRARY_PATH_CONFIG@")
+SET(VTK_TK_SUPPORT_LIBRARY_PATH "@VTK_TK_SUPPORT_LIBRARY_PATH_CONFIG@")
+SET(VTK_TCL_TK_MACROS_MODULE "@VTK_TCL_TK_MACROS_MODULE_CONFIG@")
+SET(VTK_TCL_HOME "@VTK_TCL_HOME_CONFIG@")
+SET(VTK_WRAP_TCL_EXE "@VTK_WRAP_TCL_EXE_CONFIG@")
+SET(VTK_WRAP_TCL_INIT_EXE "@VTK_WRAP_TCL_INIT_EXE_CONFIG@")
+SET(VTK_TK_INTERNAL_DIR "@VTK_TK_INTERNAL_DIR_CONFIG@")
+SET(VTK_TK_RESOURCES_DIR "@VTK_TK_RESOURCES_DIR_CONFIG@")
+SET(VTK_TCL_INCLUDE_DIR "@TCL_INCLUDE_PATH@")
+SET(VTK_TCL_LIBRARY "@TCL_LIBRARY@")
+SET(VTK_TK_INCLUDE_DIR "@TK_INCLUDE_PATH@")
+SET(VTK_TK_LIBRARY "@TK_LIBRARY@")
+
--- /dev/null
+++ vtk-5.9.0/VTKConfig-Python.cmake.in
@@ -0,0 +1,14 @@
+# The list of available languages.
+SET(VTK_LANGUAGES ${VTK_LANGUAGES} PYTHON)
+
+SET(VTK_WRAP_PYTHON 1)
+
+# The Python configuration.
+# If VTK_CONFIGURATION_TYPES is set (see below) then the VTK_PYTHONPATH_DIRS
+# will have subdirectories for each configuration type.
+SET(VTK_PYTHONPATH_DIRS "@VTK_PYTHONPATH_DIRS_CONFIG@")
+SET(VTK_WRAP_PYTHON_EXE "@VTK_WRAP_PYTHON_EXE_CONFIG@")
+SET(VTK_WRAP_PYTHON_INIT_EXE "@VTK_WRAP_PYTHON_INIT_EXE_CONFIG@")
+SET(VTK_PYTHON_INCLUDE_DIR "@PYTHON_INCLUDE_DIR@")
+SET(VTK_PYTHON_LIBRARY "@PYTHON_LIBRARY@")
+
--- vtk-5.9.0.orig/vtkGenerateVTKConfig.cmake
+++ vtk-5.9.0/vtkGenerateVTKConfig.cmake
@@ -147,9 +147,6 @@ SET(VTK_TCL_TK_MACROS_MODULE_CONFIG
     "${VTK_CMAKE_DIR}/vtkTclTkMacros.cmake")
 SET(VTK_CMAKE_EXTENSIONS_DIR_CONFIG ${VTK_BINARY_DIR}/CMake)
 
-# Export Targets file.
-SET(VTK_TARGETS_FILE "${VTK_BINARY_DIR}/${VTK_INSTALL_EXPORT_NAME}.cmake")
-
 # Build configuration information.
 SET(VTK_CONFIGURATION_TYPES_CONFIG ${CMAKE_CONFIGURATION_TYPES})
 SET(VTK_BUILD_TYPE_CONFIG ${CMAKE_BUILD_TYPE})
@@ -166,6 +163,12 @@ CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConf
                ${VTK_BINARY_DIR}/VTKConfig.cmake @ONLY IMMEDIATE)
 CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfigVersion.cmake.in
                ${VTK_BINARY_DIR}/VTKConfigVersion.cmake @ONLY IMMEDIATE)
+CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Java.cmake.in
+               ${VTK_BINARY_DIR}/VTKConfig-Java.cmake @ONLY IMMEDIATE)
+CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Python.cmake.in
+               ${VTK_BINARY_DIR}/VTKConfig-Python.cmake @ONLY IMMEDIATE)
+CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Tcl.cmake.in
+               ${VTK_BINARY_DIR}/VTKConfig-Tcl.cmake @ONLY IMMEDIATE)
 
 #-----------------------------------------------------------------------------
 # Settings specific to the install tree.
@@ -339,6 +342,15 @@ IF(CMAKE_CONFIGURATION_TYPES)
     CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig.cmake.in
                    ${VTK_BINARY_DIR}/Utilities/${config}/VTKConfig.cmake
                    @ONLY IMMEDIATE)
+    CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Java.cmake.in
+                   ${VTK_BINARY_DIR}/Utilities/${config}/VTKConfig-Java.cmake
+                   @ONLY IMMEDIATE)
+    CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Python.cmake.in
+                   ${VTK_BINARY_DIR}/Utilities/${config}/VTKConfig-Python.cmake
+                   @ONLY IMMEDIATE)
+    CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Tcl.cmake.in
+                   ${VTK_BINARY_DIR}/Utilities/${config}/VTKConfig-Tcl.cmake
+                   @ONLY IMMEDIATE)
   ENDFOREACH(config)
 
   # Install the config file corresponding to the build configuration
@@ -350,12 +362,39 @@ IF(CMAKE_CONFIGURATION_TYPES)
       DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
       COMPONENT Development
       )
+    IF(VTK_WRAP_JAVA)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/${DOLLAR}{BUILD_TYPE}/VTKConfig-Java.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_JAVA)
+    IF(VTK_WRAP_PYTHON)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/${DOLLAR}{BUILD_TYPE}/VTKConfig-Python.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_PYTHON)
+    IF(VTK_WRAP_TCL)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/${DOLLAR}{BUILD_TYPE}/VTKConfig-Tcl.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_TCL)
   ENDIF(NOT VTK_INSTALL_NO_DEVELOPMENT)
 ELSE(CMAKE_CONFIGURATION_TYPES)
   # There is only one build configuration.  Configure one VTKConfig.cmake.
   SET(VTK_BUILD_TYPE_CONFIG ${CMAKE_BUILD_TYPE})
   CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig.cmake.in
                  ${VTK_BINARY_DIR}/Utilities/VTKConfig.cmake @ONLY IMMEDIATE)
+  CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Java.cmake.in
+                 ${VTK_BINARY_DIR}/Utilities/VTKConfig-Java.cmake @ONLY IMMEDIATE)
+  CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Python.cmake.in
+                 ${VTK_BINARY_DIR}/Utilities/VTKConfig-Python.cmake @ONLY IMMEDIATE)
+  CONFIGURE_FILE(${VTK_SOURCE_DIR}/VTKConfig-Tcl.cmake.in
+                 ${VTK_BINARY_DIR}/Utilities/VTKConfig-Tcl.cmake @ONLY IMMEDIATE)
 
   # Setup an install rule for the config file.
   IF(NOT VTK_INSTALL_NO_DEVELOPMENT)
@@ -364,6 +403,27 @@ ELSE(CMAKE_CONFIGURATION_TYPES)
       DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
       COMPONENT Development
       )
+    IF(VTK_WRAP_JAVA)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/VTKConfig-Java.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_JAVA)
+    IF(VTK_WRAP_PYTHON)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/VTKConfig-Python.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_PYTHON)
+    IF(VTK_WRAP_TCL)
+      INSTALL(FILES
+        ${VTK_BINARY_DIR}/Utilities/VTKConfig-Tcl.cmake
+        DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24}
+        COMPONENT Development
+        )
+    ENDIF(VTK_WRAP_TCL)
   ENDIF(NOT VTK_INSTALL_NO_DEVELOPMENT)
 ENDIF(CMAKE_CONFIGURATION_TYPES)
 
--- vtk-5.9.0.orig/VTKConfig.cmake.in
+++ vtk-5.9.0/VTKConfig.cmake.in
@@ -64,7 +64,7 @@ SET(VTK_CMAKE_EXTENSIONS_DIR "@VTK_CMAKE
 SET(VTK_KITS "@VTK_KITS@")
 
 # The list of available languages.
-SET(VTK_LANGUAGES "@VTK_LANGUAGES@")
+SET(VTK_LANGUAGES "")
 
 # VTK Configuration options.
 SET(VTK_BUILD_SHARED_LIBS "@BUILD_SHARED_LIBS@")
@@ -111,10 +111,16 @@ SET(VTK_USE_VIDEO_FOR_WINDOWS "@VTK_USE_
 SET(VTK_USE_VIEWS "@VTK_USE_VIEWS@")
 SET(VTK_USE_VOLUMEPRO_1000 "@VTK_USE_VOLUMEPRO_1000@")
 SET(VTK_USE_X "@VTK_USE_X@")
-SET(VTK_WRAP_JAVA "@VTK_WRAP_JAVA@")
-SET(VTK_WRAP_PYTHON "@VTK_WRAP_PYTHON@")
-SET(VTK_WRAP_TCL "@VTK_WRAP_TCL@")
-SET(VTK_WRAP_PYTHON_SIP "@VTK_WRAP_PYTHON_SIP@")
+
+SET(VTK_WRAP_JAVA 0)
+SET(VTK_WRAP_PYTHON 0)
+SET(VTK_WRAP_TCL 0)
+SET(VTK_WRAP_PYTHON_SIP 0)
+
+INCLUDE("${VTK_DIR}/VTKConfig-Java.cmake" OPTIONAL)
+INCLUDE("${VTK_DIR}/VTKConfig-Python.cmake" OPTIONAL)
+INCLUDE("${VTK_DIR}/VTKConfig-Tcl.cmake" OPTIONAL)
+# Python_sip is not provided by Debian packages
 
 # The Hybrid and VolumeRendering kits are now switched with Rendering.
 SET(VTK_USE_HYBRID "@VTK_USE_RENDERING@")
@@ -134,50 +140,11 @@ SET(VTK_MPI_SERVER_PREFLAGS "@VTK_MPI_SE
 SET(VTK_MPI_INCLUDE_DIR "@MPI_INCLUDE_PATH@")
 SET(VTK_MPI_LIBRARIES "@MPI_LIBRARY@;@MPI_EXTRA_LIBRARY@")
 
-# The Tcl/Tk configuration.
-SET(VTK_TCL_TK_STATIC "@VTK_TCL_TK_STATIC@")
-SET(VTK_TCL_TK_COPY_SUPPORT_LIBRARY "@VTK_TCL_TK_COPY_SUPPORT_LIBRARY@")
-SET(VTK_TCL_SUPPORT_LIBRARY_PATH "@VTK_TCL_SUPPORT_LIBRARY_PATH_CONFIG@")
-SET(VTK_TK_SUPPORT_LIBRARY_PATH "@VTK_TK_SUPPORT_LIBRARY_PATH_CONFIG@")
-SET(VTK_TCL_TK_MACROS_MODULE "@VTK_TCL_TK_MACROS_MODULE_CONFIG@")
-SET(VTK_TCL_HOME "@VTK_TCL_HOME_CONFIG@")
-IF (NOT CMAKE_CROSSCOMPILING)
-  SET(VTK_WRAP_TCL_EXE "@VTK_WRAP_TCL_EXE_CONFIG@")
-  SET(VTK_WRAP_TCL_INIT_EXE "@VTK_WRAP_TCL_INIT_EXE_CONFIG@")
-ENDIF (NOT CMAKE_CROSSCOMPILING)
-SET(VTK_TK_INTERNAL_DIR "@VTK_TK_INTERNAL_DIR_CONFIG@")
-SET(VTK_TK_RESOURCES_DIR "@VTK_TK_RESOURCES_DIR_CONFIG@")
-SET(VTK_TCL_INCLUDE_DIR "@TCL_INCLUDE_PATH@")
-SET(VTK_TCL_LIBRARY "@TCL_LIBRARY@")
-SET(VTK_TK_INCLUDE_DIR "@TK_INCLUDE_PATH@")
-SET(VTK_TK_LIBRARY "@TK_LIBRARY@")
-
-# The Java configuration.
-SET(VTK_JAVA_JAR "@VTK_JAVA_JAR_CONFIG@")
-IF (NOT CMAKE_CROSSCOMPILING)
-  SET(VTK_PARSE_JAVA_EXE "@VTK_PARSE_JAVA_EXE_CONFIG@")
-  SET(VTK_WRAP_JAVA_EXE "@VTK_WRAP_JAVA_EXE_CONFIG@")
-ENDIF (NOT CMAKE_CROSSCOMPILING)
-SET(VTK_JAVA_INCLUDE_DIR "@JAVA_INCLUDE_PATH@;@JAVA_INCLUDE_PATH2@")
-SET(VTK_JAVA_AWT_LIBRARY "@JAVA_AWT_LIBRARY@")
-SET(VTK_JVM_LIBRARY "@JAVA_JVM_LIBRARY@")
-
 # The Matlab configuration.
 SET(VTK_MATLAB_ROOT_DIR "@MATLAB_ROOT_DIR@")
 SET(VTK_MATLAB_INCLUDE_DIR "@MATLAB_INCLUDE_DIR@")
 SET(VTK_MATLAB_LIB_DIR "@MATLAB_LIB_DIR@")
 
-# The Python configuration.
-# If VTK_CONFIGURATION_TYPES is set (see below) then the VTK_PYTHONPATH_DIRS
-# will have subdirectories for each configuration type.
-SET(VTK_PYTHONPATH_DIRS "@VTK_PYTHONPATH_DIRS_CONFIG@")
-IF (NOT CMAKE_CROSSCOMPILING)
-  SET(VTK_WRAP_PYTHON_EXE "@VTK_WRAP_PYTHON_EXE_CONFIG@")
-  SET(VTK_WRAP_PYTHON_INIT_EXE "@VTK_WRAP_PYTHON_INIT_EXE_CONFIG@")
-ENDIF (NOT CMAKE_CROSSCOMPILING)
-SET(VTK_PYTHON_INCLUDE_DIR "@PYTHON_INCLUDE_DIR@")
-SET(VTK_PYTHON_LIBRARY "@PYTHON_LIBRARY@")
-
 # Other executables
 IF (NOT CMAKE_CROSSCOMPILING)
   SET(VTK_ENCODESTRING_EXE "@VTK_ENCODESTRING_EXE_CONFIG@")
--- /dev/null
+++ vtk-5.9.0/.hooks-config.bash
@@ -0,0 +1,6 @@
+# Loaded by .git/hooks/(pre-commit|commit-msg|prepare-commit-msg)
+# during git commit after local hooks have been installed.
+
+hooks_chain_pre_commit="Utilities/Scripts/pre-commit"
+hooks_chain_commit_msg="Utilities/Scripts/commit-msg"
+hooks_chain_prepare_commit_msg="Utilities/Scripts/prepare-commit-msg"
--- /dev/null
+++ vtk-5.9.0/VTKConfig-Java.cmake.in
@@ -0,0 +1,14 @@
+# The list of available languages.
+SET(VTK_LANGUAGES ${VTK_LANGUAGES} JAVA)
+
+SET(VTK_WRAP_JAVA 1)
+
+# The Java configuration.
+SET(VTK_JAVA_JAR "@VTK_JAVA_JAR_CONFIG@")
+SET(VTK_PARSE_JAVA_EXE "@VTK_PARSE_JAVA_EXE_CONFIG@")
+SET(VTK_WRAP_JAVA_EXE "@VTK_WRAP_JAVA_EXE_CONFIG@")
+SET(VTK_JAVA_INCLUDE_DIR "@JAVA_INCLUDE_PATH@;@JAVA_INCLUDE_PATH2@")
+SET(VTK_JAVA_AWT_LIBRARY "@JAVA_AWT_LIBRARY@")
+SET(VTK_JVM_LIBRARY "@JAVA_JVM_LIBRARY@")
+
+
--- vtk-5.9.0.orig/VolumeRendering/vtkOpenGLGPUVolumeRayCastMapper.cxx
+++ vtk-5.9.0/VolumeRendering/vtkOpenGLGPUVolumeRayCastMapper.cxx
@@ -2076,7 +2076,7 @@ int vtkOpenGLGPUVolumeRayCastMapper::IsR
     }
   if(!this->LoadExtensionsSucceeded)
     {
-    vtkDebugMacro(
+    vtkErrorMacro(
       "The following OpenGL extensions are required but not supported: "
       << (this->UnsupportedRequiredExtensions->Stream.str()).c_str());
     return 0;
@@ -2169,6 +2169,8 @@ void vtkOpenGLGPUVolumeRayCastMapper::Lo
     // "framebuffer has bad draw buffer"
     // "render clipped 1 ERROR (x506) invalid framebuffer operation ext"
     this->LoadExtensionsSucceeded=0;
+    this->UnsupportedRequiredExtensions->Stream<<
+      " Intel cards and Mesa implementations are not supported";
     return;
     }
 
--- vtk-5.9.0.orig/Wrapping/Tcl/pkgIndex.tcl.in
+++ vtk-5.9.0/Wrapping/Tcl/pkgIndex.tcl.in
@@ -5,6 +5,7 @@ package ifneeded vtkinit {@VTK_MAJOR_VER
     proc load_library_package {libName libPath {libPrefix {@VTK_TCL_LIBNAME_PREFIX@}}} {
       set libExt [info sharedlibextension]
       set currentDirectory [pwd]
+      set libPath /usr/@VTK_INSTALL_LIB_DIR@/
       set libFile [file join $libPath "$libPrefix$libName$libExt"]
       if {[catch "cd {$libPath}; load {$libFile}" errorMessage]} {
         puts $errorMessage
--- vtk-5.9.0.orig/Wrapping/Tcl/CMakeLists.txt
+++ vtk-5.9.0/Wrapping/Tcl/CMakeLists.txt
@@ -74,7 +74,7 @@ ENDIF(VTK_USE_CARBON)
 
 IF (VTK_USE_RENDERING)
   TARGET_LINK_LIBRARIES(vtk vtkRenderingTCL)
-  TARGET_LINK_LIBRARIES(vtk vtkVolumeRenderingTCL)
+  TARGET_LINK_LIBRARIES(vtk vtkVolumeRenderingTCL vtkVolumeRendering)
   TARGET_LINK_LIBRARIES(vtk vtkHybridTCL)
   TARGET_LINK_LIBRARIES(vtk vtkWidgetsTCL)
 ENDIF (VTK_USE_RENDERING)
@@ -84,7 +84,7 @@ IF (VTK_USE_PARALLEL)
 ENDIF (VTK_USE_PARALLEL)
 
 IF (VTK_USE_GEOVIS)
-  TARGET_LINK_LIBRARIES(vtk vtkGeovisTCL)
+  TARGET_LINK_LIBRARIES(vtk vtkGeovisTCL vtkGeovis)
 ENDIF (VTK_USE_GEOVIS)
 
 IF (VTK_USE_INFOVIS)
@@ -164,16 +164,22 @@ IF (VTK_USE_PARALLEL)
       vtkIOTCL
       vtkParallelTCL
       ${MPI_LIBRARIES}
+      ${VTK_TCL_LIBRARIES}
     )
 
+    IF (VTK_USE_TK)
+       TARGET_LINK_LIBRARIES(pvtk ${VTK_TK_LIBRARIES})
+    ENDIF (VTK_USE_TK)
+
     IF (VTK_USE_RENDERING)
       TARGET_LINK_LIBRARIES(pvtk vtkHybridTCL)
       TARGET_LINK_LIBRARIES(pvtk vtkWidgetsTCL)
-      TARGET_LINK_LIBRARIES(pvtk vtkVolumeRenderingTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkRenderingTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkVolumeRenderingTCL vtkVolumeRendering)
     ENDIF (VTK_USE_RENDERING)
 
     IF (VTK_USE_GEOVIS)
-      TARGET_LINK_LIBRARIES(pvtk vtkGeovisTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkGeovisTCL vtkGeovis)
     ENDIF (VTK_USE_GEOVIS)
 
     IF (VTK_USE_INFOVIS)
#--- vtk-5.9.0.orig/GUISupport/Qt/CMakeLists.txt
#+++ vtk-5.9.0/GUISupport/Qt/CMakeLists.txt
#@@ -221,6 +221,12 @@ if(VTK_WRAP_PYTHON_SIP)
#     )
#   ENDIF(VTK_QT_USE_WEBKIT)
# 
#+  # GUISupport/Qt doesn't have a hierarchy file, use Rendering
#+  IF(VTK_IGNORE_BTX)
#+  SET(KIT_HIERARCHY_FILE
#+      ${VTK_BINARY_DIR}/Rendering/vtkRenderingHierarchy.txt)
#+  ENDIF(VTK_IGNORE_BTX)
#+
#   VTK_WRAP_PYTHON3(vtkQtPython QVTK_PythonSrcs "${QVTK_PythonHeaders}")
#   VTK_ADD_LIBRARY(vtkQtPythonD ${QVTK_PythonSrcs})
#   TARGET_LINK_LIBRARIES(vtkQtPythonD QVTK vtkViewsPythonD vtkRenderingPythonD vtkPythonCore)
--- vtk-5.9.0.orig/IO/vtkSQLiteQuery.cxx
+++ vtk-5.9.0/IO/vtkSQLiteQuery.cxx
@@ -25,7 +25,7 @@
 #include "vtkVariant.h"
 #include "vtkVariantArray.h"
 
-#include <vtksqlite/vtk_sqlite3.h>
+#include <sqlite3.h>
 
 #include <assert.h>
 
@@ -43,7 +43,7 @@ vtkSQLiteQuery::vtkSQLiteQuery()
 {
   this->Statement = NULL;
   this->InitialFetch = true;
-  this->InitialFetchResult=VTK_SQLITE_DONE;
+  this->InitialFetchResult=SQLITE_DONE;
   this->LastErrorText = NULL;
   this->TransactionInProgress = false;
 }
@@ -61,7 +61,7 @@ vtkSQLiteQuery::~vtkSQLiteQuery()
     {
     if (this->Database != NULL)
       {
-      vtk_sqlite3_finalize(this->Statement);
+      sqlite3_finalize(this->Statement);
       this->Statement = NULL;
       }
     }
@@ -131,8 +131,8 @@ bool vtkSQLiteQuery::SetQuery(const char
   if (this->Statement)
     {
     vtkDebugMacro(<<"Finalizing old statement");
-    int finalizeStatus = vtk_sqlite3_finalize(this->Statement);
-    if (finalizeStatus != VTK_SQLITE_OK)
+    int finalizeStatus = sqlite3_finalize(this->Statement);
+    if (finalizeStatus != SQLITE_OK)
       {
       vtkWarningMacro(<<"SetQuery(): Finalize returned unexpected code "
                       << finalizeStatus);
@@ -151,19 +151,19 @@ bool vtkSQLiteQuery::SetQuery(const char
       return false;
       }
     
-    vtk_sqlite3 *db = dbContainer->SQLiteInstance;
+    sqlite3 *db = dbContainer->SQLiteInstance;
     const char *unused_statement;
     
-    int prepareStatus = vtk_sqlite3_prepare_v2(db, 
+    int prepareStatus = sqlite3_prepare_v2(db, 
                                                this->Query,
                                                static_cast<int>(strlen(this->Query)),
                                                &this->Statement,
                                                &unused_statement);
     
-    if (prepareStatus != VTK_SQLITE_OK)
+    if (prepareStatus != SQLITE_OK)
       {
-      this->SetLastErrorText(vtk_sqlite3_errmsg(db));
-      vtkWarningMacro(<<"SetQuery(): vtk_sqlite3_prepare_v2() failed with error message "
+      this->SetLastErrorText(sqlite3_errmsg(db));
+      vtkWarningMacro(<<"SetQuery(): sqlite3_prepare_v2() failed with error message "
                     << this->GetLastErrorText()
                     << " on statement: '"
                     << this->Query << "'");
@@ -194,31 +194,31 @@ bool vtkSQLiteQuery::Execute()
     }
   else
     {
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
 
   vtkDebugMacro(<<"Execute(): Query ready to execute.");
 
   this->InitialFetch = true;
-  int result = vtk_sqlite3_step(this->Statement);
+  int result = sqlite3_step(this->Statement);
   this->InitialFetchResult = result;
 
-  if (result == VTK_SQLITE_DONE)
+  if (result == SQLITE_DONE)
     {
     this->SetLastErrorText(NULL);
     this->Active = true;
     return true;
     }
-  else if (result != VTK_SQLITE_ROW)
+  else if (result != SQLITE_ROW)
     {
     vtkSQLiteDatabase *dbContainer = 
       vtkSQLiteDatabase::SafeDownCast(this->Database);
     assert(dbContainer != NULL);
     
-    vtk_sqlite3 *db = dbContainer->SQLiteInstance;
+    sqlite3 *db = dbContainer->SQLiteInstance;
 
-    this->SetLastErrorText(vtk_sqlite3_errmsg(db));
-    vtkDebugMacro(<< "Execute(): vtk_sqlite3_step() returned error message "
+    this->SetLastErrorText(sqlite3_errmsg(db));
+    vtkDebugMacro(<< "Execute(): sqlite3_step() returned error message "
                   << this->GetLastErrorText());
     this->Active = false;
     return false;
@@ -239,7 +239,7 @@ int vtkSQLiteQuery::GetNumberOfFields()
     }
   else
     {
-    return vtk_sqlite3_column_count(this->Statement);
+    return sqlite3_column_count(this->Statement);
     }
 }
 
@@ -259,7 +259,7 @@ const char * vtkSQLiteQuery::GetFieldNam
     }
   else
     {
-    return vtk_sqlite3_column_name(this->Statement, column);
+    return sqlite3_column_name(this->Statement, column);
     }
 }
 
@@ -279,22 +279,22 @@ int vtkSQLiteQuery::GetFieldType(int col
     }
   else
     {
-    switch (vtk_sqlite3_column_type(this->Statement, column))
+    switch (sqlite3_column_type(this->Statement, column))
       {
-      case VTK_SQLITE_INTEGER:
+      case SQLITE_INTEGER:
         return VTK_INT; 
-      case VTK_SQLITE_FLOAT:
+      case SQLITE_FLOAT:
         return VTK_FLOAT;
-      case VTK_SQLITE_TEXT:
+      case SQLITE_TEXT:
         return VTK_STRING;
-      case VTK_SQLITE_BLOB:
+      case SQLITE_BLOB:
         return VTK_STRING; // until we have a BLOB type of our own
-      case VTK_SQLITE_NULL:
+      case SQLITE_NULL:
         return VTK_VOID; // ??? what makes sense here?
       default:
       {
       vtkErrorMacro(<<"GetFieldType(): Unknown data type " 
-                    << vtk_sqlite3_column_type(this->Statement, column)
+                    << sqlite3_column_type(this->Statement, column)
                     <<" from SQLite.");
       return VTK_VOID;
       }
@@ -315,7 +315,7 @@ bool vtkSQLiteQuery::NextRow()
     {
     vtkDebugMacro(<<"NextRow(): Initial fetch being handled.");
     this->InitialFetch = false;
-    if (this->InitialFetchResult == VTK_SQLITE_DONE)
+    if (this->InitialFetchResult == SQLITE_DONE)
       {
       return false;
       }
@@ -326,12 +326,12 @@ bool vtkSQLiteQuery::NextRow()
     }
   else
     {
-    int result = vtk_sqlite3_step(this->Statement);
-    if (result == VTK_SQLITE_DONE)
+    int result = sqlite3_step(this->Statement);
+    if (result == SQLITE_DONE)
       {
       return false;
       }
-    else if (result == VTK_SQLITE_ROW)
+    else if (result == SQLITE_ROW)
       {
       return true;
       }
@@ -339,8 +339,8 @@ bool vtkSQLiteQuery::NextRow()
       {
       vtkSQLiteDatabase *dbContainer = vtkSQLiteDatabase::SafeDownCast( this->Database );
       assert(dbContainer != NULL);
-      vtk_sqlite3 *db = dbContainer->SQLiteInstance;
-      this->SetLastErrorText(vtk_sqlite3_errmsg(db));
+      sqlite3 *db = dbContainer->SQLiteInstance;
+      this->SetLastErrorText(sqlite3_errmsg(db));
       vtkErrorMacro(<<"NextRow(): Database returned error code " 
                     << result << " with the following message: "
                     << this->GetLastErrorText());
@@ -366,33 +366,33 @@ vtkVariant vtkSQLiteQuery::DataValue(vtk
     }
   else
     {
-    switch (vtk_sqlite3_column_type(this->Statement, column))
+    switch (sqlite3_column_type(this->Statement, column))
       {
-      case VTK_SQLITE_INTEGER:
-        return vtkVariant(vtk_sqlite3_column_int(this->Statement, column));
+      case SQLITE_INTEGER:
+        return vtkVariant(sqlite3_column_int(this->Statement, column));
 
-      case VTK_SQLITE_FLOAT:
-        return vtkVariant(vtk_sqlite3_column_double(this->Statement, column));
+      case SQLITE_FLOAT:
+        return vtkVariant(sqlite3_column_double(this->Statement, column));
 
-      case VTK_SQLITE_TEXT:
+      case SQLITE_TEXT:
       {
       vtksys_ios::ostringstream str;
-      str << vtk_sqlite3_column_text(this->Statement, column);
+      str << sqlite3_column_text(this->Statement, column);
       return vtkVariant(vtkStdString(str.str()));
       }
 
-      case VTK_SQLITE_BLOB:
+      case SQLITE_BLOB:
       {
       // This is a hack ... by passing the BLOB to vtkStdString with an explicit
       // byte count, we ensure that the string will store all of the BLOB's bytes,
       // even if there are NULL values.
 
       return vtkVariant(vtkStdString(
-        static_cast<const char*>(vtk_sqlite3_column_blob(this->Statement, column)),
-        vtk_sqlite3_column_bytes(this->Statement, column)));
+        static_cast<const char*>(sqlite3_column_blob(this->Statement, column)),
+        sqlite3_column_bytes(this->Statement, column)));
       }
       
-      case VTK_SQLITE_NULL:
+      case SQLITE_NULL:
       default:
         return vtkVariant();
       }
@@ -423,11 +423,11 @@ bool vtkSQLiteQuery::BeginTransaction()
   vtkSQLiteDatabase *dbContainer = vtkSQLiteDatabase::SafeDownCast( this->Database );
   assert(dbContainer != NULL);
 
-  vtk_sqlite3 *db = dbContainer->SQLiteInstance;
+  sqlite3 *db = dbContainer->SQLiteInstance;
   char *errorMessage = NULL;
-  int result = vtk_sqlite3_exec(db, BEGIN_TRANSACTION, NULL, NULL, &errorMessage);
+  int result = sqlite3_exec(db, BEGIN_TRANSACTION, NULL, NULL, &errorMessage);
 
-  if (result == VTK_SQLITE_OK)
+  if (result == SQLITE_OK)
     {
     this->TransactionInProgress = true;
     this->SetLastErrorText(NULL);
@@ -451,7 +451,7 @@ bool vtkSQLiteQuery::CommitTransaction()
 {
   if (this->Statement)
     {
-    vtk_sqlite3_finalize(this->Statement);
+    sqlite3_finalize(this->Statement);
     this->Statement = NULL;
     }
 
@@ -463,11 +463,11 @@ bool vtkSQLiteQuery::CommitTransaction()
   
   vtkSQLiteDatabase *dbContainer = vtkSQLiteDatabase::SafeDownCast( this->Database );
   assert(dbContainer != NULL);
-  vtk_sqlite3 *db = dbContainer->SQLiteInstance;
+  sqlite3 *db = dbContainer->SQLiteInstance;
   char *errorMessage = NULL;
-  int result = vtk_sqlite3_exec(db, COMMIT_TRANSACTION, NULL, NULL, &errorMessage);
+  int result = sqlite3_exec(db, COMMIT_TRANSACTION, NULL, NULL, &errorMessage);
 
-  if (result == VTK_SQLITE_OK)
+  if (result == SQLITE_OK)
     {
     this->TransactionInProgress = false;
     this->SetLastErrorText(NULL);
@@ -499,11 +499,11 @@ bool vtkSQLiteQuery::RollbackTransaction
 
   vtkSQLiteDatabase *dbContainer = vtkSQLiteDatabase::SafeDownCast( this->Database );
   assert(dbContainer != NULL);
-  vtk_sqlite3 *db = dbContainer->SQLiteInstance;
+  sqlite3 *db = dbContainer->SQLiteInstance;
   char *errorMessage = NULL;
-  int result = vtk_sqlite3_exec(db, ROLLBACK_TRANSACTION, NULL, NULL, &errorMessage);
+  int result = sqlite3_exec(db, ROLLBACK_TRANSACTION, NULL, NULL, &errorMessage);
 
-  if (result == VTK_SQLITE_OK)
+  if (result == SQLITE_OK)
     {
     this->TransactionInProgress = false;
     this->SetLastErrorText(NULL);
@@ -647,11 +647,11 @@ bool vtkSQLiteQuery::BindIntegerParamete
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
-  int status = vtk_sqlite3_bind_int(this->Statement, index+1, value);
+  int status = sqlite3_bind_int(this->Statement, index+1, value);
 
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_bind_int returned error: " << status;
@@ -676,11 +676,11 @@ bool vtkSQLiteQuery::BindInt64Parameter(
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
-  int status = vtk_sqlite3_bind_int(this->Statement, index+1, static_cast<vtk_sqlite_int64>(value));
+  int status = sqlite3_bind_int(this->Statement, index+1, static_cast<sqlite_int64>(value));
 
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_bind_int64 returned error: " << status;
@@ -705,12 +705,12 @@ bool vtkSQLiteQuery::BindDoubleParameter
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
 
-  int status = vtk_sqlite3_bind_double(this->Statement, index+1, value);
+  int status = sqlite3_bind_double(this->Statement, index+1, value);
 
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_bind_double returned error: " << status;
@@ -734,12 +734,12 @@ bool vtkSQLiteQuery::BindStringParameter
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
   
-  int status = vtk_sqlite3_bind_text(this->Statement, index+1, value, length, VTK_SQLITE_TRANSIENT);
+  int status = sqlite3_bind_text(this->Statement, index+1, value, length, SQLITE_TRANSIENT);
 
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_bind_text returned error: " << status;
@@ -763,17 +763,17 @@ bool vtkSQLiteQuery::BindBlobParameter(i
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
   
   int status = 
-    vtk_sqlite3_bind_blob(this->Statement, 
+    sqlite3_bind_blob(this->Statement, 
                           index+1, 
                           data, 
                           length, 
-                          VTK_SQLITE_TRANSIENT);
+                          SQLITE_TRANSIENT);
 
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_bind_blob returned error: " << status;
@@ -797,12 +797,12 @@ bool vtkSQLiteQuery::ClearParameterBindi
   if (this->Active)
     {
     this->Active = false;
-    vtk_sqlite3_reset(this->Statement);
+    sqlite3_reset(this->Statement);
     }
 
-  int status = vtk_sqlite3_clear_bindings(this->Statement);
+  int status = sqlite3_clear_bindings(this->Statement);
   
-  if (status != VTK_SQLITE_OK)
+  if (status != SQLITE_OK)
     {
     vtksys_ios::ostringstream errormessage;
     errormessage << "sqlite_clear_bindings returned error: " << status;
--- vtk-5.9.0.orig/IO/vtkFFMPEGWriter.cxx
+++ vtk-5.9.0/IO/vtkFFMPEGWriter.cxx
@@ -123,7 +123,7 @@ int vtkFFMPEGWriterInternal::Start()
     }
 
   //choose avi media file format
-  this->avOutputFormat = guess_format("avi", NULL, NULL);
+  this->avOutputFormat = av_guess_format("avi", NULL, NULL);
   if (!this->avOutputFormat) 
     {
     vtkGenericWarningMacro (<< "Could not open the avi media file format.");
@@ -150,7 +150,7 @@ int vtkFFMPEGWriterInternal::Start()
   //Set up the codec.
   AVCodecContext *c = this->avStream->codec;
   c->codec_id = (CodecID)this->avOutputFormat->video_codec;
-  c->codec_type = CODEC_TYPE_VIDEO;
+  c->codec_type = AVMEDIA_TYPE_VIDEO;
   c->width = this->Dim[0];
   c->height = this->Dim[1];
   c->pix_fmt = PIX_FMT_YUVJ420P;
@@ -343,7 +343,7 @@ int vtkFFMPEGWriterInternal::Write(vtkIm
     pkt.stream_index = this->avStream->index;
     if (cc->coded_frame->key_frame) //treat keyframes well
       {
-      pkt.flags |= PKT_FLAG_KEY;
+      pkt.flags |= AV_PKT_FLAG_KEY;
       }
     pkt.duration = 0; //presentation duration in time_base units or 0 if NA
     pkt.pos = -1; //byte position in stream or -1 if NA
--- vtk-5.9.0.orig/IO/vtkSQLiteDatabase.cxx
+++ vtk-5.9.0/IO/vtkSQLiteDatabase.cxx
@@ -29,7 +29,7 @@
 #include <vtksys/ios/fstream>
 #include <vtksys/ios/sstream>
 
-#include <vtksqlite/vtk_sqlite3.h>
+#include <sqlite3.h>
 
 vtkStandardNewMacro(vtkSQLiteDatabase);
 
@@ -307,15 +307,15 @@ bool vtkSQLiteDatabase::Open(const char*
       }
     }
 
-  int result = vtk_sqlite3_open(this->DatabaseFileName, & (this->SQLiteInstance));
+  int result = sqlite3_open(this->DatabaseFileName, & (this->SQLiteInstance));
 
-  if (result != VTK_SQLITE_OK)
+  if (result != SQLITE_OK)
     {
     vtkDebugMacro(<<"SQLite open() failed.  Error code is "
                   << result << " and message is "
-                  << vtk_sqlite3_errmsg(this->SQLiteInstance) );
+                  << sqlite3_errmsg(this->SQLiteInstance) );
 
-    vtk_sqlite3_close(this->SQLiteInstance);
+    sqlite3_close(this->SQLiteInstance);
     return false;
     }
   else
@@ -334,8 +334,8 @@ void vtkSQLiteDatabase::Close()
     }
   else
     {
-    int result = vtk_sqlite3_close(this->SQLiteInstance);
-    if (result != VTK_SQLITE_OK)
+    int result = sqlite3_close(this->SQLiteInstance);
+    if (result != SQLITE_OK)
       {
       vtkWarningMacro(<< "Close(): SQLite returned result code " << result);
       }
@@ -374,7 +374,7 @@ vtkStringArray * vtkSQLiteDatabase::GetT
   if (!status)
     {
     vtkErrorMacro(<< "GetTables(): Database returned error: "
-                  << vtk_sqlite3_errmsg(this->SQLiteInstance) );
+                  << sqlite3_errmsg(this->SQLiteInstance) );
     query->Delete();
     return this->Tables;
     }
@@ -403,7 +403,7 @@ vtkStringArray * vtkSQLiteDatabase::GetR
   if (!status)
     {
     vtkErrorMacro(<< "GetRecord(" << table << "): Database returned error: "
-                  << vtk_sqlite3_errmsg(this->SQLiteInstance) );
+                  << sqlite3_errmsg(this->SQLiteInstance) );
     query->Delete();
     return NULL;
     }
@@ -467,10 +467,10 @@ bool vtkSQLiteDatabase::ParseURL(const c
 // ----------------------------------------------------------------------
 bool vtkSQLiteDatabase::HasError()
 {
-  return (vtk_sqlite3_errcode(this->SQLiteInstance)!=VTK_SQLITE_OK);
+  return (sqlite3_errcode(this->SQLiteInstance)!=SQLITE_OK);
 }
 
 const char* vtkSQLiteDatabase::GetLastErrorText()
 {
-  return vtk_sqlite3_errmsg(this->SQLiteInstance);
+  return sqlite3_errmsg(this->SQLiteInstance);
 }
--- vtk-5.9.0.orig/IO/vtkSQLiteDatabase.h
+++ vtk-5.9.0/IO/vtkSQLiteDatabase.h
@@ -48,7 +48,7 @@
 class vtkSQLQuery;
 class vtkSQLiteQuery;
 class vtkStringArray;
-struct vtk_sqlite3;
+struct sqlite3;
 
 class VTK_IO_EXPORT vtkSQLiteDatabase : public vtkSQLDatabase
 {
@@ -146,7 +146,7 @@ protected:
   virtual bool ParseURL(const char* url);
 
 private:
-  vtk_sqlite3 *SQLiteInstance;
+  sqlite3 *SQLiteInstance;
   
   // We want this to be private, a user of this class
   // should not be setting this for any reason
--- vtk-5.9.0.orig/IO/CMakeLists.txt
+++ vtk-5.9.0/IO/CMakeLists.txt
@@ -18,8 +18,8 @@ SET(KIT_TCL_LIBS vtkFilteringTCL)
 SET(KIT_PYTHON_LIBS vtkFilteringPythonD)
 SET(KIT_JAVA_LIBS vtkFilteringJava)
 SET(KIT_INTERFACE_LIBRARIES vtkFiltering)
-SET(KIT_LIBS vtkDICOMParser vtkNetCDF vtkNetCDF_cxx LSDyna
-  ${_VTK_METAIO_LIB} vtksqlite
+SET(KIT_LIBS vtkDICOMParser netcdf netcdf_c++ LSDyna
+  ${_VTK_METAIO_LIB} sqlite3
   ${VTK_PNG_LIBRARIES} ${VTK_ZLIB_LIBRARIES} ${VTK_JPEG_LIBRARIES}
   ${VTK_TIFF_LIBRARIES} ${VTK_EXPAT_LIBRARIES} ${VTK_OGGTHEORA_LIBRARIES}
   ${KWSYS_NAMESPACE})
--- vtk-5.9.0.orig/IO/vtkSQLiteQuery.h
+++ vtk-5.9.0/IO/vtkSQLiteQuery.h
@@ -46,7 +46,7 @@
 class vtkSQLiteDatabase;
 class vtkVariant;
 class vtkVariantArray;
-struct vtk_sqlite3_stmt;
+struct sqlite3_stmt;
 
 class VTK_IO_EXPORT vtkSQLiteQuery : public vtkSQLQuery
 {
@@ -154,7 +154,7 @@ private:
   vtkSQLiteQuery(const vtkSQLiteQuery &); // Not implemented.
   void operator=(const vtkSQLiteQuery &); // Not implemented.
 
-  vtk_sqlite3_stmt *Statement;
+  sqlite3_stmt *Statement;
   bool InitialFetch;
   int InitialFetchResult;
   char *LastErrorText;
--- vtk-5.9.0.orig/Charts/CMakeLists.txt
+++ vtk-5.9.0/Charts/CMakeLists.txt
@@ -99,9 +99,9 @@ IF(VTK_USE_QT)
   SET(QT_DONT_USE_QTGUI)
   INCLUDE(${QT_USE_FILE})
   IF (APPLE)
-    LIST (APPEND KIT_INTERFACE_LIBRARIES ${QT_LIBRARIES})
+    LIST (APPEND KIT_INTERFACE_LIBRARIES QtGui QtCore )
   ELSE (APPLE)
-    LIST (APPEND KIT_LIBS ${QT_LIBRARIES})
+    LIST (APPEND KIT_LIBS QtGui QtCore )
   ENDIF (APPLE)
 ENDIF(VTK_USE_QT)
 
--- vtk-5.9.0.orig/Utilities/vtk_netcdfcpp.h
+++ vtk-5.9.0/Utilities/vtk_netcdfcpp.h
@@ -16,6 +16,9 @@
 #define __vtk_netcdfcpp_h
 
 /* Use the netcdf library configured for VTK.  */
-#include <vtknetcdf/cxx/netcdfcpp.h>
+//#include <vtknetcdf/netcdfcpp.h>
+
+#include <netcdfcpp.h>
+
 
 #endif
--- vtk-5.9.0.orig/Utilities/vtk_netcdf.h
+++ vtk-5.9.0/Utilities/vtk_netcdf.h
@@ -16,6 +16,9 @@
 #define __vtk_netcdf_h
 
 /* Use the netcdf library configured for VTK.  */
-#include <vtknetcdf/include/netcdf.h>
+//#include <vtknetcdf/netcdf.h>
+
+/* Use Debian's netcdf */
+#include <netcdf.h>
 
 #endif
--- vtk-5.9.0.orig/Utilities/CMakeLists.txt
+++ vtk-5.9.0/Utilities/CMakeLists.txt
@@ -35,7 +35,7 @@ VTK_THIRD_PARTY_SUBDIR(LIBXML2 vtklibxml
 VTK_THIRD_PARTY_SUBDIR(DICOMParser DICOMParser)
 VTK_THIRD_PARTY_SUBDIR(MATERIALLIBRARY MaterialLibrary)
 VTK_THIRD_PARTY_SUBDIR(LIBPROJ4 vtklibproj4)
-VTK_THIRD_PARTY_SUBDIR(MRMPI mrmpi)
+#VTK_THIRD_PARTY_SUBDIR(MRMPI mrmpi)
 IF(VTK_USE_OGGTHEORA_ENCODER)
   VTK_THIRD_PARTY_SUBDIR(OGGTHEORA vtkoggtheora)
 ENDIF(VTK_USE_OGGTHEORA_ENCODER)
@@ -54,7 +54,7 @@ SET( verdict_INSTALL_BIN_DIR ${VTK_INSTA
 SET( verdict_INSTALL_LIB_DIR ${VTK_INSTALL_LIB_DIR_CM24})
 ADD_SUBDIRECTORY(verdict)
 
-ADD_SUBDIRECTORY(vtknetcdf)
+#ADD_SUBDIRECTORY(vtknetcdf)
 IF(VTK_USE_METAIO)
   SET(METAIO_FOR_VTK 1)
   ADD_SUBDIRECTORY(vtkmetaio)
@@ -62,7 +62,7 @@ IF(VTK_USE_METAIO)
     SET_PROPERTY(GLOBAL APPEND PROPERTY VTK_TARGETS vtkmetaio)
   ENDIF(NOT VTK_INSTALL_NO_LIBRARIES)
 ENDIF(VTK_USE_METAIO)
-ADD_SUBDIRECTORY(vtksqlite)
+#ADD_SUBDIRECTORY(vtksqlite)
 
 IF(VTK_HAS_EXODUS)
   ADD_SUBDIRECTORY(vtkexodus2)
--- vtk-5.9.0.orig/Utilities/mrmpi/src/CMakeLists.txt
+++ vtk-5.9.0/Utilities/mrmpi/src/CMakeLists.txt
@@ -7,6 +7,9 @@ SET (mrmpi_SOURCES
         memory.cpp
         error.cpp)
 
+      INCLUDE_DIRECTORIES(
+        ${MPI_INCLUDE_PATH}
+        )
 VTK_ADD_LIBRARY (MapReduceMPI ${mrmpi_SOURCES})
 TARGET_LINK_LIBRARIES (MapReduceMPI ${mrmpi_LIBS})
 IF(VTK_LIBRARY_PROPERTIES)
--- vtk-5.9.0.orig/Utilities/Cosmo/CMakeLists.txt
+++ vtk-5.9.0/Utilities/Cosmo/CMakeLists.txt
@@ -43,6 +43,13 @@ IF(VTK_LIBRARY_PROPERTIES)
   SET_TARGET_PROPERTIES(Cosmo PROPERTIES ${VTK_LIBRARY_PROPERTIES})
 ENDIF(VTK_LIBRARY_PROPERTIES)
 
+# Apply user-defined properties to the library targets.
+IF(VTK_LIBRARY_PROPERTIES)
+  SET_TARGET_PROPERTIES(Cosmo PROPERTIES
+    ${VTK_LIBRARY_PROPERTIES}
+    )
+ENDIF(VTK_LIBRARY_PROPERTIES)
+
 IF(NOT VTK_INSTALL_NO_LIBRARIES)
   INSTALL(TARGETS Cosmo
     EXPORT ${VTK_INSTALL_EXPORT_NAME}
--- vtk-5.9.0.orig/Utilities/VPIC/CMakeLists.txt
+++ vtk-5.9.0/Utilities/VPIC/CMakeLists.txt
@@ -25,6 +25,14 @@ INCLUDE_DIRECTORIES (${VPIC_SOURCE_DIR}
 
 VTK_ADD_LIBRARY(VPIC ${VPIC_SOURCES})
 TARGET_LINK_LIBRARIES(VPIC vtksys )
+
+# Apply user-defined properties to the library targets.
+IF(VTK_LIBRARY_PROPERTIES)
+  SET_TARGET_PROPERTIES(VPIC PROPERTIES
+    ${VTK_LIBRARY_PROPERTIES}
+    )
+ENDIF(VTK_LIBRARY_PROPERTIES)
+
 IF(VTK_USE_MPI)
 TARGET_LINK_LIBRARIES(VPIC ${MPI_LIBRARY})
   IF(MPI_EXTRA_LIBRARY)
--- vtk-5.9.0.orig/Utilities/ftgl/CMakeLists.txt
+++ vtk-5.9.0/Utilities/ftgl/CMakeLists.txt
@@ -1,5 +1,7 @@
 PROJECT (VTKFTGL)
 
+INCLUDE(TestCXXAcceptsFlag)
+
 #
 # Dependency mask
 #
@@ -165,6 +167,45 @@ IF(NOT VTK_INSTALL_NO_LIBRARIES)
 ENDIF(NOT VTK_INSTALL_NO_LIBRARIES)
 
 #
+# To avoid name clashes (and the resulting crashes) between our FTGL and the
+# system FTGL, we configure the linker to add a prefix to all symbols.
+#
+
+if (CMAKE_COMPILER_IS_GNUCXX)
+
+  GET_TARGET_PROPERTY(VTKFTGL_LINK_FLAGS vtkftgl LINK_FLAGS)
+  IF(VTKFTGL_LINK_FLAGS)
+    SET(VTKFTGL_LINK_FLAGS "${VTKFTGL_LINK_FLAGS} ")
+  ELSE(VTKFTGL_LINK_FLAGS)
+    SET(VTKFTGL_LINK_FLAGS)
+  ENDIF(VTKFTGL_LINK_FLAGS)
+
+
+  set(_version_script_content "libvtkftgl { *; };")
+  set(_version_script "${CMAKE_CURRENT_BINARY_DIR}/version.script")
+  file(WRITE ${_version_script} "${_version_script_content}\n")
+
+  # Check if the linker supports version script (i.e. is GNU ld)
+  check_cxx_accepts_flag("-Wl,--version-script,${_version_script}"
+    LD_ACCEPTS_VERSION_SCRIPT)
+  if (LD_ACCEPTS_VERSION_SCRIPT)
+    set(_link_flags "-Wl,--version-script,'${_version_script}'")
+  endif (LD_ACCEPTS_VERSION_SCRIPT)
+
+  if (_link_flags)
+    SET_TARGET_PROPERTIES(vtkftgl PROPERTIES
+      LINK_FLAGS "${VTKFTGL_LINK_FLAGS}${_link_flags}")
+  endif (_link_flags)
+endif (CMAKE_COMPILER_IS_GNUCXX)
+
+
+#
+# Do not cover this lib
+#
+#CONFIGURE_FILE (${VTKFTGL_SOURCE_DIR}/.NoDartCoverage
+#                ${VTKFTGL_BINARY_DIR}/.NoDartCoverage)
+
+#
 # Create the configuration file
 #
 ADD_DEFINITIONS (-DVTKFTGL)
--- vtk-5.9.0.orig/Utilities/DICOMParser/DICOMParser.cxx
+++ vtk-5.9.0/Utilities/DICOMParser/DICOMParser.cxx
@@ -41,6 +41,7 @@
 
 #include <string.h>
 #include <string>
+#include <cstring>
 
 // Define DEBUG_DICOM to get debug messages sent to dicom_stream::cerr
 // #define DEBUG_DICOM
--- vtk-5.9.0.orig/Utilities/LastConfigureStep/CMakeLists.txt
+++ vtk-5.9.0/Utilities/LastConfigureStep/CMakeLists.txt
@@ -11,7 +11,7 @@
 #-----------------------------------------------------------------------------
 GET_PROPERTY(VTK_TARGETS GLOBAL PROPERTY VTK_TARGETS)
 EXPORT(TARGETS ${VTK_TARGETS} FILE ${VTK_BINARY_DIR}/${VTK_INSTALL_EXPORT_NAME}.cmake)
-INSTALL(EXPORT ${VTK_INSTALL_EXPORT_NAME} DESTINATION ${VTK_INSTALL_LIB_DIR_CM24})
+INSTALL(EXPORT ${VTK_INSTALL_EXPORT_NAME} DESTINATION ${VTK_INSTALL_PACKAGE_DIR_CM24})
 GET_PROPERTY(VTK_LIBRARIES GLOBAL PROPERTY VTK_LIBRARIES)
 #-----------------------------------------------------------------------------
 # Create the VTKConfig.cmake file containing the VTK configuration.
--- vtk-5.9.0.orig/Utilities/vtkexodus2/CMakeLists.txt
+++ vtk-5.9.0/Utilities/vtkexodus2/CMakeLists.txt
@@ -241,7 +241,7 @@ ENDIF(APPLE)
 
 
 VTK_ADD_LIBRARY(vtkexoIIc ${cbind_SRCS})
-TARGET_LINK_LIBRARIES(vtkexoIIc vtkNetCDF)
+TARGET_LINK_LIBRARIES(vtkexoIIc netcdf)
 
 # Apply user-defined properties to the library target.
 IF(VTK_LIBRARY_PROPERTIES)
--- vtk-5.9.0.orig/CMake/KitCommonPythonWrapBlock.cmake
+++ vtk-5.9.0/CMake/KitCommonPythonWrapBlock.cmake
@@ -80,6 +80,16 @@ IF(PYTHON_ENABLE_MODULE_vtk${KIT}Python)
   # vtkpython executable in the build tree should have the needed
   # RPATH anyway.
   SET_TARGET_PROPERTIES(vtk${KIT}Python PROPERTIES SKIP_BUILD_RPATH 1)
+
+  set_target_properties(vtk${KIT}PythonD
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES "${KIT_INTERFACE_LIBRARIES}"
+  )
+
+  set_target_properties(vtk${KIT}Python
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES ""
+  )
   
   IF(WIN32 OR APPLE)
     TARGET_LINK_LIBRARIES (vtk${KIT}Python ${VTK_PYTHON_LIBRARIES})
--- vtk-5.9.0.orig/CMake/KitCommonJavaWrapBlock.cmake
+++ vtk-5.9.0/CMake/KitCommonJavaWrapBlock.cmake
@@ -8,7 +8,7 @@ IF(NOT VTK_INSTALL_NO_LIBRARIES)
   INSTALL(TARGETS vtk${KIT}Java
     EXPORT ${VTK_INSTALL_EXPORT_NAME}
     RUNTIME DESTINATION ${VTK_INSTALL_BIN_DIR_CM24} COMPONENT RuntimeLibraries
-    LIBRARY DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT RuntimeLibraries
+    LIBRARY DESTINATION "${VTK_INSTALL_LIB_DIR_CM24}/jni" COMPONENT RuntimeLibraries
     ARCHIVE DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT Development)
 ENDIF(NOT VTK_INSTALL_NO_LIBRARIES)
 ADD_DEPENDENCIES(vtk${KIT}Java vtk${KIT})
--- vtk-5.9.0.orig/CMake/KitCommonTclWrapBlock.cmake
+++ vtk-5.9.0/CMake/KitCommonTclWrapBlock.cmake
@@ -4,6 +4,14 @@ VTK_WRAP_TCL3(vtk${KIT}TCL KitTCL_SRCS
 VTK_ADD_LIBRARY(vtk${KIT}TCL ${KitTCL_SRCS} ${Kit_TCL_EXTRA_SRCS})
 SET(KIT_LIBRARY_TARGETS ${KIT_LIBRARY_TARGETS} vtk${KIT}TCL)
 TARGET_LINK_LIBRARIES (vtk${KIT}TCL vtk${KIT} ${KIT_TCL_LIBS})
+
+
+  set_target_properties(vtk${KIT}TCL
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES "${KIT_INTERFACE_LIBRARIES}"
+  )
+
+
 IF(NOT VTK_INSTALL_NO_LIBRARIES)
   INSTALL(TARGETS vtk${KIT}TCL
     EXPORT ${VTK_INSTALL_EXPORT_NAME}
--- vtk-5.9.0.orig/Parallel/vtkPNetCDFPOPReader.cxx
+++ vtk-5.9.0/Parallel/vtkPNetCDFPOPReader.cxx
@@ -36,7 +36,8 @@ PURPOSE.  See the above copyright notice
 #include <set>
 
 #ifdef MPI_Comm
-    #error MPI_Comm is #define'd somewhere!  That's BAD!  (Try checking netcdf.h.)
+    #undef MPI_Comm
+//    #error MPI_Comm is #define'd somewhere!  That's BAD!  (Try checking netcdf.h.)
 #endif
 
 vtkStandardNewMacro(vtkPNetCDFPOPReader);
--- vtk-5.9.0.orig/Parallel/CMakeLists.txt
+++ vtk-5.9.0/Parallel/CMakeLists.txt
@@ -209,7 +209,7 @@ IF (VTK_USE_MPI)
     MESSAGE("Could not find the required MPI libraries")
   ENDIF (MPI_LIBRARY)   
   IF (MPI_EXTRA_LIBRARY)   
-    SET(KIT_LIBS ${KIT_LIBS} "${MPI_EXTRA_LIBRARY}")   
+    SET(KIT_LIBS ${KIT_LIBS} "${MPI_LIBRARY}")   
   ENDIF (MPI_EXTRA_LIBRARY) 
 ENDIF (VTK_USE_MPI)
 
@@ -245,6 +245,8 @@ FOREACH(file ${shader_files})
 ENDFOREACH(file)
 ENDIF(VTK_USE_RENDERING)
 
+
+
 #-----------------------------------------------------------------------------
 # Include CMake code common to all kits.
 INCLUDE(${VTK_CMAKE_DIR}/KitCommonBlock.cmake)
--- vtk-5.9.0.orig/Rendering/CMakeLists.txt
+++ vtk-5.9.0/Rendering/CMakeLists.txt
@@ -9,9 +9,7 @@ IF (JAVA_AWT_LIBRARY)
 ENDIF (JAVA_AWT_LIBRARY)
 
 SET(KIT_INTERFACE_LIBRARIES vtkGraphics vtkImaging)
-SET(KIT_LIBS vtkIO vtkftgl
-  ${VTK_FREETYPE_LIBRARIES}
-)
+SET(KIT_LIBS vtkIO vtkftgl)
 #INCLUDE(${VTK_CMAKE_DIR}/vtkTestGL.cmake)
 #INCLUDE(${VTK_CMAKE_DIR}/vtkTestGLX.cmake)
 
@@ -452,9 +450,9 @@ IF(VTK_USE_QT)
   # path in install names. This workaround fixes the problem by forcing all libraries
   # and executables that depend on vtkRendering to also directly link to Qt libraries.
   IF (APPLE)
-    LIST (APPEND KIT_INTERFACE_LIBRARIES ${QT_LIBRARIES})
+    LIST (APPEND KIT_INTERFACE_LIBRARIES QtGui QtCore)
   ELSE (APPLE)
-    LIST (APPEND KIT_LIBS ${QT_LIBRARIES})
+    LIST (APPEND KIT_LIBS QtGui QtCore)
   ENDIF (APPLE)
 
 ENDIF(VTK_USE_QT)
@@ -551,7 +549,6 @@ ELSE (WIN32)
     INCLUDE(CheckFunctionExists)
     SET(VTK_SAVE_CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")
     SET(CMAKE_REQUIRED_LIBRARIES
-      ${OPENGL_LIBRARIES}
       ${CMAKE_THREAD_LIBS}
       ${CMAKE_REQUIRED_LIBRARIES}
       -lm
@@ -797,7 +794,7 @@ IF (VTK_WRAP_TCL AND VTK_USE_TK)
   # Use special interactor for X and Tk.
   IF(VTK_USE_X)
     SET(KitTCL_SRCS ${KitTCL_SRCS} vtkXRenderWindowTclInteractor.cxx)
-    SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} ${X11_LIBRARIES})
+    SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} X11)
   ENDIF(VTK_USE_X)
   IF(VTK_USE_CARBON)
     SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} "-framework Carbon")
@@ -851,7 +848,7 @@ IF (VTK_WRAP_PYTHON AND VTK_USE_TK AND T
               ${RenderingPythonTkWidgets_SRCS})
   SET(VTK_PYTHONTK_LIBRARIES ${VTK_TK_LIBRARIES})
   IF(VTK_USE_X)
-    SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} ${X11_LIBRARIES})
+    SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} X11)
   ENDIF(VTK_USE_X)
   IF(VTK_USE_CARBON)
     SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} "-framework Carbon")
@@ -888,7 +885,7 @@ IF(VTK_USE_X)
   IF (X11_Xt_LIB)
     TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xt_LIB})
   ENDIF (X11_Xt_LIB)
-  TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_LIBRARIES})
+  TARGET_LINK_LIBRARIES(vtk${KIT} X11)
   IF (VTK_USE_TK)
     # Definitely needed in case we are linking against a Tcl/Tk 8.5 static,
     # which by default seems to be missing Xss and Xft. It can not just be
@@ -897,12 +894,12 @@ IF(VTK_USE_X)
     FIND_LIBRARY(X11_Xscreensaver_LIB Xss ${X11_LIB_SEARCH_PATH})
     MARK_AS_ADVANCED(X11_Xscreensaver_LIB)
     IF(X11_Xscreensaver_LIB)
-      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xscreensaver_LIB})
+#      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xscreensaver_LIB})
     ENDIF(X11_Xscreensaver_LIB)
     FIND_LIBRARY(X11_Xft_LIB Xft ${X11_LIB_SEARCH_PATH})
     MARK_AS_ADVANCED(X11_Xft_LIB)
     IF(X11_Xft_LIB)
-      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xft_LIB})
+#      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xft_LIB})
     ENDIF(X11_Xft_LIB)
     IF(APPLE)
       FIND_LIBRARY(X11_fontconfig_LIB fontconfig ${X11_LIB_SEARCH_PATH})
