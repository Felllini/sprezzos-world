# DP: updates from the binutils-2.23 branch

# git diff 7dbb7d8db8003ff73d80956bd3271f9588437aa7 59e7756365ba4d0888d9d26b2292d4c0abf04614
# exclude bfd/{configure{,.ac},Makefile.{am,in}}

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 7aa83bf..28b27d3 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,33 @@
+2012-11-29  Roland McGrath  <mcgrathr@google.com>
+
+	* elf-nacl.c (segment_eligible_for_headers): Disallow writable segments.
+
+2012-11-26  Roland McGrath  <mcgrathr@google.com>
+
+	* elf-nacl.c (nacl_modify_segment_map): Don't crash when INFO is null.
+
+2012-11-21  Roland McGrath  <mcgrathr@google.com>
+
+	* elf-nacl.c (segment_nonexecutable_and_has_contents): Renamed to ...
+	(segment_eligible_for_headers): ... this.  Take new arguments
+	MAXPAGESIZE and SIZEOF_HEADERS.  Return false if the first section's
+	start address doesn't leave space for the headers.
+	(nacl_modify_segment_map): Update caller.
+
+2012-11-19  Joey Ye  <joey.ye@arm.com>
+
+	* elf32-arm.c (elf32_arm_final_link_relocate, 
+	case R_ARM_THM_ALU_PREL_11_0, case R_ARM_THM_PC12): Align address of
+	the place being relocated.
+	(elf32_arm_final_link_relocate, case R_ARM_THM_PC8): Align address
+	of the place being relocated and truncate addend.
+	(Pa): New macro.
+
+2012-11-14  Roland McGrath  <mcgrathr@google.com>
+
+	* elf32-arm.c (elf32_arm_nacl_plt0_entry): Use bic rather than bfc
+	instruction for data sandboxing.
+
 2012-11-13  Tristan Gingold  <gingold@adacore.com>
 
 	* configure.in: Bump version to 2.23.1
diff --git a/bfd/elf-nacl.c b/bfd/elf-nacl.c
index 842e367..6753c7c 100644
--- a/bfd/elf-nacl.c
+++ b/bfd/elf-nacl.c
@@ -42,14 +42,21 @@ segment_executable (struct elf_segment_map *seg)
   return FALSE;
 }
 
+/* Determine if this segment is eligible to receive the file and program
+   headers.  It must be read-only, non-executable, and have contents.
+   Its first section must start far enough past the page boundary to
+   allow space for the headers.  */
 static bfd_boolean
-segment_nonexecutable_and_has_contents (struct elf_segment_map *seg)
+segment_eligible_for_headers (struct elf_segment_map *seg,
+                              bfd_vma maxpagesize, bfd_vma sizeof_headers)
 {
   bfd_boolean any_contents = FALSE;
   unsigned int i;
+  if (seg->count == 0 || seg->sections[0]->lma % maxpagesize < sizeof_headers)
+    return FALSE;
   for (i = 0; i < seg->count; ++i)
     {
-      if (seg->sections[i]->flags & SEC_CODE)
+      if ((seg->sections[i]->flags & (SEC_CODE|SEC_READONLY)) != SEC_READONLY)
         return FALSE;
       if (seg->sections[i]->flags & SEC_HAS_CONTENTS)
         any_contents = TRUE;
@@ -68,6 +75,8 @@ nacl_modify_segment_map (bfd *abfd, struct bfd_link_info *info)
   struct elf_segment_map **first_load = NULL;
   struct elf_segment_map **last_load = NULL;
   bfd_boolean moved_headers = FALSE;
+  int sizeof_headers = info == NULL ? 0 : bfd_sizeof_headers (abfd, info);
+  bfd_vma maxpagesize = get_elf_backend_data (abfd)->maxpagesize;
 
   if (info != NULL && info->user_phdrs)
     /* The linker script used PHDRS explicitly, so don't change what the
@@ -93,7 +102,8 @@ nacl_modify_segment_map (bfd *abfd, struct bfd_link_info *info)
           /* Now that we've noted the first PT_LOAD, we're looking for
              the first non-executable PT_LOAD with a nonempty p_filesz.  */
           else if (!moved_headers
-                   && segment_nonexecutable_and_has_contents (seg))
+                   && segment_eligible_for_headers (seg, maxpagesize,
+                                                    sizeof_headers))
             {
               /* This is the one we were looking for!
 
@@ -139,8 +149,7 @@ nacl_modify_segment_map (bfd *abfd, struct bfd_link_info *info)
    proper order for the ELF rule that they must appear in ascending address
    order.  So find the two segments we swapped before, and swap them back.  */
 bfd_boolean
-nacl_modify_program_headers (bfd *abfd,
-                             struct bfd_link_info *info ATTRIBUTE_UNUSED)
+nacl_modify_program_headers (bfd *abfd, struct bfd_link_info *info)
 {
   struct elf_segment_map **m = &elf_tdata (abfd)->segment_map;
   Elf_Internal_Phdr *phdr = elf_tdata (abfd)->phdr;
diff --git a/bfd/elf32-arm.c b/bfd/elf32-arm.c
index a287fbb..01ca11b 100644
--- a/bfd/elf32-arm.c
+++ b/bfd/elf32-arm.c
@@ -63,6 +63,9 @@
 #define ARM_ELF_ABI_VERSION		0
 #define ARM_ELF_OS_ABI_VERSION		ELFOSABI_ARM
 
+/* The Adjusted Place, as defined by AAELF.  */
+#define Pa(X) ((X) & 0xfffffffc)
+
 static bfd_boolean elf32_arm_write_section (bfd *output_bfd,
 					    struct bfd_link_info *link_info,
 					    asection *sec,
@@ -2209,21 +2212,21 @@ static const bfd_vma elf32_arm_nacl_plt0_entry [] =
   0xe08cc00f,		/* add	ip, ip, pc			*/
   0xe52dc008,		/* str	ip, [sp, #-8]!			*/
   /* Second bundle: */
-  0xe7dfcf1f, 	/* bfc	ip, #30, #2			*/
-  0xe59cc000, 	/* ldr	ip, [ip]			*/
+  0xe3ccc103,		/* bic	ip, ip, #0xc0000000		*/
+  0xe59cc000,		/* ldr	ip, [ip]			*/
   0xe3ccc13f,		/* bic	ip, ip, #0xc000000f		*/
-  0xe12fff1c, 	/* bx	ip				*/
+  0xe12fff1c,		/* bx	ip				*/
   /* Third bundle: */
-  0xe320f000, 	/* nop					*/
-  0xe320f000, 	/* nop					*/
-  0xe320f000, 	/* nop					*/
+  0xe320f000,		/* nop					*/
+  0xe320f000,		/* nop					*/
+  0xe320f000,		/* nop					*/
   /* .Lplt_tail: */
   0xe50dc004,		/* str	ip, [sp, #-4]			*/
   /* Fourth bundle: */
-  0xe7dfcf1f,		/* bfc	ip, #30, #2			*/
-  0xe59cc000, 	/* ldr	ip, [ip]			*/
+  0xe3ccc103,		/* bic	ip, ip, #0xc0000000		*/
+  0xe59cc000,		/* ldr	ip, [ip]			*/
   0xe3ccc13f,		/* bic	ip, ip, #0xc000000f		*/
-  0xe12fff1c, 	/* bx	ip				*/
+  0xe12fff1c,		/* bx	ip				*/
 };
 #define ARM_NACL_PLT_TAIL_OFFSET	(11 * 4)
 
@@ -8619,9 +8622,9 @@ elf32_arm_final_link_relocate (reloc_howto_type *           howto,
           }
 
 	relocation = value + signed_addend;
-	relocation -= (input_section->output_section->vma
-		       + input_section->output_offset
-		       + rel->r_offset);
+	relocation -= Pa (input_section->output_section->vma
+		          + input_section->output_offset
+		          + rel->r_offset);
 
         value = abs (relocation);
 
@@ -8651,12 +8654,12 @@ elf32_arm_final_link_relocate (reloc_howto_type *           howto,
 	insn = bfd_get_16 (input_bfd, hit_data);
 
         if (globals->use_rel)
-	  addend = (insn & 0x00ff) << 2;
+	  addend = ((((insn & 0x00ff) << 2) + 4) & 0x3ff) -4;
 
 	relocation = value + addend;
-	relocation -= (input_section->output_section->vma
-		       + input_section->output_offset
-		       + rel->r_offset);
+	relocation -= Pa (input_section->output_section->vma
+		          + input_section->output_offset
+		          + rel->r_offset);
 
         value = abs (relocation);
 
@@ -8691,9 +8694,9 @@ elf32_arm_final_link_relocate (reloc_howto_type *           howto,
           }
 
 	relocation = value + signed_addend;
-	relocation -= (input_section->output_section->vma
-		       + input_section->output_offset
-		       + rel->r_offset);
+	relocation -= Pa (input_section->output_section->vma
+		          + input_section->output_offset
+		          + rel->r_offset);
 
         value = abs (relocation);
 
diff --git a/bfd/version.h b/bfd/version.h
index de757c0..40aea7e 100644
--- a/bfd/version.h
+++ b/bfd/version.h
@@ -1,4 +1,4 @@
-#define BFD_VERSION_DATE 20121113
+#define BFD_VERSION_DATE 20121205
 #define BFD_VERSION @bfd_version@
 #define BFD_VERSION_STRING  @bfd_version_package@ @bfd_version_string@
 #define REPORT_BUGS_TO @report_bugs_to@
diff --git a/binutils/testsuite/ChangeLog b/binutils/testsuite/ChangeLog
index 022524b..d7d7740 100644
--- a/binutils/testsuite/ChangeLog
+++ b/binutils/testsuite/ChangeLog
@@ -1,3 +1,14 @@
+2012-11-27  Roland McGrath  <mcgrathr@google.com>
+
+	* lib/binutils-common.exp (is_zlib_supported): New function.
+	* lib/utils-lib.exp (run_dump_test): If as options include
+	--compress-debug-sections and zlib is not available, report
+	the test as unsupported.
+	* binutils-all/compress.exp: Bail out if zlib is not available.
+	* binutils-all/objdump.exp (objdump compressed debug):
+	Mark unsupported if zlib is not available.
+	* binutils-all/readelf.exp (readelf_compressed_wa_test): Likewise.
+
 2012-08-16  Ian Bolton  <ian.bolton@arm.com>
             Laurent Desnogues  <laurent.desnogues@arm.com>
             Jim MacArthur  <jim.macarthur@arm.com>
diff --git a/binutils/testsuite/binutils-all/compress.exp b/binutils/testsuite/binutils-all/compress.exp
index 3b0b485..67b7f07 100644
--- a/binutils/testsuite/binutils-all/compress.exp
+++ b/binutils/testsuite/binutils-all/compress.exp
@@ -1,23 +1,23 @@
-#   Copyright 2010
+#   Copyright 2010, 2012
 #   Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
-# 
+#
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
 
 # Test compressed .debug section.
 
-if { [is_remote host] || ![is_elf_format] } then {
+if { [is_remote host] || ![is_elf_format] || ![is_zlib_supported] } then {
     return
 }
 
diff --git a/binutils/testsuite/binutils-all/objdump.exp b/binutils/testsuite/binutils-all/objdump.exp
index 14d1860..b330a32 100644
--- a/binutils/testsuite/binutils-all/objdump.exp
+++ b/binutils/testsuite/binutils-all/objdump.exp
@@ -1,17 +1,17 @@
 #   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
-#   2003, 2004, 2007, 2008, 2009, 2011
+#   2003, 2004, 2007, 2008, 2009, 2011, 2012
 #   Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
-# 
+#
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@@ -160,7 +160,7 @@ if [regexp $want $got] then {
 
 # Test objdump -s on a file that contains a compressed .debug section
 
-if { ![is_elf_format] } then {
+if { ![is_elf_format] || ![is_zlib_supported] } then {
     unsupported "objdump compressed debug"
 } elseif { ![binutils_assemble $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o] } then {
     fail "objdump compressed debug"
diff --git a/binutils/testsuite/binutils-all/readelf.exp b/binutils/testsuite/binutils-all/readelf.exp
index e611cb2..c1d7286 100644
--- a/binutils/testsuite/binutils-all/readelf.exp
+++ b/binutils/testsuite/binutils-all/readelf.exp
@@ -5,12 +5,12 @@
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
-# 
+#
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@@ -84,7 +84,7 @@ proc readelf_test { options binary_file regexp_file xfails } {
     global readelf_size
     global srcdir
     global subdir
-    
+
     send_log "exec $READELF $READELFFLAGS $options $binary_file > readelf.out\n"
     set got [remote_exec host "$READELF $READELFFLAGS $options $binary_file" "" "/dev/null" "readelf.out"]
 
@@ -146,7 +146,7 @@ proc readelf_wi_test {} {
     global READELFFLAGS
     global srcdir
     global subdir
-    
+
     # Compile the second test file.
     if { [target_compile $srcdir/$subdir/testprog.c tmpdir/testprog.o object debug] != "" } {
 	verbose "Unable to compile test file."
@@ -164,7 +164,7 @@ proc readelf_wi_test {} {
     set output [remote_upload host readelf.out]
 
     file_on_host delete $tempfile
-    
+
     # Strip any superflous warnings.
     set got [prune_readelf_wi_warnings [lindex $got 1]]
 
@@ -182,7 +182,7 @@ proc readelf_wi_test {} {
 	untested "readelf -wi"
 	return
     }
-    
+
     # Search for strings that should be in the output.
     set sought {
 	".*DW_TAG_compile_unit.*"
@@ -195,8 +195,8 @@ proc readelf_wi_test {} {
 	".*DW_AT_name.*(main|indirect string).*"
 	".*\(DW_OP_addr: 0\).*"
     }
-    
-    foreach looked_for $sought {	
+
+    foreach looked_for $sought {
 	set lines [grep $output $looked_for]
 	if ![llength $lines] then {
 	    fail "readelf -wi: missing: $looked_for"
@@ -206,7 +206,7 @@ proc readelf_wi_test {} {
     }
 
     file_on_host delete $output
-    
+
     # All done.
     pass "readelf -wi"
 }
@@ -219,7 +219,12 @@ proc readelf_compressed_wa_test {} {
     global READELFFLAGS
     global srcdir
     global subdir
-    
+
+    if { ![is_zlib_supported] } {
+	unsupported "readelf -wa (compressed)"
+	return
+    }
+
     # Compile the compressed-debug-section test file.
     if { [target_compile $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o object debug] != "" } {
 	verbose "Unable to compile test file."
@@ -237,7 +242,7 @@ proc readelf_compressed_wa_test {} {
     set output [remote_upload host readelf.out]
 
     file_on_host delete $tempfile
-    
+
     if { [string compare [file_contents readelf.out] [file_contents $srcdir/$subdir/readelf.wa]] != 0 } then {
 	fail "readelf -wa (compressed)"
 	verbose "output is \n[file_contents readelf.out]" 2
@@ -255,7 +260,7 @@ proc readelf_dump_test {} {
     global READELFFLAGS
     global srcdir
     global subdir
-    
+
     # Assemble the dump test file.
     if {![binutils_assemble $srcdir/$subdir/dumptest.s tmpdir/dumptest.o]} then {
       unresolved "readelf -p: failed to assemble dump test file"
@@ -283,8 +288,8 @@ proc readelf_dump_test {} {
     set sought {
 	".*test_string.*"
     }
-    
-    foreach looked_for $sought {	
+
+    foreach looked_for $sought {
 	set lines [grep $output $looked_for]
 	if ![llength $lines] then {
 	    fail "readelf -p: missing: $looked_for"
@@ -293,7 +298,7 @@ proc readelf_dump_test {} {
 	}
     }
 
-    file_on_host delete $tempfile    
+    file_on_host delete $tempfile
     file_on_host delete $output
 
     # All done.
diff --git a/binutils/testsuite/lib/binutils-common.exp b/binutils/testsuite/lib/binutils-common.exp
index 0054184..68efb90 100644
--- a/binutils/testsuite/lib/binutils-common.exp
+++ b/binutils/testsuite/lib/binutils-common.exp
@@ -152,6 +152,31 @@ proc is_elf64 { binary_file } {
     return 0
 }
 
+# True if the build supports zlib compression.
+proc is_zlib_supported {} {
+
+    # This replicates the AS selection logic of dejagnu's target_assemble.
+    global AS_FOR_TARGET
+    if [info exists AS_FOR_TARGET] {
+	set AS $AS_FOR_TARGET
+    } else {
+	if {![board_info target exists assembler]} {
+	    set AS [find_gas]
+	} else {
+	    set AS [board_info target assembler]
+	}
+    }
+
+    set as_output [remote_exec host "$AS --help"]
+
+    set have_zlib 0
+    if {[string first "--compress-debug-sections" $as_output] >= 0} {
+	set have_zlib 1
+    }
+
+    return $have_zlib
+}
+
 # Compare two files line-by-line.  FILE_1 is the actual output and FILE_2
 # is the expected output.  Ignore blank lines in either file.
 #
diff --git a/binutils/testsuite/lib/utils-lib.exp b/binutils/testsuite/lib/utils-lib.exp
index b96043b..3fe6c14 100644
--- a/binutils/testsuite/lib/utils-lib.exp
+++ b/binutils/testsuite/lib/utils-lib.exp
@@ -1,16 +1,16 @@
 # Copyright 1993, 1994, 1995, 1996, 1997, 2000, 2001, 2003, 2004, 2006, 2007,
-# 2009, 2010 Free Software Foundation, Inc.
+# 2009, 2010, 2012 Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
 # (at your option) any later version.
-# 
+#
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@@ -405,7 +405,7 @@ proc run_dump_test { name {extra_options {}} } {
     if { $opts(not-skip) != "" } then {
 	set skip 1
 	foreach glob $opts(not-skip) {
-	    if {[istarget $glob]} { 
+	    if {[istarget $glob]} {
 		set skip 0
 		break
 	    }
@@ -420,25 +420,31 @@ proc run_dump_test { name {extra_options {}} } {
 	}
 	set skip 1
 	foreach glob $opts(target) {
-	    if {[istarget $glob]} { 
+	    if {[istarget $glob]} {
 		set skip 0
 		break
 	    }
 	}
-	if {$skip} { 
+	if {$skip} {
 	    unsupported $testname
-	    return 
+	    return
 	}
     }
     if { $opts(not-target) != "" } then {
 	foreach glob $opts(not-target) {
 	    if {[istarget $glob]} {
 		unsupported $testname
-		return 
+		return
 	    }
 	}
     }
 
+    if { [string match "*--compress-debug-sections*" $opts(as)] \
+	 && ![is_zlib_supported] } {
+	unsupported $testname
+	return
+    }
+
     if { $opts(source) == "" } {
 	set srcfile ${file}.s
     } else {
diff --git a/gas/ChangeLog b/gas/ChangeLog
index 219c27e..f4f834d 100644
--- a/gas/ChangeLog
+++ b/gas/ChangeLog
@@ -1,3 +1,19 @@
+2012-11-20  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR gas/14859
+	* gas/i386/x86-64-opcode.s: Add jecxz.
+	* gas/i386/x86-64-opcode.d: Updated.
+
+2012-11-20  Yufeng Zhang  <yufeng.zhang@arm.com>
+
+	* config/tc-aarch64.c (first_error_fmt): Add ATTRIBUTE_UNUSED to the
+	local variable "ret".
+
+2012-11-20  Roland McGrath  <mcgrathr@google.com>
+
+	* config/tc-arm.c (arm_symbol_chars): New variable.
+	* config/tc-arm.h (tc_symbol_chars): New macro, defined to that.
+
 2012-11-07  James Murray <jsm@jsm-net.demon.co.uk>
 
 	* config/tc-m68hc11.c: Fix R_M68HC12_16B relocation for movb/w
diff --git a/gas/config/tc-aarch64.c b/gas/config/tc-aarch64.c
index 843923b..a83a62e 100644
--- a/gas/config/tc-aarch64.c
+++ b/gas/config/tc-aarch64.c
@@ -643,7 +643,7 @@ first_error_fmt (const char *format, ...)
 
   if (! error_p ())
     {
-      int ret;
+      int ret ATTRIBUTE_UNUSED;
       va_start (args, format);
       ret = vsnprintf (buffer, size, format, args);
       know (ret <= size - 1 && ret >= 0);
diff --git a/gas/config/tc-arm.c b/gas/config/tc-arm.c
index 91b29ac..5bf7d89 100644
--- a/gas/config/tc-arm.c
+++ b/gas/config/tc-arm.c
@@ -321,6 +321,11 @@ static int implicit_it_mode = IMPLICIT_IT_MODE_ARM;
 
 static bfd_boolean unified_syntax = FALSE;
 
+/* An immediate operand can start with #, and ld*, st*, pld operands
+   can contain [ and ].  We need to tell APP not to elide whitespace
+   before a [, which can appear as the first operand for pld.  */
+const char arm_symbol_chars[] = "#[]";
+
 enum neon_el_type
 {
   NT_invtype,
@@ -10225,7 +10230,7 @@ do_t_branch (void)
 }
 
 /* Actually do the work for Thumb state bkpt and hlt.  The only difference
-   between the two is the maximum immediate allowed - which is passed in 
+   between the two is the maximum immediate allowed - which is passed in
    RANGE.  */
 static void
 do_t_bkpt_hlt1 (int range)
@@ -14660,7 +14665,7 @@ do_vfp_nsyn_cvtz (void)
 }
 
 static void
-do_vfp_nsyn_cvt_fpv8 (enum neon_cvt_flavour flavour, 
+do_vfp_nsyn_cvt_fpv8 (enum neon_cvt_flavour flavour,
 		      enum neon_cvt_mode mode)
 {
   int sz, op;
@@ -14720,9 +14725,9 @@ do_neon_cvt_1 (enum neon_cvt_mode mode)
   /* PR11109: Handle round-to-zero for VCVT conversions.  */
   if (mode == neon_cvt_mode_z
       && ARM_CPU_HAS_FEATURE (cpu_variant, fpu_arch_vfp_v2)
-      && (flavour == neon_cvt_flavour_s32_f32 
-	  || flavour == neon_cvt_flavour_u32_f32 
-	  || flavour == neon_cvt_flavour_s32_f64 
+      && (flavour == neon_cvt_flavour_s32_f32
+	  || flavour == neon_cvt_flavour_u32_f32
+	  || flavour == neon_cvt_flavour_s32_f64
 	  || flavour == neon_cvt_flavour_u32_f64)
       && (rs == NS_FD || rs == NS_FF))
     {
diff --git a/gas/config/tc-arm.h b/gas/config/tc-arm.h
index da6469c..3a0fab0 100644
--- a/gas/config/tc-arm.h
+++ b/gas/config/tc-arm.h
@@ -82,6 +82,9 @@ struct fix;
 /* We support double slash line-comments for compatibility with the ARM AArch64 Assembler.  */
 #define DOUBLESLASH_LINE_COMMENTS
 
+#define tc_symbol_chars arm_symbol_chars
+extern const char arm_symbol_chars[];
+
 #define TC_FORCE_RELOCATION(FIX) arm_force_relocation (FIX)
 
 extern unsigned int arm_frag_max_var (struct frag *);
diff --git a/gas/testsuite/ChangeLog b/gas/testsuite/ChangeLog
index 5bc1c32..123619b 100644
--- a/gas/testsuite/ChangeLog
+++ b/gas/testsuite/ChangeLog
@@ -1,3 +1,14 @@
+2012-11-27  Roland McGrath  <mcgrathr@google.com>
+
+	* lib/gas-defs.exp (run_dump_test): If as options include
+	--compress-debug-sections and zlib is not available, report
+	the test as unsupported.
+
+2012-11-20  Roland McGrath  <mcgrathr@google.com>
+
+	* gas/arm/macro-pld.s: New file.
+	* gas/arm/macro-pld.d: New file.
+
 2012-10-09  Nagajyothi Eggone  <nagajyothi.eggone@amd.com>
 
 	* gas/i386/i386.exp: Run bdver3 test cases.
diff --git a/gas/testsuite/gas/arm/macro-pld.d b/gas/testsuite/gas/arm/macro-pld.d
new file mode 100644
index 0000000..8f9d86c8
--- /dev/null
+++ b/gas/testsuite/gas/arm/macro-pld.d
@@ -0,0 +1,8 @@
+#objdump: -dr
+
+.*:     file format .*
+
+Disassembly of section \.text:
+
+0+ <.*>:
+\s*0:\s+f5d0f000\s+pld\s+\[r0\]
diff --git a/gas/testsuite/gas/arm/macro-pld.s b/gas/testsuite/gas/arm/macro-pld.s
new file mode 100644
index 0000000..cf4df8b
--- /dev/null
+++ b/gas/testsuite/gas/arm/macro-pld.s
@@ -0,0 +1,4 @@
+.macro foo arg, rest:vararg
+	\rest
+.endm
+	foo r0, pld [r0]
diff --git a/gas/testsuite/gas/i386/x86-64-opcode.d b/gas/testsuite/gas/i386/x86-64-opcode.d
index 7c6dd03..4b3003a 100644
--- a/gas/testsuite/gas/i386/x86-64-opcode.d
+++ b/gas/testsuite/gas/i386/x86-64-opcode.d
@@ -296,4 +296,5 @@ Disassembly of section .text:
 [ 	]*[a-f0-9]+:	0f 07                	sysret 
 [ 	]*[a-f0-9]+:	0f 01 f8             	swapgs 
 [ 	]*[a-f0-9]+:	66 68 22 22          	pushw  \$0x2222
+[ 	]*[a-f0-9]+:	67 e3 ff             	jecxz  0x49d
 #pass
diff --git a/gas/testsuite/gas/i386/x86-64-opcode.s b/gas/testsuite/gas/i386/x86-64-opcode.s
index cb9bbc1..96f624d 100644
--- a/gas/testsuite/gas/i386/x86-64-opcode.s
+++ b/gas/testsuite/gas/i386/x86-64-opcode.s
@@ -424,3 +424,5 @@
         swapgs		              #  --  --	 -- --	 0F 01 f8
 
 	pushw $0x2222
+
+        jecxz .+2
diff --git a/gas/testsuite/lib/gas-defs.exp b/gas/testsuite/lib/gas-defs.exp
index 234789a..cb81c18 100644
--- a/gas/testsuite/lib/gas-defs.exp
+++ b/gas/testsuite/lib/gas-defs.exp
@@ -1,5 +1,5 @@
 # Copyright (C) 1993, 1994, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
-# 2004, 2005, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.
+# 2004, 2005, 2007, 2008, 2009, 2010, 2012  Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -71,7 +71,7 @@ proc gas_host_run { cmd redir } {
 	set return_contents_of "gas.stderr"
     } elseif [regexp ">&.*" $redir] then {
 	# See PR 5322 for why the following line is used.
-	regsub ">&" $redir "" output_file	
+	regsub ">&" $redir "" output_file
 	set command "$cmd 2>&1"
     } elseif [regexp "2>.*" $redir] then {
 	set output_file "gas.out"
@@ -582,7 +582,7 @@ proc run_dump_test { name {extra_options {}} } {
     if { $opts(not-skip) != "" } then {
 	set skip 1
 	foreach glob $opts(not-skip) {
-	    if {[istarget $glob]} { 
+	    if {[istarget $glob]} {
 		set skip 0
 		break
 	    }
@@ -597,25 +597,31 @@ proc run_dump_test { name {extra_options {}} } {
 	}
 	set skip 1
 	foreach glob $opts(target) {
-	    if {[istarget $glob]} { 
+	    if {[istarget $glob]} {
 		set skip 0
 		break
 	    }
 	}
-	if {$skip} { 
+	if {$skip} {
 	    unsupported $testname
-	    return 
+	    return
 	}
     }
     if { $opts(not-target) != "" } then {
 	foreach glob $opts(not-target) {
 	    if {[istarget $glob]} {
 		unsupported $testname
-		return 
+		return
 	    }
 	}
     }
 
+    if { [string match "*--compress-debug-sections*" $opts(as)] \
+	 && ![is_zlib_supported] } {
+	unsupported $testname
+	return
+    }
+
 
     if { $opts(source) == "" } {
 	set sourcefile ${file}.s
diff --git a/gold/ChangeLog b/gold/ChangeLog
index 0d3074a..b31d11f 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,13 @@
+2012-11-19  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR gold/14858
+	* x86_64.cc (Relocate::tls_ld_to_le): Support x32.
+
+2012-11-14  Roland McGrath  <mcgrathr@google.com>
+
+	* arm.cc (Output_data_plt_arm_nacl::first_plt_entry): Use bic rather
+	than bfc instruction for data sandboxing.
+
 2012-11-07  Roland McGrath  <mcgrathr@google.com>
 
 	* i386.cc (Target_i386::relocate_for_relocatable): Remove extraneous
diff --git a/gold/arm.cc b/gold/arm.cc
index d434c9d..238cf32 100644
--- a/gold/arm.cc
+++ b/gold/arm.cc
@@ -12196,7 +12196,7 @@ const uint32_t Output_data_plt_arm_nacl<big_endian>::first_plt_entry[16] =
   0xe08cc00f,                           // add	ip, ip, pc
   0xe52dc008,                           // str	ip, [sp, #-8]!
   // Second bundle:
-  0xe7dfcf1f,                           // bfc	ip, #30, #2
+  0xe3ccc103,                           // bic	ip, ip, #0xc0000000
   0xe59cc000,                           // ldr	ip, [ip]
   0xe3ccc13f,                           // bic	ip, ip, #0xc000000f
   0xe12fff1c,                           // bx	ip
@@ -12207,7 +12207,7 @@ const uint32_t Output_data_plt_arm_nacl<big_endian>::first_plt_entry[16] =
   // .Lplt_tail:
   0xe50dc004,                           // str	ip, [sp, #-4]
   // Fourth bundle:
-  0xe7dfcf1f,                           // bfc	ip, #30, #2
+  0xe3ccc103,                           // bic	ip, ip, #0xc0000000
   0xe59cc000,                           // ldr	ip, [ip]
   0xe3ccc13f,                           // bic	ip, ip, #0xc000000f
   0xe12fff1c,                           // bx	ip
diff --git a/gold/x86_64.cc b/gold/x86_64.cc
index b5b616f..8ddf4f2 100644
--- a/gold/x86_64.cc
+++ b/gold/x86_64.cc
@@ -3959,8 +3959,12 @@ Target_x86_64<size>::Relocate::tls_ld_to_le(
     section_size_type view_size)
 {
   // leaq foo@tlsld(%rip),%rdi; call __tls_get_addr@plt;
+  // For SIZE == 64:
   // ... leq foo@dtpoff(%rax),%reg
   // ==> .word 0x6666; .byte 0x66; movq %fs:0,%rax ... leaq x@tpoff(%rax),%rdx
+  // For SIZE == 32:
+  // ... leq foo@dtpoff(%rax),%reg
+  // ==> nopl 0x0(%rax); movl %fs:0,%eax ... leaq x@tpoff(%rax),%rdx
 
   tls::check_range(relinfo, relnum, rela.get_r_offset(), view_size, -3);
   tls::check_range(relinfo, relnum, rela.get_r_offset(), view_size, 9);
@@ -3970,7 +3974,10 @@ Target_x86_64<size>::Relocate::tls_ld_to_le(
 
   tls::check_tls(relinfo, relnum, rela.get_r_offset(), view[4] == 0xe8);
 
-  memcpy(view - 3, "\x66\x66\x66\x64\x48\x8b\x04\x25\0\0\0\0", 12);
+  if (size == 64)
+    memcpy(view - 3, "\x66\x66\x66\x64\x48\x8b\x04\x25\0\0\0\0", 12);
+  else
+    memcpy(view - 3, "\x0f\x1f\x40\x00\x64\x8b\x04\x25\0\0\0\0", 12);
 
   // The next reloc should be a PLT32 reloc against __tls_get_addr.
   // We can skip it.
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 9f33f64..00323e0 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,19 @@
+2012-11-26  Roland McGrath  <mcgrathr@google.com>
+
+	* emultempl/aarch64elf.em (gld${EMULATION_NAME}_before_parse):
+	Copy last elf32.em here too.
+	* emultempl/armelf.em (gld${EMULATION_NAME}_before_parse): Likewise.
+	* emultempl/mmixelf.em (gld${EMULATION_NAME}_before_parse): Likewise.
+	* emultempl/scoreelf.em (gld${EMULATION_NAME}_before_parse): Likewise.
+
+2012-11-21  Roland McGrath  <mcgrathr@google.com>
+
+	* ld.h (ld_config_type): New flag member separate_code.
+	* emultempl/elf32.em
+	(gld${EMULATION_NAME}_before_parse): Set it based on $SEPARATE_CODE.
+	* ldlang.c (ldlang_override_segment_assignment): If it's set, then
+	always return TRUE when SEC_CODE differs between the sections.
+
 2012-11-05  Alan Modra  <amodra@gmail.com>
 
 	* configure.in: Apply 2012-09-10 change to config.in here.
diff --git a/ld/emultempl/aarch64elf.em b/ld/emultempl/aarch64elf.em
index 4c03ffd..25935d0 100644
--- a/ld/emultempl/aarch64elf.em
+++ b/ld/emultempl/aarch64elf.em
@@ -39,6 +39,7 @@ gld${EMULATION_NAME}_before_parse (void)
 #endif /* not TARGET_ */
   input_flags.dynamic = ${DYNAMIC_LINK-TRUE};
   config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
+  config.separate_code = `if test "x${SEPARATE_CODE}" = xyes ; then echo TRUE ; else echo FALSE ; fi`;
 }
 
 static void
diff --git a/ld/emultempl/armelf.em b/ld/emultempl/armelf.em
index 3b881dd..7f7d2cc 100644
--- a/ld/emultempl/armelf.em
+++ b/ld/emultempl/armelf.em
@@ -52,6 +52,7 @@ gld${EMULATION_NAME}_before_parse (void)
 #endif /* not TARGET_ */
   input_flags.dynamic = ${DYNAMIC_LINK-TRUE};
   config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
+  config.separate_code = `if test "x${SEPARATE_CODE}" = xyes ; then echo TRUE ; else echo FALSE ; fi`;
 }
 
 static void
@@ -254,19 +255,19 @@ compare_output_sec_vma (const void *a, const void *b)
   asection *asec = *(asection **) a, *bsec = *(asection **) b;
   asection *aout = asec->output_section, *bout = bsec->output_section;
   bfd_vma avma, bvma;
-  
+
   /* If there's no output section for some reason, compare equal.  */
   if (!aout || !bout)
     return 0;
-  
+
   avma = aout->vma + asec->output_offset;
   bvma = bout->vma + bsec->output_offset;
-  
+
   if (avma > bvma)
     return 1;
   else if (avma < bvma)
     return -1;
-  
+
   return 0;
 }
 
@@ -286,10 +287,10 @@ gld${EMULATION_NAME}_after_allocation (void)
 	{
 	  bfd *abfd = is->the_bfd;
 	  asection *sec;
-	  
+
 	  if ((abfd->flags & (EXEC_P | DYNAMIC)) != 0)
 	    continue;
-	  
+
 	  for (sec = abfd->sections; sec != NULL; sec = sec->next)
 	    {
 	      asection *out_sec = sec->output_section;
@@ -305,7 +306,7 @@ gld${EMULATION_NAME}_after_allocation (void)
 		  if (sec_count == list_size)
 		    {
 		      list_size *= 2;
-		      sec_list = (asection **) 
+		      sec_list = (asection **)
                           xrealloc (sec_list, list_size * sizeof (asection *));
 		    }
 
@@ -313,13 +314,13 @@ gld${EMULATION_NAME}_after_allocation (void)
 		}
 	    }
 	}
-	
+
       qsort (sec_list, sec_count, sizeof (asection *), &compare_output_sec_vma);
-      
+
       if (elf32_arm_fix_exidx_coverage (sec_list, sec_count, &link_info,
 					   merge_exidx_entries))
 	need_laying_out = 1;
-      
+
       free (sec_list);
     }
 
@@ -465,7 +466,7 @@ arm_elf_create_output_section_statements (void)
 				   target2_type, fix_v4bx, use_blx,
 				   vfp11_denorm_fix, no_enum_size_warning,
 				   no_wchar_size_warning,
-				   pic_veneer, fix_cortex_a8, 
+				   pic_veneer, fix_cortex_a8,
 				   fix_arm1176);
 
   stub_file = lang_add_input_file ("linker stubs",
@@ -480,7 +481,7 @@ arm_elf_create_output_section_statements (void)
       einfo ("%X%P: can not create BFD %E\n");
       return;
     }
- 
+
   stub_file->the_bfd->flags |= BFD_LINKER_CREATED;
   ldlang_add_file (stub_file);
 
diff --git a/ld/emultempl/elf32.em b/ld/emultempl/elf32.em
index de51050..05c64a0 100644
--- a/ld/emultempl/elf32.em
+++ b/ld/emultempl/elf32.em
@@ -104,6 +104,7 @@ gld${EMULATION_NAME}_before_parse (void)
   ldfile_set_output_arch ("${OUTPUT_ARCH}", bfd_arch_`echo ${ARCH} | sed -e 's/:.*//'`);
   input_flags.dynamic = ${DYNAMIC_LINK-TRUE};
   config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
+  config.separate_code = `if test "x${SEPARATE_CODE}" = xyes ; then echo TRUE ; else echo FALSE ; fi`;
 }
 
 EOF
@@ -140,7 +141,7 @@ gld${EMULATION_NAME}_load_symbols (lang_input_statement_type *entry)
     return FALSE;
 
   bfd_elf_set_dyn_lib_class (entry->the_bfd,
-                             (enum dynamic_lib_link_class) link_class);
+			     (enum dynamic_lib_link_class) link_class);
 
   /* Continue on with normal load_symbols processing.  */
   return FALSE;
@@ -1104,7 +1105,7 @@ gld${EMULATION_NAME}_after_open (void)
 		{
 		  struct elf_obj_tdata *t = elf_tdata (link_info.output_bfd);
 		  struct build_id_info *b =
-                      (struct build_id_info *) xmalloc (sizeof *b);
+		      (struct build_id_info *) xmalloc (sizeof *b);
 
 		  b->style = link_info.emit_note_gnu_build_id;
 		  b->sec = s;
@@ -1439,7 +1440,7 @@ if test x"$LDEMUL_BEFORE_ALLOCATION" != xgld"$EMULATION_NAME"_before_allocation;
 fragment <<EOF
 
 /* used by before_allocation and handle_option. */
-static void 
+static void
 gld${EMULATION_NAME}_append_to_separated_string (char **to, char *op_arg)
 {
   if (*to == NULL)
@@ -1507,7 +1508,7 @@ gld${EMULATION_NAME}_before_allocation (void)
       {
 	const char *audit_libs = elf_dt_audit (abfd);
 
-	/* If the input bfd contains an audit entry, we need to add it as 
+	/* If the input bfd contains an audit entry, we need to add it as
 	   a dep audit entry.  */
 	if (audit_libs && *audit_libs != '\0')
 	  {
@@ -2204,7 +2205,7 @@ EOF
 if test x"$GENERATE_SHLIB_SCRIPT" = xyes; then
 fragment <<EOF
     case OPTION_AUDIT:
-  	gld${EMULATION_NAME}_append_to_separated_string (&audit, optarg); 
+	gld${EMULATION_NAME}_append_to_separated_string (&audit, optarg);
 	break;
 
     case 'P':
@@ -2380,7 +2381,7 @@ if test x"$GENERATE_SHLIB_SCRIPT" = xyes; then
 fragment <<EOF
   fprintf (file, _("\
   -P AUDITLIB, --depaudit=AUDITLIB\n" "\
-                              Specify a library to use for auditing dependencies\n"));
+			      Specify a library to use for auditing dependencies\n"));
   fprintf (file, _("\
   --disable-new-dtags         Disable new dynamic tags\n"));
   fprintf (file, _("\
@@ -2453,7 +2454,7 @@ fragment <<EOF
   -z now                      Mark object non-lazy runtime binding\n"));
   fprintf (file, _("\
   -z origin                   Mark object requiring immediate \$ORIGIN\n\
-                                processing at runtime\n"));
+				processing at runtime\n"));
   fprintf (file, _("\
   -z relro                    Create RELRO program header\n"));
 EOF
diff --git a/ld/emultempl/mmixelf.em b/ld/emultempl/mmixelf.em
index a875a5c..89c60c9 100644
--- a/ld/emultempl/mmixelf.em
+++ b/ld/emultempl/mmixelf.em
@@ -1,5 +1,5 @@
 # This shell script emits a C file. -*- C -*-
-#   Copyright 2001, 2002, 2003, 2005, 2007 Free Software Foundation, Inc.
+#   Copyright 2001, 2002, 2003, 2005, 2007, 2012 Free Software Foundation, Inc.
 #
 # This file is part of the GNU Binutils.
 #
@@ -38,6 +38,8 @@ elfmmix_before_parse (void)
      full system with shared libraries and demand paging, you will want to
      exclude this file.  */
   config.magic_demand_paged = FALSE;
+
+  config.separate_code = `if test "x${SEPARATE_CODE}" = xyes ; then echo TRUE ; else echo FALSE ; fi`;
 }
 EOF
 
diff --git a/ld/emultempl/scoreelf.em b/ld/emultempl/scoreelf.em
index 94aa5af..8556b40 100644
--- a/ld/emultempl/scoreelf.em
+++ b/ld/emultempl/scoreelf.em
@@ -38,6 +38,7 @@ gld${EMULATION_NAME}_before_parse ()
 #endif /* not TARGET_ */
   input_flags.dynamic = ${DYNAMIC_LINK-TRUE};
   config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
+  config.separate_code = `if test "x${SEPARATE_CODE}" = xyes ; then echo TRUE ; else echo FALSE ; fi`;
 }
 
 static void
@@ -74,4 +75,3 @@ LDEMUL_AFTER_OPEN=score_elf_after_open
 
 # Replace the elf before_parse function with our own.
 LDEMUL_BEFORE_PARSE=gld"${EMULATION_NAME}"_before_parse
-
diff --git a/ld/ld.h b/ld/ld.h
index b8273a4..c55a645 100644
--- a/ld/ld.h
+++ b/ld/ld.h
@@ -82,7 +82,7 @@ typedef struct name_list {
 name_list;
 
 typedef enum {sort_none, sort_ascending, sort_descending} sort_order;
-  
+
 /* A wildcard specification.  */
 
 typedef enum {
@@ -297,6 +297,9 @@ typedef struct {
      numbers everywhere.  */
   bfd_boolean sane_expr;
 
+  /* If set, code and non-code sections should never be in one segment.  */
+  bfd_boolean separate_code;
+
   /* The rpath separation character.  Usually ':'.  */
   char rpath_separator;
 
diff --git a/ld/ldlang.c b/ld/ldlang.c
index 0c97898..988dc38 100644
--- a/ld/ldlang.c
+++ b/ld/ldlang.c
@@ -878,8 +878,8 @@ walk_wild_file (lang_wild_statement_type *s,
 	  if (member->usrdata != NULL)
 	    {
 	      walk_wild_section (s,
-                                 (lang_input_statement_type *) member->usrdata,
-                                 callback, data);
+				 (lang_input_statement_type *) member->usrdata,
+				 callback, data);
 	    }
 
 	  member = bfd_openr_next_archived_file (f->the_bfd, member);
@@ -1050,7 +1050,7 @@ new_afile (const char *name,
   else
     {
       p = (lang_input_statement_type *)
-          stat_alloc (sizeof (lang_input_statement_type));
+	  stat_alloc (sizeof (lang_input_statement_type));
       p->header.type = lang_input_statement_enum;
       p->header.next = NULL;
     }
@@ -1148,7 +1148,7 @@ output_section_statement_newfunc (struct bfd_hash_entry *entry,
   if (entry == NULL)
     {
       entry = (struct bfd_hash_entry *) bfd_hash_allocate (table,
-                                                           sizeof (*ret));
+							   sizeof (*ret));
       if (entry == NULL)
 	return entry;
     }
@@ -1283,12 +1283,12 @@ lang_memory_region_lookup (const char *const name, bfd_boolean create)
   for (r = lang_memory_region_list; r != NULL; r = r->next)
     for (n = &r->name_list; n != NULL; n = n->next)
       if (strcmp (n->name, name) == 0)
-        {
-          if (create)
-            einfo (_("%P:%S: warning: redeclaration of memory region `%s'\n"),
-                   NULL, name);
-          return r;
-        }
+	{
+	  if (create)
+	    einfo (_("%P:%S: warning: redeclaration of memory region `%s'\n"),
+		   NULL, name);
+	  return r;
+	}
 
   if (!create && strcmp (name, DEFAULT_MEMORY_REGION))
     einfo (_("%P:%S: warning: memory region `%s' not declared\n"),
@@ -1334,19 +1334,19 @@ lang_memory_region_alias (const char * alias, const char * region_name)
   for (r = lang_memory_region_list; r != NULL; r = r->next)
     for (n = &r->name_list; n != NULL; n = n->next)
       {
-        if (region == NULL && strcmp (n->name, region_name) == 0)
-          region = r;
-        if (strcmp (n->name, alias) == 0)
-          einfo (_("%F%P:%S: error: redefinition of memory region "
-                   "alias `%s'\n"),
-                 NULL, alias);
+	if (region == NULL && strcmp (n->name, region_name) == 0)
+	  region = r;
+	if (strcmp (n->name, alias) == 0)
+	  einfo (_("%F%P:%S: error: redefinition of memory region "
+		   "alias `%s'\n"),
+		 NULL, alias);
       }
 
   /* Check if the target region exists.  */
   if (region == NULL)
     einfo (_("%F%P:%S: error: memory region `%s' "
-             "for alias `%s' does not exist\n"),
-           NULL, region_name, alias);
+	     "for alias `%s' does not exist\n"),
+	   NULL, region_name, alias);
 
   /* Add alias to region name list.  */
   n = (lang_memory_region_name *) stat_alloc (sizeof (lang_memory_region_name));
@@ -1777,7 +1777,7 @@ lang_insert_orphan (asection *s,
   os_tail = ((lang_output_section_statement_type **)
 	     lang_output_section_statement.tail);
   os = lang_enter_output_section_statement (secname, address, normal_section,
-                                            NULL, NULL, NULL, constraint);
+					    NULL, NULL, NULL, constraint);
 
   ps = NULL;
   if (config.build_constructors && *os_tail == os)
@@ -2080,14 +2080,14 @@ sort_def_symbol (struct bfd_link_hash_entry *hash_entry,
       struct map_symbol_def *def;
 
       ud = (struct fat_user_section_struct *)
-          get_userdata (hash_entry->u.def.section);
+	  get_userdata (hash_entry->u.def.section);
       if  (! ud)
 	{
 	  /* ??? What do we have to do to initialize this beforehand?  */
 	  /* The first time we get here is bfd_abs_section...  */
 	  init_map_userdata (0, hash_entry->u.def.section, 0);
 	  ud = (struct fat_user_section_struct *)
-              get_userdata (hash_entry->u.def.section);
+	      get_userdata (hash_entry->u.def.section);
 	}
       else if  (!ud->map_symbol_def_tail)
 	ud->map_symbol_def_tail = &ud->map_symbol_def_head;
@@ -2125,7 +2125,7 @@ init_os (lang_output_section_statement_type *s, flagword flags)
   if (!link_info.reduce_memory_overheads)
     {
       fat_section_userdata_type *new_userdata = (fat_section_userdata_type *)
-        stat_alloc (sizeof (fat_section_userdata_type));
+	stat_alloc (sizeof (fat_section_userdata_type));
       memset (new_userdata, 0, sizeof (fat_section_userdata_type));
       get_userdata (s->bfd_section) = new_userdata;
     }
@@ -2264,7 +2264,7 @@ lang_add_section (lang_statement_list_type *ptr,
 
       keep = bfd_lookup_section_flags (&link_info, sflag_info, section);
       if (!keep)
-        return;
+	return;
     }
 
   if (section->output_section != NULL)
@@ -4151,7 +4151,7 @@ print_all_symbols (asection *sec)
     entries[i] = def->entry;
 
   qsort (entries, ud->map_symbol_def_count, sizeof (*entries),
-         hash_entry_addr_cmp);
+	 hash_entry_addr_cmp);
 
   /* Print the symbols.  */
   for (i = 0; i < ud->map_symbol_def_count; i++)
@@ -4583,7 +4583,7 @@ insert_pad (lang_statement_union_type **ptr,
     {
       /* Make a new padding statement, linked into existing chain.  */
       pad = (lang_statement_union_type *)
-          stat_alloc (sizeof (lang_padding_statement_type));
+	  stat_alloc (sizeof (lang_padding_statement_type));
       pad->header.next = *ptr;
       *ptr = pad;
       pad->header.type = lang_padding_statement_enum;
@@ -5357,6 +5357,12 @@ ldlang_override_segment_assignment (struct bfd_link_info * info ATTRIBUTE_UNUSED
   if (current_section == NULL || previous_section == NULL)
     return new_segment;
 
+  /* If this flag is set, the target never wants code and non-code
+     sections comingled in the same segment.  */
+  if (config.separate_code
+      && ((current_section->flags ^ previous_section->flags) & SEC_CODE))
+    return TRUE;
+
   /* Find the memory regions associated with the two sections.
      We call lang_output_section_find() here rather than scanning the list
      of output sections looking for a matching section pointer because if
@@ -7233,7 +7239,7 @@ lang_record_phdrs (void)
 		    {
 		      alc *= 2;
 		      secs = (asection **) xrealloc (secs,
-                                                     alc * sizeof (asection *));
+						     alc * sizeof (asection *));
 		    }
 		  secs[c] = os->bfd_section;
 		  ++c;
@@ -7535,7 +7541,7 @@ lang_vers_match (struct bfd_elf_version_expr_head *head,
 	    {
 	      e.pattern = c_sym;
 	      expr = (struct bfd_elf_version_expr *)
-                  htab_find ((htab_t) head->htab, &e);
+		  htab_find ((htab_t) head->htab, &e);
 	      while (expr && strcmp (expr->pattern, c_sym) == 0)
 		if (expr->mask == BFD_ELF_VERSION_C_TYPE)
 		  goto out_ret;
@@ -7548,7 +7554,7 @@ lang_vers_match (struct bfd_elf_version_expr_head *head,
 	    {
 	      e.pattern = cxx_sym;
 	      expr = (struct bfd_elf_version_expr *)
-                  htab_find ((htab_t) head->htab, &e);
+		  htab_find ((htab_t) head->htab, &e);
 	      while (expr && strcmp (expr->pattern, cxx_sym) == 0)
 		if (expr->mask == BFD_ELF_VERSION_CXX_TYPE)
 		  goto out_ret;
@@ -7561,7 +7567,7 @@ lang_vers_match (struct bfd_elf_version_expr_head *head,
 	    {
 	      e.pattern = java_sym;
 	      expr = (struct bfd_elf_version_expr *)
-                  htab_find ((htab_t) head->htab, &e);
+		  htab_find ((htab_t) head->htab, &e);
 	      while (expr && strcmp (expr->pattern, java_sym) == 0)
 		if (expr->mask == BFD_ELF_VERSION_JAVA_TYPE)
 		  goto out_ret;
@@ -7858,7 +7864,7 @@ lang_register_vers_node (const char *name,
 	  if (t->locals.htab && e1->literal)
 	    {
 	      e2 = (struct bfd_elf_version_expr *)
-                  htab_find ((htab_t) t->locals.htab, e1);
+		  htab_find ((htab_t) t->locals.htab, e1);
 	      while (e2 && strcmp (e1->pattern, e2->pattern) == 0)
 		{
 		  if (e1->mask == e2->mask)
@@ -7885,7 +7891,7 @@ lang_register_vers_node (const char *name,
 	  if (t->globals.htab && e1->literal)
 	    {
 	      e2 = (struct bfd_elf_version_expr *)
-                  htab_find ((htab_t) t->globals.htab, e1);
+		  htab_find ((htab_t) t->globals.htab, e1);
 	      while (e2 && strcmp (e1->pattern, e2->pattern) == 0)
 		{
 		  if (e1->mask == e2->mask)
diff --git a/ld/testsuite/ChangeLog b/ld/testsuite/ChangeLog
index ffcfa7e..af699be 100644
--- a/ld/testsuite/ChangeLog
+++ b/ld/testsuite/ChangeLog
@@ -1,3 +1,32 @@
+2012-11-30  Roland McGrath  <mcgrathr@google.com>
+
+	* ld-elf/ehdr_start.s: Put reference in .rodata section, not .data.
+
+2012-11-27  Roland McGrath  <mcgrathr@google.com>
+
+	* ld-elf/compress.exp: Bail out if zlib is not supported.
+	* lib/ld-lib.exp (run_dump_test): If as options include
+	--compress-debug-sections and zlib is not available, report
+	the test as unsupported.
+
+2012-11-27  Roland McGrath  <mcgrathr@google.com>
+
+	* ld-elf/flags1.d: Add *-*-nacl* to xfail list.
+	* ld-elf/orphan-region.d: Likewise.
+
+2012-11-21  Roland McGrath  <mcgrathr@google.com>
+
+	* ld-elf/comm-data.exp: Add XFAIL for arm*-*-* targets, referring
+	to PR ld/13802.
+
+2012-11-14  H.J. Lu  <hongjiu.lu@intel.com>
+
+	* ld-elf/shared.exp (build_cxx_tests): Move out the commented out
+	test.
+
+	* lib/ld-lib.exp (run_ld_link_exec_tests): Assemble all sources
+	files in each test.
+
 2012-10-16  Sofiane Naci  <sofiane.naci@arm.com>
 
 	* ld-aarch64/tlsle-symbol-offset.s: New file.
diff --git a/ld/testsuite/ld-elf/comm-data.exp b/ld/testsuite/ld-elf/comm-data.exp
index 1c75f55..71b856d 100644
--- a/ld/testsuite/ld-elf/comm-data.exp
+++ b/ld/testsuite/ld-elf/comm-data.exp
@@ -59,6 +59,8 @@ if [is_elf64 "tmpdir/libcomm-data.so"] {
     append AFLAGS " --defsym ELF64=1"
 }
 
+setup_xfail "arm*-*-*" "ld/13802"
+
 # Verify that a common symbol has been converted to an undefined
 # reference to the global symbol of the same name defined above
 # and that the debug reference has been dropped.
diff --git a/ld/testsuite/ld-elf/compress.exp b/ld/testsuite/ld-elf/compress.exp
index 1e13394..55269ee 100644
--- a/ld/testsuite/ld-elf/compress.exp
+++ b/ld/testsuite/ld-elf/compress.exp
@@ -25,6 +25,10 @@ if ![is_elf_format] {
     return
 }
 
+if ![is_zlib_supported] {
+    return
+}
+
 # The following tests require running the executable generated by ld.
 if ![isnative] {
     return
diff --git a/ld/testsuite/ld-elf/ehdr_start.s b/ld/testsuite/ld-elf/ehdr_start.s
index 529d510..2efe8a6 100644
--- a/ld/testsuite/ld-elf/ehdr_start.s
+++ b/ld/testsuite/ld-elf/ehdr_start.s
@@ -3,7 +3,7 @@
 _start:
 	.space 16
 
-	.data
+	.section .rodata,"a"
 	.globl foo
 foo:
 	.weak __ehdr_start
diff --git a/ld/testsuite/ld-elf/flags1.d b/ld/testsuite/ld-elf/flags1.d
index e6bb001..ab8facc 100644
--- a/ld/testsuite/ld-elf/flags1.d
+++ b/ld/testsuite/ld-elf/flags1.d
@@ -1,11 +1,12 @@
 #name: --set-section-flags test 1 (sections)
 #ld: -Tflags1.ld
-#objcopy_linked_file: --set-section-flags .post_text_reserve=contents,alloc,load,readonly,code 
+#objcopy_linked_file: --set-section-flags .post_text_reserve=contents,alloc,load,readonly,code
 #readelf: -l --wide
 #xfail: "avr-*-*" "dlx-*-*" "h8300-*-*" "i960-*-*" "ip2k-*-*" "m32r-*-*"
-#xfail: "moxie-*-*" "mt-*-*" "msp430-*-*"
+#xfail: "moxie-*-*" "mt-*-*" "msp430-*-*" "*-*-nacl*"
 #xfail: "*-*-hpux*" "hppa*64*-*-*"
-# Fails on the AVR, DLX, H8300, I960, IP2K, M32R, MOXIE, MT, and MSP430
+# Fails on the AVR, DLX, H8300, I960, IP2K, M32R, MOXIE, MT, and MSP430,
+#  and all NaCl targets,
 #  because the two sections are not merged into one segment.
 #  (There is no good reason why they have to be).
 # Fails on HPUX systems because the .type pseudo-op behaves differently.
diff --git a/ld/testsuite/ld-elf/orphan-region.d b/ld/testsuite/ld-elf/orphan-region.d
index 9d6c90c..d63b1df 100644
--- a/ld/testsuite/ld-elf/orphan-region.d
+++ b/ld/testsuite/ld-elf/orphan-region.d
@@ -3,9 +3,10 @@
 #readelf: -S -l --wide
 #xfail: arc-*-* d30v-*-* dlx-*-* fr30-*-* frv-*-elf i860-*-* i960-*-*
 #xfail: iq*-*-* mn10200-*-* moxie-*-* msp*-*-* mt-*-* or32-*-* pj*-*-*
-#xfail: spu-*-* hppa*64*-*-* frv-*-*
+#xfail: spu-*-* hppa*64*-*-* frv-*-* *-*-nacl*
 # if not using elf32.em, you don't get fancy orphan handling
-# spu twiddles LOAD range, hppa64 adds PHDR, frv-linux adds GNU_STACK
+# spu twiddles LOAD range, hppa64 adds PHDR, frv-linux adds GNU_STACK,
+# nacl splits to two segments
 
 #...
   \[[ 0-9]+\] \.text[ \t]+PROGBITS[ \t]+0*40000000[ \t]+.*
diff --git a/ld/testsuite/ld-elf/shared.exp b/ld/testsuite/ld-elf/shared.exp
index c00f3e5..c9f2056 100644
--- a/ld/testsuite/ld-elf/shared.exp
+++ b/ld/testsuite/ld-elf/shared.exp
@@ -336,14 +336,14 @@ set build_cxx_tests {
    {del.cc new.cc} {} "libnew1b.so" "c++"}
 }
 
-set run_cxx_tests {
-    {"Run with libdl3a.so"
-     "-Wl,--no-as-needed tmpdir/libdl3a.so" ""
-     {dl3main.cc} "dl3a" "dl3a.out" "" "c++"}
 # "-shared -Bsymbolic" only works with gcc 4.5.0 and newer.
 #    {"Run with libdl3b.so"
 #     "tmpdir/libdl3b.so" ""
 #     {dl3main.cc} "dl3b" "dl3b.out" "" "c++"}
+set run_cxx_tests {
+    {"Run with libdl3a.so"
+     "-Wl,--no-as-needed tmpdir/libdl3a.so" ""
+     {dl3main.cc} "dl3a" "dl3a.out" "" "c++"}
     {"Run with libdl3c.so"
      "-Wl,--no-as-needed tmpdir/libdl3c.so" ""
      {dl3main.cc} "dl3c" "dl3a.out" "" "c++"}
diff --git a/ld/testsuite/lib/ld-lib.exp b/ld/testsuite/lib/ld-lib.exp
index bb4cb0d..3cb8ee1 100644
--- a/ld/testsuite/lib/ld-lib.exp
+++ b/ld/testsuite/lib/ld-lib.exp
@@ -757,6 +757,12 @@ proc run_dump_test { name {extra_options {}} } {
 	set dfile $srcdir/$subdir/$opts(dump)
     }
 
+    if { [string match "*--compress-debug-sections*" $opts(as)] \
+	 && ![is_zlib_supported] } {
+	unsupported $testname
+	return
+    }
+
     # Time to setup xfailures.
     foreach targ $opts(xfail) {
 	setup_xfail $targ
@@ -1244,7 +1250,6 @@ proc run_ld_link_exec_tests { targets_to_xfail ldtests } {
 #	verbose -log "ld_options is $ld_options"
 #	verbose -log "as_options is $as_options"
 #	verbose -log "src_files is $src_files"
-#	verbose -log "actions is $actions"
 #	verbose -log "binfile is $binfile"
 
 	# Assemble each file in the test.
@@ -1261,68 +1266,68 @@ proc run_ld_link_exec_tests { targets_to_xfail ldtests } {
 	    } else {
 		ld_compile "$CC -c $CFLAGS $cflags" $srcdir/$subdir/$src_file $objfile
 	    }
+	}
 
-	    # We have to use $CC to build PIE and shared library.
-	    if { [ string match "c" $lang ] } {
-		set link_proc ld_simple_link
-		set link_cmd $CC
-	    } elseif { [ string match "c++" $lang ] } {
-		set link_proc ld_simple_link
-		set link_cmd $CXX
-	    } elseif { [ string match "-shared" $ld_options ] \
-		 || [ string match "-pie" $ld_options ] } {
-		set link_proc ld_simple_link
-		set link_cmd $CC
-	    } else {
-		set link_proc ld_link
-		set link_cmd $ld
-	    }
+	# We have to use $CC to build PIE and shared library.
+	if { [ string match "c" $lang ] } {
+	    set link_proc ld_simple_link
+	    set link_cmd $CC
+	} elseif { [ string match "c++" $lang ] } {
+	    set link_proc ld_simple_link
+	    set link_cmd $CXX
+	} elseif { [ string match "-shared" $ld_options ] \
+		   || [ string match "-pie" $ld_options ] } {
+	    set link_proc ld_simple_link
+	    set link_cmd $CC
+	} else {
+	    set link_proc ld_link
+	    set link_cmd $ld
+	}
 
-	    if ![$link_proc $link_cmd $binfile "-L$srcdir/$subdir $ld_options $objfiles"] {
-		set failed 1
-	    } else {
+	if ![$link_proc $link_cmd $binfile "-L$srcdir/$subdir $ld_options $objfiles"] {
+	    set failed 1
+	} else {
+	    set failed 0
+	}
+
+	# Check if exec_output is expected.
+	if { $warning != "" } then {
+	    verbose -log "returned with: <$exec_output>, expected: <$warning>"
+	    if { [regexp $warning $exec_output] } then {
 		set failed 0
+	    } else {
+		set failed 1
 	    }
+	}
 
-	    # Check if exec_output is expected.
-	    if { $warning != "" } then {
-		verbose -log "returned with: <$exec_output>, expected: <$warning>"
-		if { [regexp $warning $exec_output] } then {
-		    set failed 0
-		} else {
-		    set failed 1
-		}
-	    }
+	if { $failed == 0 } {
+	    send_log "Running: $binfile > $binfile.out\n"
+	    verbose "Running: $binfile > $binfile.out"
+	    catch "exec $binfile > $binfile.out" exec_output
 
-	    if { $failed == 0 } {
-		send_log "Running: $binfile > $binfile.out\n"
-		verbose "Running: $binfile > $binfile.out"
-		catch "exec $binfile > $binfile.out" exec_output
+	    if ![string match "" $exec_output] then {
+		send_log "$exec_output\n"
+		verbose "$exec_output" 1
+		set failed 1
+	    } else {
+		send_log "diff $binfile.out $srcdir/$subdir/$expfile\n"
+		verbose "diff $binfile.out $srcdir/$subdir/$expfile"
+		catch "exec diff $binfile.out $srcdir/$subdir/$expfile" exec_output
+		set exec_output [prune_warnings $exec_output]
 
 		if ![string match "" $exec_output] then {
 		    send_log "$exec_output\n"
 		    verbose "$exec_output" 1
 		    set failed 1
-		} else {
-		    send_log "diff $binfile.out $srcdir/$subdir/$expfile\n"
-		    verbose "diff $binfile.out $srcdir/$subdir/$expfile"
-		    catch "exec diff $binfile.out $srcdir/$subdir/$expfile" exec_output
-		    set exec_output [prune_warnings $exec_output]
-
-		    if ![string match "" $exec_output] then {
-			send_log "$exec_output\n"
-			verbose "$exec_output" 1
-			set failed 1
-		    }
 		}
 	    }
+	}
 
-	    if { $failed != 0 } {
-		fail $testname
-	    } else {
-		set errcnt 0
-		pass $testname
-	    }
+	if { $failed != 0 } {
+	    fail $testname
+	} else {
+	    set errcnt 0
+	    pass $testname
 	}
     }
 }
diff --git a/opcodes/ChangeLog b/opcodes/ChangeLog
index ca0f49b..98450f9 100644
--- a/opcodes/ChangeLog
+++ b/opcodes/ChangeLog
@@ -1,3 +1,10 @@
+2012-11-20  Kirill Yukhin  <kirill.yukhin@intel.com>
+	    H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR gas/14859
+	* i386-opc.tbl: Fix opcode for 64-bit jecxz.
+	* i386-tbl.h: Regenerated.
+
 2012-10-09  Nagajyothi Eggone  <nagajyothi.eggone@amd.com>
 
 	* i386-gen.c (cpu_flag_init): Add CPU_BDVER3_FLAGS.
@@ -9,7 +16,7 @@
 
 2012-09-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
 
-        * arm-dis.c: Changed ldra and strl-form mnemonics
+	* arm-dis.c: Changed ldra and strl-form mnemonics
 	to lda and stl-form.
 
 2012-09-18  Chao-ying Fu  <fu@mips.com>
diff --git a/opcodes/i386-opc.tbl b/opcodes/i386-opc.tbl
index 8b08edc..482bd7b 100644
--- a/opcodes/i386-opc.tbl
+++ b/opcodes/i386-opc.tbl
@@ -390,7 +390,7 @@ jg, 1, 0x7f, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf,
 // jcxz vs. jecxz is chosen on the basis of the address size prefix.
 jcxz, 1, 0xe3, None, 1, CpuNo64, JumpByte|Size16|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp8|Disp16|Disp32 }
 jecxz, 1, 0xe3, None, 1, CpuNo64, JumpByte|Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp8|Disp16|Disp32 }
-jecxz, 1, 0x67e3, None, 2, Cpu64, JumpByte|Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp8|Disp32|Disp32S }
+jecxz, 1, 0xe3, None, 1, Cpu64, JumpByte|Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp8|Disp32|Disp32S }
 jrcxz, 1, 0xe3, None, 1, Cpu64, JumpByte|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { Disp8|Disp32|Disp32S }
 
 // The loop instructions also use the address size prefix to select
diff --git a/opcodes/i386-tbl.h b/opcodes/i386-tbl.h
index 001a966..a3a3e64 100644
--- a/opcodes/i386-tbl.h
+++ b/opcodes/i386-tbl.h
@@ -3417,7 +3417,7 @@ const insn_template i386_optab[] =
     { { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 	  1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 	  0, 0, 0, 0, 0, 0 } } } },
-  { "jecxz", 1, 0x67e3, None, 2,
+  { "jecxz", 1, 0xe3, None, 1,
     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
