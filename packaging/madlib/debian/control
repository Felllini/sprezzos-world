Source: madlib
Section: math
Priority: extra
Maintainer: Nick Black <nick.black@sprezzatech.com>
XSBC-Original-Maintainer: Christophe Prud'homme <prudhomm@debian.org>
Build-Depends: cdbs, debhelper (>= 9), quilt, autotools-dev,  libblas-dev | libblas-3gf.so, liblapack-dev | liblapack-3gf.so
Standards-Version: 3.9.4
Homepage: http://www.madlib.be
Vcs-Git: git://alioth.debian.org/git/pkg-scicomp/madlib.git
Vcs-Browser: http://git.debian.org/?p=pkg-scicomp/madlib.git

Package: libmadlib
Section: libs
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: mesh adaptation library
 This package contains the dynamic libraries for MAdLib.
 .
 MAdLib is a library that performs global node repositioning and mesh
 adaptation by local mesh modifications on tetrahedral or triangular
 meshes. It is designed to frequently adapt the mesh in transient
 computations. MAdLib is written in C++.
 .
 The adaptation procedure is driven by two objectives:
 .
 - make the edge lengths as close as possible to a (non-homogenous)
   prescribed length,
 .
 - maintain a satisfying element quality everywhere.
 .
 MAdLib can be used in transient computations in order to maintain a
 satisfying element quality (moving boundaries, multiphase flows with
 interface tracking, ...) or/and to apply selective refinements and
 coarsenings (error estimators based, interface capturing: shocks,
 free surfaces, ...).


Package: libmadlib-dev
Section: libdevel
Architecture: any
Depends: libmadlib, ${shlibs:Depends}, ${misc:Depends}
Description: mesh adaptation library
 This package contains the development files (headers, so and static
 libraries) for MAdLib.
 .
 MAdLib is a library that performs global node repositioning and mesh
 adaptation by local mesh modifications on tetrahedral or triangular
 meshes. It is designed to frequently adapt the mesh in transient
 computations. MAdLib is written in C++.
 .
 The adaptation procedure is driven by two objectives:
 .
 - make the edge lengths as close as possible to a (non-homogenous)
   prescribed length,
 .
 - maintain a satisfying element quality everywhere.
 .
 MAdLib can be used in transient computations in order to maintain a
 satisfying element quality (moving boundaries, multiphase flows with
 interface tracking, ...) or/and to apply selective refinements and
 coarsenings (error estimators based, interface capturing: shocks,
 free surfaces, ...).

Package: libmadlib-dbg
Section: debug
Architecture: any
Depends: libmadlib, ${shlibs:Depends}, ${misc:Depends}
Description: mesh adaptation library
 This package contains the debug symbols for MAdLib.
 .
 MAdLib is a library that performs global node repositioning and mesh
 adaptation by local mesh modifications on tetrahedral or triangular
 meshes. It is designed to frequently adapt the mesh in transient
 computations. MAdLib is written in C++.
 .
 The adaptation procedure is driven by two objectives:
 .
 - make the edge lengths as close as possible to a (non-homogenous)
   prescribed length,
 .
 - maintain a satisfying element quality everywhere.
 .
 MAdLib can be used in transient computations in order to maintain a
 satisfying element quality (moving boundaries, multiphase flows with
 interface tracking, ...) or/and to apply selective refinements and
 coarsenings (error estimators based, interface capturing: shocks,
 free surfaces, ...).


Package: madlib-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: mesh adaptation library
 This package contains the documentation, Examples and tutorial for
 MAdLib.
 .
 MAdLib is a library that performs global node repositioning and mesh
 adaptation by local mesh modifications on tetrahedral or triangular
 meshes. It is designed to frequently adapt the mesh in transient
 computations. MAdLib is written in C++.
 .
 The adaptation procedure is driven by two objectives:
 .
 - make the edge lengths as close as possible to a (non-homogenous)
   prescribed length,
 .
 - maintain a satisfying element quality everywhere.
 .
 MAdLib can be used in transient computations in order to maintain a
 satisfying element quality (moving boundaries, multiphase flows with
 interface tracking, ...) or/and to apply selective refinements and
 coarsenings (error estimators based, interface capturing: shocks,
 free surfaces, ...).
