diff -udr kismet-2004.04.R1/wsp100source.cc kismet-2004.04.R1.wspfix/wsp100source.cc
--- kismet-2004.04.R1/wsp100source.cc	2004-02-04 08:58:52.000000000 -0800
diff -udr kismet-2004.04.R1/wsp100source.cc kismet-2004.04.R1.wspfix/wsp100source.cc
--- kismet-2004.04.R1/wsp100source.cc	2004-02-04 08:58:52.000000000 -0800
+++ kismet-2004.04.R1.wspfix/wsp100source.cc	2004-12-31 10:36:26.000000000 -0800
@@ -26,6 +26,20 @@
     heartbeat packet.  Must be sent within every 32 sec and
     must come from the listen port of kismet.
 
+    31-Dec-2004 - nickrusnov@debian.org
+    * Fixed all the issues that seemed to have cropped up since somebody last tested this.
+      + Several subscript typos in monitor_wsp100. 
+      + Misparsing of the device string in OpenSensor (I use the same parsing as in monitor_wsp100 now). 
+        (This was probably left over from cut-n-pasting the code from the old version of this interface).
+      + Implemented chancontrol_wsp100.
+      + Added saving of the parsed/processed device string to the object. This allows easy cut and paste
+        of SNMP commands from monitor_wsp100 too.      
+    - Should probably use an snmpget to retrieve the current channel rather than saving it on the
+      object from the SetChannel call (because Initial channels don't show up, also the user might manually
+      enable the WSP's internal channel surfing).
+    - Also I note that if Kismet is setuid, this module presents some significant security issuse because
+      of its use of ExecCmd using command-line data (to call snmpget/set) -- should probably link with
+      libsnmp or something instead.
 */
 
 #include "config.h"
@@ -64,15 +78,13 @@
 
 int Wsp100Source::OpenSource() {
     char listenhost[1024];
+
     struct hostent *filter_host;
 
-    // Device is handled as a host:port pair - remote host we accept data
-    // from, local port we open to listen for it.  yeah, it's a little weird.
-    if (sscanf(interface.c_str(), "%1024[^:]:%hd", listenhost, &port) < 2) {
-        snprintf(errstr, 1024, "Couldn't parse host:port: '%s'", 
-                 interface.c_str());
-        return -1;
-    }
+    strncpy(listenhost, wsp100_bits[2].c_str(), 1023);
+    listenhost[1023] = '\0';
+
+    port = strtol(wsp100_bits[1].c_str(), NULL, 10);
 
     if ((filter_host = gethostbyname(listenhost)) == NULL) {
         snprintf(errstr, 1024, "Couldn't resolve host: '%s'", listenhost);
@@ -110,7 +122,33 @@
     return 1;
 }
 
+
+void Wsp100Source::init_bits(string in_dev) {
+  wsp100_bits = StrTokenize(in_dev, ":");
+}
+
+int Wsp100Source::FetchChannel() {
+  return wsp100chan;
+}
+
+int Wsp100Source::SetChannel(int chan) {
+    char cmdline[2048];
+    char ret;
+    snprintf(cmdline, 2048, "snmpset -C q -v 1 -c public %s .1.3.6.1.4.1.14422.1.3.1 i %d",
+             wsp100_bits[2].c_str(), chan);
+    if (ExecSysCmd(cmdline, &ret) < 0)
+      {
+	wsp100chan = 0;
+	return -1;
+      }
+    wsp100chan = chan;
+    return 0;
+}
+
 int Wsp100Source::CloseSource() {
+    char cmdline[2048];
+    char ret;
+
     if (valid)
         close(udp_sock);
 
@@ -119,6 +157,11 @@
     if (timetracker != NULL)
         timetracker->RemoveTimer(poke_event_id);
 
+    snprintf(cmdline, 2038, "snmpset -v 1 -c public %s .1.3.6.1.4.1.14422.1.1.4 i 1",
+             wsp100_bits[2].c_str());
+    if (ExecSysCmd(cmdline, &ret) < 0)
+        return -1;
+
     return 1;
 }
 
@@ -146,7 +189,7 @@
     // Find out if it came from an IP associated with our target sensor system
     if (cli_sockaddr.sin_addr.s_addr != filter_addr.s_addr)
         return 0;
-
+    
     if (paused || Wsp2Common(packet, data, moddata) == 0) {
         return 0;
     }
@@ -302,14 +345,14 @@
         }
     }
     for (unsigned int x = 0; x < wsp100_bits[1].size(); x++) {
-        if (!isdigit(wsp100_bits[0][x])) {
+        if (!isdigit(wsp100_bits[1][x])) {
             snprintf(in_err, STATUS_MAX, "Malformed wsp100 localport '%s'",
-                     wsp100_bits[0].c_str());
+                     wsp100_bits[1].c_str());
             return -1;
         }
     }
     for (unsigned int x = 0; x < wsp100_bits[2].size(); x++) {
-        char bit = wsp100_bits[0][x];
+        char bit = wsp100_bits[2][x];
         if (!isalnum(bit) && bit != '.' && bit != '-' && bit != '_') {
             snprintf(in_err, STATUS_MAX, "Malformed wsp100 remoteip '%s', should be "
                      "x.x.x.x or domain name", wsp100_bits[2].c_str());
@@ -323,6 +366,11 @@
              wsp100_bits[2].c_str(), wsp100_bits[0].c_str());
     if (ExecSysCmd(cmdline, in_err) < 0)
         return -1;
+    // Turn off internal channel-surf.
+    snprintf(cmdline, 2048, "snmpset -v 1 -c public %s .1.3.6.1.4.1.14422.1.3.13 i 0",
+             wsp100_bits[2].c_str());
+    if (ExecSysCmd(cmdline, in_err) < 0)
+        return -1;
     // sensor.channel
     snprintf(cmdline, 2048, "snmpset -v 1 -c public %s .1.3.6.1.4.1.14422.1.3.1 i %d",
              wsp100_bits[2].c_str(), initch);
@@ -343,7 +391,7 @@
 }
 
 int chancontrol_wsp100(const char *in_dev, int in_ch, char *in_err, void *in_ext) {
-    fprintf(stderr, "Need to implement wsp100 channel change...\n");
+    ((Wsp100Source *) in_ext)->SetChannel(in_ch);
     return 0;
 }
 
diff -udr kismet-2004.04.R1/wsp100source.h kismet-2004.04.R1.wspfix/wsp100source.h
--- kismet-2004.04.R1/wsp100source.h	2004-02-04 08:58:52.000000000 -0800
+++ kismet-2004.04.R1.wspfix/wsp100source.h	2004-12-31 09:07:01.000000000 -0800
@@ -49,7 +49,9 @@
 
 class Wsp100Source : public KisPacketSource {
 public:
-    Wsp100Source(string in_name, string in_dev) : KisPacketSource(in_name, in_dev) { }
+    Wsp100Source(string in_name, string in_dev) : KisPacketSource(in_name, in_dev) { init_bits(in_dev); }
+
+    void init_bits(string in_dev);
 
     int OpenSource();
 
@@ -61,8 +63,8 @@
 
     void PokeSensor();
 
-    // Just return 0 right now
-    int FetchChannel() { return 0; }
+    int FetchChannel();
+    int SetChannel(int chan);
 
 protected:
     int Wsp2Common(kis_packet *packet, uint8_t *data, uint8_t *moddata);
@@ -71,6 +73,8 @@
     int udp_sock;
     int valid;
     int read_len;
+    vector<string> wsp100_bits;
+    int wsp100chan;
 
     struct sockaddr_in serv_sockaddr;
     in_addr filter_addr;


