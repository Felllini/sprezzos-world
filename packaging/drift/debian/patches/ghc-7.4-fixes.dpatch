#! /bin/sh /usr/share/dpatch/dpatch-run
## Description: Alter imports for new modules exposed by GHC 7.4
## Origin/Author: Iain Lane <laney@debian.org>
## Bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=669554

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/ChaseImports.hs drift-2.2.3/src/ChaseImports.hs
--- drift-2.2.3~/src/ChaseImports.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/ChaseImports.hs	2012-09-18 21:23:49.074270747 +0100
@@ -24,10 +24,10 @@
 import DataP
 import CommandP
 import ParseLib2
-import System
-import List
+import Data.List
 import qualified Unlit
-import Monad
+import Control.Monad
+import System.Environment(getEnv)
 import GenUtil
 
 try x = catch (x >>= return . Right) (return . Left)
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/DrIFT.hs drift-2.2.3/src/DrIFT.hs
--- drift-2.2.3~/src/DrIFT.hs	2012-09-18 21:20:20.000000000 +0100
+++ drift-2.2.3/src/DrIFT.hs	2012-09-18 21:23:49.074270747 +0100
@@ -7,10 +7,10 @@
 import DataP
 import GenUtil
 import GetOpt
-import Char
-import IO hiding(try)
-import List (partition,isSuffixOf,sort, groupBy, sortBy)
-import Monad(unless)
+import Data.Char
+import System.IO
+import Data.List (partition,isSuffixOf,sort, groupBy, sortBy)
+import Control.Monad(unless)
 import PreludData(preludeData)
 import Pretty
 import RuleUtils (commentLine,texts)
@@ -78,7 +78,7 @@
 
 header = "Usage: DrIFT [OPTION...] file"
 main = do
-    argv <- System.getArgs
+    argv <- getArgs
     (env,n) <- case (getOpt Permute options argv) of
 	(as,n,[]) -> return (foldr ($) env as ,n)
 	(_,_,errs) -> putErrDie (concat errs ++ usageInfo header options)
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/GenUtil.hs drift-2.2.3/src/GenUtil.hs
--- drift-2.2.3~/src/GenUtil.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/GenUtil.hs	2012-09-18 21:23:49.078270747 +0100
@@ -39,7 +39,7 @@
     -- ** Simple deconstruction
     fromLeft,fromRight,fsts,snds,splitEither,rights,lefts,
     -- ** System routines
-    exitSuccess, System.exitFailure, epoch, lookupEnv,endOfTime,
+    exitSuccess, exitFailure, epoch, lookupEnv,endOfTime,
     -- ** Random routines
     repMaybe,
     liftT2, liftT3, liftT4,
@@ -91,14 +91,17 @@
     UniqueProducer(..)
     ) where
 
-import Char(isAlphaNum, isSpace, toLower,  ord)
-import List(group,sort)
-import List(intersperse, sortBy, groupBy)
-import Monad
-import qualified IO
-import qualified System
-import Random(StdGen, newStdGen, Random(randomR))
-import Time
+import Data.Char(isAlphaNum, isSpace, toLower,  ord)
+import Data.List(group,sort)
+import Data.List(intersperse, sortBy, groupBy)
+import Control.Monad hiding (replicateM, replicateM_)
+import System.IO (hPutStr, stderr)
+import System.IO.Error(isDoesNotExistError)
+import System.Random(StdGen, newStdGen, Random(randomR))
+import System.Exit (exitWith, ExitCode(ExitSuccess), exitFailure)
+import System.Environment
+import System.Time
+import Data.Time
 
 {-# SPECIALIZE snub :: [String] -> [String] #-}
 {-# SPECIALIZE snub :: [Int] -> [Int] #-}
@@ -127,7 +130,7 @@
 
 -- | write string to standard error
 putErr :: String -> IO ()
-putErr = IO.hPutStr IO.stderr
+putErr = hPutStr stderr
 
 -- | write string and newline to standard error
 putErrLn :: String -> IO ()
@@ -137,13 +140,13 @@
 -- | write string and newline to standard error,
 -- then exit program with failure.
 putErrDie :: String -> IO a
-putErrDie s = putErrLn s >> System.exitFailure
+putErrDie s = putErrLn s >> exitFailure
 
 
 -- | exit program successfully. 'exitFailure' is
 -- also exported from System.
 exitSuccess :: IO a
-exitSuccess = System.exitWith System.ExitSuccess
+exitSuccess = exitWith ExitSuccess
 
 
 {-# INLINE fromRight #-}
@@ -381,7 +384,7 @@
 -- | looks up an enviornment variable and returns it in a 'MonadPlus' rather
 -- than raising an exception if the variable is not set.
 lookupEnv :: MonadPlus m => String -> IO (m String)
-lookupEnv s = catch (fmap return $ System.getEnv s) (\e -> if IO.isDoesNotExistError e then return mzero else ioError e)
+lookupEnv s = catch (fmap return $ getEnv s) (\e -> if isDoesNotExistError e then return mzero else ioError e)
 
 {-# SPECIALIZE fmapLeft :: (a -> c) -> [(Either a b)] -> [(Either c b)] #-}
 fmapLeft :: Functor f => (a -> c) -> f (Either a b) -> f (Either c b)
@@ -482,7 +485,7 @@
 _ `overlaps` _ = True
 
 -- | translate a number of seconds to a string representing the duration expressed.
-showDuration :: Integral a => a -> String
+showDuration :: (Show a, Integral a) => a -> String
 showDuration x = st "d" dayI ++ st "h" hourI ++ st "m" minI ++ show secI ++ "s" where
         (dayI, hourI) = divMod hourI' 24
         (hourI', minI) = divMod minI' 60
@@ -495,7 +498,7 @@
 -- arguments are given, read stdin.
 
 getArgContents = do
-    as <- System.getArgs
+    as <- getArgs
     let f "-" = getContents
         f fn = readFile fn
     cs <- mapM f as
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/GetOpt.hs drift-2.2.3/src/GetOpt.hs
--- drift-2.2.3~/src/GetOpt.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/GetOpt.hs	2012-09-18 21:23:49.074270747 +0100
@@ -21,7 +21,7 @@
    ArgOrder(..), OptDescr(..), ArgDescr(..), usageInfo, getOpt
    ) where
 
-import List(isPrefixOf)
+import Data.List(isPrefixOf)
 
 data ArgOrder a                        -- what to do with options following non-options:
    = RequireOrder                      --    no option processing after first non-option
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Arbitrary.hs drift-2.2.3/src/Rules/Arbitrary.hs
--- drift-2.2.3~/src/Rules/Arbitrary.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Arbitrary.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,6 +1,6 @@
 module Rules.Arbitrary(rules) where
 
-import List
+import Data.List
 import RuleUtils
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Binary.hs drift-2.2.3/src/Rules/Binary.hs
--- drift-2.2.3~/src/Rules/Binary.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Binary.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,6 +1,6 @@
 module Rules.Binary(rules) where
 
-import List (nub,intersperse)
+import Data.List (nub,intersperse)
 import RuleUtils
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/BitsBinary.hs drift-2.2.3/src/Rules/BitsBinary.hs
--- drift-2.2.3~/src/Rules/BitsBinary.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/BitsBinary.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 -- stub module to add your own rules.
 module Rules.BitsBinary(rules) where
 
-import List (nub,intersperse)
+import Data.List (nub,intersperse)
 import RuleUtils -- useful to have a look at this too
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/FunctorM.hs drift-2.2.3/src/Rules/FunctorM.hs
--- drift-2.2.3~/src/Rules/FunctorM.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/FunctorM.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 -- stub module to add your own rules.
 module Rules.FunctorM (rules) where
 
-import List
+import Data.List
 import RuleUtils
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Generic.hs drift-2.2.3/src/Rules/Generic.hs
--- drift-2.2.3~/src/Rules/Generic.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Generic.hs	2012-09-18 21:23:49.078270747 +0100
@@ -3,7 +3,7 @@
 
 -- import StandardRules
 import RuleUtils
-import List(intersperse)
+import Data.List(intersperse)
 
 
 rules :: [RuleDef]
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/GhcBinary.hs drift-2.2.3/src/Rules/GhcBinary.hs
--- drift-2.2.3~/src/Rules/GhcBinary.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/GhcBinary.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 -- stub module to add your own rules.
 module Rules.GhcBinary (rules) where
 
-import List (nub,intersperse)
+import Data.List (nub,intersperse)
 import RuleUtils -- useful to have a look at this too
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Monoid.hs drift-2.2.3/src/Rules/Monoid.hs
--- drift-2.2.3~/src/Rules/Monoid.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Monoid.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 -- stub module to add your own rules.
 module Rules.Monoid (rules) where
 
-import List
+import Data.List
 import RuleUtils
 
 rules = [
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Standard.hs drift-2.2.3/src/Rules/Standard.hs
--- drift-2.2.3~/src/Rules/Standard.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Standard.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 module Rules.Standard(rules) where
 
 import RuleUtils
-import List
+import Data.List
 import GenUtil
 
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Utility.hs drift-2.2.3/src/Rules/Utility.hs
--- drift-2.2.3~/src/Rules/Utility.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Utility.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,6 +1,6 @@
 module Rules.Utility(rules) where
 import RuleUtils
-import List
+import Data.List
 import GenUtil
 
 rules :: [RuleDef]
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Rules/Xml.hs drift-2.2.3/src/Rules/Xml.hs
--- drift-2.2.3~/src/Rules/Xml.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Rules/Xml.hs	2012-09-18 21:23:49.078270747 +0100
@@ -1,7 +1,7 @@
 -- expanded from stub module to add new rules.
 module Rules.Xml(rules) where
 
-import List (nub,sortBy)
+import Data.List (nub,sortBy)
 import RuleUtils -- useful to have a look at this too
 
 rules :: [RuleDef]
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' drift-2.2.3~/src/Unlit.hs drift-2.2.3/src/Unlit.hs
--- drift-2.2.3~/src/Unlit.hs	2008-02-10 14:38:31.000000000 +0000
+++ drift-2.2.3/src/Unlit.hs	2012-09-18 21:23:49.074270747 +0100
@@ -5,7 +5,7 @@
 --   version 1.2, appendix C.
 
 
-import Char
+import Data.Char
 
 data Classified = Program String | Blank | Comment
                 | Include Int String | Pre String
